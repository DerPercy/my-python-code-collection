
from enum import Enum



class GraphQLInputObject():
    _parameter_list = []
    def __init__(self):
        self._parameter_list = []
    def _add_parameter(self,name:str,value):
        if value != None:
            self._parameter_list.append((name,value))
    def __str__(self):
        result = "{"
        sep = ""
        for param in self._parameter_list:
            result = result + sep + param[0] + ": " + GraphQLInputObject.to_string(param[1])
            sep = ","
        result = result + "}" 
        return result
    def to_string(value):
        if value == None:
            return None
        val = ""
        if isinstance(value,GraphQLInputObject):
            val = str(value)
        elif isinstance(value,int):
            val = str(value)
        else:
            val = "\"" + str(value) + "\""
        return val

class GraphQLResultObject():
    pass
class GraphQLObject():
    _parent = None
    _children = None
    _parameter_list = None
    def __init__(self,parent:'GraphQLObject' = None,parameter_list = []):
        self._parent = parent
        self._children = []
        self._parameter_list = parameter_list
    def __getitem__(self, x):
        return self
    def _add_to_query(self,name:str, param_name:str, sub_obj:'GraphQLObject' = None) -> None:
        self._children.append((name,sub_obj,param_name))
    def _create_parameter_code(self) -> str:
        result = ""
        found = False
        if len(self._parameter_list) > 0:
            result = result + "("
            for param in self._parameter_list:
                val = GraphQLInputObject.to_string(param[1])
                if val != None:
                    result = result + param[0] +": "+ val
                    found = True
            result = result + ")"
        if found == False:
            return ""     
        return result

    def _create_query_code(self, check_parent:bool = True) -> str:
        if check_parent == True and self._parent != None:
            return self._parent._create_query_code(True)
        result = ""    
        for child in self._children:
            result = result + "\n" + child[2]+": "+ child[0]
            if child[1] != None:
                result = result + child[1]._create_parameter_code() + "{" + child[1]._create_query_code(False) + "\n}"
            
        return result
    
    def _fill_response(self, json_payload, check_parent:bool = True):
        def get_value(data):
            if isinstance(data,list):
                #print("is list")
                result = []
                for entry in data:
                    result.append(get_value(entry))
                return result
            if isinstance(data,dict):
                #print("is dictionary")
                result = GraphQLResultObject()
                for key in data.keys():
                    setattr(result,"value_"+key,get_value(data[key]))
                    #result["value_"+key] = get_value(data[key])
                return result
            else:
                return data
        for key in json_payload.keys():
            setattr(self, "value_"+key, get_value(json_payload[key]))
            #print("Set key "+key+" in "+str(self))
            #print(get_value(json_payload[key]))


class StarkwareSignatureInput(GraphQLInputObject):
    def __init__(self,r = None,s = None):
        self._add_parameter('r',r)
        self._add_parameter('s',s)

class MangopayWalletTransferApprovalInput(GraphQLInputObject):
    def __init__(self,nonce = None,signature:'StarkwareSignatureInput' = None):
        self._add_parameter('nonce',nonce)
        self._add_parameter('signature',signature)

class StarkexApprovalInput(GraphQLInputObject):
    def __init__(self,expirationTimestamp = None,nonce = None,signature:'StarkwareSignatureInput' = None):
        self._add_parameter('expirationTimestamp',expirationTimestamp)
        self._add_parameter('nonce',nonce)
        self._add_parameter('signature',signature)

class AuthorizationApprovalInput(GraphQLInputObject):
    def __init__(self,fingerprint = None,mangopayWalletTransferApproval:'MangopayWalletTransferApprovalInput' = None,starkexLimitOrderApproval:'StarkexApprovalInput' = None,starkexTransferApproval:'StarkexApprovalInput' = None):
        self._add_parameter('fingerprint',fingerprint)
        self._add_parameter('mangopayWalletTransferApproval',mangopayWalletTransferApproval)
        self._add_parameter('starkexLimitOrderApproval',starkexLimitOrderApproval)
        self._add_parameter('starkexTransferApproval',starkexTransferApproval)

class OfferMigrationInput(GraphQLInputObject):
    def __init__(self,expirationBlock = None,migrateInternalCardsSignature = None,migrateMappedCardsSignature = None):
        self._add_parameter('expirationBlock',expirationBlock)
        self._add_parameter('migrateInternalCardsSignature',migrateInternalCardsSignature)
        self._add_parameter('migrateMappedCardsSignature',migrateMappedCardsSignature)

class AcceptorSettlementInfoInput(GraphQLInputObject):
    def __init__(self,conversionCreditId = None,creditCardType = None,currency = None,exchangeRateId = None,paymentMethod = None,returnUrl = None,savePaymentMethod = None,walletChallengeSignature:'StarkwareSignatureInput' = None):
        self._add_parameter('conversionCreditId',conversionCreditId)
        self._add_parameter('creditCardType',creditCardType)
        self._add_parameter('currency',currency)
        self._add_parameter('exchangeRateId',exchangeRateId)
        self._add_parameter('paymentMethod',paymentMethod)
        self._add_parameter('returnUrl',returnUrl)
        self._add_parameter('savePaymentMethod',savePaymentMethod)
        self._add_parameter('walletChallengeSignature',walletChallengeSignature)

class acceptOfferInput(GraphQLInputObject):
    def __init__(self,approvals:'AuthorizationApprovalInput' = None,clientMutationId = None,migrationData:'OfferMigrationInput' = None,offerId = None,settlementInfo:'AcceptorSettlementInfoInput' = None,signedAmount = None):
        self._add_parameter('approvals',approvals)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('migrationData',migrationData)
        self._add_parameter('offerId',offerId)
        self._add_parameter('settlementInfo',settlementInfo)
        self._add_parameter('signedAmount',signedAmount)

class Account(GraphQLObject):
    value_accountable = None
    value_id = None
    value_owner = None
    value_sorareManaged = None
    def accountable(self,_param_name:str = 'accountable'):
        inst = None
        self._add_to_query("accountable",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def owner(self,_param_name:str = 'owner'):
        inst = None
        self._add_to_query("owner",_param_name)
        pass

    def sorareManaged(self,_param_name:str = 'sorareManaged'):
        inst = None
        self._add_to_query("sorareManaged",_param_name)
        pass


class Fiat(GraphQLObject):
    value_eur = None
    value_gbp = None
    value_usd = None
    def eur(self,_param_name:str = 'eur'):
        inst = None
        self._add_to_query("eur",_param_name)
        pass

    def gbp(self,_param_name:str = 'gbp'):
        inst = None
        self._add_to_query("gbp",_param_name)
        pass

    def usd(self,_param_name:str = 'usd'):
        inst = None
        self._add_to_query("usd",_param_name)
        pass


class MonetaryAmount(GraphQLObject):
    value_eur = None
    value_gbp = None
    value_referenceCurrency = None
    value_usd = None
    value_wei = None
    def eur(self,_param_name:str = 'eur'):
        inst = None
        self._add_to_query("eur",_param_name)
        pass

    def gbp(self,_param_name:str = 'gbp'):
        inst = None
        self._add_to_query("gbp",_param_name)
        pass

    def referenceCurrency(self,_param_name:str = 'referenceCurrency'):
        inst = None
        self._add_to_query("referenceCurrency",_param_name)
        pass

    def usd(self,_param_name:str = 'usd'):
        inst = None
        self._add_to_query("usd",_param_name)
        pass

    def wei(self,_param_name:str = 'wei'):
        inst = None
        self._add_to_query("wei",_param_name)
        pass


class ClubEdge(GraphQLObject):
    value_cursor = None
    value_node:'Club' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class PageInfo(GraphQLObject):
    value_endCursor = None
    value_hasNextPage = None
    value_hasPreviousPage = None
    value_startCursor = None
    def endCursor(self,_param_name:str = 'endCursor'):
        inst = None
        self._add_to_query("endCursor",_param_name)
        pass

    def hasNextPage(self,_param_name:str = 'hasNextPage'):
        inst = None
        self._add_to_query("hasNextPage",_param_name)
        pass

    def hasPreviousPage(self,_param_name:str = 'hasPreviousPage'):
        inst = None
        self._add_to_query("hasPreviousPage",_param_name)
        pass

    def startCursor(self,_param_name:str = 'startCursor'):
        inst = None
        self._add_to_query("startCursor",_param_name)
        pass


class ClubConnection(GraphQLObject):
    value_edges:'list[ClubEdge]' = None
    value_nodes:'list[Club]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'ClubEdge':
        param_list = []
        inst = ClubEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class Contestant(GraphQLObject):
    value_goalsAgainst = None
    value_goalsFor = None
    value_id = None
    value_matchesDrawn = None
    value_matchesLost = None
    value_matchesPlayed = None
    value_matchesWon = None
    value_points = None
    value_rank = None
    value_rankStatus = None
    value_team = None
    def goalsAgainst(self,_param_name:str = 'goalsAgainst'):
        inst = None
        self._add_to_query("goalsAgainst",_param_name)
        pass

    def goalsFor(self,_param_name:str = 'goalsFor'):
        inst = None
        self._add_to_query("goalsFor",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def matchesDrawn(self,_param_name:str = 'matchesDrawn'):
        inst = None
        self._add_to_query("matchesDrawn",_param_name)
        pass

    def matchesLost(self,_param_name:str = 'matchesLost'):
        inst = None
        self._add_to_query("matchesLost",_param_name)
        pass

    def matchesPlayed(self,_param_name:str = 'matchesPlayed'):
        inst = None
        self._add_to_query("matchesPlayed",_param_name)
        pass

    def matchesWon(self,_param_name:str = 'matchesWon'):
        inst = None
        self._add_to_query("matchesWon",_param_name)
        pass

    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def rankStatus(self,_param_name:str = 'rankStatus'):
        inst = None
        self._add_to_query("rankStatus",_param_name)
        pass

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass


class WithSubscriptionsInterface(GraphQLObject):
    value_currentUserSubscription:'EmailSubscription' = None
    value_slug = None
    value_subscriptionsCount = None
    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass


class EmailSubscriptionPreferences(GraphQLObject):
    value_notifyForRarities = None
    value_slug = None
    def notifyForRarities(self,_param_name:str = 'notifyForRarities'):
        inst = None
        self._add_to_query("notifyForRarities",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass


class EmailSubscription(GraphQLObject):
    value_anySubscribable:'WithSubscriptionsInterface' = None
    value_id = None
    value_preferences:'EmailSubscriptionPreferences' = None
    value_slug = None
    value_subscribable = None
    value_subscribableSlug = None
    value_subscribableType = None
    value_subscriber = None
    value_updatedAt = None
    def anySubscribable(self,_param_name:str = 'anySubscribable') -> 'WithSubscriptionsInterface':
        param_list = []
        inst = WithSubscriptionsInterface(self,param_list)
        self._add_to_query("anySubscribable",_param_name,inst)
        self.value_anySubscribable = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def preferences(self,_param_name:str = 'preferences') -> 'EmailSubscriptionPreferences':
        param_list = []
        inst = EmailSubscriptionPreferences(self,param_list)
        self._add_to_query("preferences",_param_name,inst)
        self.value_preferences = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def subscribable(self,_param_name:str = 'subscribable'):
        inst = None
        self._add_to_query("subscribable",_param_name)
        pass

    def subscribableSlug(self,_param_name:str = 'subscribableSlug'):
        inst = None
        self._add_to_query("subscribableSlug",_param_name)
        pass

    def subscribableType(self,_param_name:str = 'subscribableType'):
        inst = None
        self._add_to_query("subscribableType",_param_name)
        pass

    def subscriber(self,_param_name:str = 'subscriber'):
        inst = None
        self._add_to_query("subscriber",_param_name)
        pass

    def updatedAt(self,_param_name:str = 'updatedAt'):
        inst = None
        self._add_to_query("updatedAt",_param_name)
        pass


class Country(GraphQLObject):
    value_code = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_flagUrl = None
    value_id = None
    value_name = None
    value_slug = None
    value_subscriptionsCount = None
    value_threeLetterCode = None
    def code(self,_param_name:str = 'code'):
        inst = None
        self._add_to_query("code",_param_name)
        pass

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def flagUrl(self,shape,size,_param_name:str = 'flagUrl'):
        inst = None
        self._add_to_query("flagUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def threeLetterCode(self,_param_name:str = 'threeLetterCode'):
        inst = None
        self._add_to_query("threeLetterCode",_param_name)
        pass


class CustomBanner(GraphQLObject):
    value_colorLeft = None
    value_colorRight = None
    value_id = None
    def colorLeft(self,_param_name:str = 'colorLeft'):
        inst = None
        self._add_to_query("colorLeft",_param_name)
        pass

    def colorRight(self,_param_name:str = 'colorRight'):
        inst = None
        self._add_to_query("colorRight",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class StatScore(GraphQLObject):
    value_category = None
    value_points = None
    value_stat = None
    value_statValue = None
    value_totalScore = None
    def category(self,_param_name:str = 'category'):
        inst = None
        self._add_to_query("category",_param_name)
        pass

    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def stat(self,_param_name:str = 'stat'):
        inst = None
        self._add_to_query("stat",_param_name)
        pass

    def statValue(self,_param_name:str = 'statValue'):
        inst = None
        self._add_to_query("statValue",_param_name)
        pass

    def totalScore(self,_param_name:str = 'totalScore'):
        inst = None
        self._add_to_query("totalScore",_param_name)
        pass


class MembershipEdge(GraphQLObject):
    value_cursor = None
    value_node:'Membership' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class MembershipConnection(GraphQLObject):
    value_edges:'list[MembershipEdge]' = None
    value_nodes:'list[Membership]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'MembershipEdge':
        param_list = []
        inst = MembershipEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class PlayerEdge(GraphQLObject):
    value_cursor = None
    value_node:'Player' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class PlayerConnection(GraphQLObject):
    value_edges:'list[PlayerEdge]' = None
    value_nodes:'list[Player]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'PlayerEdge':
        param_list = []
        inst = PlayerEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class AnyPlayerInterfaceEdge(GraphQLObject):
    value_cursor = None
    value_node:'AnyPlayerInterface' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class AnyPlayerInterfaceConnection(GraphQLObject):
    value_edges:'list[AnyPlayerInterfaceEdge]' = None
    value_nodes:'list[AnyPlayerInterface]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'AnyPlayerInterfaceEdge':
        param_list = []
        inst = AnyPlayerInterfaceEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class AnyGameInterfaceEdge(GraphQLObject):
    value_cursor = None
    value_node:'AnyGameInterface' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class AnyGameInterfaceConnection(GraphQLObject):
    value_edges:'list[AnyGameInterfaceEdge]' = None
    value_nodes:'list[AnyGameInterface]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'AnyGameInterfaceEdge':
        param_list = []
        inst = AnyGameInterfaceEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class DataPartner(GraphQLObject):
    value_id = None
    value_name = None
    value_slug = None
    value_termsUrl = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def termsUrl(self,_param_name:str = 'termsUrl'):
        inst = None
        self._add_to_query("termsUrl",_param_name)
        pass


class TeamFormation(GraphQLObject):
    value_bench:'list[Player]' = None
    value_startingLineup:'list[Player]' = None
    def bench(self,_param_name:str = 'bench') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("bench",_param_name,inst)
        self.value_bench = inst
        return inst

    def startingLineup(self,_param_name:str = 'startingLineup') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("startingLineup",_param_name,inst)
        self.value_startingLineup = inst
        return inst


class FootballRivalsAppearance(GraphQLObject):
    value_anyGame:'AnyGameInterface' = None
    value_bonus = None
    value_captain = None
    value_card:'Card' = None
    value_decisiveScore:'StatScore' = None
    value_detailedScore:'list[StatScore]' = None
    value_extra = None
    value_id = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_rarity = None
    value_score = None
    value_scoreWithoutRarityBonus = None
    value_so5Score:'So5Score' = None
    value_starting = None
    def anyGame(self,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def bonus(self,_param_name:str = 'bonus'):
        inst = None
        self._add_to_query("bonus",_param_name)
        pass

    def captain(self,_param_name:str = 'captain'):
        inst = None
        self._add_to_query("captain",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def decisiveScore(self,_param_name:str = 'decisiveScore') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("decisiveScore",_param_name,inst)
        self.value_decisiveScore = inst
        return inst

    def detailedScore(self,_param_name:str = 'detailedScore') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("detailedScore",_param_name,inst)
        self.value_detailedScore = inst
        return inst

    def extra(self,_param_name:str = 'extra'):
        inst = None
        self._add_to_query("extra",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def scoreWithoutRarityBonus(self,_param_name:str = 'scoreWithoutRarityBonus'):
        inst = None
        self._add_to_query("scoreWithoutRarityBonus",_param_name)
        pass

    def so5Score(self,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst

    def starting(self,_param_name:str = 'starting'):
        inst = None
        self._add_to_query("starting",_param_name)
        pass


class FootballRivalsGameEdge(GraphQLObject):
    value_cursor = None
    value_node:'FootballRivalsGame' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class FootballRivalsGameConnection(GraphQLObject):
    value_edges:'list[FootballRivalsGameEdge]' = None
    value_nodes:'list[FootballRivalsGame]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'FootballRivalsGameEdge':
        param_list = []
        inst = FootballRivalsGameEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class CardShardRewardConfig(GraphQLObject):
    value_quantity = None
    value_rarity = None
    def quantity(self,_param_name:str = 'quantity'):
        inst = None
        self._add_to_query("quantity",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass


class CardEdition(GraphQLObject):
    value_cards:'CardConnection' = None
    value_displayName = None
    value_id = None
    value_name = None
    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass


class So5RewardCardConfig(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_cardEdition:'CardEdition' = None
    value_customCardEditionName = None
    value_description = None
    value_displayEdition = None
    value_player:'Player' = None
    value_quality = None
    value_quantity = None
    value_rarity = None
    value_title = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def cardEdition(self,_param_name:str = 'cardEdition') -> 'CardEdition':
        param_list = []
        inst = CardEdition(self,param_list)
        self._add_to_query("cardEdition",_param_name,inst)
        self.value_cardEdition = inst
        return inst

    def customCardEditionName(self,_param_name:str = 'customCardEditionName'):
        inst = None
        self._add_to_query("customCardEditionName",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def displayEdition(self,_param_name:str = 'displayEdition'):
        inst = None
        self._add_to_query("displayEdition",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def quality(self,_param_name:str = 'quality'):
        inst = None
        self._add_to_query("quality",_param_name)
        pass

    def quantity(self,_param_name:str = 'quantity'):
        inst = None
        self._add_to_query("quantity",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class ConversionCreditRewardConfig(GraphQLObject):
    value_maxDiscount:'MonetaryAmount' = None
    value_percentageDiscount = None
    def maxDiscount(self,_param_name:str = 'maxDiscount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("maxDiscount",_param_name,inst)
        self.value_maxDiscount = inst
        return inst

    def percentageDiscount(self,_param_name:str = 'percentageDiscount'):
        inst = None
        self._add_to_query("percentageDiscount",_param_name)
        pass


class DeliverableItemInterface(GraphQLObject):
    value_id = None
    value_mandatoryWearableSizeInput = None
    value_name = None
    value_slug = None
    value_sport = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mandatoryWearableSizeInput(self,_param_name:str = 'mandatoryWearableSizeInput'):
        inst = None
        self._add_to_query("mandatoryWearableSizeInput",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class RewardDeliverableItem(GraphQLObject):
    value_deliverableItem:'DeliverableItemInterface' = None
    value_quantity = None
    def deliverableItem(self,_param_name:str = 'deliverableItem') -> 'DeliverableItemInterface':
        param_list = []
        inst = DeliverableItemInterface(self,param_list)
        self._add_to_query("deliverableItem",_param_name,inst)
        self.value_deliverableItem = inst
        return inst

    def quantity(self,_param_name:str = 'quantity'):
        inst = None
        self._add_to_query("quantity",_param_name)
        pass


class Blueprint(GraphQLObject):
    value_gltfUrl = None
    value_id = None
    value_launchDate = None
    value_newPositionsWarning = None
    value_pictureUrl = None
    value_revealDate = None
    value_revealStatus = None
    value_revealVideoUrl = None
    value_teamTransferWarning = None
    def gltfUrl(self,_param_name:str = 'gltfUrl'):
        inst = None
        self._add_to_query("gltfUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def launchDate(self,_param_name:str = 'launchDate'):
        inst = None
        self._add_to_query("launchDate",_param_name)
        pass

    def newPositionsWarning(self,_param_name:str = 'newPositionsWarning'):
        inst = None
        self._add_to_query("newPositionsWarning",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def revealDate(self,_param_name:str = 'revealDate'):
        inst = None
        self._add_to_query("revealDate",_param_name)
        pass

    def revealStatus(self,_param_name:str = 'revealStatus'):
        inst = None
        self._add_to_query("revealStatus",_param_name)
        pass

    def revealVideoUrl(self,orientation,_param_name:str = 'revealVideoUrl'):
        inst = None
        self._add_to_query("revealVideoUrl",_param_name)
        pass

    def teamTransferWarning(self,_param_name:str = 'teamTransferWarning'):
        inst = None
        self._add_to_query("teamTransferWarning",_param_name)
        pass


class PlayerGameScoreInterface(GraphQLObject):
    value_anyGame:'AnyGameInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPlayerGameStats:'AnyPlayerGameStatsInterface' = None
    value_detailedScore:'list[StatScore]' = None
    value_id = None
    value_position = None
    value_positionTyped = None
    value_score = None
    value_scoreStatus = None
    value_scoringVersion = None
    def anyGame(self,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPlayerGameStats(self,_param_name:str = 'anyPlayerGameStats') -> 'AnyPlayerGameStatsInterface':
        param_list = []
        inst = AnyPlayerGameStatsInterface(self,param_list)
        self._add_to_query("anyPlayerGameStats",_param_name,inst)
        self.value_anyPlayerGameStats = inst
        return inst

    def detailedScore(self,_param_name:str = 'detailedScore') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("detailedScore",_param_name,inst)
        self.value_detailedScore = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positionTyped(self,_param_name:str = 'positionTyped'):
        inst = None
        self._add_to_query("positionTyped",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def scoreStatus(self,_param_name:str = 'scoreStatus'):
        inst = None
        self._add_to_query("scoreStatus",_param_name)
        pass

    def scoringVersion(self,_param_name:str = 'scoringVersion'):
        inst = None
        self._add_to_query("scoringVersion",_param_name)
        pass


class AnyPlayerGameStatsInterface(GraphQLObject):
    value_anyGame:'AnyGameInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyTeam:'TeamInterface' = None
    value_id = None
    value_live = None
    value_onGameSheet = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_reviewed = None
    def anyGame(self,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyTeam(self,_param_name:str = 'anyTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("anyTeam",_param_name,inst)
        self.value_anyTeam = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def live(self,_param_name:str = 'live'):
        inst = None
        self._add_to_query("live",_param_name)
        pass

    def onGameSheet(self,_param_name:str = 'onGameSheet'):
        inst = None
        self._add_to_query("onGameSheet",_param_name)
        pass

    def playerGameScore(self,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def reviewed(self,_param_name:str = 'reviewed'):
        inst = None
        self._add_to_query("reviewed",_param_name)
        pass


class PlayerGameScore(GraphQLObject):
    value_allAroundStats:'list[StatScore]' = None
    value_anyGame:'AnyGameInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPlayerGameStats:'AnyPlayerGameStatsInterface' = None
    value_decisiveScore:'StatScore' = None
    value_detailedScore:'list[StatScore]' = None
    value_footballGame:'Game' = None
    value_footballPlayer:'Player' = None
    value_footballPlayerGameStats:'PlayerGameStats' = None
    value_id = None
    value_negativeDecisiveStats:'list[StatScore]' = None
    value_position = None
    value_positionTyped = None
    value_positiveDecisiveStats:'list[StatScore]' = None
    value_score = None
    value_scoreStatus = None
    value_scoringVersion = None
    def allAroundStats(self,_param_name:str = 'allAroundStats') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("allAroundStats",_param_name,inst)
        self.value_allAroundStats = inst
        return inst

    def anyGame(self,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPlayerGameStats(self,_param_name:str = 'anyPlayerGameStats') -> 'AnyPlayerGameStatsInterface':
        param_list = []
        inst = AnyPlayerGameStatsInterface(self,param_list)
        self._add_to_query("anyPlayerGameStats",_param_name,inst)
        self.value_anyPlayerGameStats = inst
        return inst

    def decisiveScore(self,_param_name:str = 'decisiveScore') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("decisiveScore",_param_name,inst)
        self.value_decisiveScore = inst
        return inst

    def detailedScore(self,_param_name:str = 'detailedScore') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("detailedScore",_param_name,inst)
        self.value_detailedScore = inst
        return inst

    def footballGame(self,_param_name:str = 'footballGame') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("footballGame",_param_name,inst)
        self.value_footballGame = inst
        return inst

    def footballPlayer(self,_param_name:str = 'footballPlayer') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("footballPlayer",_param_name,inst)
        self.value_footballPlayer = inst
        return inst

    def footballPlayerGameStats(self,_param_name:str = 'footballPlayerGameStats') -> 'PlayerGameStats':
        param_list = []
        inst = PlayerGameStats(self,param_list)
        self._add_to_query("footballPlayerGameStats",_param_name,inst)
        self.value_footballPlayerGameStats = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def negativeDecisiveStats(self,_param_name:str = 'negativeDecisiveStats') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("negativeDecisiveStats",_param_name,inst)
        self.value_negativeDecisiveStats = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positionTyped(self,_param_name:str = 'positionTyped'):
        inst = None
        self._add_to_query("positionTyped",_param_name)
        pass

    def positiveDecisiveStats(self,_param_name:str = 'positiveDecisiveStats') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("positiveDecisiveStats",_param_name,inst)
        self.value_positiveDecisiveStats = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def scoreStatus(self,_param_name:str = 'scoreStatus'):
        inst = None
        self._add_to_query("scoreStatus",_param_name)
        pass

    def scoringVersion(self,_param_name:str = 'scoringVersion'):
        inst = None
        self._add_to_query("scoringVersion",_param_name)
        pass


class PlayingStatusOdds(GraphQLObject):
    value_nonPlayingOddsBasisPoints = None
    value_reliability = None
    value_starterOddsBasisPoints = None
    value_substituteOddsBasisPoints = None
    def nonPlayingOddsBasisPoints(self,_param_name:str = 'nonPlayingOddsBasisPoints'):
        inst = None
        self._add_to_query("nonPlayingOddsBasisPoints",_param_name)
        pass

    def reliability(self,_param_name:str = 'reliability'):
        inst = None
        self._add_to_query("reliability",_param_name)
        pass

    def starterOddsBasisPoints(self,_param_name:str = 'starterOddsBasisPoints'):
        inst = None
        self._add_to_query("starterOddsBasisPoints",_param_name)
        pass

    def substituteOddsBasisPoints(self,_param_name:str = 'substituteOddsBasisPoints'):
        inst = None
        self._add_to_query("substituteOddsBasisPoints",_param_name)
        pass


class PlayerGameStats(GraphQLObject):
    value_accuratePass = None
    value_anyGame:'AnyGameInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyTeam:'TeamInterface' = None
    value_assistPenaltyWon = None
    value_bigChanceCreated = None
    value_cleanSheet = None
    value_cleanSheet60 = None
    value_clearanceOffLine = None
    value_crossAccuracy = None
    value_duelWon = None
    value_effectiveClearance = None
    value_errorLeadToGoal = None
    value_fieldStatus = None
    value_footballGame:'Game' = None
    value_footballPlayer:'Player' = None
    value_footballPlayerGameScore:'PlayerGameScore' = None
    value_footballPlayingStatusOdds:'PlayingStatusOdds' = None
    value_formationPlace = None
    value_fouls = None
    value_game:'Game' = None
    value_gameStarted = None
    value_goalAssist = None
    value_goalKicks = None
    value_goals = None
    value_goalsConceded = None
    value_id = None
    value_interceptionWon = None
    value_lastManTackle = None
    value_live = None
    value_lostCorners = None
    value_minsPlayed = None
    value_onGameSheet = None
    value_ontargetScoringAtt = None
    value_ownGoals = None
    value_parries = None
    value_passAccuracy = None
    value_penaltiesSaved = None
    value_penaltyConceded = None
    value_penaltyKickMissed = None
    value_penaltySave = None
    value_player:'Player' = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_redCard = None
    value_reviewed = None
    value_saves = None
    value_shotAccuracy = None
    value_shotEfficiency = None
    value_singleGoalGame = None
    value_so5Score:'So5Score' = None
    value_team = None
    value_threeGoalsConceded = None
    value_totalClearance = None
    value_totalPass = None
    value_totalScoringAtt = None
    value_totalTackle = None
    value_wasFouled = None
    value_wonContest = None
    value_wonTackle = None
    value_yellowCard = None
    def accuratePass(self,_param_name:str = 'accuratePass'):
        inst = None
        self._add_to_query("accuratePass",_param_name)
        pass

    def anyGame(self,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyTeam(self,_param_name:str = 'anyTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("anyTeam",_param_name,inst)
        self.value_anyTeam = inst
        return inst

    def assistPenaltyWon(self,_param_name:str = 'assistPenaltyWon'):
        inst = None
        self._add_to_query("assistPenaltyWon",_param_name)
        pass

    def bigChanceCreated(self,_param_name:str = 'bigChanceCreated'):
        inst = None
        self._add_to_query("bigChanceCreated",_param_name)
        pass

    def cleanSheet(self,_param_name:str = 'cleanSheet'):
        inst = None
        self._add_to_query("cleanSheet",_param_name)
        pass

    def cleanSheet60(self,_param_name:str = 'cleanSheet60'):
        inst = None
        self._add_to_query("cleanSheet60",_param_name)
        pass

    def clearanceOffLine(self,_param_name:str = 'clearanceOffLine'):
        inst = None
        self._add_to_query("clearanceOffLine",_param_name)
        pass

    def crossAccuracy(self,_param_name:str = 'crossAccuracy'):
        inst = None
        self._add_to_query("crossAccuracy",_param_name)
        pass

    def duelWon(self,_param_name:str = 'duelWon'):
        inst = None
        self._add_to_query("duelWon",_param_name)
        pass

    def effectiveClearance(self,_param_name:str = 'effectiveClearance'):
        inst = None
        self._add_to_query("effectiveClearance",_param_name)
        pass

    def errorLeadToGoal(self,_param_name:str = 'errorLeadToGoal'):
        inst = None
        self._add_to_query("errorLeadToGoal",_param_name)
        pass

    def fieldStatus(self,_param_name:str = 'fieldStatus'):
        inst = None
        self._add_to_query("fieldStatus",_param_name)
        pass

    def footballGame(self,_param_name:str = 'footballGame') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("footballGame",_param_name,inst)
        self.value_footballGame = inst
        return inst

    def footballPlayer(self,_param_name:str = 'footballPlayer') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("footballPlayer",_param_name,inst)
        self.value_footballPlayer = inst
        return inst

    def footballPlayerGameScore(self,position,_param_name:str = 'footballPlayerGameScore') -> 'PlayerGameScore':
        param_list = []
        param_list.append(("position",position))
        inst = PlayerGameScore(self,param_list)
        self._add_to_query("footballPlayerGameScore",_param_name,inst)
        self.value_footballPlayerGameScore = inst
        return inst

    def footballPlayingStatusOdds(self,_param_name:str = 'footballPlayingStatusOdds') -> 'PlayingStatusOdds':
        param_list = []
        inst = PlayingStatusOdds(self,param_list)
        self._add_to_query("footballPlayingStatusOdds",_param_name,inst)
        self.value_footballPlayingStatusOdds = inst
        return inst

    def formationPlace(self,_param_name:str = 'formationPlace'):
        inst = None
        self._add_to_query("formationPlace",_param_name)
        pass

    def fouls(self,_param_name:str = 'fouls'):
        inst = None
        self._add_to_query("fouls",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def gameStarted(self,_param_name:str = 'gameStarted'):
        inst = None
        self._add_to_query("gameStarted",_param_name)
        pass

    def goalAssist(self,_param_name:str = 'goalAssist'):
        inst = None
        self._add_to_query("goalAssist",_param_name)
        pass

    def goalKicks(self,_param_name:str = 'goalKicks'):
        inst = None
        self._add_to_query("goalKicks",_param_name)
        pass

    def goals(self,_param_name:str = 'goals'):
        inst = None
        self._add_to_query("goals",_param_name)
        pass

    def goalsConceded(self,_param_name:str = 'goalsConceded'):
        inst = None
        self._add_to_query("goalsConceded",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def interceptionWon(self,_param_name:str = 'interceptionWon'):
        inst = None
        self._add_to_query("interceptionWon",_param_name)
        pass

    def lastManTackle(self,_param_name:str = 'lastManTackle'):
        inst = None
        self._add_to_query("lastManTackle",_param_name)
        pass

    def live(self,_param_name:str = 'live'):
        inst = None
        self._add_to_query("live",_param_name)
        pass

    def lostCorners(self,_param_name:str = 'lostCorners'):
        inst = None
        self._add_to_query("lostCorners",_param_name)
        pass

    def minsPlayed(self,_param_name:str = 'minsPlayed'):
        inst = None
        self._add_to_query("minsPlayed",_param_name)
        pass

    def onGameSheet(self,_param_name:str = 'onGameSheet'):
        inst = None
        self._add_to_query("onGameSheet",_param_name)
        pass

    def ontargetScoringAtt(self,_param_name:str = 'ontargetScoringAtt'):
        inst = None
        self._add_to_query("ontargetScoringAtt",_param_name)
        pass

    def ownGoals(self,_param_name:str = 'ownGoals'):
        inst = None
        self._add_to_query("ownGoals",_param_name)
        pass

    def parries(self,_param_name:str = 'parries'):
        inst = None
        self._add_to_query("parries",_param_name)
        pass

    def passAccuracy(self,_param_name:str = 'passAccuracy'):
        inst = None
        self._add_to_query("passAccuracy",_param_name)
        pass

    def penaltiesSaved(self,_param_name:str = 'penaltiesSaved'):
        inst = None
        self._add_to_query("penaltiesSaved",_param_name)
        pass

    def penaltyConceded(self,_param_name:str = 'penaltyConceded'):
        inst = None
        self._add_to_query("penaltyConceded",_param_name)
        pass

    def penaltyKickMissed(self,_param_name:str = 'penaltyKickMissed'):
        inst = None
        self._add_to_query("penaltyKickMissed",_param_name)
        pass

    def penaltySave(self,_param_name:str = 'penaltySave'):
        inst = None
        self._add_to_query("penaltySave",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def playerGameScore(self,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def redCard(self,_param_name:str = 'redCard'):
        inst = None
        self._add_to_query("redCard",_param_name)
        pass

    def reviewed(self,_param_name:str = 'reviewed'):
        inst = None
        self._add_to_query("reviewed",_param_name)
        pass

    def saves(self,_param_name:str = 'saves'):
        inst = None
        self._add_to_query("saves",_param_name)
        pass

    def shotAccuracy(self,_param_name:str = 'shotAccuracy'):
        inst = None
        self._add_to_query("shotAccuracy",_param_name)
        pass

    def shotEfficiency(self,_param_name:str = 'shotEfficiency'):
        inst = None
        self._add_to_query("shotEfficiency",_param_name)
        pass

    def singleGoalGame(self,_param_name:str = 'singleGoalGame'):
        inst = None
        self._add_to_query("singleGoalGame",_param_name)
        pass

    def so5Score(self,position,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        param_list.append(("position",position))
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass

    def threeGoalsConceded(self,_param_name:str = 'threeGoalsConceded'):
        inst = None
        self._add_to_query("threeGoalsConceded",_param_name)
        pass

    def totalClearance(self,_param_name:str = 'totalClearance'):
        inst = None
        self._add_to_query("totalClearance",_param_name)
        pass

    def totalPass(self,_param_name:str = 'totalPass'):
        inst = None
        self._add_to_query("totalPass",_param_name)
        pass

    def totalScoringAtt(self,_param_name:str = 'totalScoringAtt'):
        inst = None
        self._add_to_query("totalScoringAtt",_param_name)
        pass

    def totalTackle(self,_param_name:str = 'totalTackle'):
        inst = None
        self._add_to_query("totalTackle",_param_name)
        pass

    def wasFouled(self,_param_name:str = 'wasFouled'):
        inst = None
        self._add_to_query("wasFouled",_param_name)
        pass

    def wonContest(self,_param_name:str = 'wonContest'):
        inst = None
        self._add_to_query("wonContest",_param_name)
        pass

    def wonTackle(self,_param_name:str = 'wonTackle'):
        inst = None
        self._add_to_query("wonTackle",_param_name)
        pass

    def yellowCard(self,_param_name:str = 'yellowCard'):
        inst = None
        self._add_to_query("yellowCard",_param_name)
        pass


class PowerBreakdown(GraphQLObject):
    value_boost = None
    value_boostBasisPoints = None
    value_captain = None
    value_captainBasisPoints = None
    value_collection = None
    value_collectionBasisPoints = None
    value_fidelity = None
    value_fidelityBasisPoints = None
    value_positionsBasisPoints = None
    value_scarcity = None
    value_scarcityBasisPoints = None
    value_season = None
    value_seasonBasisPoints = None
    value_version = None
    value_xp = None
    value_xpBasisPoints = None
    def boost(self,_param_name:str = 'boost'):
        inst = None
        self._add_to_query("boost",_param_name)
        pass

    def boostBasisPoints(self,_param_name:str = 'boostBasisPoints'):
        inst = None
        self._add_to_query("boostBasisPoints",_param_name)
        pass

    def captain(self,_param_name:str = 'captain'):
        inst = None
        self._add_to_query("captain",_param_name)
        pass

    def captainBasisPoints(self,_param_name:str = 'captainBasisPoints'):
        inst = None
        self._add_to_query("captainBasisPoints",_param_name)
        pass

    def collection(self,_param_name:str = 'collection'):
        inst = None
        self._add_to_query("collection",_param_name)
        pass

    def collectionBasisPoints(self,_param_name:str = 'collectionBasisPoints'):
        inst = None
        self._add_to_query("collectionBasisPoints",_param_name)
        pass

    def fidelity(self,_param_name:str = 'fidelity'):
        inst = None
        self._add_to_query("fidelity",_param_name)
        pass

    def fidelityBasisPoints(self,_param_name:str = 'fidelityBasisPoints'):
        inst = None
        self._add_to_query("fidelityBasisPoints",_param_name)
        pass

    def positionsBasisPoints(self,_param_name:str = 'positionsBasisPoints'):
        inst = None
        self._add_to_query("positionsBasisPoints",_param_name)
        pass

    def scarcity(self,_param_name:str = 'scarcity'):
        inst = None
        self._add_to_query("scarcity",_param_name)
        pass

    def scarcityBasisPoints(self,_param_name:str = 'scarcityBasisPoints'):
        inst = None
        self._add_to_query("scarcityBasisPoints",_param_name)
        pass

    def season(self,_param_name:str = 'season'):
        inst = None
        self._add_to_query("season",_param_name)
        pass

    def seasonBasisPoints(self,_param_name:str = 'seasonBasisPoints'):
        inst = None
        self._add_to_query("seasonBasisPoints",_param_name)
        pass

    def version(self,_param_name:str = 'version'):
        inst = None
        self._add_to_query("version",_param_name)
        pass

    def xp(self,_param_name:str = 'xp'):
        inst = None
        self._add_to_query("xp",_param_name)
        pass

    def xpBasisPoints(self,_param_name:str = 'xpBasisPoints'):
        inst = None
        self._add_to_query("xpBasisPoints",_param_name)
        pass


class GameWithPlayerGameScoresPreview(GraphQLObject):
    value_game:'AnyGameInterface' = None
    value_playerGameScores:'list[PlayerGameScoreInterface]' = None
    value_totalCount = None
    def game(self,_param_name:str = 'game') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def playerGameScores(self,_param_name:str = 'playerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScores",_param_name,inst)
        self.value_playerGameScores = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class GameWithPlayerGameScoresPreviewEdge(GraphQLObject):
    value_cursor = None
    value_node:'GameWithPlayerGameScoresPreview' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'GameWithPlayerGameScoresPreview':
        param_list = []
        inst = GameWithPlayerGameScoresPreview(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class GameWithPlayerGameScoresPreviewConnection(GraphQLObject):
    value_edges:'list[GameWithPlayerGameScoresPreviewEdge]' = None
    value_nodes:'list[GameWithPlayerGameScoresPreview]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'GameWithPlayerGameScoresPreviewEdge':
        param_list = []
        inst = GameWithPlayerGameScoresPreviewEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'GameWithPlayerGameScoresPreview':
        param_list = []
        inst = GameWithPlayerGameScoresPreview(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class ComposeTeamBenchObjectEdge(GraphQLObject):
    value_cursor = None
    value_node = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node'):
        inst = None
        self._add_to_query("node",_param_name)
        pass


class ComposeTeamBenchObjectConnection(GraphQLObject):
    value_edges:'list[ComposeTeamBenchObjectEdge]' = None
    value_nodes = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'ComposeTeamBenchObjectEdge':
        param_list = []
        inst = ComposeTeamBenchObjectEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes'):
        inst = None
        self._add_to_query("nodes",_param_name)
        pass

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class Validity(GraphQLObject):
    value_missingAnyRarities = None
    value_missingCards = None
    value_missingPositions = None
    value_missingRarity = None
    value_notEnoughEligibleCards = None
    value_reason = None
    value_transferMarketFilters = None
    value_upcomingAt = None
    value_value = None
    def missingAnyRarities(self,_param_name:str = 'missingAnyRarities'):
        inst = None
        self._add_to_query("missingAnyRarities",_param_name)
        pass

    def missingCards(self,_param_name:str = 'missingCards'):
        inst = None
        self._add_to_query("missingCards",_param_name)
        pass

    def missingPositions(self,_param_name:str = 'missingPositions'):
        inst = None
        self._add_to_query("missingPositions",_param_name)
        pass

    def missingRarity(self,rarity,_param_name:str = 'missingRarity'):
        inst = None
        self._add_to_query("missingRarity",_param_name)
        pass

    def notEnoughEligibleCards(self,_param_name:str = 'notEnoughEligibleCards'):
        inst = None
        self._add_to_query("notEnoughEligibleCards",_param_name)
        pass

    def reason(self,_param_name:str = 'reason'):
        inst = None
        self._add_to_query("reason",_param_name)
        pass

    def transferMarketFilters(self,_param_name:str = 'transferMarketFilters'):
        inst = None
        self._add_to_query("transferMarketFilters",_param_name)
        pass

    def upcomingAt(self,_param_name:str = 'upcomingAt'):
        inst = None
        self._add_to_query("upcomingAt",_param_name)
        pass

    def value(self,_param_name:str = 'value'):
        inst = None
        self._add_to_query("value",_param_name)
        pass


class Challenge(GraphQLObject):
    value_completed = None
    value_description = None
    value_id = None
    def completed(self,_param_name:str = 'completed'):
        inst = None
        self._add_to_query("completed",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class DraftablePlayer(GraphQLObject):
    value_alreadyOwned = None
    value_avatarUrl = None
    value_id = None
    value_nextGame:'Game' = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_positions = None
    value_team = None
    value_value = None
    def alreadyOwned(self,_param_name:str = 'alreadyOwned'):
        inst = None
        self._add_to_query("alreadyOwned",_param_name)
        pass

    def avatarUrl(self,_param_name:str = 'avatarUrl'):
        inst = None
        self._add_to_query("avatarUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def nextGame(self,_param_name:str = 'nextGame') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("nextGame",_param_name,inst)
        self.value_nextGame = inst
        return inst

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass

    def value(self,_param_name:str = 'value'):
        inst = None
        self._add_to_query("value",_param_name)
        pass


class DraftablePlayerEdge(GraphQLObject):
    value_cursor = None
    value_node:'DraftablePlayer' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'DraftablePlayer':
        param_list = []
        inst = DraftablePlayer(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class DraftablePlayerConnection(GraphQLObject):
    value_edges:'list[DraftablePlayerEdge]' = None
    value_nodes:'list[DraftablePlayer]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'DraftablePlayerEdge':
        param_list = []
        inst = DraftablePlayerEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'DraftablePlayer':
        param_list = []
        inst = DraftablePlayer(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class SwappablePlayer(GraphQLObject):
    value_avatarUrl = None
    value_cardSlug = None
    value_id = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_positionTyped = None
    value_positions = None
    value_value = None
    value_xp = None
    def avatarUrl(self,_param_name:str = 'avatarUrl'):
        inst = None
        self._add_to_query("avatarUrl",_param_name)
        pass

    def cardSlug(self,_param_name:str = 'cardSlug'):
        inst = None
        self._add_to_query("cardSlug",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positionTyped(self,_param_name:str = 'positionTyped'):
        inst = None
        self._add_to_query("positionTyped",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def value(self,_param_name:str = 'value'):
        inst = None
        self._add_to_query("value",_param_name)
        pass

    def xp(self,_param_name:str = 'xp'):
        inst = None
        self._add_to_query("xp",_param_name)
        pass


class CommonDraftSwap(GraphQLObject):
    value_id = None
    value_swappedPlayersIn:'list[SwappablePlayer]' = None
    value_swappedPlayersOut:'list[SwappablePlayer]' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def swappedPlayersIn(self,_param_name:str = 'swappedPlayersIn') -> 'SwappablePlayer':
        param_list = []
        inst = SwappablePlayer(self,param_list)
        self._add_to_query("swappedPlayersIn",_param_name,inst)
        self.value_swappedPlayersIn = inst
        return inst

    def swappedPlayersOut(self,_param_name:str = 'swappedPlayersOut') -> 'SwappablePlayer':
        param_list = []
        inst = SwappablePlayer(self,param_list)
        self._add_to_query("swappedPlayersOut",_param_name,inst)
        self.value_swappedPlayersOut = inst
        return inst


class CommonDraftCampaign(GraphQLObject):
    value_autoPick:'list[DraftablePlayer]' = None
    value_availablePlayers:'DraftablePlayerConnection' = None
    value_availableSwapsCountForUpcoming = None
    value_budget = None
    value_campaignType = None
    value_competitions:'list[Competition]' = None
    value_displayName = None
    value_draftedPlayers:'list[DraftablePlayer]' = None
    value_maxDraftablePlayerValue = None
    value_maximumSwapsCountForUpcoming = None
    value_positions = None
    value_slug = None
    value_status = None
    value_swappablePlayers:'list[SwappablePlayer]' = None
    value_teams = None
    value_upcomingSo5Leaderboard:'So5Leaderboard' = None
    value_upcomingSwaps:'list[CommonDraftSwap]' = None
    def autoPick(self,selectedPrintablePlayerIds,_param_name:str = 'autoPick') -> 'DraftablePlayer':
        param_list = []
        param_list.append(("selectedPrintablePlayerIds",selectedPrintablePlayerIds))
        inst = DraftablePlayer(self,param_list)
        self._add_to_query("autoPick",_param_name,inst)
        self.value_autoPick = inst
        return inst

    def availablePlayers(self,after,before,first,last,position,positions,query,selectedPrintablePlayerIds,sortType:'AvailableDraftPlayersSortInput',teamSlugs,value:'RangeInput',_param_name:str = 'availablePlayers') -> 'DraftablePlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("position",position))
        param_list.append(("positions",positions))
        param_list.append(("query",query))
        param_list.append(("selectedPrintablePlayerIds",selectedPrintablePlayerIds))
        param_list.append(("sortType",sortType))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("value",value))
        inst = DraftablePlayerConnection(self,param_list)
        self._add_to_query("availablePlayers",_param_name,inst)
        self.value_availablePlayers = inst
        return inst

    def availableSwapsCountForUpcoming(self,_param_name:str = 'availableSwapsCountForUpcoming'):
        inst = None
        self._add_to_query("availableSwapsCountForUpcoming",_param_name)
        pass

    def budget(self,_param_name:str = 'budget'):
        inst = None
        self._add_to_query("budget",_param_name)
        pass

    def campaignType(self,_param_name:str = 'campaignType'):
        inst = None
        self._add_to_query("campaignType",_param_name)
        pass

    def competitions(self,_param_name:str = 'competitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competitions",_param_name,inst)
        self.value_competitions = inst
        return inst

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def draftedPlayers(self,_param_name:str = 'draftedPlayers') -> 'DraftablePlayer':
        param_list = []
        inst = DraftablePlayer(self,param_list)
        self._add_to_query("draftedPlayers",_param_name,inst)
        self.value_draftedPlayers = inst
        return inst

    def maxDraftablePlayerValue(self,_param_name:str = 'maxDraftablePlayerValue'):
        inst = None
        self._add_to_query("maxDraftablePlayerValue",_param_name)
        pass

    def maximumSwapsCountForUpcoming(self,_param_name:str = 'maximumSwapsCountForUpcoming'):
        inst = None
        self._add_to_query("maximumSwapsCountForUpcoming",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def swappablePlayers(self,_param_name:str = 'swappablePlayers') -> 'SwappablePlayer':
        param_list = []
        inst = SwappablePlayer(self,param_list)
        self._add_to_query("swappablePlayers",_param_name,inst)
        self.value_swappablePlayers = inst
        return inst

    def teams(self,_param_name:str = 'teams'):
        inst = None
        self._add_to_query("teams",_param_name)
        pass

    def upcomingSo5Leaderboard(self,_param_name:str = 'upcomingSo5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("upcomingSo5Leaderboard",_param_name,inst)
        self.value_upcomingSo5Leaderboard = inst
        return inst

    def upcomingSwaps(self,_param_name:str = 'upcomingSwaps') -> 'CommonDraftSwap':
        param_list = []
        inst = CommonDraftSwap(self,param_list)
        self._add_to_query("upcomingSwaps",_param_name,inst)
        self.value_upcomingSwaps = inst
        return inst


class Age(GraphQLObject):
    value_cutOffDate = None
    value_max = None
    value_min = None
    def cutOffDate(self,_param_name:str = 'cutOffDate'):
        inst = None
        self._add_to_query("cutOffDate",_param_name)
        pass

    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass


class AppearanceRule(GraphQLObject):
    value_displayName = None
    value_name = None
    value_positions = None
    value_shortName = None
    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def shortName(self,_param_name:str = 'shortName'):
        inst = None
        self._add_to_query("shortName",_param_name)
        pass


class So5AtLeastOfClubs(GraphQLObject):
    value_clubs:'list[Club]' = None
    value_min = None
    def clubs(self,_param_name:str = 'clubs') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("clubs",_param_name,inst)
        self.value_clubs = inst
        return inst

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass


class So5AtLeastOfCompetitions(GraphQLObject):
    value_competitions:'list[Competition]' = None
    value_min = None
    def competitions(self,_param_name:str = 'competitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competitions",_param_name,inst)
        self.value_competitions = inst
        return inst

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass


class ValueOpenBoundaries(GraphQLObject):
    value_max = None
    value_min = None
    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass


class AverageScoresRule(GraphQLObject):
    value_immuneAppearances = None
    value_max = None
    def immuneAppearances(self,_param_name:str = 'immuneAppearances'):
        inst = None
        self._add_to_query("immuneAppearances",_param_name)
        pass

    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass


class CardEditionCount(GraphQLObject):
    value_displayName = None
    value_max = None
    value_min = None
    value_name = None
    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass


class CardEditionsCount(GraphQLObject):
    value_editions:'list[CardEditionCount]' = None
    value_max = None
    value_min = None
    def editions(self,_param_name:str = 'editions') -> 'CardEditionCount':
        param_list = []
        inst = CardEditionCount(self,param_list)
        self._add_to_query("editions",_param_name,inst)
        self.value_editions = inst
        return inst

    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass


class MaximumCardsCountOwnedByUser(GraphQLObject):
    value_maximumCards = None
    value_scarcity = None
    def maximumCards(self,_param_name:str = 'maximumCards'):
        inst = None
        self._add_to_query("maximumCards",_param_name)
        pass

    def scarcity(self,_param_name:str = 'scarcity'):
        inst = None
        self._add_to_query("scarcity",_param_name)
        pass


class GalleryCards(GraphQLObject):
    value_common:'ValueOpenBoundaries' = None
    value_customSeries:'ValueOpenBoundaries' = None
    value_limited:'ValueOpenBoundaries' = None
    value_pro:'ValueOpenBoundaries' = None
    value_rare:'ValueOpenBoundaries' = None
    value_superRare:'ValueOpenBoundaries' = None
    value_unique:'ValueOpenBoundaries' = None
    def common(self,_param_name:str = 'common') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("common",_param_name,inst)
        self.value_common = inst
        return inst

    def customSeries(self,_param_name:str = 'customSeries') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("customSeries",_param_name,inst)
        self.value_customSeries = inst
        return inst

    def limited(self,_param_name:str = 'limited') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("limited",_param_name,inst)
        self.value_limited = inst
        return inst

    def pro(self,_param_name:str = 'pro') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("pro",_param_name,inst)
        self.value_pro = inst
        return inst

    def rare(self,_param_name:str = 'rare') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("rare",_param_name,inst)
        self.value_rare = inst
        return inst

    def superRare(self,_param_name:str = 'superRare') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("superRare",_param_name,inst)
        self.value_superRare = inst
        return inst

    def unique(self,_param_name:str = 'unique') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("unique",_param_name,inst)
        self.value_unique = inst
        return inst


class AverageScoreOpenBoundaries(GraphQLObject):
    value_averageType = None
    value_count = None
    value_max = None
    value_min = None
    def averageType(self,_param_name:str = 'averageType'):
        inst = None
        self._add_to_query("averageType",_param_name)
        pass

    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass

    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass


class Nationality(GraphQLObject):
    value_countries:'list[Country]' = None
    value_max = None
    value_min = None
    def countries(self,_param_name:str = 'countries') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("countries",_param_name,inst)
        self.value_countries = inst
        return inst

    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass


class ValueBoundaries(GraphQLObject):
    value_max = None
    value_min = None
    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass


class So5Rarity(GraphQLObject):
    value_common:'ValueBoundaries' = None
    value_customSeries:'ValueBoundaries' = None
    value_limited:'ValueBoundaries' = None
    value_rare:'ValueBoundaries' = None
    value_superRare:'ValueBoundaries' = None
    value_unique:'ValueBoundaries' = None
    def common(self,_param_name:str = 'common') -> 'ValueBoundaries':
        param_list = []
        inst = ValueBoundaries(self,param_list)
        self._add_to_query("common",_param_name,inst)
        self.value_common = inst
        return inst

    def customSeries(self,_param_name:str = 'customSeries') -> 'ValueBoundaries':
        param_list = []
        inst = ValueBoundaries(self,param_list)
        self._add_to_query("customSeries",_param_name,inst)
        self.value_customSeries = inst
        return inst

    def limited(self,_param_name:str = 'limited') -> 'ValueBoundaries':
        param_list = []
        inst = ValueBoundaries(self,param_list)
        self._add_to_query("limited",_param_name,inst)
        self.value_limited = inst
        return inst

    def rare(self,_param_name:str = 'rare') -> 'ValueBoundaries':
        param_list = []
        inst = ValueBoundaries(self,param_list)
        self._add_to_query("rare",_param_name,inst)
        self.value_rare = inst
        return inst

    def superRare(self,_param_name:str = 'superRare') -> 'ValueBoundaries':
        param_list = []
        inst = ValueBoundaries(self,param_list)
        self._add_to_query("superRare",_param_name,inst)
        self.value_superRare = inst
        return inst

    def unique(self,_param_name:str = 'unique') -> 'ValueBoundaries':
        param_list = []
        inst = ValueBoundaries(self,param_list)
        self._add_to_query("unique",_param_name,inst)
        self.value_unique = inst
        return inst


class SeasonBonus(GraphQLObject):
    value_max = None
    value_min = None
    value_season:'Season' = None
    value_teams:'list[Club]' = None
    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def teams(self,_param_name:str = 'teams') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("teams",_param_name,inst)
        self.value_teams = inst
        return inst


class So5Rules(GraphQLObject):
    value_activeClubs:'list[Club]' = None
    value_age:'Age' = None
    value_allowLegend = None
    value_appearances:'list[AppearanceRule]' = None
    value_atLeastOfClubs:'So5AtLeastOfClubs' = None
    value_atLeastOfCompetitions:'So5AtLeastOfCompetitions' = None
    value_averageScore:'ValueOpenBoundaries' = None
    value_averageScores:'AverageScoresRule' = None
    value_captain = None
    value_captainRarities = None
    value_cardEditionsCount:'CardEditionsCount' = None
    value_cardTeams = None
    value_cardsCountAsFirstOwner = None
    value_cardsCountOfCurrentUser:'MaximumCardsCountOwnedByUser' = None
    value_competitions:'list[Competition]' = None
    value_currentEditedSeason = None
    value_currentUserGallery:'GalleryCards' = None
    value_draftTeams = None
    value_id = None
    value_internationalCompetitions:'list[Competition]' = None
    value_leagues:'list[Competition]' = None
    value_lockType = None
    value_maximumPlayersAverageScore:'AverageScoreOpenBoundaries' = None
    value_minOrMaxSameNationality:'ValueOpenBoundaries' = None
    value_minimumPlayersAverageScore:'AverageScoreOpenBoundaries' = None
    value_nationalities:'list[Country]' = None
    value_nationalitiesCount:'Nationality' = None
    value_noClassicCommon = None
    value_notDomesticCompetitions:'list[Competition]' = None
    value_notNationalities:'list[Country]' = None
    value_rarities = None
    value_rarityLimits:'So5Rarity' = None
    value_sameActiveClub:'ValueOpenBoundaries' = None
    value_sameNationality = None
    value_seasonBonus:'ValueOpenBoundaries' = None
    value_seasonBonusForSpecificTeams:'SeasonBonus' = None
    value_seasons:'list[Season]' = None
    value_serialNumber = None
    value_sport = None
    value_sumOfAverageScores = None
    def activeClubs(self,_param_name:str = 'activeClubs') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("activeClubs",_param_name,inst)
        self.value_activeClubs = inst
        return inst

    def age(self,_param_name:str = 'age') -> 'Age':
        param_list = []
        inst = Age(self,param_list)
        self._add_to_query("age",_param_name,inst)
        self.value_age = inst
        return inst

    def allowLegend(self,_param_name:str = 'allowLegend'):
        inst = None
        self._add_to_query("allowLegend",_param_name)
        pass

    def appearances(self,_param_name:str = 'appearances') -> 'AppearanceRule':
        param_list = []
        inst = AppearanceRule(self,param_list)
        self._add_to_query("appearances",_param_name,inst)
        self.value_appearances = inst
        return inst

    def atLeastOfClubs(self,_param_name:str = 'atLeastOfClubs') -> 'So5AtLeastOfClubs':
        param_list = []
        inst = So5AtLeastOfClubs(self,param_list)
        self._add_to_query("atLeastOfClubs",_param_name,inst)
        self.value_atLeastOfClubs = inst
        return inst

    def atLeastOfCompetitions(self,_param_name:str = 'atLeastOfCompetitions') -> 'So5AtLeastOfCompetitions':
        param_list = []
        inst = So5AtLeastOfCompetitions(self,param_list)
        self._add_to_query("atLeastOfCompetitions",_param_name,inst)
        self.value_atLeastOfCompetitions = inst
        return inst

    def averageScore(self,_param_name:str = 'averageScore') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("averageScore",_param_name,inst)
        self.value_averageScore = inst
        return inst

    def averageScores(self,_param_name:str = 'averageScores') -> 'AverageScoresRule':
        param_list = []
        inst = AverageScoresRule(self,param_list)
        self._add_to_query("averageScores",_param_name,inst)
        self.value_averageScores = inst
        return inst

    def captain(self,_param_name:str = 'captain'):
        inst = None
        self._add_to_query("captain",_param_name)
        pass

    def captainRarities(self,_param_name:str = 'captainRarities'):
        inst = None
        self._add_to_query("captainRarities",_param_name)
        pass

    def cardEditionsCount(self,_param_name:str = 'cardEditionsCount') -> 'CardEditionsCount':
        param_list = []
        inst = CardEditionsCount(self,param_list)
        self._add_to_query("cardEditionsCount",_param_name,inst)
        self.value_cardEditionsCount = inst
        return inst

    def cardTeams(self,_param_name:str = 'cardTeams'):
        inst = None
        self._add_to_query("cardTeams",_param_name)
        pass

    def cardsCountAsFirstOwner(self,_param_name:str = 'cardsCountAsFirstOwner'):
        inst = None
        self._add_to_query("cardsCountAsFirstOwner",_param_name)
        pass

    def cardsCountOfCurrentUser(self,_param_name:str = 'cardsCountOfCurrentUser') -> 'MaximumCardsCountOwnedByUser':
        param_list = []
        inst = MaximumCardsCountOwnedByUser(self,param_list)
        self._add_to_query("cardsCountOfCurrentUser",_param_name,inst)
        self.value_cardsCountOfCurrentUser = inst
        return inst

    def competitions(self,_param_name:str = 'competitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competitions",_param_name,inst)
        self.value_competitions = inst
        return inst

    def currentEditedSeason(self,_param_name:str = 'currentEditedSeason'):
        inst = None
        self._add_to_query("currentEditedSeason",_param_name)
        pass

    def currentUserGallery(self,_param_name:str = 'currentUserGallery') -> 'GalleryCards':
        param_list = []
        inst = GalleryCards(self,param_list)
        self._add_to_query("currentUserGallery",_param_name,inst)
        self.value_currentUserGallery = inst
        return inst

    def draftTeams(self,_param_name:str = 'draftTeams'):
        inst = None
        self._add_to_query("draftTeams",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def internationalCompetitions(self,_param_name:str = 'internationalCompetitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("internationalCompetitions",_param_name,inst)
        self.value_internationalCompetitions = inst
        return inst

    def leagues(self,_param_name:str = 'leagues') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("leagues",_param_name,inst)
        self.value_leagues = inst
        return inst

    def lockType(self,_param_name:str = 'lockType'):
        inst = None
        self._add_to_query("lockType",_param_name)
        pass

    def maximumPlayersAverageScore(self,_param_name:str = 'maximumPlayersAverageScore') -> 'AverageScoreOpenBoundaries':
        param_list = []
        inst = AverageScoreOpenBoundaries(self,param_list)
        self._add_to_query("maximumPlayersAverageScore",_param_name,inst)
        self.value_maximumPlayersAverageScore = inst
        return inst

    def minOrMaxSameNationality(self,_param_name:str = 'minOrMaxSameNationality') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("minOrMaxSameNationality",_param_name,inst)
        self.value_minOrMaxSameNationality = inst
        return inst

    def minimumPlayersAverageScore(self,_param_name:str = 'minimumPlayersAverageScore') -> 'AverageScoreOpenBoundaries':
        param_list = []
        inst = AverageScoreOpenBoundaries(self,param_list)
        self._add_to_query("minimumPlayersAverageScore",_param_name,inst)
        self.value_minimumPlayersAverageScore = inst
        return inst

    def nationalities(self,_param_name:str = 'nationalities') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("nationalities",_param_name,inst)
        self.value_nationalities = inst
        return inst

    def nationalitiesCount(self,_param_name:str = 'nationalitiesCount') -> 'Nationality':
        param_list = []
        inst = Nationality(self,param_list)
        self._add_to_query("nationalitiesCount",_param_name,inst)
        self.value_nationalitiesCount = inst
        return inst

    def noClassicCommon(self,_param_name:str = 'noClassicCommon'):
        inst = None
        self._add_to_query("noClassicCommon",_param_name)
        pass

    def notDomesticCompetitions(self,_param_name:str = 'notDomesticCompetitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("notDomesticCompetitions",_param_name,inst)
        self.value_notDomesticCompetitions = inst
        return inst

    def notNationalities(self,_param_name:str = 'notNationalities') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("notNationalities",_param_name,inst)
        self.value_notNationalities = inst
        return inst

    def rarities(self,_param_name:str = 'rarities'):
        inst = None
        self._add_to_query("rarities",_param_name)
        pass

    def rarityLimits(self,_param_name:str = 'rarityLimits') -> 'So5Rarity':
        param_list = []
        inst = So5Rarity(self,param_list)
        self._add_to_query("rarityLimits",_param_name,inst)
        self.value_rarityLimits = inst
        return inst

    def sameActiveClub(self,_param_name:str = 'sameActiveClub') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("sameActiveClub",_param_name,inst)
        self.value_sameActiveClub = inst
        return inst

    def sameNationality(self,_param_name:str = 'sameNationality'):
        inst = None
        self._add_to_query("sameNationality",_param_name)
        pass

    def seasonBonus(self,_param_name:str = 'seasonBonus') -> 'ValueOpenBoundaries':
        param_list = []
        inst = ValueOpenBoundaries(self,param_list)
        self._add_to_query("seasonBonus",_param_name,inst)
        self.value_seasonBonus = inst
        return inst

    def seasonBonusForSpecificTeams(self,_param_name:str = 'seasonBonusForSpecificTeams') -> 'SeasonBonus':
        param_list = []
        inst = SeasonBonus(self,param_list)
        self._add_to_query("seasonBonusForSpecificTeams",_param_name,inst)
        self.value_seasonBonusForSpecificTeams = inst
        return inst

    def seasons(self,_param_name:str = 'seasons') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("seasons",_param_name,inst)
        self.value_seasons = inst
        return inst

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def sumOfAverageScores(self,_param_name:str = 'sumOfAverageScores'):
        inst = None
        self._add_to_query("sumOfAverageScores",_param_name)
        pass


class FootballConversionCredit(GraphQLObject):
    value_durationInDays = None
    value_maxDiscount:'MonetaryAmount' = None
    value_percentageDiscount = None
    value_singleUse = None
    def durationInDays(self,_param_name:str = 'durationInDays'):
        inst = None
        self._add_to_query("durationInDays",_param_name)
        pass

    def maxDiscount(self,_param_name:str = 'maxDiscount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("maxDiscount",_param_name,inst)
        self.value_maxDiscount = inst
        return inst

    def percentageDiscount(self,_param_name:str = 'percentageDiscount'):
        inst = None
        self._add_to_query("percentageDiscount",_param_name)
        pass

    def singleUse(self,_param_name:str = 'singleUse'):
        inst = None
        self._add_to_query("singleUse",_param_name)
        pass


class So5DeliverableItemReward(GraphQLObject):
    value_deliverableItem:'DeliverableItemInterface' = None
    value_quantity = None
    def deliverableItem(self,_param_name:str = 'deliverableItem') -> 'DeliverableItemInterface':
        param_list = []
        inst = DeliverableItemInterface(self,param_list)
        self._add_to_query("deliverableItem",_param_name,inst)
        self.value_deliverableItem = inst
        return inst

    def quantity(self,_param_name:str = 'quantity'):
        inst = None
        self._add_to_query("quantity",_param_name)
        pass


class So5RewardExperience(GraphQLObject):
    value_description = None
    value_pictureUrl = None
    value_title = None
    value_type = None
    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class UserRankingInterface(GraphQLObject):
    value_id = None
    value_overallRanking = None
    value_overallScore = None
    value_user:'User' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def overallRanking(self,_param_name:str = 'overallRanking'):
        inst = None
        self._add_to_query("overallRanking",_param_name)
        pass

    def overallScore(self,_param_name:str = 'overallScore'):
        inst = None
        self._add_to_query("overallScore",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class So5RewardTargetConfig(GraphQLObject):
    value_pictureUrl = None
    value_slug = None
    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass


class So5RewardConfig(GraphQLObject):
    value_arenaTickets = None
    value_cardShards = None
    value_cards:'list[So5RewardCardConfig]' = None
    value_coinAmount = None
    value_conversionCredit:'FootballConversionCredit' = None
    value_deliverableItems:'list[So5DeliverableItemReward]' = None
    value_ethAmount = None
    value_experiences:'list[So5RewardExperience]' = None
    value_fromRank = None
    value_fromSo5Ranking:'So5Ranking' = None
    value_fromUserRanking:'UserRankingInterface' = None
    value_minimumGuaranteedUsdAmount = None
    value_probabilisticBundleConfigs:'list[ProbabilisticBundleConfig]' = None
    value_probabilisticBundles:'list[ProbabilisticBundle]' = None
    value_rankPct = None
    value_ranks = None
    value_score = None
    value_target:'So5RewardTargetConfig' = None
    value_toRank = None
    value_toSo5Ranking:'So5Ranking' = None
    value_toUserRanking:'UserRankingInterface' = None
    value_usdAmount = None
    def arenaTickets(self,_param_name:str = 'arenaTickets'):
        inst = None
        self._add_to_query("arenaTickets",_param_name)
        pass

    def cardShards(self,_param_name:str = 'cardShards'):
        inst = None
        self._add_to_query("cardShards",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'So5RewardCardConfig':
        param_list = []
        inst = So5RewardCardConfig(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def coinAmount(self,_param_name:str = 'coinAmount'):
        inst = None
        self._add_to_query("coinAmount",_param_name)
        pass

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'FootballConversionCredit':
        param_list = []
        inst = FootballConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def deliverableItems(self,_param_name:str = 'deliverableItems') -> 'So5DeliverableItemReward':
        param_list = []
        inst = So5DeliverableItemReward(self,param_list)
        self._add_to_query("deliverableItems",_param_name,inst)
        self.value_deliverableItems = inst
        return inst

    def ethAmount(self,_param_name:str = 'ethAmount'):
        inst = None
        self._add_to_query("ethAmount",_param_name)
        pass

    def experiences(self,_param_name:str = 'experiences') -> 'So5RewardExperience':
        param_list = []
        inst = So5RewardExperience(self,param_list)
        self._add_to_query("experiences",_param_name,inst)
        self.value_experiences = inst
        return inst

    def fromRank(self,_param_name:str = 'fromRank'):
        inst = None
        self._add_to_query("fromRank",_param_name)
        pass

    def fromSo5Ranking(self,_param_name:str = 'fromSo5Ranking') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("fromSo5Ranking",_param_name,inst)
        self.value_fromSo5Ranking = inst
        return inst

    def fromUserRanking(self,_param_name:str = 'fromUserRanking') -> 'UserRankingInterface':
        param_list = []
        inst = UserRankingInterface(self,param_list)
        self._add_to_query("fromUserRanking",_param_name,inst)
        self.value_fromUserRanking = inst
        return inst

    def minimumGuaranteedUsdAmount(self,_param_name:str = 'minimumGuaranteedUsdAmount'):
        inst = None
        self._add_to_query("minimumGuaranteedUsdAmount",_param_name)
        pass

    def probabilisticBundleConfigs(self,_param_name:str = 'probabilisticBundleConfigs') -> 'ProbabilisticBundleConfig':
        param_list = []
        inst = ProbabilisticBundleConfig(self,param_list)
        self._add_to_query("probabilisticBundleConfigs",_param_name,inst)
        self.value_probabilisticBundleConfigs = inst
        return inst

    def probabilisticBundles(self,_param_name:str = 'probabilisticBundles') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundles",_param_name,inst)
        self.value_probabilisticBundles = inst
        return inst

    def rankPct(self,_param_name:str = 'rankPct'):
        inst = None
        self._add_to_query("rankPct",_param_name)
        pass

    def ranks(self,_param_name:str = 'ranks'):
        inst = None
        self._add_to_query("ranks",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def target(self,_param_name:str = 'target') -> 'So5RewardTargetConfig':
        param_list = []
        inst = So5RewardTargetConfig(self,param_list)
        self._add_to_query("target",_param_name,inst)
        self.value_target = inst
        return inst

    def toRank(self,_param_name:str = 'toRank'):
        inst = None
        self._add_to_query("toRank",_param_name)
        pass

    def toSo5Ranking(self,_param_name:str = 'toSo5Ranking') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("toSo5Ranking",_param_name,inst)
        self.value_toSo5Ranking = inst
        return inst

    def toUserRanking(self,_param_name:str = 'toUserRanking') -> 'UserRankingInterface':
        param_list = []
        inst = UserRankingInterface(self,param_list)
        self._add_to_query("toUserRanking",_param_name,inst)
        self.value_toUserRanking = inst
        return inst

    def usdAmount(self,_param_name:str = 'usdAmount'):
        inst = None
        self._add_to_query("usdAmount",_param_name)
        pass


class So5PotentialRewardConfigs(GraphQLObject):
    value_eligibleRewards:'list[So5RewardConfig]' = None
    value_score = None
    def eligibleRewards(self,_param_name:str = 'eligibleRewards') -> 'So5RewardConfig':
        param_list = []
        inst = So5RewardConfig(self,param_list)
        self._add_to_query("eligibleRewards",_param_name,inst)
        self.value_eligibleRewards = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass


class RewardCard(GraphQLObject):
    value_anyCard:'AnyCardInterface' = None
    value_backPictureUrl = None
    value_card:'Card' = None
    value_id = None
    value_pictureUrl = None
    value_quality = None
    value_so5Reward:'So5Reward' = None
    value_upgradedQuality = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def backPictureUrl(self,_param_name:str = 'backPictureUrl'):
        inst = None
        self._add_to_query("backPictureUrl",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def quality(self,_param_name:str = 'quality'):
        inst = None
        self._add_to_query("quality",_param_name)
        pass

    def so5Reward(self,_param_name:str = 'so5Reward') -> 'So5Reward':
        param_list = []
        inst = So5Reward(self,param_list)
        self._add_to_query("so5Reward",_param_name,inst)
        self.value_so5Reward = inst
        return inst

    def upgradedQuality(self,_param_name:str = 'upgradedQuality'):
        inst = None
        self._add_to_query("upgradedQuality",_param_name)
        pass


class So5RankingEdge(GraphQLObject):
    value_cursor = None
    value_node:'So5Ranking' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class So5RankingConnection(GraphQLObject):
    value_edges:'list[So5RankingEdge]' = None
    value_nodes:'list[So5Ranking]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'So5RankingEdge':
        param_list = []
        inst = So5RankingEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class ConversionCredit(GraphQLObject):
    value_endDate = None
    value_id = None
    value_maxDiscount:'MonetaryAmount' = None
    value_percentageDiscount = None
    value_purchase = None
    value_singleUse = None
    value_sport = None
    value_status = None
    value_totalDiscount:'MonetaryAmount' = None
    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def maxDiscount(self,_param_name:str = 'maxDiscount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("maxDiscount",_param_name,inst)
        self.value_maxDiscount = inst
        return inst

    def percentageDiscount(self,_param_name:str = 'percentageDiscount'):
        inst = None
        self._add_to_query("percentageDiscount",_param_name)
        pass

    def purchase(self,_param_name:str = 'purchase'):
        inst = None
        self._add_to_query("purchase",_param_name)
        pass

    def singleUse(self,_param_name:str = 'singleUse'):
        inst = None
        self._add_to_query("singleUse",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def totalDiscount(self,_param_name:str = 'totalDiscount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("totalDiscount",_param_name,inst)
        self.value_totalDiscount = inst
        return inst


class ConversionCreditCampaign(GraphQLObject):
    value_campaignCode = None
    value_endDate = None
    value_id = None
    value_maxDiscount:'MonetaryAmount' = None
    value_percentageDiscount = None
    value_sport = None
    value_status = None
    def campaignCode(self,_param_name:str = 'campaignCode'):
        inst = None
        self._add_to_query("campaignCode",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def maxDiscount(self,_param_name:str = 'maxDiscount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("maxDiscount",_param_name,inst)
        self.value_maxDiscount = inst
        return inst

    def percentageDiscount(self,_param_name:str = 'percentageDiscount'):
        inst = None
        self._add_to_query("percentageDiscount",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass


class UserShopItem(GraphQLObject):
    value_id = None
    value_shopItem = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def shopItem(self,_param_name:str = 'shopItem'):
        inst = None
        self._add_to_query("shopItem",_param_name)
        pass


class SkinShopItem(GraphQLObject):
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_color = None
    value_createdAt = None
    value_description = None
    value_disabled = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_nature = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def color(self,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def nature(self,_param_name:str = 'nature'):
        inst = None
        self._add_to_query("nature",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass


class UserGroupMembershipInterface(GraphQLObject):
    value_administrator = None
    value_createdAt = None
    value_id = None
    value_ranking = None
    value_score = None
    value_user:'User' = None
    def administrator(self,_param_name:str = 'administrator'):
        inst = None
        self._add_to_query("administrator",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class So5UserGroupMembershipsPaginated(GraphQLObject):
    value_currentPage = None
    value_id = None
    value_memberships:'list[UserGroupMembershipInterface]' = None
    value_nodes:'list[UserGroupMembershipInterface]' = None
    value_pages = None
    value_totalCount = None
    def currentPage(self,_param_name:str = 'currentPage'):
        inst = None
        self._add_to_query("currentPage",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def memberships(self,_param_name:str = 'memberships') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("memberships",_param_name,inst)
        self.value_memberships = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pages(self,_param_name:str = 'pages'):
        inst = None
        self._add_to_query("pages",_param_name)
        pass

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class So5LeaderboardEdge(GraphQLObject):
    value_cursor = None
    value_node:'So5Leaderboard' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class So5LeaderboardConnection(GraphQLObject):
    value_edges:'list[So5LeaderboardEdge]' = None
    value_nodes:'list[So5Leaderboard]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'So5LeaderboardEdge':
        param_list = []
        inst = So5LeaderboardEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class LeaderboardRewardsConfig(GraphQLObject):
    value_conditional:'list[So5RewardConfig]' = None
    value_prizePoolCurrency = None
    value_ranking:'list[So5RewardConfig]' = None
    value_targetable:'list[So5RewardConfig]' = None
    def conditional(self,_param_name:str = 'conditional') -> 'So5RewardConfig':
        param_list = []
        inst = So5RewardConfig(self,param_list)
        self._add_to_query("conditional",_param_name,inst)
        self.value_conditional = inst
        return inst

    def prizePoolCurrency(self,_param_name:str = 'prizePoolCurrency'):
        inst = None
        self._add_to_query("prizePoolCurrency",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking') -> 'So5RewardConfig':
        param_list = []
        inst = So5RewardConfig(self,param_list)
        self._add_to_query("ranking",_param_name,inst)
        self.value_ranking = inst
        return inst

    def targetable(self,_param_name:str = 'targetable') -> 'So5RewardConfig':
        param_list = []
        inst = So5RewardConfig(self,param_list)
        self._add_to_query("targetable",_param_name,inst)
        self.value_targetable = inst
        return inst


class So5RewardEdge(GraphQLObject):
    value_cursor = None
    value_node:'So5Reward' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'So5Reward':
        param_list = []
        inst = So5Reward(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class So5RewardConnection(GraphQLObject):
    value_edges:'list[So5RewardEdge]' = None
    value_nodes:'list[So5Reward]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'So5RewardEdge':
        param_list = []
        inst = So5RewardEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'So5Reward':
        param_list = []
        inst = So5Reward(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class So5Tournament(GraphQLObject):
    value_displayName = None
    value_id = None
    value_so5LeaderboardType = None
    value_svgLogoUrl = None
    def displayName(self,short,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def so5LeaderboardType(self,_param_name:str = 'so5LeaderboardType'):
        inst = None
        self._add_to_query("so5LeaderboardType",_param_name)
        pass

    def svgLogoUrl(self,_param_name:str = 'svgLogoUrl'):
        inst = None
        self._add_to_query("svgLogoUrl",_param_name)
        pass


class DeliverableItemsRewardsOverview(GraphQLObject):
    value_experience = None
    value_jersey = None
    value_tickets = None
    value_wearable = None
    def experience(self,_param_name:str = 'experience'):
        inst = None
        self._add_to_query("experience",_param_name)
        pass

    def jersey(self,_param_name:str = 'jersey'):
        inst = None
        self._add_to_query("jersey",_param_name)
        pass

    def tickets(self,_param_name:str = 'tickets'):
        inst = None
        self._add_to_query("tickets",_param_name)
        pass

    def wearable(self,_param_name:str = 'wearable'):
        inst = None
        self._add_to_query("wearable",_param_name)
        pass


class RarityCount(GraphQLObject):
    value_count = None
    value_rarity = None
    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass


class ProbabilisticBundlesRewardsOverview(GraphQLObject):
    value_rarities:'list[RarityCount]' = None
    def rarities(self,_param_name:str = 'rarities') -> 'RarityCount':
        param_list = []
        inst = RarityCount(self,param_list)
        self._add_to_query("rarities",_param_name,inst)
        self.value_rarities = inst
        return inst


class RewardsOverview(GraphQLObject):
    value_cards = None
    value_deliverableItems:'DeliverableItemsRewardsOverview' = None
    value_experiences = None
    value_experiencesDetails:'list[So5RewardExperience]' = None
    value_prizePool = None
    value_prizePoolCurrency = None
    value_probabilisticBundles:'ProbabilisticBundlesRewardsOverview' = None
    def cards(self,_param_name:str = 'cards'):
        inst = None
        self._add_to_query("cards",_param_name)
        pass

    def deliverableItems(self,_param_name:str = 'deliverableItems') -> 'DeliverableItemsRewardsOverview':
        param_list = []
        inst = DeliverableItemsRewardsOverview(self,param_list)
        self._add_to_query("deliverableItems",_param_name,inst)
        self.value_deliverableItems = inst
        return inst

    def experiences(self,_param_name:str = 'experiences'):
        inst = None
        self._add_to_query("experiences",_param_name)
        pass

    def experiencesDetails(self,_param_name:str = 'experiencesDetails') -> 'So5RewardExperience':
        param_list = []
        inst = So5RewardExperience(self,param_list)
        self._add_to_query("experiencesDetails",_param_name,inst)
        self.value_experiencesDetails = inst
        return inst

    def prizePool(self,_param_name:str = 'prizePool'):
        inst = None
        self._add_to_query("prizePool",_param_name)
        pass

    def prizePoolCurrency(self,_param_name:str = 'prizePoolCurrency'):
        inst = None
        self._add_to_query("prizePoolCurrency",_param_name)
        pass

    def probabilisticBundles(self,_param_name:str = 'probabilisticBundles') -> 'ProbabilisticBundlesRewardsOverview':
        param_list = []
        inst = ProbabilisticBundlesRewardsOverview(self,param_list)
        self._add_to_query("probabilisticBundles",_param_name,inst)
        self.value_probabilisticBundles = inst
        return inst


class So5UserGroupTournament(GraphQLObject):
    value_displayName = None
    value_division = None
    value_id = None
    value_so5LeaderboardType = None
    value_so5TournamentType:'So5Tournament' = None
    value_tournamentType = None
    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def division(self,_param_name:str = 'division'):
        inst = None
        self._add_to_query("division",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def so5LeaderboardType(self,_param_name:str = 'so5LeaderboardType'):
        inst = None
        self._add_to_query("so5LeaderboardType",_param_name)
        pass

    def so5TournamentType(self,_param_name:str = 'so5TournamentType') -> 'So5Tournament':
        param_list = []
        inst = So5Tournament(self,param_list)
        self._add_to_query("so5TournamentType",_param_name,inst)
        self.value_so5TournamentType = inst
        return inst

    def tournamentType(self,_param_name:str = 'tournamentType'):
        inst = None
        self._add_to_query("tournamentType",_param_name)
        pass


class So5UserGroup(GraphQLObject):
    value_administrator:'User' = None
    value_canJoin:'Validity' = None
    value_conversionCredit:'ConversionCredit' = None
    value_conversionCreditCampaign:'ConversionCreditCampaign' = None
    value_description = None
    value_displayName = None
    value_endGameWeek = None
    value_endSo5Fixture:'So5Fixture' = None
    value_id = None
    value_joinDisabled = None
    value_joinRules:'So5Rules' = None
    value_joinSecret = None
    value_latestSo5Leaderboard:'So5Leaderboard' = None
    value_liveSo5Leaderboard:'So5Leaderboard' = None
    value_logo:'SkinShopItem' = None
    value_mainRarityType = None
    value_membership:'UserGroupMembershipInterface' = None
    value_memberships:'list[UserGroupMembershipInterface]' = None
    value_membershipsCount = None
    value_membershipsPaginated:'So5UserGroupMembershipsPaginated' = None
    value_myMembership:'UserGroupMembershipInterface' = None
    value_pastSo5Leaderboards:'So5LeaderboardConnection' = None
    value_publiclyAccessible = None
    value_rarityType = None
    value_rewardsConfig:'LeaderboardRewardsConfig' = None
    value_seasonality = None
    value_seasonalityName = None
    value_slug = None
    value_so5LeaderboardType = None
    value_so5Rewards:'So5RewardConnection' = None
    value_so5TournamentType:'So5Tournament' = None
    value_startGameWeek = None
    value_startSo5Fixture:'So5Fixture' = None
    value_status = None
    value_svgLogoUrl = None
    value_topScoresCount = None
    value_totalRewards:'RewardsOverview' = None
    value_tournament:'So5UserGroupTournament' = None
    value_tournamentType = None
    value_upcomingSo5Leaderboard:'So5Leaderboard' = None
    def administrator(self,_param_name:str = 'administrator') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("administrator",_param_name,inst)
        self.value_administrator = inst
        return inst

    def canJoin(self,_param_name:str = 'canJoin') -> 'Validity':
        param_list = []
        inst = Validity(self,param_list)
        self._add_to_query("canJoin",_param_name,inst)
        self.value_canJoin = inst
        return inst

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def conversionCreditCampaign(self,_param_name:str = 'conversionCreditCampaign') -> 'ConversionCreditCampaign':
        param_list = []
        inst = ConversionCreditCampaign(self,param_list)
        self._add_to_query("conversionCreditCampaign",_param_name,inst)
        self.value_conversionCreditCampaign = inst
        return inst

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def endGameWeek(self,_param_name:str = 'endGameWeek'):
        inst = None
        self._add_to_query("endGameWeek",_param_name)
        pass

    def endSo5Fixture(self,_param_name:str = 'endSo5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("endSo5Fixture",_param_name,inst)
        self.value_endSo5Fixture = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def joinDisabled(self,_param_name:str = 'joinDisabled'):
        inst = None
        self._add_to_query("joinDisabled",_param_name)
        pass

    def joinRules(self,_param_name:str = 'joinRules') -> 'So5Rules':
        param_list = []
        inst = So5Rules(self,param_list)
        self._add_to_query("joinRules",_param_name,inst)
        self.value_joinRules = inst
        return inst

    def joinSecret(self,_param_name:str = 'joinSecret'):
        inst = None
        self._add_to_query("joinSecret",_param_name)
        pass

    def latestSo5Leaderboard(self,_param_name:str = 'latestSo5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("latestSo5Leaderboard",_param_name,inst)
        self.value_latestSo5Leaderboard = inst
        return inst

    def liveSo5Leaderboard(self,_param_name:str = 'liveSo5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("liveSo5Leaderboard",_param_name,inst)
        self.value_liveSo5Leaderboard = inst
        return inst

    def logo(self,_param_name:str = 'logo') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("logo",_param_name,inst)
        self.value_logo = inst
        return inst

    def mainRarityType(self,_param_name:str = 'mainRarityType'):
        inst = None
        self._add_to_query("mainRarityType",_param_name)
        pass

    def membership(self,userSlug,_param_name:str = 'membership') -> 'UserGroupMembershipInterface':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("membership",_param_name,inst)
        self.value_membership = inst
        return inst

    def memberships(self,_param_name:str = 'memberships') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("memberships",_param_name,inst)
        self.value_memberships = inst
        return inst

    def membershipsCount(self,_param_name:str = 'membershipsCount'):
        inst = None
        self._add_to_query("membershipsCount",_param_name)
        pass

    def membershipsPaginated(self,page,pageSize,_param_name:str = 'membershipsPaginated') -> 'So5UserGroupMembershipsPaginated':
        param_list = []
        param_list.append(("page",page))
        param_list.append(("pageSize",pageSize))
        inst = So5UserGroupMembershipsPaginated(self,param_list)
        self._add_to_query("membershipsPaginated",_param_name,inst)
        self.value_membershipsPaginated = inst
        return inst

    def myMembership(self,_param_name:str = 'myMembership') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("myMembership",_param_name,inst)
        self.value_myMembership = inst
        return inst

    def pastSo5Leaderboards(self,after,before,first,last,_param_name:str = 'pastSo5Leaderboards') -> 'So5LeaderboardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = So5LeaderboardConnection(self,param_list)
        self._add_to_query("pastSo5Leaderboards",_param_name,inst)
        self.value_pastSo5Leaderboards = inst
        return inst

    def publiclyAccessible(self,_param_name:str = 'publiclyAccessible'):
        inst = None
        self._add_to_query("publiclyAccessible",_param_name)
        pass

    def rarityType(self,_param_name:str = 'rarityType'):
        inst = None
        self._add_to_query("rarityType",_param_name)
        pass

    def rewardsConfig(self,_param_name:str = 'rewardsConfig') -> 'LeaderboardRewardsConfig':
        param_list = []
        inst = LeaderboardRewardsConfig(self,param_list)
        self._add_to_query("rewardsConfig",_param_name,inst)
        self.value_rewardsConfig = inst
        return inst

    def seasonality(self,_param_name:str = 'seasonality'):
        inst = None
        self._add_to_query("seasonality",_param_name)
        pass

    def seasonalityName(self,_param_name:str = 'seasonalityName'):
        inst = None
        self._add_to_query("seasonalityName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5LeaderboardType(self,_param_name:str = 'so5LeaderboardType'):
        inst = None
        self._add_to_query("so5LeaderboardType",_param_name)
        pass

    def so5Rewards(self,after,before,first,last,_param_name:str = 'so5Rewards') -> 'So5RewardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = So5RewardConnection(self,param_list)
        self._add_to_query("so5Rewards",_param_name,inst)
        self.value_so5Rewards = inst
        return inst

    def so5TournamentType(self,_param_name:str = 'so5TournamentType') -> 'So5Tournament':
        param_list = []
        inst = So5Tournament(self,param_list)
        self._add_to_query("so5TournamentType",_param_name,inst)
        self.value_so5TournamentType = inst
        return inst

    def startGameWeek(self,_param_name:str = 'startGameWeek'):
        inst = None
        self._add_to_query("startGameWeek",_param_name)
        pass

    def startSo5Fixture(self,_param_name:str = 'startSo5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("startSo5Fixture",_param_name,inst)
        self.value_startSo5Fixture = inst
        return inst

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def svgLogoUrl(self,_param_name:str = 'svgLogoUrl'):
        inst = None
        self._add_to_query("svgLogoUrl",_param_name)
        pass

    def topScoresCount(self,_param_name:str = 'topScoresCount'):
        inst = None
        self._add_to_query("topScoresCount",_param_name)
        pass

    def totalRewards(self,_param_name:str = 'totalRewards') -> 'RewardsOverview':
        param_list = []
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalRewards",_param_name,inst)
        self.value_totalRewards = inst
        return inst

    def tournament(self,_param_name:str = 'tournament') -> 'So5UserGroupTournament':
        param_list = []
        inst = So5UserGroupTournament(self,param_list)
        self._add_to_query("tournament",_param_name,inst)
        self.value_tournament = inst
        return inst

    def tournamentType(self,_param_name:str = 'tournamentType'):
        inst = None
        self._add_to_query("tournamentType",_param_name)
        pass

    def upcomingSo5Leaderboard(self,_param_name:str = 'upcomingSo5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("upcomingSo5Leaderboard",_param_name,inst)
        self.value_upcomingSo5Leaderboard = inst
        return inst


class UserGroupInterface(GraphQLObject):
    value_administrator:'User' = None
    value_canJoin:'Validity' = None
    value_conversionCredit:'ConversionCredit' = None
    value_conversionCreditCampaign:'ConversionCreditCampaign' = None
    value_description = None
    value_displayName = None
    value_id = None
    value_joinDisabled = None
    value_joinRules:'So5Rules' = None
    value_joinSecret = None
    value_logo:'SkinShopItem' = None
    value_membership:'UserGroupMembershipInterface' = None
    value_memberships:'list[UserGroupMembershipInterface]' = None
    value_membershipsCount = None
    value_membershipsPaginated:'So5UserGroupMembershipsPaginated' = None
    value_myMembership:'UserGroupMembershipInterface' = None
    value_publiclyAccessible = None
    value_rewardsConfig:'LeaderboardRewardsConfig' = None
    value_slug = None
    value_status = None
    value_totalRewards:'RewardsOverview' = None
    def administrator(self,_param_name:str = 'administrator') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("administrator",_param_name,inst)
        self.value_administrator = inst
        return inst

    def canJoin(self,_param_name:str = 'canJoin') -> 'Validity':
        param_list = []
        inst = Validity(self,param_list)
        self._add_to_query("canJoin",_param_name,inst)
        self.value_canJoin = inst
        return inst

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def conversionCreditCampaign(self,_param_name:str = 'conversionCreditCampaign') -> 'ConversionCreditCampaign':
        param_list = []
        inst = ConversionCreditCampaign(self,param_list)
        self._add_to_query("conversionCreditCampaign",_param_name,inst)
        self.value_conversionCreditCampaign = inst
        return inst

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def joinDisabled(self,_param_name:str = 'joinDisabled'):
        inst = None
        self._add_to_query("joinDisabled",_param_name)
        pass

    def joinRules(self,_param_name:str = 'joinRules') -> 'So5Rules':
        param_list = []
        inst = So5Rules(self,param_list)
        self._add_to_query("joinRules",_param_name,inst)
        self.value_joinRules = inst
        return inst

    def joinSecret(self,_param_name:str = 'joinSecret'):
        inst = None
        self._add_to_query("joinSecret",_param_name)
        pass

    def logo(self,_param_name:str = 'logo') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("logo",_param_name,inst)
        self.value_logo = inst
        return inst

    def membership(self,userSlug,_param_name:str = 'membership') -> 'UserGroupMembershipInterface':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("membership",_param_name,inst)
        self.value_membership = inst
        return inst

    def memberships(self,_param_name:str = 'memberships') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("memberships",_param_name,inst)
        self.value_memberships = inst
        return inst

    def membershipsCount(self,_param_name:str = 'membershipsCount'):
        inst = None
        self._add_to_query("membershipsCount",_param_name)
        pass

    def membershipsPaginated(self,page,pageSize,_param_name:str = 'membershipsPaginated') -> 'So5UserGroupMembershipsPaginated':
        param_list = []
        param_list.append(("page",page))
        param_list.append(("pageSize",pageSize))
        inst = So5UserGroupMembershipsPaginated(self,param_list)
        self._add_to_query("membershipsPaginated",_param_name,inst)
        self.value_membershipsPaginated = inst
        return inst

    def myMembership(self,_param_name:str = 'myMembership') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("myMembership",_param_name,inst)
        self.value_myMembership = inst
        return inst

    def publiclyAccessible(self,_param_name:str = 'publiclyAccessible'):
        inst = None
        self._add_to_query("publiclyAccessible",_param_name)
        pass

    def rewardsConfig(self,_param_name:str = 'rewardsConfig') -> 'LeaderboardRewardsConfig':
        param_list = []
        inst = LeaderboardRewardsConfig(self,param_list)
        self._add_to_query("rewardsConfig",_param_name,inst)
        self.value_rewardsConfig = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def totalRewards(self,_param_name:str = 'totalRewards') -> 'RewardsOverview':
        param_list = []
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalRewards",_param_name,inst)
        self.value_totalRewards = inst
        return inst


class So5UserGroupMembership(GraphQLObject):
    value_administrator = None
    value_createdAt = None
    value_eligibleRewards:'list[So5RewardConfig]' = None
    value_id = None
    value_lastSo5Rankings:'list[So5Ranking]' = None
    value_liveSo5Ranking:'So5Ranking' = None
    value_overallRanking = None
    value_overallScore = None
    value_ranking = None
    value_score = None
    value_so5Rankings:'So5RankingConnection' = None
    value_so5UserGroup:'So5UserGroup' = None
    value_topSo5Rankings:'list[So5Ranking]' = None
    value_user:'User' = None
    value_userGroup:'UserGroupInterface' = None
    def administrator(self,_param_name:str = 'administrator'):
        inst = None
        self._add_to_query("administrator",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def eligibleRewards(self,_param_name:str = 'eligibleRewards') -> 'So5RewardConfig':
        param_list = []
        inst = So5RewardConfig(self,param_list)
        self._add_to_query("eligibleRewards",_param_name,inst)
        self.value_eligibleRewards = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastSo5Rankings(self,size,_param_name:str = 'lastSo5Rankings') -> 'So5Ranking':
        param_list = []
        param_list.append(("size",size))
        inst = So5Ranking(self,param_list)
        self._add_to_query("lastSo5Rankings",_param_name,inst)
        self.value_lastSo5Rankings = inst
        return inst

    def liveSo5Ranking(self,_param_name:str = 'liveSo5Ranking') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("liveSo5Ranking",_param_name,inst)
        self.value_liveSo5Ranking = inst
        return inst

    def overallRanking(self,_param_name:str = 'overallRanking'):
        inst = None
        self._add_to_query("overallRanking",_param_name)
        pass

    def overallScore(self,_param_name:str = 'overallScore'):
        inst = None
        self._add_to_query("overallScore",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def so5Rankings(self,after,before,first,last,_param_name:str = 'so5Rankings') -> 'So5RankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = So5RankingConnection(self,param_list)
        self._add_to_query("so5Rankings",_param_name,inst)
        self.value_so5Rankings = inst
        return inst

    def so5UserGroup(self,_param_name:str = 'so5UserGroup') -> 'So5UserGroup':
        param_list = []
        inst = So5UserGroup(self,param_list)
        self._add_to_query("so5UserGroup",_param_name,inst)
        self.value_so5UserGroup = inst
        return inst

    def topSo5Rankings(self,_param_name:str = 'topSo5Rankings') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("topSo5Rankings",_param_name,inst)
        self.value_topSo5Rankings = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def userGroup(self,_param_name:str = 'userGroup') -> 'UserGroupInterface':
        param_list = []
        inst = UserGroupInterface(self,param_list)
        self._add_to_query("userGroup",_param_name,inst)
        self.value_userGroup = inst
        return inst


class So5Reward(GraphQLObject):
    value_aasmState = None
    value_amount:'MonetaryAmount' = None
    value_coinAmount = None
    value_conversionCredit:'FootballConversionCredit' = None
    value_deliverableItems:'list[So5DeliverableItemReward]' = None
    value_id = None
    value_probabilisticBundle:'ProbabilisticBundle' = None
    value_rewardCards:'list[RewardCard]' = None
    value_rewardShopItems:'list[FootballRewardShopItem]' = None
    value_slug = None
    value_so5Fixture:'So5Fixture' = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5Ranking:'So5Ranking' = None
    value_so5UserGroupMembership:'So5UserGroupMembership' = None
    value_weiAmount = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def amount(self,_param_name:str = 'amount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amount",_param_name,inst)
        self.value_amount = inst
        return inst

    def coinAmount(self,_param_name:str = 'coinAmount'):
        inst = None
        self._add_to_query("coinAmount",_param_name)
        pass

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'FootballConversionCredit':
        param_list = []
        inst = FootballConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def deliverableItems(self,_param_name:str = 'deliverableItems') -> 'So5DeliverableItemReward':
        param_list = []
        inst = So5DeliverableItemReward(self,param_list)
        self._add_to_query("deliverableItems",_param_name,inst)
        self.value_deliverableItems = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def probabilisticBundle(self,_param_name:str = 'probabilisticBundle') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundle",_param_name,inst)
        self.value_probabilisticBundle = inst
        return inst

    def rewardCards(self,_param_name:str = 'rewardCards') -> 'RewardCard':
        param_list = []
        inst = RewardCard(self,param_list)
        self._add_to_query("rewardCards",_param_name,inst)
        self.value_rewardCards = inst
        return inst

    def rewardShopItems(self,_param_name:str = 'rewardShopItems') -> 'FootballRewardShopItem':
        param_list = []
        inst = FootballRewardShopItem(self,param_list)
        self._add_to_query("rewardShopItems",_param_name,inst)
        self.value_rewardShopItems = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5Leaderboard(self,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5Ranking(self,_param_name:str = 'so5Ranking') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("so5Ranking",_param_name,inst)
        self.value_so5Ranking = inst
        return inst

    def so5UserGroupMembership(self,_param_name:str = 'so5UserGroupMembership') -> 'So5UserGroupMembership':
        param_list = []
        inst = So5UserGroupMembership(self,param_list)
        self._add_to_query("so5UserGroupMembership",_param_name,inst)
        self.value_so5UserGroupMembership = inst
        return inst

    def weiAmount(self,_param_name:str = 'weiAmount'):
        inst = None
        self._add_to_query("weiAmount",_param_name)
        pass


class So5Ranking(GraphQLObject):
    value_adjacentSo5Rankings:'list[So5Ranking]' = None
    value_eligibleDivisionChange = None
    value_eligibleForReward = None
    value_eligibleOrSo5Rewards = None
    value_eligibleRewards:'list[So5RewardConfig]' = None
    value_id = None
    value_nextEligibleRewards:'So5PotentialRewardConfigs' = None
    value_overallRanking = None
    value_overallScore = None
    value_previousEligibleRewards:'So5PotentialRewardConfigs' = None
    value_ranking = None
    value_rankingRatio = None
    value_score = None
    value_so5Fixture:'So5Fixture' = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5Lineup:'So5Lineup' = None
    value_so5Rewards:'list[So5Reward]' = None
    value_targetedReward:'So5RewardConfig' = None
    value_tiebreakerScore = None
    value_user:'User' = None
    def adjacentSo5Rankings(self,delta,_param_name:str = 'adjacentSo5Rankings') -> 'So5Ranking':
        param_list = []
        param_list.append(("delta",delta))
        inst = So5Ranking(self,param_list)
        self._add_to_query("adjacentSo5Rankings",_param_name,inst)
        self.value_adjacentSo5Rankings = inst
        return inst

    def eligibleDivisionChange(self,_param_name:str = 'eligibleDivisionChange'):
        inst = None
        self._add_to_query("eligibleDivisionChange",_param_name)
        pass

    def eligibleForReward(self,_param_name:str = 'eligibleForReward'):
        inst = None
        self._add_to_query("eligibleForReward",_param_name)
        pass

    def eligibleOrSo5Rewards(self,_param_name:str = 'eligibleOrSo5Rewards'):
        inst = None
        self._add_to_query("eligibleOrSo5Rewards",_param_name)
        pass

    def eligibleRewards(self,_param_name:str = 'eligibleRewards') -> 'So5RewardConfig':
        param_list = []
        inst = So5RewardConfig(self,param_list)
        self._add_to_query("eligibleRewards",_param_name,inst)
        self.value_eligibleRewards = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def nextEligibleRewards(self,_param_name:str = 'nextEligibleRewards') -> 'So5PotentialRewardConfigs':
        param_list = []
        inst = So5PotentialRewardConfigs(self,param_list)
        self._add_to_query("nextEligibleRewards",_param_name,inst)
        self.value_nextEligibleRewards = inst
        return inst

    def overallRanking(self,_param_name:str = 'overallRanking'):
        inst = None
        self._add_to_query("overallRanking",_param_name)
        pass

    def overallScore(self,_param_name:str = 'overallScore'):
        inst = None
        self._add_to_query("overallScore",_param_name)
        pass

    def previousEligibleRewards(self,_param_name:str = 'previousEligibleRewards') -> 'So5PotentialRewardConfigs':
        param_list = []
        inst = So5PotentialRewardConfigs(self,param_list)
        self._add_to_query("previousEligibleRewards",_param_name,inst)
        self.value_previousEligibleRewards = inst
        return inst

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def rankingRatio(self,_param_name:str = 'rankingRatio'):
        inst = None
        self._add_to_query("rankingRatio",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5Leaderboard(self,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5Lineup(self,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst

    def so5Rewards(self,_param_name:str = 'so5Rewards') -> 'So5Reward':
        param_list = []
        inst = So5Reward(self,param_list)
        self._add_to_query("so5Rewards",_param_name,inst)
        self.value_so5Rewards = inst
        return inst

    def targetedReward(self,_param_name:str = 'targetedReward') -> 'So5RewardConfig':
        param_list = []
        inst = So5RewardConfig(self,param_list)
        self._add_to_query("targetedReward",_param_name,inst)
        self.value_targetedReward = inst
        return inst

    def tiebreakerScore(self,_param_name:str = 'tiebreakerScore'):
        inst = None
        self._add_to_query("tiebreakerScore",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class DivisionChangeConfiguration(GraphQLObject):
    value_lastPromotedSo5Ranking:'So5Ranking' = None
    value_lastStableSo5Ranking:'So5Ranking' = None
    value_promotionRankBasisPoint = None
    value_relegationRankBasisPoint = None
    def lastPromotedSo5Ranking(self,_param_name:str = 'lastPromotedSo5Ranking') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("lastPromotedSo5Ranking",_param_name,inst)
        self.value_lastPromotedSo5Ranking = inst
        return inst

    def lastStableSo5Ranking(self,_param_name:str = 'lastStableSo5Ranking') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("lastStableSo5Ranking",_param_name,inst)
        self.value_lastStableSo5Ranking = inst
        return inst

    def promotionRankBasisPoint(self,_param_name:str = 'promotionRankBasisPoint'):
        inst = None
        self._add_to_query("promotionRankBasisPoint",_param_name)
        pass

    def relegationRankBasisPoint(self,_param_name:str = 'relegationRankBasisPoint'):
        inst = None
        self._add_to_query("relegationRankBasisPoint",_param_name)
        pass


class UserCardsCount(GraphQLObject):
    value_position = None
    value_seasonality = None
    value_totalCount = None
    value_usedCardsCount = None
    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def seasonality(self,_param_name:str = 'seasonality'):
        inst = None
        self._add_to_query("seasonality",_param_name)
        pass

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass

    def usedCardsCount(self,_param_name:str = 'usedCardsCount'):
        inst = None
        self._add_to_query("usedCardsCount",_param_name)
        pass


class EngineConfiguration(GraphQLObject):
    value_boost = None
    value_captain = None
    value_collection = None
    value_grade = None
    value_multiGameScoreAggregator = None
    value_positions = None
    value_scarcity = None
    value_season = None
    value_xpMultiplier = None
    def boost(self,_param_name:str = 'boost'):
        inst = None
        self._add_to_query("boost",_param_name)
        pass

    def captain(self,_param_name:str = 'captain'):
        inst = None
        self._add_to_query("captain",_param_name)
        pass

    def collection(self,_param_name:str = 'collection'):
        inst = None
        self._add_to_query("collection",_param_name)
        pass

    def grade(self,_param_name:str = 'grade'):
        inst = None
        self._add_to_query("grade",_param_name)
        pass

    def multiGameScoreAggregator(self,_param_name:str = 'multiGameScoreAggregator'):
        inst = None
        self._add_to_query("multiGameScoreAggregator",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def scarcity(self,_param_name:str = 'scarcity'):
        inst = None
        self._add_to_query("scarcity",_param_name)
        pass

    def season(self,_param_name:str = 'season'):
        inst = None
        self._add_to_query("season",_param_name)
        pass

    def xpMultiplier(self,_param_name:str = 'xpMultiplier'):
        inst = None
        self._add_to_query("xpMultiplier",_param_name)
        pass


class GameWithCardsPreview(GraphQLObject):
    value_cards:'list[AnyCardInterface]' = None
    value_game:'AnyGameInterface' = None
    value_totalCount = None
    def cards(self,_param_name:str = 'cards') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class GameWithCardsPreviewEdge(GraphQLObject):
    value_cursor = None
    value_node:'GameWithCardsPreview' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'GameWithCardsPreview':
        param_list = []
        inst = GameWithCardsPreview(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class GameWithCardsPreviewConnection(GraphQLObject):
    value_edges:'list[GameWithCardsPreviewEdge]' = None
    value_nodes:'list[GameWithCardsPreview]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'GameWithCardsPreviewEdge':
        param_list = []
        inst = GameWithCardsPreviewEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'GameWithCardsPreview':
        param_list = []
        inst = GameWithCardsPreview(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class ComposeTeamBenchObjectInterface(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_averageScore = None
    value_bonus = None
    value_eligiblePlayerGameScores:'list[PlayerGameScoreInterface]' = None
    value_id = None
    value_licensed = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_positions = None
    value_rarity = None
    value_videoUrl = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def averageScore(self,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def bonus(self,_param_name:str = 'bonus'):
        inst = None
        self._add_to_query("bonus",_param_name)
        pass

    def eligiblePlayerGameScores(self,so5LeaderboardSlug,_param_name:str = 'eligiblePlayerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("eligiblePlayerGameScores",_param_name,inst)
        self.value_eligiblePlayerGameScores = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def licensed(self,_param_name:str = 'licensed'):
        inst = None
        self._add_to_query("licensed",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def videoUrl(self,derivative,_param_name:str = 'videoUrl'):
        inst = None
        self._add_to_query("videoUrl",_param_name)
        pass


class ComposeTeamBenchObjectInterfaceEdge(GraphQLObject):
    value_cursor = None
    value_node:'ComposeTeamBenchObjectInterface' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'ComposeTeamBenchObjectInterface':
        param_list = []
        inst = ComposeTeamBenchObjectInterface(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class ComposeTeamBenchObjectInterfaceConnection(GraphQLObject):
    value_edges:'list[ComposeTeamBenchObjectInterfaceEdge]' = None
    value_nodes:'list[ComposeTeamBenchObjectInterface]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'ComposeTeamBenchObjectInterfaceEdge':
        param_list = []
        inst = ComposeTeamBenchObjectInterfaceEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'ComposeTeamBenchObjectInterface':
        param_list = []
        inst = ComposeTeamBenchObjectInterface(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class StarterPack(GraphQLObject):
    value_aasmState = None
    value_bestRankingPercentage = None
    value_cards:'list[Card]' = None
    value_competitionName = None
    value_endDate = None
    value_id = None
    value_price:'MonetaryAmount' = None
    value_priceInFiat:'Fiat' = None
    value_primaryOfferId = None
    value_slug = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def bestRankingPercentage(self,_param_name:str = 'bestRankingPercentage'):
        inst = None
        self._add_to_query("bestRankingPercentage",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def competitionName(self,_param_name:str = 'competitionName'):
        inst = None
        self._add_to_query("competitionName",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def price(self,_param_name:str = 'price') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("price",_param_name,inst)
        self.value_price = inst
        return inst

    def priceInFiat(self,_param_name:str = 'priceInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("priceInFiat",_param_name,inst)
        self.value_priceInFiat = inst
        return inst

    def primaryOfferId(self,_param_name:str = 'primaryOfferId'):
        inst = None
        self._add_to_query("primaryOfferId",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass


class So5UserGroupEdge(GraphQLObject):
    value_cursor = None
    value_node:'So5UserGroup' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'So5UserGroup':
        param_list = []
        inst = So5UserGroup(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class So5UserGroupConnection(GraphQLObject):
    value_edges:'list[So5UserGroupEdge]' = None
    value_nodes:'list[So5UserGroup]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'So5UserGroupEdge':
        param_list = []
        inst = So5UserGroupEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'So5UserGroup':
        param_list = []
        inst = So5UserGroup(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class UserGroupInterfaceEdge(GraphQLObject):
    value_cursor = None
    value_node:'UserGroupInterface' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'UserGroupInterface':
        param_list = []
        inst = UserGroupInterface(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class UserGroupInterfaceConnection(GraphQLObject):
    value_edges:'list[UserGroupInterfaceEdge]' = None
    value_nodes:'list[UserGroupInterface]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'UserGroupInterfaceEdge':
        param_list = []
        inst = UserGroupInterfaceEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'UserGroupInterface':
        param_list = []
        inst = UserGroupInterface(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class PlayerWithSupply(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_availableSupply = None
    value_player:'Player' = None
    value_slug = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def availableSupply(self,_param_name:str = 'availableSupply'):
        inst = None
        self._add_to_query("availableSupply",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass


class So5LeagueTrack(GraphQLObject):
    value_completed = None
    value_displayName = None
    value_entrySo5Leaderboard:'So5Leaderboard' = None
    value_maxManagerTeamsCount = None
    value_myManagerTeams:'list[ManagerTeam]' = None
    value_slug = None
    value_so5Leaderboards:'list[So5Leaderboard]' = None
    value_totalRewards:'RewardsOverview' = None
    value_unlockedManagerTeamsCount = None
    def completed(self,_param_name:str = 'completed'):
        inst = None
        self._add_to_query("completed",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def entrySo5Leaderboard(self,_param_name:str = 'entrySo5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("entrySo5Leaderboard",_param_name,inst)
        self.value_entrySo5Leaderboard = inst
        return inst

    def maxManagerTeamsCount(self,_param_name:str = 'maxManagerTeamsCount'):
        inst = None
        self._add_to_query("maxManagerTeamsCount",_param_name)
        pass

    def myManagerTeams(self,_param_name:str = 'myManagerTeams') -> 'ManagerTeam':
        param_list = []
        inst = ManagerTeam(self,param_list)
        self._add_to_query("myManagerTeams",_param_name,inst)
        self.value_myManagerTeams = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Leaderboards(self,_param_name:str = 'so5Leaderboards') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboards",_param_name,inst)
        self.value_so5Leaderboards = inst
        return inst

    def totalRewards(self,_param_name:str = 'totalRewards') -> 'RewardsOverview':
        param_list = []
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalRewards",_param_name,inst)
        self.value_totalRewards = inst
        return inst

    def unlockedManagerTeamsCount(self,_param_name:str = 'unlockedManagerTeamsCount'):
        inst = None
        self._add_to_query("unlockedManagerTeamsCount",_param_name)
        pass


class So5LeaderboardGroupInterface(GraphQLObject):
    value_bannerUrl = None
    value_color = None
    value_description = None
    value_displayName = None
    value_eligibleCardsCountByPosition:'list[UserCardsCount]' = None
    value_featured = None
    value_headerBackgroundUrl = None
    value_headerUrl = None
    value_iconUrl = None
    value_leagueSummary = None
    value_logoUrl = None
    value_mySo5LeaderboardContenders:'list[So5LeaderboardContender]' = None
    value_mySo5Leaderboards:'list[So5Leaderboard]' = None
    value_percentageOfGamesPlayed = None
    value_pictureUrl = None
    value_rewardedRarities = None
    value_seasonalities = None
    value_slug = None
    value_so5Fixture:'So5Fixture' = None
    value_so5LeaderboardContenders:'list[So5LeaderboardContender]' = None
    value_so5Leaderboards:'list[So5Leaderboard]' = None
    value_so5LeagueTrack:'So5LeagueTrack' = None
    value_so5LeagueTracks:'list[So5LeagueTrack]' = None
    value_so5LineupsCount = None
    value_totalRewards:'RewardsOverview' = None
    def bannerUrl(self,_param_name:str = 'bannerUrl'):
        inst = None
        self._add_to_query("bannerUrl",_param_name)
        pass

    def color(self,variant,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def eligibleCardsCountByPosition(self,_param_name:str = 'eligibleCardsCountByPosition') -> 'UserCardsCount':
        param_list = []
        inst = UserCardsCount(self,param_list)
        self._add_to_query("eligibleCardsCountByPosition",_param_name,inst)
        self.value_eligibleCardsCountByPosition = inst
        return inst

    def featured(self,_param_name:str = 'featured'):
        inst = None
        self._add_to_query("featured",_param_name)
        pass

    def headerBackgroundUrl(self,seasonality,_param_name:str = 'headerBackgroundUrl'):
        inst = None
        self._add_to_query("headerBackgroundUrl",_param_name)
        pass

    def headerUrl(self,_param_name:str = 'headerUrl'):
        inst = None
        self._add_to_query("headerUrl",_param_name)
        pass

    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def leagueSummary(self,_param_name:str = 'leagueSummary'):
        inst = None
        self._add_to_query("leagueSummary",_param_name)
        pass

    def logoUrl(self,_param_name:str = 'logoUrl'):
        inst = None
        self._add_to_query("logoUrl",_param_name)
        pass

    def mySo5LeaderboardContenders(self,sortType,_param_name:str = 'mySo5LeaderboardContenders') -> 'So5LeaderboardContender':
        param_list = []
        param_list.append(("sortType",sortType))
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("mySo5LeaderboardContenders",_param_name,inst)
        self.value_mySo5LeaderboardContenders = inst
        return inst

    def mySo5Leaderboards(self,_param_name:str = 'mySo5Leaderboards') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("mySo5Leaderboards",_param_name,inst)
        self.value_mySo5Leaderboards = inst
        return inst

    def percentageOfGamesPlayed(self,_param_name:str = 'percentageOfGamesPlayed'):
        inst = None
        self._add_to_query("percentageOfGamesPlayed",_param_name)
        pass

    def pictureUrl(self,seasonality,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def rewardedRarities(self,_param_name:str = 'rewardedRarities'):
        inst = None
        self._add_to_query("rewardedRarities",_param_name)
        pass

    def seasonalities(self,_param_name:str = 'seasonalities'):
        inst = None
        self._add_to_query("seasonalities",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5LeaderboardContenders(self,sortType,userSlug,_param_name:str = 'so5LeaderboardContenders') -> 'So5LeaderboardContender':
        param_list = []
        param_list.append(("sortType",sortType))
        param_list.append(("userSlug",userSlug))
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("so5LeaderboardContenders",_param_name,inst)
        self.value_so5LeaderboardContenders = inst
        return inst

    def so5Leaderboards(self,_param_name:str = 'so5Leaderboards') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboards",_param_name,inst)
        self.value_so5Leaderboards = inst
        return inst

    def so5LeagueTrack(self,slug,_param_name:str = 'so5LeagueTrack') -> 'So5LeagueTrack':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("so5LeagueTrack",_param_name,inst)
        self.value_so5LeagueTrack = inst
        return inst

    def so5LeagueTracks(self,_param_name:str = 'so5LeagueTracks') -> 'So5LeagueTrack':
        param_list = []
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("so5LeagueTracks",_param_name,inst)
        self.value_so5LeagueTracks = inst
        return inst

    def so5LineupsCount(self,_param_name:str = 'so5LineupsCount'):
        inst = None
        self._add_to_query("so5LineupsCount",_param_name)
        pass

    def totalRewards(self,_param_name:str = 'totalRewards') -> 'RewardsOverview':
        param_list = []
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalRewards",_param_name,inst)
        self.value_totalRewards = inst
        return inst


class OrderedPlayerGameScores(GraphQLObject):
    value_playerGameScores:'list[PlayerGameScoreInterface]' = None
    value_position = None
    def playerGameScores(self,_param_name:str = 'playerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScores",_param_name,inst)
        self.value_playerGameScores = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass


class PlayerGameScoreInterfaceEdge(GraphQLObject):
    value_cursor = None
    value_node:'PlayerGameScoreInterface' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'PlayerGameScoreInterface':
        param_list = []
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class PlayerGameScoreInterfaceConnection(GraphQLObject):
    value_edges:'list[PlayerGameScoreInterfaceEdge]' = None
    value_nodes:'list[PlayerGameScoreInterface]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'PlayerGameScoreInterfaceEdge':
        param_list = []
        inst = PlayerGameScoreInterfaceEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'PlayerGameScoreInterface':
        param_list = []
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class OrderedSo5Scores(GraphQLObject):
    value_position = None
    value_positionTyped = None
    value_so5Scores:'list[So5Score]' = None
    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positionTyped(self,_param_name:str = 'positionTyped'):
        inst = None
        self._add_to_query("positionTyped",_param_name)
        pass

    def so5Scores(self,_param_name:str = 'so5Scores') -> 'So5Score':
        param_list = []
        inst = So5Score(self,param_list)
        self._add_to_query("so5Scores",_param_name,inst)
        self.value_so5Scores = inst
        return inst


class ScoringMatrix(GraphQLObject):
    value_customMatrix = None
    value_id = None
    def customMatrix(self,_param_name:str = 'customMatrix'):
        inst = None
        self._add_to_query("customMatrix",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class PlayerRecommendation(GraphQLObject):
    value_anyCardWithLivePrimaryOffer:'AnyCardInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_cardWithLivePrimaryOffer = None
    value_id = None
    value_lowestPriceAnyCard:'AnyCardInterface' = None
    value_lowestPriceCard = None
    value_playerSlug = None
    value_ranking = None
    value_sport = None
    def anyCardWithLivePrimaryOffer(self,rarity,_param_name:str = 'anyCardWithLivePrimaryOffer') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCardWithLivePrimaryOffer",_param_name,inst)
        self.value_anyCardWithLivePrimaryOffer = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def cardWithLivePrimaryOffer(self,rarity,_param_name:str = 'cardWithLivePrimaryOffer'):
        inst = None
        self._add_to_query("cardWithLivePrimaryOffer",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lowestPriceAnyCard(self,rarity,seasonStartYear,teamSlug,_param_name:str = 'lowestPriceAnyCard') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        param_list.append(("seasonStartYear",seasonStartYear))
        param_list.append(("teamSlug",teamSlug))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("lowestPriceAnyCard",_param_name,inst)
        self.value_lowestPriceAnyCard = inst
        return inst

    def lowestPriceCard(self,rarity,_param_name:str = 'lowestPriceCard'):
        inst = None
        self._add_to_query("lowestPriceCard",_param_name)
        pass

    def playerSlug(self,_param_name:str = 'playerSlug'):
        inst = None
        self._add_to_query("playerSlug",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class So5League(GraphQLObject):
    value_bannerUrl = None
    value_category = None
    value_color = None
    value_competitions:'list[Competition]' = None
    value_description = None
    value_displayName = None
    value_eligibleCardsCountByPosition:'list[UserCardsCount]' = None
    value_featured = None
    value_games:'list[Game]' = None
    value_headerBackgroundUrl = None
    value_headerUrl = None
    value_iconUrl = None
    value_id = None
    value_leagueSummary = None
    value_logoUrl = None
    value_mustVerifyPhoneNumber = None
    value_mySo5Games:'list[Game]' = None
    value_mySo5LeaderboardContenders:'list[So5LeaderboardContender]' = None
    value_mySo5Leaderboards:'list[So5Leaderboard]' = None
    value_name = None
    value_orderedPlayerGameScores:'list[OrderedPlayerGameScores]' = None
    value_orderedPlayerGameScoresByPosition:'PlayerGameScoreInterfaceConnection' = None
    value_orderedSo5Scores:'list[OrderedSo5Scores]' = None
    value_orderedSo5ScoresByPosition:'So5ScoreConnection' = None
    value_percentageOfGamesPlayed = None
    value_pictureUrl = None
    value_restrictionGroup = None
    value_rewardPool:'list[PlayerWithSupply]' = None
    value_rewardPoolComputedAt = None
    value_rewardedRarities = None
    value_scoringMatrix:'ScoringMatrix' = None
    value_seasonalities = None
    value_shortDisplayName = None
    value_slug = None
    value_so5Fixture:'So5Fixture' = None
    value_so5LeaderboardContenders:'list[So5LeaderboardContender]' = None
    value_so5Leaderboards:'list[So5Leaderboard]' = None
    value_so5LeagueTrack:'So5LeagueTrack' = None
    value_so5LeagueTracks:'list[So5LeagueTrack]' = None
    value_so5LineupsCount = None
    value_squarePictureUrl = None
    value_stadiumUrl = None
    value_topRecommendations:'list[PlayerRecommendation]' = None
    value_totalRewards:'RewardsOverview' = None
    value_withTutorial = None
    def bannerUrl(self,_param_name:str = 'bannerUrl'):
        inst = None
        self._add_to_query("bannerUrl",_param_name)
        pass

    def category(self,_param_name:str = 'category'):
        inst = None
        self._add_to_query("category",_param_name)
        pass

    def color(self,variant,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def competitions(self,_param_name:str = 'competitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competitions",_param_name,inst)
        self.value_competitions = inst
        return inst

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def eligibleCardsCountByPosition(self,_param_name:str = 'eligibleCardsCountByPosition') -> 'UserCardsCount':
        param_list = []
        inst = UserCardsCount(self,param_list)
        self._add_to_query("eligibleCardsCountByPosition",_param_name,inst)
        self.value_eligibleCardsCountByPosition = inst
        return inst

    def featured(self,_param_name:str = 'featured'):
        inst = None
        self._add_to_query("featured",_param_name)
        pass

    def games(self,_param_name:str = 'games') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def headerBackgroundUrl(self,seasonality,_param_name:str = 'headerBackgroundUrl'):
        inst = None
        self._add_to_query("headerBackgroundUrl",_param_name)
        pass

    def headerUrl(self,_param_name:str = 'headerUrl'):
        inst = None
        self._add_to_query("headerUrl",_param_name)
        pass

    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leagueSummary(self,_param_name:str = 'leagueSummary'):
        inst = None
        self._add_to_query("leagueSummary",_param_name)
        pass

    def logoUrl(self,_param_name:str = 'logoUrl'):
        inst = None
        self._add_to_query("logoUrl",_param_name)
        pass

    def mustVerifyPhoneNumber(self,_param_name:str = 'mustVerifyPhoneNumber'):
        inst = None
        self._add_to_query("mustVerifyPhoneNumber",_param_name)
        pass

    def mySo5Games(self,_param_name:str = 'mySo5Games') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("mySo5Games",_param_name,inst)
        self.value_mySo5Games = inst
        return inst

    def mySo5LeaderboardContenders(self,sortType,_param_name:str = 'mySo5LeaderboardContenders') -> 'So5LeaderboardContender':
        param_list = []
        param_list.append(("sortType",sortType))
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("mySo5LeaderboardContenders",_param_name,inst)
        self.value_mySo5LeaderboardContenders = inst
        return inst

    def mySo5Leaderboards(self,_param_name:str = 'mySo5Leaderboards') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("mySo5Leaderboards",_param_name,inst)
        self.value_mySo5Leaderboards = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def orderedPlayerGameScores(self,first,_param_name:str = 'orderedPlayerGameScores') -> 'OrderedPlayerGameScores':
        param_list = []
        param_list.append(("first",first))
        inst = OrderedPlayerGameScores(self,param_list)
        self._add_to_query("orderedPlayerGameScores",_param_name,inst)
        self.value_orderedPlayerGameScores = inst
        return inst

    def orderedPlayerGameScoresByPosition(self,after,before,first,last,minScore,position,sellable,_param_name:str = 'orderedPlayerGameScoresByPosition') -> 'PlayerGameScoreInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("minScore",minScore))
        param_list.append(("position",position))
        param_list.append(("sellable",sellable))
        inst = PlayerGameScoreInterfaceConnection(self,param_list)
        self._add_to_query("orderedPlayerGameScoresByPosition",_param_name,inst)
        self.value_orderedPlayerGameScoresByPosition = inst
        return inst

    def orderedSo5Scores(self,first,_param_name:str = 'orderedSo5Scores') -> 'OrderedSo5Scores':
        param_list = []
        param_list.append(("first",first))
        inst = OrderedSo5Scores(self,param_list)
        self._add_to_query("orderedSo5Scores",_param_name,inst)
        self.value_orderedSo5Scores = inst
        return inst

    def orderedSo5ScoresByPosition(self,after,before,first,last,minScore,position,sellable,_param_name:str = 'orderedSo5ScoresByPosition') -> 'So5ScoreConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("minScore",minScore))
        param_list.append(("position",position))
        param_list.append(("sellable",sellable))
        inst = So5ScoreConnection(self,param_list)
        self._add_to_query("orderedSo5ScoresByPosition",_param_name,inst)
        self.value_orderedSo5ScoresByPosition = inst
        return inst

    def percentageOfGamesPlayed(self,_param_name:str = 'percentageOfGamesPlayed'):
        inst = None
        self._add_to_query("percentageOfGamesPlayed",_param_name)
        pass

    def pictureUrl(self,seasonality,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def restrictionGroup(self,_param_name:str = 'restrictionGroup'):
        inst = None
        self._add_to_query("restrictionGroup",_param_name)
        pass

    def rewardPool(self,quality,rarity,_param_name:str = 'rewardPool') -> 'PlayerWithSupply':
        param_list = []
        param_list.append(("quality",quality))
        param_list.append(("rarity",rarity))
        inst = PlayerWithSupply(self,param_list)
        self._add_to_query("rewardPool",_param_name,inst)
        self.value_rewardPool = inst
        return inst

    def rewardPoolComputedAt(self,_param_name:str = 'rewardPoolComputedAt'):
        inst = None
        self._add_to_query("rewardPoolComputedAt",_param_name)
        pass

    def rewardedRarities(self,_param_name:str = 'rewardedRarities'):
        inst = None
        self._add_to_query("rewardedRarities",_param_name)
        pass

    def scoringMatrix(self,_param_name:str = 'scoringMatrix') -> 'ScoringMatrix':
        param_list = []
        inst = ScoringMatrix(self,param_list)
        self._add_to_query("scoringMatrix",_param_name,inst)
        self.value_scoringMatrix = inst
        return inst

    def seasonalities(self,_param_name:str = 'seasonalities'):
        inst = None
        self._add_to_query("seasonalities",_param_name)
        pass

    def shortDisplayName(self,_param_name:str = 'shortDisplayName'):
        inst = None
        self._add_to_query("shortDisplayName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5LeaderboardContenders(self,sortType,userSlug,_param_name:str = 'so5LeaderboardContenders') -> 'So5LeaderboardContender':
        param_list = []
        param_list.append(("sortType",sortType))
        param_list.append(("userSlug",userSlug))
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("so5LeaderboardContenders",_param_name,inst)
        self.value_so5LeaderboardContenders = inst
        return inst

    def so5Leaderboards(self,_param_name:str = 'so5Leaderboards') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboards",_param_name,inst)
        self.value_so5Leaderboards = inst
        return inst

    def so5LeagueTrack(self,slug,_param_name:str = 'so5LeagueTrack') -> 'So5LeagueTrack':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("so5LeagueTrack",_param_name,inst)
        self.value_so5LeagueTrack = inst
        return inst

    def so5LeagueTracks(self,_param_name:str = 'so5LeagueTracks') -> 'So5LeagueTrack':
        param_list = []
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("so5LeagueTracks",_param_name,inst)
        self.value_so5LeagueTracks = inst
        return inst

    def so5LineupsCount(self,_param_name:str = 'so5LineupsCount'):
        inst = None
        self._add_to_query("so5LineupsCount",_param_name)
        pass

    def squarePictureUrl(self,_param_name:str = 'squarePictureUrl'):
        inst = None
        self._add_to_query("squarePictureUrl",_param_name)
        pass

    def stadiumUrl(self,_param_name:str = 'stadiumUrl'):
        inst = None
        self._add_to_query("stadiumUrl",_param_name)
        pass

    def topRecommendations(self,positions,recommendationEngine,sport,_param_name:str = 'topRecommendations') -> 'PlayerRecommendation':
        param_list = []
        param_list.append(("positions",positions))
        param_list.append(("recommendationEngine",recommendationEngine))
        param_list.append(("sport",sport))
        inst = PlayerRecommendation(self,param_list)
        self._add_to_query("topRecommendations",_param_name,inst)
        self.value_topRecommendations = inst
        return inst

    def totalRewards(self,_param_name:str = 'totalRewards') -> 'RewardsOverview':
        param_list = []
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalRewards",_param_name,inst)
        self.value_totalRewards = inst
        return inst

    def withTutorial(self,_param_name:str = 'withTutorial'):
        inst = None
        self._add_to_query("withTutorial",_param_name)
        pass


class So5LineupEdge(GraphQLObject):
    value_cursor = None
    value_node:'So5Lineup' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class So5LineupConnection(GraphQLObject):
    value_edges:'list[So5LineupEdge]' = None
    value_nodes:'list[So5Lineup]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'So5LineupEdge':
        param_list = []
        inst = So5LineupEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class So5RankingsPaginated(GraphQLObject):
    value_currentPage = None
    value_id = None
    value_nodes:'list[So5Ranking]' = None
    value_pages = None
    value_so5Rankings:'list[So5Ranking]' = None
    value_totalCount = None
    def currentPage(self,_param_name:str = 'currentPage'):
        inst = None
        self._add_to_query("currentPage",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def nodes(self,_param_name:str = 'nodes') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pages(self,_param_name:str = 'pages'):
        inst = None
        self._add_to_query("pages",_param_name)
        pass

    def so5Rankings(self,_param_name:str = 'so5Rankings') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("so5Rankings",_param_name,inst)
        self.value_so5Rankings = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class So5Leaderboard(GraphQLObject):
    value_algoliaFilters = None
    value_bench:'ComposeTeamBenchObjectConnection' = None
    value_canCompose:'Validity' = None
    value_challenges:'list[Challenge]' = None
    value_commonDraftCampaign:'CommonDraftCampaign' = None
    value_commonDraftCampaigns:'list[CommonDraftCampaign]' = None
    value_composeBuy = None
    value_composeDisclaimer = None
    value_cutOffDate = None
    value_defaultAverageScore = None
    value_description = None
    value_displayName = None
    value_displayedRules:'So5Rules' = None
    value_division = None
    value_divisionChangeConfiguration:'DivisionChangeConfiguration' = None
    value_divisionIconUrl = None
    value_eligibleCardsCountByPosition:'list[UserCardsCount]' = None
    value_eligibleToPreviousLineupLoader = None
    value_enabled = None
    value_endDate = None
    value_engineConfiguration:'EngineConfiguration' = None
    value_gameWeek = None
    value_gamesWithMyCardsPreview:'GameWithCardsPreviewConnection' = None
    value_gamesWithMyPlayerGameScoresPreview:'GameWithPlayerGameScoresPreviewConnection' = None
    value_hasFeaturedStarterPacks = None
    value_iconUrl = None
    value_id = None
    value_mainRarityType = None
    value_mustVerifyPhoneNumber = None
    value_myBench:'ComposeTeamBenchObjectInterfaceConnection' = None
    value_myComposeTeamBenchObjects:'list[ComposeTeamBenchObjectInterface]' = None
    value_myEligibleCards:'CardConnection' = None
    value_myFeaturedStarterPacks:'list[StarterPack]' = None
    value_myManagerTeams:'list[ManagerTeam]' = None
    value_mySo5LeaderboardContenders:'list[So5LeaderboardContender]' = None
    value_mySo5Lineups:'list[So5Lineup]' = None
    value_mySo5Rankings:'list[So5Ranking]' = None
    value_mySo5UserGroups:'So5UserGroupConnection' = None
    value_myUserGroups:'UserGroupInterfaceConnection' = None
    value_played = None
    value_powerCap = None
    value_projectedLineupsReadyAt = None
    value_rarityType = None
    value_recommendableSlug = None
    value_requiresManagerTeam = None
    value_rewardPool:'list[PlayerWithSupply]' = None
    value_rewardedLineupsCount = None
    value_rewardsConfig:'LeaderboardRewardsConfig' = None
    value_rules:'So5Rules' = None
    value_seasonality = None
    value_seasonalityName = None
    value_slug = None
    value_so5Fixture:'So5Fixture' = None
    value_so5LeaderboardGroup:'So5LeaderboardGroupInterface' = None
    value_so5LeaderboardType = None
    value_so5League:'So5League' = None
    value_so5LeagueTrack:'So5LeagueTrack' = None
    value_so5Lineup:'So5Lineup' = None
    value_so5LineupsCount = None
    value_so5LineupsPaginated:'So5LineupConnection' = None
    value_so5Rankings:'So5RankingConnection' = None
    value_so5RankingsPaginated:'So5RankingsPaginated' = None
    value_so5RankingsPreview:'list[So5Ranking]' = None
    value_so5Rewards:'So5RewardConnection' = None
    value_so5TournamentType:'So5Tournament' = None
    value_stadiumUrl = None
    value_startDate = None
    value_svgLogoUrl = None
    value_tasks = None
    value_teamsCap = None
    value_title = None
    value_totalRewards:'RewardsOverview' = None
    value_tournamentType = None
    value_trainingCenter = None
    value_universalSo5UserGroups:'list[So5UserGroup]' = None
    value_universalUserGroups:'list[UserGroupInterface]' = None
    def algoliaFilters(self,_param_name:str = 'algoliaFilters'):
        inst = None
        self._add_to_query("algoliaFilters",_param_name)
        pass

    def bench(self,after,before,deckId,first,grades:'RangeInput',inSeasonEligible,includeNoGame,includeUsed,last,lastFifteenSo5AverageScore:'RangeInput',positions,query,rarities,selectedObjectIds,so5LineupId,sortType:'EligibleCardsSort',_param_name:str = 'bench') -> 'ComposeTeamBenchObjectConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("deckId",deckId))
        param_list.append(("first",first))
        param_list.append(("grades",grades))
        param_list.append(("inSeasonEligible",inSeasonEligible))
        param_list.append(("includeNoGame",includeNoGame))
        param_list.append(("includeUsed",includeUsed))
        param_list.append(("last",last))
        param_list.append(("lastFifteenSo5AverageScore",lastFifteenSo5AverageScore))
        param_list.append(("positions",positions))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("selectedObjectIds",selectedObjectIds))
        param_list.append(("so5LineupId",so5LineupId))
        param_list.append(("sortType",sortType))
        inst = ComposeTeamBenchObjectConnection(self,param_list)
        self._add_to_query("bench",_param_name,inst)
        self.value_bench = inst
        return inst

    def canCompose(self,_param_name:str = 'canCompose') -> 'Validity':
        param_list = []
        inst = Validity(self,param_list)
        self._add_to_query("canCompose",_param_name,inst)
        self.value_canCompose = inst
        return inst

    def challenges(self,_param_name:str = 'challenges') -> 'Challenge':
        param_list = []
        inst = Challenge(self,param_list)
        self._add_to_query("challenges",_param_name,inst)
        self.value_challenges = inst
        return inst

    def commonDraftCampaign(self,_param_name:str = 'commonDraftCampaign') -> 'CommonDraftCampaign':
        param_list = []
        inst = CommonDraftCampaign(self,param_list)
        self._add_to_query("commonDraftCampaign",_param_name,inst)
        self.value_commonDraftCampaign = inst
        return inst

    def commonDraftCampaigns(self,_param_name:str = 'commonDraftCampaigns') -> 'CommonDraftCampaign':
        param_list = []
        inst = CommonDraftCampaign(self,param_list)
        self._add_to_query("commonDraftCampaigns",_param_name,inst)
        self.value_commonDraftCampaigns = inst
        return inst

    def composeBuy(self,_param_name:str = 'composeBuy'):
        inst = None
        self._add_to_query("composeBuy",_param_name)
        pass

    def composeDisclaimer(self,_param_name:str = 'composeDisclaimer'):
        inst = None
        self._add_to_query("composeDisclaimer",_param_name)
        pass

    def cutOffDate(self,_param_name:str = 'cutOffDate'):
        inst = None
        self._add_to_query("cutOffDate",_param_name)
        pass

    def defaultAverageScore(self,_param_name:str = 'defaultAverageScore'):
        inst = None
        self._add_to_query("defaultAverageScore",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def displayName(self,short,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def displayedRules(self,_param_name:str = 'displayedRules') -> 'So5Rules':
        param_list = []
        inst = So5Rules(self,param_list)
        self._add_to_query("displayedRules",_param_name,inst)
        self.value_displayedRules = inst
        return inst

    def division(self,_param_name:str = 'division'):
        inst = None
        self._add_to_query("division",_param_name)
        pass

    def divisionChangeConfiguration(self,_param_name:str = 'divisionChangeConfiguration') -> 'DivisionChangeConfiguration':
        param_list = []
        inst = DivisionChangeConfiguration(self,param_list)
        self._add_to_query("divisionChangeConfiguration",_param_name,inst)
        self.value_divisionChangeConfiguration = inst
        return inst

    def divisionIconUrl(self,_param_name:str = 'divisionIconUrl'):
        inst = None
        self._add_to_query("divisionIconUrl",_param_name)
        pass

    def eligibleCardsCountByPosition(self,_param_name:str = 'eligibleCardsCountByPosition') -> 'UserCardsCount':
        param_list = []
        inst = UserCardsCount(self,param_list)
        self._add_to_query("eligibleCardsCountByPosition",_param_name,inst)
        self.value_eligibleCardsCountByPosition = inst
        return inst

    def eligibleToPreviousLineupLoader(self,_param_name:str = 'eligibleToPreviousLineupLoader'):
        inst = None
        self._add_to_query("eligibleToPreviousLineupLoader",_param_name)
        pass

    def enabled(self,_param_name:str = 'enabled'):
        inst = None
        self._add_to_query("enabled",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def engineConfiguration(self,_param_name:str = 'engineConfiguration') -> 'EngineConfiguration':
        param_list = []
        inst = EngineConfiguration(self,param_list)
        self._add_to_query("engineConfiguration",_param_name,inst)
        self.value_engineConfiguration = inst
        return inst

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass

    def gamesWithMyCardsPreview(self,after,before,first,last,sortBy,withCards,_param_name:str = 'gamesWithMyCardsPreview') -> 'GameWithCardsPreviewConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortBy",sortBy))
        param_list.append(("withCards",withCards))
        inst = GameWithCardsPreviewConnection(self,param_list)
        self._add_to_query("gamesWithMyCardsPreview",_param_name,inst)
        self.value_gamesWithMyCardsPreview = inst
        return inst

    def gamesWithMyPlayerGameScoresPreview(self,after,before,first,fromDate,last,toDate,_param_name:str = 'gamesWithMyPlayerGameScoresPreview') -> 'GameWithPlayerGameScoresPreviewConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("fromDate",fromDate))
        param_list.append(("last",last))
        param_list.append(("toDate",toDate))
        inst = GameWithPlayerGameScoresPreviewConnection(self,param_list)
        self._add_to_query("gamesWithMyPlayerGameScoresPreview",_param_name,inst)
        self.value_gamesWithMyPlayerGameScoresPreview = inst
        return inst

    def hasFeaturedStarterPacks(self,_param_name:str = 'hasFeaturedStarterPacks'):
        inst = None
        self._add_to_query("hasFeaturedStarterPacks",_param_name)
        pass

    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mainRarityType(self,_param_name:str = 'mainRarityType'):
        inst = None
        self._add_to_query("mainRarityType",_param_name)
        pass

    def mustVerifyPhoneNumber(self,_param_name:str = 'mustVerifyPhoneNumber'):
        inst = None
        self._add_to_query("mustVerifyPhoneNumber",_param_name)
        pass

    def myBench(self,after,before,deckId,first,grades:'RangeInput',inSeasonEligible,includeNoGame,includeUsed,last,lastFifteenSo5AverageScore:'RangeInput',positions,query,rarities,selectedObjectIds,so5LineupId,sortType:'EligibleCardsSort',_param_name:str = 'myBench') -> 'ComposeTeamBenchObjectInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("deckId",deckId))
        param_list.append(("first",first))
        param_list.append(("grades",grades))
        param_list.append(("inSeasonEligible",inSeasonEligible))
        param_list.append(("includeNoGame",includeNoGame))
        param_list.append(("includeUsed",includeUsed))
        param_list.append(("last",last))
        param_list.append(("lastFifteenSo5AverageScore",lastFifteenSo5AverageScore))
        param_list.append(("positions",positions))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("selectedObjectIds",selectedObjectIds))
        param_list.append(("so5LineupId",so5LineupId))
        param_list.append(("sortType",sortType))
        inst = ComposeTeamBenchObjectInterfaceConnection(self,param_list)
        self._add_to_query("myBench",_param_name,inst)
        self.value_myBench = inst
        return inst

    def myComposeTeamBenchObjects(self,ids,_param_name:str = 'myComposeTeamBenchObjects') -> 'ComposeTeamBenchObjectInterface':
        param_list = []
        param_list.append(("ids",ids))
        inst = ComposeTeamBenchObjectInterface(self,param_list)
        self._add_to_query("myComposeTeamBenchObjects",_param_name,inst)
        self.value_myComposeTeamBenchObjects = inst
        return inst

    def myEligibleCards(self,after,before,deckId,first,grades:'RangeInput',includeNoGame,includeUsed,last,lastFifteenSo5AverageScore:'RangeInput',position,positions,query,rarities,selectedCards,so5LineupId,sortType:'EligibleCardsSort',_param_name:str = 'myEligibleCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("deckId",deckId))
        param_list.append(("first",first))
        param_list.append(("grades",grades))
        param_list.append(("includeNoGame",includeNoGame))
        param_list.append(("includeUsed",includeUsed))
        param_list.append(("last",last))
        param_list.append(("lastFifteenSo5AverageScore",lastFifteenSo5AverageScore))
        param_list.append(("position",position))
        param_list.append(("positions",positions))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("selectedCards",selectedCards))
        param_list.append(("so5LineupId",so5LineupId))
        param_list.append(("sortType",sortType))
        inst = CardConnection(self,param_list)
        self._add_to_query("myEligibleCards",_param_name,inst)
        self.value_myEligibleCards = inst
        return inst

    def myFeaturedStarterPacks(self,_param_name:str = 'myFeaturedStarterPacks') -> 'StarterPack':
        param_list = []
        inst = StarterPack(self,param_list)
        self._add_to_query("myFeaturedStarterPacks",_param_name,inst)
        self.value_myFeaturedStarterPacks = inst
        return inst

    def myManagerTeams(self,_param_name:str = 'myManagerTeams') -> 'ManagerTeam':
        param_list = []
        inst = ManagerTeam(self,param_list)
        self._add_to_query("myManagerTeams",_param_name,inst)
        self.value_myManagerTeams = inst
        return inst

    def mySo5LeaderboardContenders(self,includeHiddenManagerTeam,_param_name:str = 'mySo5LeaderboardContenders') -> 'So5LeaderboardContender':
        param_list = []
        param_list.append(("includeHiddenManagerTeam",includeHiddenManagerTeam))
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("mySo5LeaderboardContenders",_param_name,inst)
        self.value_mySo5LeaderboardContenders = inst
        return inst

    def mySo5Lineups(self,_param_name:str = 'mySo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("mySo5Lineups",_param_name,inst)
        self.value_mySo5Lineups = inst
        return inst

    def mySo5Rankings(self,so5UserGroupSlug,_param_name:str = 'mySo5Rankings') -> 'So5Ranking':
        param_list = []
        param_list.append(("so5UserGroupSlug",so5UserGroupSlug))
        inst = So5Ranking(self,param_list)
        self._add_to_query("mySo5Rankings",_param_name,inst)
        self.value_mySo5Rankings = inst
        return inst

    def mySo5UserGroups(self,after,before,first,last,statuses,_param_name:str = 'mySo5UserGroups') -> 'So5UserGroupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("statuses",statuses))
        inst = So5UserGroupConnection(self,param_list)
        self._add_to_query("mySo5UserGroups",_param_name,inst)
        self.value_mySo5UserGroups = inst
        return inst

    def myUserGroups(self,after,before,first,last,statuses,_param_name:str = 'myUserGroups') -> 'UserGroupInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("statuses",statuses))
        inst = UserGroupInterfaceConnection(self,param_list)
        self._add_to_query("myUserGroups",_param_name,inst)
        self.value_myUserGroups = inst
        return inst

    def played(self,_param_name:str = 'played'):
        inst = None
        self._add_to_query("played",_param_name)
        pass

    def powerCap(self,_param_name:str = 'powerCap'):
        inst = None
        self._add_to_query("powerCap",_param_name)
        pass

    def projectedLineupsReadyAt(self,_param_name:str = 'projectedLineupsReadyAt'):
        inst = None
        self._add_to_query("projectedLineupsReadyAt",_param_name)
        pass

    def rarityType(self,_param_name:str = 'rarityType'):
        inst = None
        self._add_to_query("rarityType",_param_name)
        pass

    def recommendableSlug(self,_param_name:str = 'recommendableSlug'):
        inst = None
        self._add_to_query("recommendableSlug",_param_name)
        pass

    def requiresManagerTeam(self,_param_name:str = 'requiresManagerTeam'):
        inst = None
        self._add_to_query("requiresManagerTeam",_param_name)
        pass

    def rewardPool(self,first,quality,_param_name:str = 'rewardPool') -> 'PlayerWithSupply':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("quality",quality))
        inst = PlayerWithSupply(self,param_list)
        self._add_to_query("rewardPool",_param_name,inst)
        self.value_rewardPool = inst
        return inst

    def rewardedLineupsCount(self,_param_name:str = 'rewardedLineupsCount'):
        inst = None
        self._add_to_query("rewardedLineupsCount",_param_name)
        pass

    def rewardsConfig(self,_param_name:str = 'rewardsConfig') -> 'LeaderboardRewardsConfig':
        param_list = []
        inst = LeaderboardRewardsConfig(self,param_list)
        self._add_to_query("rewardsConfig",_param_name,inst)
        self.value_rewardsConfig = inst
        return inst

    def rules(self,_param_name:str = 'rules') -> 'So5Rules':
        param_list = []
        inst = So5Rules(self,param_list)
        self._add_to_query("rules",_param_name,inst)
        self.value_rules = inst
        return inst

    def seasonality(self,_param_name:str = 'seasonality'):
        inst = None
        self._add_to_query("seasonality",_param_name)
        pass

    def seasonalityName(self,_param_name:str = 'seasonalityName'):
        inst = None
        self._add_to_query("seasonalityName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5LeaderboardGroup(self,_param_name:str = 'so5LeaderboardGroup') -> 'So5LeaderboardGroupInterface':
        param_list = []
        inst = So5LeaderboardGroupInterface(self,param_list)
        self._add_to_query("so5LeaderboardGroup",_param_name,inst)
        self.value_so5LeaderboardGroup = inst
        return inst

    def so5LeaderboardType(self,_param_name:str = 'so5LeaderboardType'):
        inst = None
        self._add_to_query("so5LeaderboardType",_param_name)
        pass

    def so5League(self,_param_name:str = 'so5League') -> 'So5League':
        param_list = []
        inst = So5League(self,param_list)
        self._add_to_query("so5League",_param_name,inst)
        self.value_so5League = inst
        return inst

    def so5LeagueTrack(self,_param_name:str = 'so5LeagueTrack') -> 'So5LeagueTrack':
        param_list = []
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("so5LeagueTrack",_param_name,inst)
        self.value_so5LeagueTrack = inst
        return inst

    def so5Lineup(self,id,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        param_list.append(("id",id))
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst

    def so5LineupsCount(self,_param_name:str = 'so5LineupsCount'):
        inst = None
        self._add_to_query("so5LineupsCount",_param_name)
        pass

    def so5LineupsPaginated(self,after,before,first,last,userSlug,_param_name:str = 'so5LineupsPaginated') -> 'So5LineupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("userSlug",userSlug))
        inst = So5LineupConnection(self,param_list)
        self._add_to_query("so5LineupsPaginated",_param_name,inst)
        self.value_so5LineupsPaginated = inst
        return inst

    def so5Rankings(self,after,before,first,last,onlyFollowed,_param_name:str = 'so5Rankings') -> 'So5RankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("onlyFollowed",onlyFollowed))
        inst = So5RankingConnection(self,param_list)
        self._add_to_query("so5Rankings",_param_name,inst)
        self.value_so5Rankings = inst
        return inst

    def so5RankingsPaginated(self,onlyFollowed,page,pageSize,so5UserGroupSlug,_param_name:str = 'so5RankingsPaginated') -> 'So5RankingsPaginated':
        param_list = []
        param_list.append(("onlyFollowed",onlyFollowed))
        param_list.append(("page",page))
        param_list.append(("pageSize",pageSize))
        param_list.append(("so5UserGroupSlug",so5UserGroupSlug))
        inst = So5RankingsPaginated(self,param_list)
        self._add_to_query("so5RankingsPaginated",_param_name,inst)
        self.value_so5RankingsPaginated = inst
        return inst

    def so5RankingsPreview(self,size,_param_name:str = 'so5RankingsPreview') -> 'So5Ranking':
        param_list = []
        param_list.append(("size",size))
        inst = So5Ranking(self,param_list)
        self._add_to_query("so5RankingsPreview",_param_name,inst)
        self.value_so5RankingsPreview = inst
        return inst

    def so5Rewards(self,after,before,first,last,_param_name:str = 'so5Rewards') -> 'So5RewardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = So5RewardConnection(self,param_list)
        self._add_to_query("so5Rewards",_param_name,inst)
        self.value_so5Rewards = inst
        return inst

    def so5TournamentType(self,_param_name:str = 'so5TournamentType') -> 'So5Tournament':
        param_list = []
        inst = So5Tournament(self,param_list)
        self._add_to_query("so5TournamentType",_param_name,inst)
        self.value_so5TournamentType = inst
        return inst

    def stadiumUrl(self,_param_name:str = 'stadiumUrl'):
        inst = None
        self._add_to_query("stadiumUrl",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def svgLogoUrl(self,_param_name:str = 'svgLogoUrl'):
        inst = None
        self._add_to_query("svgLogoUrl",_param_name)
        pass

    def tasks(self,_param_name:str = 'tasks'):
        inst = None
        self._add_to_query("tasks",_param_name)
        pass

    def teamsCap(self,_param_name:str = 'teamsCap'):
        inst = None
        self._add_to_query("teamsCap",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def totalRewards(self,_param_name:str = 'totalRewards') -> 'RewardsOverview':
        param_list = []
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalRewards",_param_name,inst)
        self.value_totalRewards = inst
        return inst

    def tournamentType(self,_param_name:str = 'tournamentType'):
        inst = None
        self._add_to_query("tournamentType",_param_name)
        pass

    def trainingCenter(self,_param_name:str = 'trainingCenter'):
        inst = None
        self._add_to_query("trainingCenter",_param_name)
        pass

    def universalSo5UserGroups(self,_param_name:str = 'universalSo5UserGroups') -> 'So5UserGroup':
        param_list = []
        inst = So5UserGroup(self,param_list)
        self._add_to_query("universalSo5UserGroups",_param_name,inst)
        self.value_universalSo5UserGroups = inst
        return inst

    def universalUserGroups(self,_param_name:str = 'universalUserGroups') -> 'UserGroupInterface':
        param_list = []
        inst = UserGroupInterface(self,param_list)
        self._add_to_query("universalUserGroups",_param_name,inst)
        self.value_universalUserGroups = inst
        return inst


class SocialPictureDerivative(GraphQLObject):
    value_post = None
    value_square = None
    value_story = None
    def post(self,_param_name:str = 'post'):
        inst = None
        self._add_to_query("post",_param_name)
        pass

    def square(self,_param_name:str = 'square'):
        inst = None
        self._add_to_query("square",_param_name)
        pass

    def story(self,_param_name:str = 'story'):
        inst = None
        self._add_to_query("story",_param_name)
        pass


class So5Lineup(GraphQLObject):
    value_anyEarliestGame:'AnyGameInterface' = None
    value_cancelledAt = None
    value_confirmable = None
    value_draft = None
    value_earliestGame:'Game' = None
    value_hasLiveGames = None
    value_id = None
    value_managerTeam:'ManagerTeam' = None
    value_missingCaptain = None
    value_name = None
    value_so5Appearances:'list[So5Appearance]' = None
    value_so5Fixture:'So5Fixture' = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5LeaderboardContender:'So5LeaderboardContender' = None
    value_so5Rankings:'list[So5Ranking]' = None
    value_socialPictureFingerprint = None
    value_socialPictureUrls:'SocialPictureDerivative' = None
    value_user:'User' = None
    def anyEarliestGame(self,_param_name:str = 'anyEarliestGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyEarliestGame",_param_name,inst)
        self.value_anyEarliestGame = inst
        return inst

    def cancelledAt(self,_param_name:str = 'cancelledAt'):
        inst = None
        self._add_to_query("cancelledAt",_param_name)
        pass

    def confirmable(self,_param_name:str = 'confirmable'):
        inst = None
        self._add_to_query("confirmable",_param_name)
        pass

    def draft(self,_param_name:str = 'draft'):
        inst = None
        self._add_to_query("draft",_param_name)
        pass

    def earliestGame(self,_param_name:str = 'earliestGame') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("earliestGame",_param_name,inst)
        self.value_earliestGame = inst
        return inst

    def hasLiveGames(self,_param_name:str = 'hasLiveGames'):
        inst = None
        self._add_to_query("hasLiveGames",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def managerTeam(self,_param_name:str = 'managerTeam') -> 'ManagerTeam':
        param_list = []
        inst = ManagerTeam(self,param_list)
        self._add_to_query("managerTeam",_param_name,inst)
        self.value_managerTeam = inst
        return inst

    def missingCaptain(self,_param_name:str = 'missingCaptain'):
        inst = None
        self._add_to_query("missingCaptain",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def so5Appearances(self,_param_name:str = 'so5Appearances') -> 'So5Appearance':
        param_list = []
        inst = So5Appearance(self,param_list)
        self._add_to_query("so5Appearances",_param_name,inst)
        self.value_so5Appearances = inst
        return inst

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5Leaderboard(self,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5LeaderboardContender(self,_param_name:str = 'so5LeaderboardContender') -> 'So5LeaderboardContender':
        param_list = []
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("so5LeaderboardContender",_param_name,inst)
        self.value_so5LeaderboardContender = inst
        return inst

    def so5Rankings(self,_param_name:str = 'so5Rankings') -> 'So5Ranking':
        param_list = []
        inst = So5Ranking(self,param_list)
        self._add_to_query("so5Rankings",_param_name,inst)
        self.value_so5Rankings = inst
        return inst

    def socialPictureFingerprint(self,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def socialPictureUrls(self,_param_name:str = 'socialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("socialPictureUrls",_param_name,inst)
        self.value_socialPictureUrls = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class ManagerTeam(GraphQLObject):
    value_activeDivision = None
    value_activeDivisionIconUrl = None
    value_divisionChangingSo5Lineup:'So5Lineup' = None
    value_hidden = None
    value_id = None
    value_lastPreviousSo5Lineup:'So5Lineup' = None
    value_mainRarityType = None
    value_mySo5Lineup:'So5Lineup' = None
    value_name = None
    value_pastSo5LeaderboardContenders:'So5LeaderboardContenderConnection' = None
    value_rarityType = None
    value_seasonality = None
    value_seasonalityName = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5LeaderboardType = None
    value_so5TournamentType:'So5Tournament' = None
    value_svgLogoUrl = None
    value_tournamentType = None
    value_user:'User' = None
    def activeDivision(self,_param_name:str = 'activeDivision'):
        inst = None
        self._add_to_query("activeDivision",_param_name)
        pass

    def activeDivisionIconUrl(self,_param_name:str = 'activeDivisionIconUrl'):
        inst = None
        self._add_to_query("activeDivisionIconUrl",_param_name)
        pass

    def divisionChangingSo5Lineup(self,_param_name:str = 'divisionChangingSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("divisionChangingSo5Lineup",_param_name,inst)
        self.value_divisionChangingSo5Lineup = inst
        return inst

    def hidden(self,_param_name:str = 'hidden'):
        inst = None
        self._add_to_query("hidden",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastPreviousSo5Lineup(self,_param_name:str = 'lastPreviousSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("lastPreviousSo5Lineup",_param_name,inst)
        self.value_lastPreviousSo5Lineup = inst
        return inst

    def mainRarityType(self,_param_name:str = 'mainRarityType'):
        inst = None
        self._add_to_query("mainRarityType",_param_name)
        pass

    def mySo5Lineup(self,so5LeagueSlug,_param_name:str = 'mySo5Lineup') -> 'So5Lineup':
        param_list = []
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = So5Lineup(self,param_list)
        self._add_to_query("mySo5Lineup",_param_name,inst)
        self.value_mySo5Lineup = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pastSo5LeaderboardContenders(self,after,before,first,last,so5LeagueSlug,_param_name:str = 'pastSo5LeaderboardContenders') -> 'So5LeaderboardContenderConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = So5LeaderboardContenderConnection(self,param_list)
        self._add_to_query("pastSo5LeaderboardContenders",_param_name,inst)
        self.value_pastSo5LeaderboardContenders = inst
        return inst

    def rarityType(self,_param_name:str = 'rarityType'):
        inst = None
        self._add_to_query("rarityType",_param_name)
        pass

    def seasonality(self,_param_name:str = 'seasonality'):
        inst = None
        self._add_to_query("seasonality",_param_name)
        pass

    def seasonalityName(self,_param_name:str = 'seasonalityName'):
        inst = None
        self._add_to_query("seasonalityName",_param_name)
        pass

    def so5Leaderboard(self,so5LeagueSlug,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5LeaderboardType(self,_param_name:str = 'so5LeaderboardType'):
        inst = None
        self._add_to_query("so5LeaderboardType",_param_name)
        pass

    def so5TournamentType(self,_param_name:str = 'so5TournamentType') -> 'So5Tournament':
        param_list = []
        inst = So5Tournament(self,param_list)
        self._add_to_query("so5TournamentType",_param_name,inst)
        self.value_so5TournamentType = inst
        return inst

    def svgLogoUrl(self,_param_name:str = 'svgLogoUrl'):
        inst = None
        self._add_to_query("svgLogoUrl",_param_name)
        pass

    def tournamentType(self,_param_name:str = 'tournamentType'):
        inst = None
        self._add_to_query("tournamentType",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class So5LeaderboardContender(GraphQLObject):
    value_managerTeam:'ManagerTeam' = None
    value_slug = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5Lineup:'So5Lineup' = None
    def managerTeam(self,_param_name:str = 'managerTeam') -> 'ManagerTeam':
        param_list = []
        inst = ManagerTeam(self,param_list)
        self._add_to_query("managerTeam",_param_name,inst)
        self.value_managerTeam = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Leaderboard(self,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5Lineup(self,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst


class So5LeaderboardContenderEdge(GraphQLObject):
    value_cursor = None
    value_node:'So5LeaderboardContender' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'So5LeaderboardContender':
        param_list = []
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class So5LeaderboardContenderConnection(GraphQLObject):
    value_edges:'list[So5LeaderboardContenderEdge]' = None
    value_nodes:'list[So5LeaderboardContender]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'So5LeaderboardContenderEdge':
        param_list = []
        inst = So5LeaderboardContenderEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'So5LeaderboardContender':
        param_list = []
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class SpecialWeeklyBanner(GraphQLObject):
    value_background = None
    value_cardUrl = None
    value_href = None
    value_hrefLabel = None
    value_id = None
    value_logoUrl = None
    value_pictureUrl = None
    value_prizeLabel = None
    value_sectionName = None
    value_slug = None
    value_subtitle = None
    value_title = None
    def background(self,_param_name:str = 'background'):
        inst = None
        self._add_to_query("background",_param_name)
        pass

    def cardUrl(self,_param_name:str = 'cardUrl'):
        inst = None
        self._add_to_query("cardUrl",_param_name)
        pass

    def href(self,_param_name:str = 'href'):
        inst = None
        self._add_to_query("href",_param_name)
        pass

    def hrefLabel(self,_param_name:str = 'hrefLabel'):
        inst = None
        self._add_to_query("hrefLabel",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def logoUrl(self,_param_name:str = 'logoUrl'):
        inst = None
        self._add_to_query("logoUrl",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def prizeLabel(self,_param_name:str = 'prizeLabel'):
        inst = None
        self._add_to_query("prizeLabel",_param_name)
        pass

    def sectionName(self,_param_name:str = 'sectionName'):
        inst = None
        self._add_to_query("sectionName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def subtitle(self,_param_name:str = 'subtitle'):
        inst = None
        self._add_to_query("subtitle",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class So5Fixture(GraphQLObject):
    value_aasmState = None
    value_anyGames:'list[AnyGameInterface]' = None
    value_canCompose = None
    value_cutOffDate = None
    value_displayName = None
    value_endDate = None
    value_eventType = None
    value_gameWeek = None
    value_games:'list[Game]' = None
    value_gamesWithMyPlayerGameScoresPreview:'GameWithPlayerGameScoresPreviewConnection' = None
    value_hashedSalt = None
    value_id = None
    value_mySo5Games:'list[Game]' = None
    value_mySo5LeaderboardContenders:'So5LeaderboardContenderConnection' = None
    value_mySo5LeagueTracks:'list[So5LeagueTrack]' = None
    value_mySo5Lineups:'list[So5Lineup]' = None
    value_mySo5LineupsCount = None
    value_mySo5LineupsPaginated:'So5LineupConnection' = None
    value_mySo5Rankings:'list[So5Ranking]' = None
    value_mySo5Rewards:'list[So5Reward]' = None
    value_mySo5UserGroups:'So5UserGroupConnection' = None
    value_myTotalXpWon = None
    value_myUserGroups:'UserGroupInterfaceConnection' = None
    value_next:'So5Fixture' = None
    value_onboardingSo5Leaderboard:'So5Leaderboard' = None
    value_orderedPlayerGameScores:'list[OrderedPlayerGameScores]' = None
    value_orderedPlayerGameScoresByPosition:'PlayerGameScoreInterfaceConnection' = None
    value_orderedSo5Scores:'list[OrderedSo5Scores]' = None
    value_orderedSo5ScoresByPosition:'So5ScoreConnection' = None
    value_previous:'So5Fixture' = None
    value_projectedLineupsReadyAt = None
    value_replayedFixture:'So5Fixture' = None
    value_rewardsDeliveryDate = None
    value_salt = None
    value_shortDisplayName = None
    value_slug = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5LeaderboardContenders:'So5LeaderboardContenderConnection' = None
    value_so5LeaderboardGroups:'list[So5LeaderboardGroupInterface]' = None
    value_so5Leaderboards:'list[So5Leaderboard]' = None
    value_so5LeaderboardsPaginated:'So5LeaderboardConnection' = None
    value_so5Leagues:'list[So5League]' = None
    value_so5LineupsFromRestrictionGroup = None
    value_so5LineupsPaginated:'So5LineupConnection' = None
    value_specialWeeklyBanner:'SpecialWeeklyBanner' = None
    value_startDate = None
    value_totalRewards:'RewardsOverview' = None
    value_type = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def anyGames(self,_param_name:str = 'anyGames') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGames",_param_name,inst)
        self.value_anyGames = inst
        return inst

    def canCompose(self,_param_name:str = 'canCompose'):
        inst = None
        self._add_to_query("canCompose",_param_name)
        pass

    def cutOffDate(self,_param_name:str = 'cutOffDate'):
        inst = None
        self._add_to_query("cutOffDate",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def eventType(self,_param_name:str = 'eventType'):
        inst = None
        self._add_to_query("eventType",_param_name)
        pass

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass

    def games(self,_param_name:str = 'games') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def gamesWithMyPlayerGameScoresPreview(self,after,before,first,fromDate,last,toDate,_param_name:str = 'gamesWithMyPlayerGameScoresPreview') -> 'GameWithPlayerGameScoresPreviewConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("fromDate",fromDate))
        param_list.append(("last",last))
        param_list.append(("toDate",toDate))
        inst = GameWithPlayerGameScoresPreviewConnection(self,param_list)
        self._add_to_query("gamesWithMyPlayerGameScoresPreview",_param_name,inst)
        self.value_gamesWithMyPlayerGameScoresPreview = inst
        return inst

    def hashedSalt(self,_param_name:str = 'hashedSalt'):
        inst = None
        self._add_to_query("hashedSalt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mySo5Games(self,_param_name:str = 'mySo5Games') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("mySo5Games",_param_name,inst)
        self.value_mySo5Games = inst
        return inst

    def mySo5LeaderboardContenders(self,after,before,first,last,withTraining,_param_name:str = 'mySo5LeaderboardContenders') -> 'So5LeaderboardContenderConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("withTraining",withTraining))
        inst = So5LeaderboardContenderConnection(self,param_list)
        self._add_to_query("mySo5LeaderboardContenders",_param_name,inst)
        self.value_mySo5LeaderboardContenders = inst
        return inst

    def mySo5LeagueTracks(self,_param_name:str = 'mySo5LeagueTracks') -> 'So5LeagueTrack':
        param_list = []
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("mySo5LeagueTracks",_param_name,inst)
        self.value_mySo5LeagueTracks = inst
        return inst

    def mySo5Lineups(self,draft,so5LeaderboardSlug,sortType,withTraining,_param_name:str = 'mySo5Lineups') -> 'So5Lineup':
        param_list = []
        param_list.append(("draft",draft))
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        param_list.append(("sortType",sortType))
        param_list.append(("withTraining",withTraining))
        inst = So5Lineup(self,param_list)
        self._add_to_query("mySo5Lineups",_param_name,inst)
        self.value_mySo5Lineups = inst
        return inst

    def mySo5LineupsCount(self,draft,so5LeaderboardSlug,training,_param_name:str = 'mySo5LineupsCount'):
        inst = None
        self._add_to_query("mySo5LineupsCount",_param_name)
        pass

    def mySo5LineupsPaginated(self,after,before,draft,first,last,so5LeaderboardSlug,sortType,withTraining,_param_name:str = 'mySo5LineupsPaginated') -> 'So5LineupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("draft",draft))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        param_list.append(("sortType",sortType))
        param_list.append(("withTraining",withTraining))
        inst = So5LineupConnection(self,param_list)
        self._add_to_query("mySo5LineupsPaginated",_param_name,inst)
        self.value_mySo5LineupsPaginated = inst
        return inst

    def mySo5Rankings(self,withDraft,withTraining,_param_name:str = 'mySo5Rankings') -> 'So5Ranking':
        param_list = []
        param_list.append(("withDraft",withDraft))
        param_list.append(("withTraining",withTraining))
        inst = So5Ranking(self,param_list)
        self._add_to_query("mySo5Rankings",_param_name,inst)
        self.value_mySo5Rankings = inst
        return inst

    def mySo5Rewards(self,_param_name:str = 'mySo5Rewards') -> 'So5Reward':
        param_list = []
        inst = So5Reward(self,param_list)
        self._add_to_query("mySo5Rewards",_param_name,inst)
        self.value_mySo5Rewards = inst
        return inst

    def mySo5UserGroups(self,after,before,first,last,statuses,_param_name:str = 'mySo5UserGroups') -> 'So5UserGroupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("statuses",statuses))
        inst = So5UserGroupConnection(self,param_list)
        self._add_to_query("mySo5UserGroups",_param_name,inst)
        self.value_mySo5UserGroups = inst
        return inst

    def myTotalXpWon(self,_param_name:str = 'myTotalXpWon'):
        inst = None
        self._add_to_query("myTotalXpWon",_param_name)
        pass

    def myUserGroups(self,after,before,first,last,statuses,_param_name:str = 'myUserGroups') -> 'UserGroupInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("statuses",statuses))
        inst = UserGroupInterfaceConnection(self,param_list)
        self._add_to_query("myUserGroups",_param_name,inst)
        self.value_myUserGroups = inst
        return inst

    def next(self,_param_name:str = 'next') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("next",_param_name,inst)
        self.value_next = inst
        return inst

    def onboardingSo5Leaderboard(self,_param_name:str = 'onboardingSo5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("onboardingSo5Leaderboard",_param_name,inst)
        self.value_onboardingSo5Leaderboard = inst
        return inst

    def orderedPlayerGameScores(self,first,_param_name:str = 'orderedPlayerGameScores') -> 'OrderedPlayerGameScores':
        param_list = []
        param_list.append(("first",first))
        inst = OrderedPlayerGameScores(self,param_list)
        self._add_to_query("orderedPlayerGameScores",_param_name,inst)
        self.value_orderedPlayerGameScores = inst
        return inst

    def orderedPlayerGameScoresByPosition(self,after,before,first,last,minScore,position,sellable,_param_name:str = 'orderedPlayerGameScoresByPosition') -> 'PlayerGameScoreInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("minScore",minScore))
        param_list.append(("position",position))
        param_list.append(("sellable",sellable))
        inst = PlayerGameScoreInterfaceConnection(self,param_list)
        self._add_to_query("orderedPlayerGameScoresByPosition",_param_name,inst)
        self.value_orderedPlayerGameScoresByPosition = inst
        return inst

    def orderedSo5Scores(self,first,_param_name:str = 'orderedSo5Scores') -> 'OrderedSo5Scores':
        param_list = []
        param_list.append(("first",first))
        inst = OrderedSo5Scores(self,param_list)
        self._add_to_query("orderedSo5Scores",_param_name,inst)
        self.value_orderedSo5Scores = inst
        return inst

    def orderedSo5ScoresByPosition(self,after,before,first,last,minScore,position,sellable,_param_name:str = 'orderedSo5ScoresByPosition') -> 'So5ScoreConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("minScore",minScore))
        param_list.append(("position",position))
        param_list.append(("sellable",sellable))
        inst = So5ScoreConnection(self,param_list)
        self._add_to_query("orderedSo5ScoresByPosition",_param_name,inst)
        self.value_orderedSo5ScoresByPosition = inst
        return inst

    def previous(self,_param_name:str = 'previous') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("previous",_param_name,inst)
        self.value_previous = inst
        return inst

    def projectedLineupsReadyAt(self,_param_name:str = 'projectedLineupsReadyAt'):
        inst = None
        self._add_to_query("projectedLineupsReadyAt",_param_name)
        pass

    def replayedFixture(self,_param_name:str = 'replayedFixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("replayedFixture",_param_name,inst)
        self.value_replayedFixture = inst
        return inst

    def rewardsDeliveryDate(self,_param_name:str = 'rewardsDeliveryDate'):
        inst = None
        self._add_to_query("rewardsDeliveryDate",_param_name)
        pass

    def salt(self,_param_name:str = 'salt'):
        inst = None
        self._add_to_query("salt",_param_name)
        pass

    def shortDisplayName(self,_param_name:str = 'shortDisplayName'):
        inst = None
        self._add_to_query("shortDisplayName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Leaderboard(self,so5LeaderboardType,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        param_list.append(("so5LeaderboardType",so5LeaderboardType))
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5LeaderboardContenders(self,after,before,first,last,userSlug,withTraining,_param_name:str = 'so5LeaderboardContenders') -> 'So5LeaderboardContenderConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("userSlug",userSlug))
        param_list.append(("withTraining",withTraining))
        inst = So5LeaderboardContenderConnection(self,param_list)
        self._add_to_query("so5LeaderboardContenders",_param_name,inst)
        self.value_so5LeaderboardContenders = inst
        return inst

    def so5LeaderboardGroups(self,_param_name:str = 'so5LeaderboardGroups') -> 'So5LeaderboardGroupInterface':
        param_list = []
        inst = So5LeaderboardGroupInterface(self,param_list)
        self._add_to_query("so5LeaderboardGroups",_param_name,inst)
        self.value_so5LeaderboardGroups = inst
        return inst

    def so5Leaderboards(self,sortType,_param_name:str = 'so5Leaderboards') -> 'So5Leaderboard':
        param_list = []
        param_list.append(("sortType",sortType))
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboards",_param_name,inst)
        self.value_so5Leaderboards = inst
        return inst

    def so5LeaderboardsPaginated(self,after,before,first,last,sortType,_param_name:str = 'so5LeaderboardsPaginated') -> 'So5LeaderboardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        inst = So5LeaderboardConnection(self,param_list)
        self._add_to_query("so5LeaderboardsPaginated",_param_name,inst)
        self.value_so5LeaderboardsPaginated = inst
        return inst

    def so5Leagues(self,_param_name:str = 'so5Leagues') -> 'So5League':
        param_list = []
        inst = So5League(self,param_list)
        self._add_to_query("so5Leagues",_param_name,inst)
        self.value_so5Leagues = inst
        return inst

    def so5LineupsFromRestrictionGroup(self,restrictionGroup,_param_name:str = 'so5LineupsFromRestrictionGroup'):
        inst = None
        self._add_to_query("so5LineupsFromRestrictionGroup",_param_name)
        pass

    def so5LineupsPaginated(self,after,before,draft,first,last,so5LeaderboardSlug,sortType,userSlug,withTraining,_param_name:str = 'so5LineupsPaginated') -> 'So5LineupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("draft",draft))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        param_list.append(("sortType",sortType))
        param_list.append(("userSlug",userSlug))
        param_list.append(("withTraining",withTraining))
        inst = So5LineupConnection(self,param_list)
        self._add_to_query("so5LineupsPaginated",_param_name,inst)
        self.value_so5LineupsPaginated = inst
        return inst

    def specialWeeklyBanner(self,_param_name:str = 'specialWeeklyBanner') -> 'SpecialWeeklyBanner':
        param_list = []
        inst = SpecialWeeklyBanner(self,param_list)
        self._add_to_query("specialWeeklyBanner",_param_name,inst)
        self.value_specialWeeklyBanner = inst
        return inst

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def totalRewards(self,_param_name:str = 'totalRewards') -> 'RewardsOverview':
        param_list = []
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalRewards",_param_name,inst)
        self.value_totalRewards = inst
        return inst

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class So5Appearance(GraphQLObject):
    value_anyCard:'AnyCardInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPlayerGameStats:'AnyPlayerGameStatsInterface' = None
    value_averageScore = None
    value_bonus = None
    value_boosted = None
    value_captain = None
    value_card:'Card' = None
    value_cleanScore = None
    value_eligiblePlayerGameScores:'list[PlayerGameScoreInterface]' = None
    value_eligibleSo5Scores:'list[So5Score]' = None
    value_game:'Game' = None
    value_id = None
    value_index = None
    value_licensed = None
    value_locked = None
    value_pictureUrl = None
    value_playedGames:'list[AnyGameInterface]' = None
    value_player:'Player' = None
    value_playerGameStats:'PlayerGameStats' = None
    value_position = None
    value_positions = None
    value_powerBreakdown:'PowerBreakdown' = None
    value_rarity = None
    value_relevantStats = None
    value_score = None
    value_scoreStatus = None
    value_so5Fixture:'So5Fixture' = None
    value_so5Lineup:'So5Lineup' = None
    value_so5Score:'So5Score' = None
    value_status = None
    value_team = None
    value_upcomingGame:'AnyGameInterface' = None
    value_videoUrl = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPlayerGameStats(self,_param_name:str = 'anyPlayerGameStats') -> 'AnyPlayerGameStatsInterface':
        param_list = []
        inst = AnyPlayerGameStatsInterface(self,param_list)
        self._add_to_query("anyPlayerGameStats",_param_name,inst)
        self.value_anyPlayerGameStats = inst
        return inst

    def averageScore(self,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def bonus(self,_param_name:str = 'bonus'):
        inst = None
        self._add_to_query("bonus",_param_name)
        pass

    def boosted(self,_param_name:str = 'boosted'):
        inst = None
        self._add_to_query("boosted",_param_name)
        pass

    def captain(self,_param_name:str = 'captain'):
        inst = None
        self._add_to_query("captain",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def cleanScore(self,_param_name:str = 'cleanScore'):
        inst = None
        self._add_to_query("cleanScore",_param_name)
        pass

    def eligiblePlayerGameScores(self,so5LeaderboardSlug,_param_name:str = 'eligiblePlayerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("eligiblePlayerGameScores",_param_name,inst)
        self.value_eligiblePlayerGameScores = inst
        return inst

    def eligibleSo5Scores(self,_param_name:str = 'eligibleSo5Scores') -> 'So5Score':
        param_list = []
        inst = So5Score(self,param_list)
        self._add_to_query("eligibleSo5Scores",_param_name,inst)
        self.value_eligibleSo5Scores = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def index(self,_param_name:str = 'index'):
        inst = None
        self._add_to_query("index",_param_name)
        pass

    def licensed(self,_param_name:str = 'licensed'):
        inst = None
        self._add_to_query("licensed",_param_name)
        pass

    def locked(self,_param_name:str = 'locked'):
        inst = None
        self._add_to_query("locked",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def playedGames(self,_param_name:str = 'playedGames') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("playedGames",_param_name,inst)
        self.value_playedGames = inst
        return inst

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def playerGameStats(self,_param_name:str = 'playerGameStats') -> 'PlayerGameStats':
        param_list = []
        inst = PlayerGameStats(self,param_list)
        self._add_to_query("playerGameStats",_param_name,inst)
        self.value_playerGameStats = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def powerBreakdown(self,_param_name:str = 'powerBreakdown') -> 'PowerBreakdown':
        param_list = []
        inst = PowerBreakdown(self,param_list)
        self._add_to_query("powerBreakdown",_param_name,inst)
        self.value_powerBreakdown = inst
        return inst

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def relevantStats(self,_param_name:str = 'relevantStats'):
        inst = None
        self._add_to_query("relevantStats",_param_name)
        pass

    def score(self,withBonus,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def scoreStatus(self,_param_name:str = 'scoreStatus'):
        inst = None
        self._add_to_query("scoreStatus",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5Lineup(self,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst

    def so5Score(self,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass

    def upcomingGame(self,_param_name:str = 'upcomingGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("upcomingGame",_param_name,inst)
        self.value_upcomingGame = inst
        return inst

    def videoUrl(self,derivative,_param_name:str = 'videoUrl'):
        inst = None
        self._add_to_query("videoUrl",_param_name)
        pass


class HighlightedStat(GraphQLObject):
    value_name = None
    value_value = None
    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def value(self,_param_name:str = 'value'):
        inst = None
        self._add_to_query("value",_param_name)
        pass


class CardStats(GraphQLObject):
    value_bestSo5Appearance:'So5Appearance' = None
    value_highlightedStats:'list[HighlightedStat]' = None
    value_id = None
    value_so5LineupsCount = None
    value_so5RewardsCount = None
    def bestSo5Appearance(self,_param_name:str = 'bestSo5Appearance') -> 'So5Appearance':
        param_list = []
        inst = So5Appearance(self,param_list)
        self._add_to_query("bestSo5Appearance",_param_name,inst)
        self.value_bestSo5Appearance = inst
        return inst

    def highlightedStats(self,_param_name:str = 'highlightedStats') -> 'HighlightedStat':
        param_list = []
        inst = HighlightedStat(self,param_list)
        self._add_to_query("highlightedStats",_param_name,inst)
        self.value_highlightedStats = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def so5LineupsCount(self,_param_name:str = 'so5LineupsCount'):
        inst = None
        self._add_to_query("so5LineupsCount",_param_name)
        pass

    def so5RewardsCount(self,_param_name:str = 'so5RewardsCount'):
        inst = None
        self._add_to_query("so5RewardsCount",_param_name)
        pass


class AnyCardInterfaceEdge(GraphQLObject):
    value_cursor = None
    value_node:'AnyCardInterface' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class AnyCardInterfaceConnection(GraphQLObject):
    value_edges:'list[AnyCardInterfaceEdge]' = None
    value_nodes:'list[AnyCardInterface]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'AnyCardInterfaceEdge':
        param_list = []
        inst = AnyCardInterfaceEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class TokenOwner(GraphQLObject):
    value_account:'Account' = None
    value_address = None
    value_amounts:'MonetaryAmount' = None
    value_blockchain = None
    value_card:'AnyCardInterface' = None
    value_deal = None
    value__from = None
    value_id = None
    value_optimistic = None
    value_price:'MonetaryAmount' = None
    value_priceFiat:'Fiat' = None
    value_priceWei = None
    value_referenceId = None
    value_settleAt = None
    value_settlementDelayReason = None
    value_token:'Token' = None
    value_transferType = None
    value_user:'User' = None
    def account(self,_param_name:str = 'account') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("account",_param_name,inst)
        self.value_account = inst
        return inst

    def address(self,_param_name:str = 'address'):
        inst = None
        self._add_to_query("address",_param_name)
        pass

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def blockchain(self,_param_name:str = 'blockchain'):
        inst = None
        self._add_to_query("blockchain",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def deal(self,_param_name:str = 'deal'):
        inst = None
        self._add_to_query("deal",_param_name)
        pass

    def _from(self,_param_name:str = '_from'):
        inst = None
        self._add_to_query("_from",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def optimistic(self,_param_name:str = 'optimistic'):
        inst = None
        self._add_to_query("optimistic",_param_name)
        pass

    def price(self,_param_name:str = 'price') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("price",_param_name,inst)
        self.value_price = inst
        return inst

    def priceFiat(self,_param_name:str = 'priceFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("priceFiat",_param_name,inst)
        self.value_priceFiat = inst
        return inst

    def priceWei(self,_param_name:str = 'priceWei'):
        inst = None
        self._add_to_query("priceWei",_param_name)
        pass

    def referenceId(self,_param_name:str = 'referenceId'):
        inst = None
        self._add_to_query("referenceId",_param_name)
        pass

    def settleAt(self,_param_name:str = 'settleAt'):
        inst = None
        self._add_to_query("settleAt",_param_name)
        pass

    def settlementDelayReason(self,_param_name:str = 'settlementDelayReason'):
        inst = None
        self._add_to_query("settlementDelayReason",_param_name)
        pass

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst

    def transferType(self,_param_name:str = 'transferType'):
        inst = None
        self._add_to_query("transferType",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class TokenBid(GraphQLObject):
    value_amount = None
    value_amountInFiat:'Fiat' = None
    value_amounts:'MonetaryAmount' = None
    value_auction:'TokenAuction' = None
    value_bidder = None
    value_conversionCredit:'ConversionCredit' = None
    value_createdAt = None
    value_fiatPayment = None
    value_id = None
    value_maximumAmount = None
    value_maximumAmountInFiat:'Fiat' = None
    value_maximumAmounts:'MonetaryAmount' = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def amountInFiat(self,_param_name:str = 'amountInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("amountInFiat",_param_name,inst)
        self.value_amountInFiat = inst
        return inst

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def auction(self,_param_name:str = 'auction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("auction",_param_name,inst)
        self.value_auction = inst
        return inst

    def bidder(self,_param_name:str = 'bidder'):
        inst = None
        self._add_to_query("bidder",_param_name)
        pass

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def fiatPayment(self,_param_name:str = 'fiatPayment'):
        inst = None
        self._add_to_query("fiatPayment",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def maximumAmount(self,_param_name:str = 'maximumAmount'):
        inst = None
        self._add_to_query("maximumAmount",_param_name)
        pass

    def maximumAmountInFiat(self,_param_name:str = 'maximumAmountInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("maximumAmountInFiat",_param_name,inst)
        self.value_maximumAmountInFiat = inst
        return inst

    def maximumAmounts(self,_param_name:str = 'maximumAmounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("maximumAmounts",_param_name,inst)
        self.value_maximumAmounts = inst
        return inst


class TokenBidEdge(GraphQLObject):
    value_cursor = None
    value_node:'TokenBid' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'TokenBid':
        param_list = []
        inst = TokenBid(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class TokenBidConnection(GraphQLObject):
    value_edges:'list[TokenBidEdge]' = None
    value_nodes:'list[TokenBid]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'TokenBidEdge':
        param_list = []
        inst = TokenBidEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'TokenBid':
        param_list = []
        inst = TokenBid(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class TokenMyBid(GraphQLObject):
    value_amount = None
    value_amountInFiat:'Fiat' = None
    value_amounts:'MonetaryAmount' = None
    value_auction:'TokenAuction' = None
    value_bidder = None
    value_conversionCredit:'ConversionCredit' = None
    value_createdAt = None
    value_fiatPayment = None
    value_id = None
    value_maximumAmount = None
    value_maximumAmountInFiat:'Fiat' = None
    value_maximumAmounts:'MonetaryAmount' = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def amountInFiat(self,_param_name:str = 'amountInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("amountInFiat",_param_name,inst)
        self.value_amountInFiat = inst
        return inst

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def auction(self,_param_name:str = 'auction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("auction",_param_name,inst)
        self.value_auction = inst
        return inst

    def bidder(self,_param_name:str = 'bidder'):
        inst = None
        self._add_to_query("bidder",_param_name)
        pass

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def fiatPayment(self,_param_name:str = 'fiatPayment'):
        inst = None
        self._add_to_query("fiatPayment",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def maximumAmount(self,_param_name:str = 'maximumAmount'):
        inst = None
        self._add_to_query("maximumAmount",_param_name)
        pass

    def maximumAmountInFiat(self,_param_name:str = 'maximumAmountInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("maximumAmountInFiat",_param_name,inst)
        self.value_maximumAmountInFiat = inst
        return inst

    def maximumAmounts(self,_param_name:str = 'maximumAmounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("maximumAmounts",_param_name,inst)
        self.value_maximumAmounts = inst
        return inst


class AuctionReminder(GraphQLObject):
    value_dueDate = None
    value_enabled = None
    value_id = None
    value_status = None
    value_tokenAuction:'TokenAuction' = None
    def dueDate(self,_param_name:str = 'dueDate'):
        inst = None
        self._add_to_query("dueDate",_param_name)
        pass

    def enabled(self,_param_name:str = 'enabled'):
        inst = None
        self._add_to_query("enabled",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def tokenAuction(self,_param_name:str = 'tokenAuction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("tokenAuction",_param_name,inst)
        self.value_tokenAuction = inst
        return inst


class TokenAuction(GraphQLObject):
    value_anyCards:'list[AnyCardInterface]' = None
    value_autoBid = None
    value_bestBid:'TokenBid' = None
    value_bids:'TokenBidConnection' = None
    value_bidsCount = None
    value_blockchainId = None
    value_bundledCards = None
    value_cancelled = None
    value_cards = None
    value_creditCardFee = None
    value_currency = None
    value_currentPrice = None
    value_eligibleForBlueprintRewards = None
    value_endDate = None
    value_hasTrade = None
    value_id = None
    value_minNextBid = None
    value_myBestBid:'TokenMyBid' = None
    value_myLastBid:'TokenMyBid' = None
    value_myReminder:'AuctionReminder' = None
    value_nfts:'list[Token]' = None
    value_open = None
    value_privateCurrentPrice = None
    value_privateMinNextBid = None
    value_socialPictureFingerprint = None
    value_socialPictureUrls:'SocialPictureDerivative' = None
    value_startDate = None
    value_team = None
    value_updatedAt = None
    def anyCards(self,_param_name:str = 'anyCards') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCards",_param_name,inst)
        self.value_anyCards = inst
        return inst

    def autoBid(self,_param_name:str = 'autoBid'):
        inst = None
        self._add_to_query("autoBid",_param_name)
        pass

    def bestBid(self,_param_name:str = 'bestBid') -> 'TokenBid':
        param_list = []
        inst = TokenBid(self,param_list)
        self._add_to_query("bestBid",_param_name,inst)
        self.value_bestBid = inst
        return inst

    def bids(self,after,before,first,last,_param_name:str = 'bids') -> 'TokenBidConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = TokenBidConnection(self,param_list)
        self._add_to_query("bids",_param_name,inst)
        self.value_bids = inst
        return inst

    def bidsCount(self,_param_name:str = 'bidsCount'):
        inst = None
        self._add_to_query("bidsCount",_param_name)
        pass

    def blockchainId(self,_param_name:str = 'blockchainId'):
        inst = None
        self._add_to_query("blockchainId",_param_name)
        pass

    def bundledCards(self,_param_name:str = 'bundledCards'):
        inst = None
        self._add_to_query("bundledCards",_param_name)
        pass

    def cancelled(self,_param_name:str = 'cancelled'):
        inst = None
        self._add_to_query("cancelled",_param_name)
        pass

    def cards(self,_param_name:str = 'cards'):
        inst = None
        self._add_to_query("cards",_param_name)
        pass

    def creditCardFee(self,_param_name:str = 'creditCardFee'):
        inst = None
        self._add_to_query("creditCardFee",_param_name)
        pass

    def currency(self,_param_name:str = 'currency'):
        inst = None
        self._add_to_query("currency",_param_name)
        pass

    def currentPrice(self,_param_name:str = 'currentPrice'):
        inst = None
        self._add_to_query("currentPrice",_param_name)
        pass

    def eligibleForBlueprintRewards(self,_param_name:str = 'eligibleForBlueprintRewards'):
        inst = None
        self._add_to_query("eligibleForBlueprintRewards",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def hasTrade(self,_param_name:str = 'hasTrade'):
        inst = None
        self._add_to_query("hasTrade",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def minNextBid(self,_param_name:str = 'minNextBid'):
        inst = None
        self._add_to_query("minNextBid",_param_name)
        pass

    def myBestBid(self,_param_name:str = 'myBestBid') -> 'TokenMyBid':
        param_list = []
        inst = TokenMyBid(self,param_list)
        self._add_to_query("myBestBid",_param_name,inst)
        self.value_myBestBid = inst
        return inst

    def myLastBid(self,_param_name:str = 'myLastBid') -> 'TokenMyBid':
        param_list = []
        inst = TokenMyBid(self,param_list)
        self._add_to_query("myLastBid",_param_name,inst)
        self.value_myLastBid = inst
        return inst

    def myReminder(self,_param_name:str = 'myReminder') -> 'AuctionReminder':
        param_list = []
        inst = AuctionReminder(self,param_list)
        self._add_to_query("myReminder",_param_name,inst)
        self.value_myReminder = inst
        return inst

    def nfts(self,_param_name:str = 'nfts') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("nfts",_param_name,inst)
        self.value_nfts = inst
        return inst

    def open(self,_param_name:str = 'open'):
        inst = None
        self._add_to_query("open",_param_name)
        pass

    def privateCurrentPrice(self,_param_name:str = 'privateCurrentPrice'):
        inst = None
        self._add_to_query("privateCurrentPrice",_param_name)
        pass

    def privateMinNextBid(self,_param_name:str = 'privateMinNextBid'):
        inst = None
        self._add_to_query("privateMinNextBid",_param_name)
        pass

    def socialPictureFingerprint(self,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def socialPictureUrls(self,_param_name:str = 'socialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("socialPictureUrls",_param_name,inst)
        self.value_socialPictureUrls = inst
        return inst

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass

    def updatedAt(self,_param_name:str = 'updatedAt'):
        inst = None
        self._add_to_query("updatedAt",_param_name)
        pass


class AnyRewardInterface(GraphQLObject):
    value_aasmState = None
    value_achievement = None
    value_id = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def achievement(self,_param_name:str = 'achievement'):
        inst = None
        self._add_to_query("achievement",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class TokenPrimaryOffer(GraphQLObject):
    value_anyCards:'list[AnyCardInterface]' = None
    value_applePrice:'MonetaryAmount' = None
    value_appleProductId = None
    value_buyer:'User' = None
    value_cancelledAt = None
    value_cards = None
    value_eligibleForBlueprintRewards = None
    value_endDate = None
    value_googlePrice = None
    value_googleProductId = None
    value_hasTrade = None
    value_id = None
    value_nfts:'list[Token]' = None
    value_price:'MonetaryAmount' = None
    value_priceFiat:'Fiat' = None
    value_priceWei = None
    value_rewards:'list[AnyRewardInterface]' = None
    value_settledAt = None
    value_signedAmount = None
    value_startDate = None
    value_status = None
    value_updatedAt = None
    def anyCards(self,_param_name:str = 'anyCards') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCards",_param_name,inst)
        self.value_anyCards = inst
        return inst

    def applePrice(self,_param_name:str = 'applePrice') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("applePrice",_param_name,inst)
        self.value_applePrice = inst
        return inst

    def appleProductId(self,_param_name:str = 'appleProductId'):
        inst = None
        self._add_to_query("appleProductId",_param_name)
        pass

    def buyer(self,_param_name:str = 'buyer') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("buyer",_param_name,inst)
        self.value_buyer = inst
        return inst

    def cancelledAt(self,_param_name:str = 'cancelledAt'):
        inst = None
        self._add_to_query("cancelledAt",_param_name)
        pass

    def cards(self,_param_name:str = 'cards'):
        inst = None
        self._add_to_query("cards",_param_name)
        pass

    def eligibleForBlueprintRewards(self,_param_name:str = 'eligibleForBlueprintRewards'):
        inst = None
        self._add_to_query("eligibleForBlueprintRewards",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def googlePrice(self,countryCode,_param_name:str = 'googlePrice'):
        inst = None
        self._add_to_query("googlePrice",_param_name)
        pass

    def googleProductId(self,_param_name:str = 'googleProductId'):
        inst = None
        self._add_to_query("googleProductId",_param_name)
        pass

    def hasTrade(self,_param_name:str = 'hasTrade'):
        inst = None
        self._add_to_query("hasTrade",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def nfts(self,_param_name:str = 'nfts') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("nfts",_param_name,inst)
        self.value_nfts = inst
        return inst

    def price(self,_param_name:str = 'price') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("price",_param_name,inst)
        self.value_price = inst
        return inst

    def priceFiat(self,_param_name:str = 'priceFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("priceFiat",_param_name,inst)
        self.value_priceFiat = inst
        return inst

    def priceWei(self,_param_name:str = 'priceWei'):
        inst = None
        self._add_to_query("priceWei",_param_name)
        pass

    def rewards(self,_param_name:str = 'rewards') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("rewards",_param_name,inst)
        self.value_rewards = inst
        return inst

    def settledAt(self,_param_name:str = 'settledAt'):
        inst = None
        self._add_to_query("settledAt",_param_name)
        pass

    def signedAmount(self,_param_name:str = 'signedAmount'):
        inst = None
        self._add_to_query("signedAmount",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def updatedAt(self,_param_name:str = 'updatedAt'):
        inst = None
        self._add_to_query("updatedAt",_param_name)
        pass


class TokenOfferSide(GraphQLObject):
    value_amounts:'MonetaryAmount' = None
    value_anyCards:'list[AnyCardInterface]' = None
    value_cards = None
    value_fiat:'Fiat' = None
    value_id = None
    value_nfts:'list[Token]' = None
    value_wei = None
    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def anyCards(self,_param_name:str = 'anyCards') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCards",_param_name,inst)
        self.value_anyCards = inst
        return inst

    def cards(self,_param_name:str = 'cards'):
        inst = None
        self._add_to_query("cards",_param_name)
        pass

    def fiat(self,_param_name:str = 'fiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("fiat",_param_name,inst)
        self.value_fiat = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def nfts(self,_param_name:str = 'nfts') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("nfts",_param_name,inst)
        self.value_nfts = inst
        return inst

    def wei(self,_param_name:str = 'wei'):
        inst = None
        self._add_to_query("wei",_param_name)
        pass


class TokenOffer(GraphQLObject):
    value_acceptedAt = None
    value_actualReceiver = None
    value_blockchainId = None
    value_buyer = None
    value_cancelledAt = None
    value_counteredOffer:'TokenOffer' = None
    value_createdAt = None
    value_creditCardFee = None
    value_endDate = None
    value_hasTrade = None
    value_id = None
    value_marketFeeAmounts:'MonetaryAmount' = None
    value_owners:'list[TokenOwner]' = None
    value_receiver = None
    value_receiverSide:'TokenOfferSide' = None
    value_rejectionReason = None
    value_seller = None
    value_sender = None
    value_senderSide:'TokenOfferSide' = None
    value_settlementCurrencies = None
    value_startDate = None
    value_status = None
    value_type = None
    value_updatedAt = None
    def acceptedAt(self,_param_name:str = 'acceptedAt'):
        inst = None
        self._add_to_query("acceptedAt",_param_name)
        pass

    def actualReceiver(self,_param_name:str = 'actualReceiver'):
        inst = None
        self._add_to_query("actualReceiver",_param_name)
        pass

    def blockchainId(self,_param_name:str = 'blockchainId'):
        inst = None
        self._add_to_query("blockchainId",_param_name)
        pass

    def buyer(self,_param_name:str = 'buyer'):
        inst = None
        self._add_to_query("buyer",_param_name)
        pass

    def cancelledAt(self,_param_name:str = 'cancelledAt'):
        inst = None
        self._add_to_query("cancelledAt",_param_name)
        pass

    def counteredOffer(self,_param_name:str = 'counteredOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("counteredOffer",_param_name,inst)
        self.value_counteredOffer = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def creditCardFee(self,_param_name:str = 'creditCardFee'):
        inst = None
        self._add_to_query("creditCardFee",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def hasTrade(self,_param_name:str = 'hasTrade'):
        inst = None
        self._add_to_query("hasTrade",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def marketFeeAmounts(self,_param_name:str = 'marketFeeAmounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("marketFeeAmounts",_param_name,inst)
        self.value_marketFeeAmounts = inst
        return inst

    def owners(self,_param_name:str = 'owners') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("owners",_param_name,inst)
        self.value_owners = inst
        return inst

    def receiver(self,_param_name:str = 'receiver'):
        inst = None
        self._add_to_query("receiver",_param_name)
        pass

    def receiverSide(self,_param_name:str = 'receiverSide') -> 'TokenOfferSide':
        param_list = []
        inst = TokenOfferSide(self,param_list)
        self._add_to_query("receiverSide",_param_name,inst)
        self.value_receiverSide = inst
        return inst

    def rejectionReason(self,_param_name:str = 'rejectionReason'):
        inst = None
        self._add_to_query("rejectionReason",_param_name)
        pass

    def seller(self,_param_name:str = 'seller'):
        inst = None
        self._add_to_query("seller",_param_name)
        pass

    def sender(self,_param_name:str = 'sender'):
        inst = None
        self._add_to_query("sender",_param_name)
        pass

    def senderSide(self,_param_name:str = 'senderSide') -> 'TokenOfferSide':
        param_list = []
        inst = TokenOfferSide(self,param_list)
        self._add_to_query("senderSide",_param_name,inst)
        self.value_senderSide = inst
        return inst

    def settlementCurrencies(self,_param_name:str = 'settlementCurrencies'):
        inst = None
        self._add_to_query("settlementCurrencies",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass

    def updatedAt(self,_param_name:str = 'updatedAt'):
        inst = None
        self._add_to_query("updatedAt",_param_name)
        pass


class TokenWithdrawal(GraphQLObject):
    value_aasmState = None
    value_destination = None
    value_id = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def destination(self,_param_name:str = 'destination'):
        inst = None
        self._add_to_query("destination",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class Range(GraphQLObject):
    value_max = None
    value_min = None
    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass


class ThreeDimensionalAsset(GraphQLObject):
    value_backNormalUrl = None
    value_backUrl = None
    value_caseUsdzUrl = None
    value_frontNormalUrl = None
    value_frontUrl = None
    value_gltfUrl = None
    def backNormalUrl(self,_param_name:str = 'backNormalUrl'):
        inst = None
        self._add_to_query("backNormalUrl",_param_name)
        pass

    def backUrl(self,_param_name:str = 'backUrl'):
        inst = None
        self._add_to_query("backUrl",_param_name)
        pass

    def caseUsdzUrl(self,_param_name:str = 'caseUsdzUrl'):
        inst = None
        self._add_to_query("caseUsdzUrl",_param_name)
        pass

    def frontNormalUrl(self,_param_name:str = 'frontNormalUrl'):
        inst = None
        self._add_to_query("frontNormalUrl",_param_name)
        pass

    def frontUrl(self,_param_name:str = 'frontUrl'):
        inst = None
        self._add_to_query("frontUrl",_param_name)
        pass

    def gltfUrl(self,_param_name:str = 'gltfUrl'):
        inst = None
        self._add_to_query("gltfUrl",_param_name)
        pass


class Token(GraphQLObject):
    value_assetId = None
    value_card = None
    value_collection = None
    value_contractAddress = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_decks:'list[Deck]' = None
    value_ethereumId = None
    value_ethereumOwner:'TokenOwner' = None
    value_favorited = None
    value_id = None
    value_ipfsPictureUrl = None
    value_ipfsUrl = None
    value_latestEnglishAuction:'TokenAuction' = None
    value_latestPrimaryOffer:'TokenPrimaryOffer' = None
    value_liveSingleBuyOffers:'list[TokenOffer]' = None
    value_liveSingleSaleOffer:'TokenOffer' = None
    value_metadata = None
    value_myMintedSingleSaleOffer:'TokenOffer' = None
    value_name = None
    value_owner:'TokenOwner' = None
    value_ownershipHistory:'list[TokenOwner]' = None
    value_pendingWithdrawal:'TokenWithdrawal' = None
    value_pictureUrl = None
    value_priceRange:'Range' = None
    value_privateMinPrice = None
    value_privateMinPrices:'MonetaryAmount' = None
    value_publicMinPrice = None
    value_publicMinPrices:'MonetaryAmount' = None
    value_secondaryMarketFeeEnabled = None
    value_sentInLiveOffers:'list[TokenOffer]' = None
    value_slug = None
    value_sport = None
    value_threeDimensional = None
    value_threeDimensionalAsset:'ThreeDimensionalAsset' = None
    value_tradeableStatus = None
    value_walletStatus = None
    def assetId(self,_param_name:str = 'assetId'):
        inst = None
        self._add_to_query("assetId",_param_name)
        pass

    def card(self,_param_name:str = 'card'):
        inst = None
        self._add_to_query("card",_param_name)
        pass

    def collection(self,_param_name:str = 'collection'):
        inst = None
        self._add_to_query("collection",_param_name)
        pass

    def contractAddress(self,_param_name:str = 'contractAddress'):
        inst = None
        self._add_to_query("contractAddress",_param_name)
        pass

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def decks(self,_param_name:str = 'decks') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def ethereumId(self,_param_name:str = 'ethereumId'):
        inst = None
        self._add_to_query("ethereumId",_param_name)
        pass

    def ethereumOwner(self,_param_name:str = 'ethereumOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ethereumOwner",_param_name,inst)
        self.value_ethereumOwner = inst
        return inst

    def favorited(self,_param_name:str = 'favorited'):
        inst = None
        self._add_to_query("favorited",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def ipfsPictureUrl(self,_param_name:str = 'ipfsPictureUrl'):
        inst = None
        self._add_to_query("ipfsPictureUrl",_param_name)
        pass

    def ipfsUrl(self,_param_name:str = 'ipfsUrl'):
        inst = None
        self._add_to_query("ipfsUrl",_param_name)
        pass

    def latestEnglishAuction(self,_param_name:str = 'latestEnglishAuction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("latestEnglishAuction",_param_name,inst)
        self.value_latestEnglishAuction = inst
        return inst

    def latestPrimaryOffer(self,_param_name:str = 'latestPrimaryOffer') -> 'TokenPrimaryOffer':
        param_list = []
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("latestPrimaryOffer",_param_name,inst)
        self.value_latestPrimaryOffer = inst
        return inst

    def liveSingleBuyOffers(self,_param_name:str = 'liveSingleBuyOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleBuyOffers",_param_name,inst)
        self.value_liveSingleBuyOffers = inst
        return inst

    def liveSingleSaleOffer(self,_param_name:str = 'liveSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleSaleOffer",_param_name,inst)
        self.value_liveSingleSaleOffer = inst
        return inst

    def metadata(self,_param_name:str = 'metadata'):
        inst = None
        self._add_to_query("metadata",_param_name)
        pass

    def myMintedSingleSaleOffer(self,_param_name:str = 'myMintedSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("myMintedSingleSaleOffer",_param_name,inst)
        self.value_myMintedSingleSaleOffer = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def owner(self,_param_name:str = 'owner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("owner",_param_name,inst)
        self.value_owner = inst
        return inst

    def ownershipHistory(self,_param_name:str = 'ownershipHistory') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ownershipHistory",_param_name,inst)
        self.value_ownershipHistory = inst
        return inst

    def pendingWithdrawal(self,_param_name:str = 'pendingWithdrawal') -> 'TokenWithdrawal':
        param_list = []
        inst = TokenWithdrawal(self,param_list)
        self._add_to_query("pendingWithdrawal",_param_name,inst)
        self.value_pendingWithdrawal = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def priceRange(self,_param_name:str = 'priceRange') -> 'Range':
        param_list = []
        inst = Range(self,param_list)
        self._add_to_query("priceRange",_param_name,inst)
        self.value_priceRange = inst
        return inst

    def privateMinPrice(self,_param_name:str = 'privateMinPrice'):
        inst = None
        self._add_to_query("privateMinPrice",_param_name)
        pass

    def privateMinPrices(self,_param_name:str = 'privateMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("privateMinPrices",_param_name,inst)
        self.value_privateMinPrices = inst
        return inst

    def publicMinPrice(self,_param_name:str = 'publicMinPrice'):
        inst = None
        self._add_to_query("publicMinPrice",_param_name)
        pass

    def publicMinPrices(self,_param_name:str = 'publicMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("publicMinPrices",_param_name,inst)
        self.value_publicMinPrices = inst
        return inst

    def secondaryMarketFeeEnabled(self,_param_name:str = 'secondaryMarketFeeEnabled'):
        inst = None
        self._add_to_query("secondaryMarketFeeEnabled",_param_name)
        pass

    def sentInLiveOffers(self,_param_name:str = 'sentInLiveOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("sentInLiveOffers",_param_name,inst)
        self.value_sentInLiveOffers = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def threeDimensional(self,_param_name:str = 'threeDimensional'):
        inst = None
        self._add_to_query("threeDimensional",_param_name)
        pass

    def threeDimensionalAsset(self,_param_name:str = 'threeDimensionalAsset') -> 'ThreeDimensionalAsset':
        param_list = []
        inst = ThreeDimensionalAsset(self,param_list)
        self._add_to_query("threeDimensionalAsset",_param_name,inst)
        self.value_threeDimensionalAsset = inst
        return inst

    def tradeableStatus(self,_param_name:str = 'tradeableStatus'):
        inst = None
        self._add_to_query("tradeableStatus",_param_name)
        pass

    def walletStatus(self,_param_name:str = 'walletStatus'):
        inst = None
        self._add_to_query("walletStatus",_param_name)
        pass


class TokenEdge(GraphQLObject):
    value_cursor = None
    value_node:'Token' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class TokenConnection(GraphQLObject):
    value_edges:'list[TokenEdge]' = None
    value_nodes:'list[Token]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'TokenEdge':
        param_list = []
        inst = TokenEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class Deck(GraphQLObject):
    value_cards:'AnyCardInterfaceConnection' = None
    value_deckIndex = None
    value_id = None
    value_name = None
    value_slug = None
    value_socialPictureFingerprint = None
    value_socialPictureUrls:'SocialPictureDerivative' = None
    value_sport = None
    value_tokens:'TokenConnection' = None
    value_tokensCount = None
    value_user:'User' = None
    value_visible = None
    def cards(self,after,before,first,last,_param_name:str = 'cards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def deckIndex(self,_param_name:str = 'deckIndex'):
        inst = None
        self._add_to_query("deckIndex",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def socialPictureFingerprint(self,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def socialPictureUrls(self,_param_name:str = 'socialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("socialPictureUrls",_param_name,inst)
        self.value_socialPictureUrls = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def tokens(self,after,before,first,last,_param_name:str = 'tokens') -> 'TokenConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = TokenConnection(self,param_list)
        self._add_to_query("tokens",_param_name,inst)
        self.value_tokens = inst
        return inst

    def tokensCount(self,_param_name:str = 'tokensCount'):
        inst = None
        self._add_to_query("tokensCount",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def visible(self,_param_name:str = 'visible'):
        inst = None
        self._add_to_query("visible",_param_name)
        pass


class AnyCardInterface(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPositions = None
    value_anyTeam:'TeamInterface' = None
    value_assetId = None
    value_averageScore = None
    value_backPictureUrl = None
    value_blueprint:'Blueprint' = None
    value_cardEditionName = None
    value_cardStats:'CardStats' = None
    value_collection = None
    value_contractAddress = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_decks:'list[Deck]' = None
    value_displayRarity = None
    value_eligiblePlayerGameScores:'list[PlayerGameScoreInterface]' = None
    value_eligibleUpcomingLeagueTracks:'list[So5LeagueTrack]' = None
    value_ethereumId = None
    value_ethereumOwner:'TokenOwner' = None
    value_grade = None
    value_gradeAfterTransfer = None
    value_inSeasonEligible = None
    value_inSeasonUntil = None
    value_ipfsPictureUrl = None
    value_ipfsUrl = None
    value_latestEnglishAuction:'TokenAuction' = None
    value_latestPrimaryOffer:'TokenPrimaryOffer' = None
    value_liveSingleBuyOffers:'list[TokenOffer]' = None
    value_liveSingleSaleOffer:'TokenOffer' = None
    value_liveSo5Lineup:'So5Lineup' = None
    value_myMintedSingleSaleOffer:'TokenOffer' = None
    value_name = None
    value_openedSo5Lineup:'So5Lineup' = None
    value_openedSo5Lineups:'list[So5Lineup]' = None
    value_ownershipHistory:'list[TokenOwner]' = None
    value_pendingWithdrawal:'TokenWithdrawal' = None
    value_pictureUrl = None
    value_power = None
    value_powerBreakdown:'PowerBreakdown' = None
    value_powerMalusAfterTransfer = None
    value_priceRange:'Range' = None
    value_privateMinPrices:'MonetaryAmount' = None
    value_publicMinPrices:'MonetaryAmount' = None
    value_rarityTyped = None
    value_seasonYear = None
    value_secondaryMarketFeeEnabled = None
    value_sentInLiveOffers:'list[TokenOffer]' = None
    value_serialNumber = None
    value_singleCivilYear = None
    value_slug = None
    value_sport = None
    value_subscriptionsCount = None
    value_supply = None
    value_threeDimensional = None
    value_threeDimensionalAsset:'ThreeDimensionalAsset' = None
    value_token:'Token' = None
    value_tokenOwner:'TokenOwner' = None
    value_tradeableStatus = None
    value_user:'User' = None
    value_videoUrl = None
    value_walletStatus = None
    value_xp = None
    value_xpAfterTransfer = None
    value_xpNeededForCurrentGrade = None
    value_xpNeededForNextGrade = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPositions(self,_param_name:str = 'anyPositions'):
        inst = None
        self._add_to_query("anyPositions",_param_name)
        pass

    def anyTeam(self,_param_name:str = 'anyTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("anyTeam",_param_name,inst)
        self.value_anyTeam = inst
        return inst

    def assetId(self,_param_name:str = 'assetId'):
        inst = None
        self._add_to_query("assetId",_param_name)
        pass

    def averageScore(self,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def backPictureUrl(self,_param_name:str = 'backPictureUrl'):
        inst = None
        self._add_to_query("backPictureUrl",_param_name)
        pass

    def blueprint(self,_param_name:str = 'blueprint') -> 'Blueprint':
        param_list = []
        inst = Blueprint(self,param_list)
        self._add_to_query("blueprint",_param_name,inst)
        self.value_blueprint = inst
        return inst

    def cardEditionName(self,_param_name:str = 'cardEditionName'):
        inst = None
        self._add_to_query("cardEditionName",_param_name)
        pass

    def cardStats(self,_param_name:str = 'cardStats') -> 'CardStats':
        param_list = []
        inst = CardStats(self,param_list)
        self._add_to_query("cardStats",_param_name,inst)
        self.value_cardStats = inst
        return inst

    def collection(self,_param_name:str = 'collection'):
        inst = None
        self._add_to_query("collection",_param_name)
        pass

    def contractAddress(self,_param_name:str = 'contractAddress'):
        inst = None
        self._add_to_query("contractAddress",_param_name)
        pass

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def decks(self,_param_name:str = 'decks') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def displayRarity(self,_param_name:str = 'displayRarity'):
        inst = None
        self._add_to_query("displayRarity",_param_name)
        pass

    def eligiblePlayerGameScores(self,so5LeaderboardSlug,_param_name:str = 'eligiblePlayerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("eligiblePlayerGameScores",_param_name,inst)
        self.value_eligiblePlayerGameScores = inst
        return inst

    def eligibleUpcomingLeagueTracks(self,_param_name:str = 'eligibleUpcomingLeagueTracks') -> 'So5LeagueTrack':
        param_list = []
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("eligibleUpcomingLeagueTracks",_param_name,inst)
        self.value_eligibleUpcomingLeagueTracks = inst
        return inst

    def ethereumId(self,_param_name:str = 'ethereumId'):
        inst = None
        self._add_to_query("ethereumId",_param_name)
        pass

    def ethereumOwner(self,_param_name:str = 'ethereumOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ethereumOwner",_param_name,inst)
        self.value_ethereumOwner = inst
        return inst

    def grade(self,_param_name:str = 'grade'):
        inst = None
        self._add_to_query("grade",_param_name)
        pass

    def gradeAfterTransfer(self,_param_name:str = 'gradeAfterTransfer'):
        inst = None
        self._add_to_query("gradeAfterTransfer",_param_name)
        pass

    def inSeasonEligible(self,_param_name:str = 'inSeasonEligible'):
        inst = None
        self._add_to_query("inSeasonEligible",_param_name)
        pass

    def inSeasonUntil(self,_param_name:str = 'inSeasonUntil'):
        inst = None
        self._add_to_query("inSeasonUntil",_param_name)
        pass

    def ipfsPictureUrl(self,_param_name:str = 'ipfsPictureUrl'):
        inst = None
        self._add_to_query("ipfsPictureUrl",_param_name)
        pass

    def ipfsUrl(self,_param_name:str = 'ipfsUrl'):
        inst = None
        self._add_to_query("ipfsUrl",_param_name)
        pass

    def latestEnglishAuction(self,_param_name:str = 'latestEnglishAuction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("latestEnglishAuction",_param_name,inst)
        self.value_latestEnglishAuction = inst
        return inst

    def latestPrimaryOffer(self,_param_name:str = 'latestPrimaryOffer') -> 'TokenPrimaryOffer':
        param_list = []
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("latestPrimaryOffer",_param_name,inst)
        self.value_latestPrimaryOffer = inst
        return inst

    def liveSingleBuyOffers(self,_param_name:str = 'liveSingleBuyOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleBuyOffers",_param_name,inst)
        self.value_liveSingleBuyOffers = inst
        return inst

    def liveSingleSaleOffer(self,_param_name:str = 'liveSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleSaleOffer",_param_name,inst)
        self.value_liveSingleSaleOffer = inst
        return inst

    def liveSo5Lineup(self,_param_name:str = 'liveSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("liveSo5Lineup",_param_name,inst)
        self.value_liveSo5Lineup = inst
        return inst

    def myMintedSingleSaleOffer(self,_param_name:str = 'myMintedSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("myMintedSingleSaleOffer",_param_name,inst)
        self.value_myMintedSingleSaleOffer = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def openedSo5Lineup(self,_param_name:str = 'openedSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("openedSo5Lineup",_param_name,inst)
        self.value_openedSo5Lineup = inst
        return inst

    def openedSo5Lineups(self,_param_name:str = 'openedSo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("openedSo5Lineups",_param_name,inst)
        self.value_openedSo5Lineups = inst
        return inst

    def ownershipHistory(self,_param_name:str = 'ownershipHistory') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ownershipHistory",_param_name,inst)
        self.value_ownershipHistory = inst
        return inst

    def pendingWithdrawal(self,_param_name:str = 'pendingWithdrawal') -> 'TokenWithdrawal':
        param_list = []
        inst = TokenWithdrawal(self,param_list)
        self._add_to_query("pendingWithdrawal",_param_name,inst)
        self.value_pendingWithdrawal = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def power(self,so5LeaderboardSlug,_param_name:str = 'power'):
        inst = None
        self._add_to_query("power",_param_name)
        pass

    def powerBreakdown(self,so5LeaderboardSlug,_param_name:str = 'powerBreakdown') -> 'PowerBreakdown':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PowerBreakdown(self,param_list)
        self._add_to_query("powerBreakdown",_param_name,inst)
        self.value_powerBreakdown = inst
        return inst

    def powerMalusAfterTransfer(self,_param_name:str = 'powerMalusAfterTransfer'):
        inst = None
        self._add_to_query("powerMalusAfterTransfer",_param_name)
        pass

    def priceRange(self,_param_name:str = 'priceRange') -> 'Range':
        param_list = []
        inst = Range(self,param_list)
        self._add_to_query("priceRange",_param_name,inst)
        self.value_priceRange = inst
        return inst

    def privateMinPrices(self,_param_name:str = 'privateMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("privateMinPrices",_param_name,inst)
        self.value_privateMinPrices = inst
        return inst

    def publicMinPrices(self,_param_name:str = 'publicMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("publicMinPrices",_param_name,inst)
        self.value_publicMinPrices = inst
        return inst

    def rarityTyped(self,_param_name:str = 'rarityTyped'):
        inst = None
        self._add_to_query("rarityTyped",_param_name)
        pass

    def seasonYear(self,_param_name:str = 'seasonYear'):
        inst = None
        self._add_to_query("seasonYear",_param_name)
        pass

    def secondaryMarketFeeEnabled(self,_param_name:str = 'secondaryMarketFeeEnabled'):
        inst = None
        self._add_to_query("secondaryMarketFeeEnabled",_param_name)
        pass

    def sentInLiveOffers(self,_param_name:str = 'sentInLiveOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("sentInLiveOffers",_param_name,inst)
        self.value_sentInLiveOffers = inst
        return inst

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def singleCivilYear(self,_param_name:str = 'singleCivilYear'):
        inst = None
        self._add_to_query("singleCivilYear",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def supply(self,_param_name:str = 'supply'):
        inst = None
        self._add_to_query("supply",_param_name)
        pass

    def threeDimensional(self,_param_name:str = 'threeDimensional'):
        inst = None
        self._add_to_query("threeDimensional",_param_name)
        pass

    def threeDimensionalAsset(self,_param_name:str = 'threeDimensionalAsset') -> 'ThreeDimensionalAsset':
        param_list = []
        inst = ThreeDimensionalAsset(self,param_list)
        self._add_to_query("threeDimensionalAsset",_param_name,inst)
        self.value_threeDimensionalAsset = inst
        return inst

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst

    def tokenOwner(self,_param_name:str = 'tokenOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("tokenOwner",_param_name,inst)
        self.value_tokenOwner = inst
        return inst

    def tradeableStatus(self,_param_name:str = 'tradeableStatus'):
        inst = None
        self._add_to_query("tradeableStatus",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def videoUrl(self,derivative,_param_name:str = 'videoUrl'):
        inst = None
        self._add_to_query("videoUrl",_param_name)
        pass

    def walletStatus(self,_param_name:str = 'walletStatus'):
        inst = None
        self._add_to_query("walletStatus",_param_name)
        pass

    def xp(self,_param_name:str = 'xp'):
        inst = None
        self._add_to_query("xp",_param_name)
        pass

    def xpAfterTransfer(self,_param_name:str = 'xpAfterTransfer'):
        inst = None
        self._add_to_query("xpAfterTransfer",_param_name)
        pass

    def xpNeededForCurrentGrade(self,_param_name:str = 'xpNeededForCurrentGrade'):
        inst = None
        self._add_to_query("xpNeededForCurrentGrade",_param_name)
        pass

    def xpNeededForNextGrade(self,_param_name:str = 'xpNeededForNextGrade'):
        inst = None
        self._add_to_query("xpNeededForNextGrade",_param_name)
        pass


class CardCollectionCardScoreBreakdown(GraphQLObject):
    value_firstOwner = None
    value_firstSerialNumber = None
    value_holding = None
    value_owner = None
    value_shirtMatchingSerialNumber = None
    value_specialEdition = None
    value_total = None
    def firstOwner(self,_param_name:str = 'firstOwner'):
        inst = None
        self._add_to_query("firstOwner",_param_name)
        pass

    def firstSerialNumber(self,_param_name:str = 'firstSerialNumber'):
        inst = None
        self._add_to_query("firstSerialNumber",_param_name)
        pass

    def holding(self,_param_name:str = 'holding'):
        inst = None
        self._add_to_query("holding",_param_name)
        pass

    def owner(self,_param_name:str = 'owner'):
        inst = None
        self._add_to_query("owner",_param_name)
        pass

    def shirtMatchingSerialNumber(self,_param_name:str = 'shirtMatchingSerialNumber'):
        inst = None
        self._add_to_query("shirtMatchingSerialNumber",_param_name)
        pass

    def specialEdition(self,_param_name:str = 'specialEdition'):
        inst = None
        self._add_to_query("specialEdition",_param_name)
        pass

    def total(self,_param_name:str = 'total'):
        inst = None
        self._add_to_query("total",_param_name)
        pass


class CardCollectionCard(GraphQLObject):
    value_anyCard:'AnyCardInterface' = None
    value_card:'Card' = None
    value_cardCollection:'CardCollection' = None
    value_heldSince = None
    value_highlighted = None
    value_id = None
    value_scoreBreakdown:'CardCollectionCardScoreBreakdown' = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def cardCollection(self,_param_name:str = 'cardCollection') -> 'CardCollection':
        param_list = []
        inst = CardCollection(self,param_list)
        self._add_to_query("cardCollection",_param_name,inst)
        self.value_cardCollection = inst
        return inst

    def heldSince(self,_param_name:str = 'heldSince'):
        inst = None
        self._add_to_query("heldSince",_param_name)
        pass

    def highlighted(self,_param_name:str = 'highlighted'):
        inst = None
        self._add_to_query("highlighted",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def scoreBreakdown(self,_param_name:str = 'scoreBreakdown') -> 'CardCollectionCardScoreBreakdown':
        param_list = []
        inst = CardCollectionCardScoreBreakdown(self,param_list)
        self._add_to_query("scoreBreakdown",_param_name,inst)
        self.value_scoreBreakdown = inst
        return inst


class CardCollectionSlot(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_cardCollectionCards:'list[CardCollectionCard]' = None
    value_cardPictureUrl = None
    value_customCardEditionName = None
    value_displayedRequirements = None
    value_id = None
    value_player:'Player' = None
    value_rarity = None
    value_season:'Season' = None
    value_serialNumber = None
    value_team = None
    value_transferMarketFilters = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def cardCollectionCards(self,forUserSlug,_param_name:str = 'cardCollectionCards') -> 'CardCollectionCard':
        param_list = []
        param_list.append(("forUserSlug",forUserSlug))
        inst = CardCollectionCard(self,param_list)
        self._add_to_query("cardCollectionCards",_param_name,inst)
        self.value_cardCollectionCards = inst
        return inst

    def cardPictureUrl(self,_param_name:str = 'cardPictureUrl'):
        inst = None
        self._add_to_query("cardPictureUrl",_param_name)
        pass

    def customCardEditionName(self,_param_name:str = 'customCardEditionName'):
        inst = None
        self._add_to_query("customCardEditionName",_param_name)
        pass

    def displayedRequirements(self,_param_name:str = 'displayedRequirements'):
        inst = None
        self._add_to_query("displayedRequirements",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass

    def transferMarketFilters(self,_param_name:str = 'transferMarketFilters'):
        inst = None
        self._add_to_query("transferMarketFilters",_param_name)
        pass


class UserCardCollectionSlot(GraphQLObject):
    value_cardCollectionCards:'list[CardCollectionCard]' = None
    value_cardCollectionCardsCount = None
    value_highlightedCardCollectionCard:'CardCollectionCard' = None
    value_slot:'CardCollectionSlot' = None
    value_slug = None
    def cardCollectionCards(self,_param_name:str = 'cardCollectionCards') -> 'CardCollectionCard':
        param_list = []
        inst = CardCollectionCard(self,param_list)
        self._add_to_query("cardCollectionCards",_param_name,inst)
        self.value_cardCollectionCards = inst
        return inst

    def cardCollectionCardsCount(self,_param_name:str = 'cardCollectionCardsCount'):
        inst = None
        self._add_to_query("cardCollectionCardsCount",_param_name)
        pass

    def highlightedCardCollectionCard(self,_param_name:str = 'highlightedCardCollectionCard') -> 'CardCollectionCard':
        param_list = []
        inst = CardCollectionCard(self,param_list)
        self._add_to_query("highlightedCardCollectionCard",_param_name,inst)
        self.value_highlightedCardCollectionCard = inst
        return inst

    def slot(self,_param_name:str = 'slot') -> 'CardCollectionSlot':
        param_list = []
        inst = CardCollectionSlot(self,param_list)
        self._add_to_query("slot",_param_name,inst)
        self.value_slot = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass


class UserCardCollection(GraphQLObject):
    value_bonus = None
    value_cardCollection:'CardCollection' = None
    value_cardCollectionCards:'list[CardCollectionCard]' = None
    value_complete = None
    value_completedAt = None
    value_fulfilledSlotsCount = None
    value_id = None
    value_liveRanking = None
    value_score = None
    value_slots:'list[UserCardCollectionSlot]' = None
    value_user:'User' = None
    def bonus(self,_param_name:str = 'bonus'):
        inst = None
        self._add_to_query("bonus",_param_name)
        pass

    def cardCollection(self,_param_name:str = 'cardCollection') -> 'CardCollection':
        param_list = []
        inst = CardCollection(self,param_list)
        self._add_to_query("cardCollection",_param_name,inst)
        self.value_cardCollection = inst
        return inst

    def cardCollectionCards(self,_param_name:str = 'cardCollectionCards') -> 'CardCollectionCard':
        param_list = []
        inst = CardCollectionCard(self,param_list)
        self._add_to_query("cardCollectionCards",_param_name,inst)
        self.value_cardCollectionCards = inst
        return inst

    def complete(self,_param_name:str = 'complete'):
        inst = None
        self._add_to_query("complete",_param_name)
        pass

    def completedAt(self,_param_name:str = 'completedAt'):
        inst = None
        self._add_to_query("completedAt",_param_name)
        pass

    def fulfilledSlotsCount(self,_param_name:str = 'fulfilledSlotsCount'):
        inst = None
        self._add_to_query("fulfilledSlotsCount",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def liveRanking(self,_param_name:str = 'liveRanking'):
        inst = None
        self._add_to_query("liveRanking",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def slots(self,_param_name:str = 'slots') -> 'UserCardCollectionSlot':
        param_list = []
        inst = UserCardCollectionSlot(self,param_list)
        self._add_to_query("slots",_param_name,inst)
        self.value_slots = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class UserCardCollectionEdge(GraphQLObject):
    value_cursor = None
    value_node:'UserCardCollection' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'UserCardCollection':
        param_list = []
        inst = UserCardCollection(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class UserCardCollectionConnection(GraphQLObject):
    value_edges:'list[UserCardCollectionEdge]' = None
    value_nodes:'list[UserCardCollection]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'UserCardCollectionEdge':
        param_list = []
        inst = UserCardCollectionEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'UserCardCollection':
        param_list = []
        inst = UserCardCollection(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class CardCollectionBonusThreshold(GraphQLObject):
    value_bonus = None
    value_threshold = None
    def bonus(self,_param_name:str = 'bonus'):
        inst = None
        self._add_to_query("bonus",_param_name)
        pass

    def threshold(self,_param_name:str = 'threshold'):
        inst = None
        self._add_to_query("threshold",_param_name)
        pass


class CardCollection(GraphQLObject):
    value_backgroundPictureUrl = None
    value_bannerPictureUrl = None
    value_bestByCompletedAt:'UserCardCollectionConnection' = None
    value_bestByScore:'UserCardCollectionConnection' = None
    value_bonusThresholds:'list[CardCollectionBonusThreshold]' = None
    value_complete = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_emptySlotBackgroundPictureUrl = None
    value_fulfilledSlotsCount = None
    value_id = None
    value_name = None
    value_rarity = None
    value_relatedShield:'SkinShopItem' = None
    value_scoreRankingSize = None
    value_season:'Season' = None
    value_slots:'list[CardCollectionSlot]' = None
    value_slotsCount = None
    value_slug = None
    value_socialPictureFingerprint = None
    value_socialPictureUrls:'SocialPictureDerivative' = None
    value_subscriptionsCount = None
    value_subtitle = None
    value_team = None
    value_userCardCollection:'UserCardCollection' = None
    def backgroundPictureUrl(self,_param_name:str = 'backgroundPictureUrl'):
        inst = None
        self._add_to_query("backgroundPictureUrl",_param_name)
        pass

    def bannerPictureUrl(self,_param_name:str = 'bannerPictureUrl'):
        inst = None
        self._add_to_query("bannerPictureUrl",_param_name)
        pass

    def bestByCompletedAt(self,after,before,first,last,_param_name:str = 'bestByCompletedAt') -> 'UserCardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserCardCollectionConnection(self,param_list)
        self._add_to_query("bestByCompletedAt",_param_name,inst)
        self.value_bestByCompletedAt = inst
        return inst

    def bestByScore(self,after,before,first,last,_param_name:str = 'bestByScore') -> 'UserCardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserCardCollectionConnection(self,param_list)
        self._add_to_query("bestByScore",_param_name,inst)
        self.value_bestByScore = inst
        return inst

    def bonusThresholds(self,_param_name:str = 'bonusThresholds') -> 'CardCollectionBonusThreshold':
        param_list = []
        inst = CardCollectionBonusThreshold(self,param_list)
        self._add_to_query("bonusThresholds",_param_name,inst)
        self.value_bonusThresholds = inst
        return inst

    def complete(self,forUserSlug,_param_name:str = 'complete'):
        inst = None
        self._add_to_query("complete",_param_name)
        pass

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def emptySlotBackgroundPictureUrl(self,_param_name:str = 'emptySlotBackgroundPictureUrl'):
        inst = None
        self._add_to_query("emptySlotBackgroundPictureUrl",_param_name)
        pass

    def fulfilledSlotsCount(self,forUserSlug,_param_name:str = 'fulfilledSlotsCount'):
        inst = None
        self._add_to_query("fulfilledSlotsCount",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def relatedShield(self,_param_name:str = 'relatedShield') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("relatedShield",_param_name,inst)
        self.value_relatedShield = inst
        return inst

    def scoreRankingSize(self,_param_name:str = 'scoreRankingSize'):
        inst = None
        self._add_to_query("scoreRankingSize",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def slots(self,_param_name:str = 'slots') -> 'CardCollectionSlot':
        param_list = []
        inst = CardCollectionSlot(self,param_list)
        self._add_to_query("slots",_param_name,inst)
        self.value_slots = inst
        return inst

    def slotsCount(self,_param_name:str = 'slotsCount'):
        inst = None
        self._add_to_query("slotsCount",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def socialPictureFingerprint(self,forUserSlug,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def socialPictureUrls(self,forUserSlug,_param_name:str = 'socialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        param_list.append(("forUserSlug",forUserSlug))
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("socialPictureUrls",_param_name,inst)
        self.value_socialPictureUrls = inst
        return inst

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def subtitle(self,_param_name:str = 'subtitle'):
        inst = None
        self._add_to_query("subtitle",_param_name)
        pass

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass

    def userCardCollection(self,forUserSlug,_param_name:str = 'userCardCollection') -> 'UserCardCollection':
        param_list = []
        param_list.append(("forUserSlug",forUserSlug))
        inst = UserCardCollection(self,param_list)
        self._add_to_query("userCardCollection",_param_name,inst)
        self.value_userCardCollection = inst
        return inst


class CardCollectionRequirement(GraphQLObject):
    value_cardCollection:'CardCollection' = None
    value_score = None
    def cardCollection(self,_param_name:str = 'cardCollection') -> 'CardCollection':
        param_list = []
        inst = CardCollection(self,param_list)
        self._add_to_query("cardCollection",_param_name,inst)
        self.value_cardCollection = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass


class ShopItem(GraphQLObject):
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_color = None
    value_createdAt = None
    value_description = None
    value_disabled = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def color(self,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass


class FootballRewardShopItem(GraphQLObject):
    value_quantity = None
    value_shopItem:'ShopItem' = None
    def quantity(self,_param_name:str = 'quantity'):
        inst = None
        self._add_to_query("quantity",_param_name)
        pass

    def shopItem(self,_param_name:str = 'shopItem') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItem",_param_name,inst)
        self.value_shopItem = inst
        return inst


class ProbabilisticBundleSlotConfig(GraphQLObject):
    value_arenaTickets = None
    value_cardShards:'list[CardShardRewardConfig]' = None
    value_cards:'list[So5RewardCardConfig]' = None
    value_conversionCredit:'ConversionCreditRewardConfig' = None
    value_deliverableItems:'list[RewardDeliverableItem]' = None
    value_probability = None
    value_rewardShopItems:'list[FootballRewardShopItem]' = None
    def arenaTickets(self,_param_name:str = 'arenaTickets'):
        inst = None
        self._add_to_query("arenaTickets",_param_name)
        pass

    def cardShards(self,_param_name:str = 'cardShards') -> 'CardShardRewardConfig':
        param_list = []
        inst = CardShardRewardConfig(self,param_list)
        self._add_to_query("cardShards",_param_name,inst)
        self.value_cardShards = inst
        return inst

    def cards(self,_param_name:str = 'cards') -> 'So5RewardCardConfig':
        param_list = []
        inst = So5RewardCardConfig(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'ConversionCreditRewardConfig':
        param_list = []
        inst = ConversionCreditRewardConfig(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def deliverableItems(self,_param_name:str = 'deliverableItems') -> 'RewardDeliverableItem':
        param_list = []
        inst = RewardDeliverableItem(self,param_list)
        self._add_to_query("deliverableItems",_param_name,inst)
        self.value_deliverableItems = inst
        return inst

    def probability(self,_param_name:str = 'probability'):
        inst = None
        self._add_to_query("probability",_param_name)
        pass

    def rewardShopItems(self,_param_name:str = 'rewardShopItems') -> 'FootballRewardShopItem':
        param_list = []
        inst = FootballRewardShopItem(self,param_list)
        self._add_to_query("rewardShopItems",_param_name,inst)
        self.value_rewardShopItems = inst
        return inst


class ProbabilisticBundleConfigSlot(GraphQLObject):
    value_probableConfigs:'list[ProbabilisticBundleSlotConfig]' = None
    def probableConfigs(self,_param_name:str = 'probableConfigs') -> 'ProbabilisticBundleSlotConfig':
        param_list = []
        inst = ProbabilisticBundleSlotConfig(self,param_list)
        self._add_to_query("probableConfigs",_param_name,inst)
        self.value_probableConfigs = inst
        return inst


class ProbabilisticBundleConfig(GraphQLObject):
    value_description = None
    value_design = None
    value_division = None
    value_iconUrl = None
    value_id = None
    value_name = None
    value_neonColor = None
    value_openingScnUrl = None
    value_pictureUrl = None
    value_quality = None
    value_rarity = None
    value_slots:'list[ProbabilisticBundleConfigSlot]' = None
    value_stars = None
    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def design(self,_param_name:str = 'design'):
        inst = None
        self._add_to_query("design",_param_name)
        pass

    def division(self,_param_name:str = 'division'):
        inst = None
        self._add_to_query("division",_param_name)
        pass

    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def neonColor(self,_param_name:str = 'neonColor'):
        inst = None
        self._add_to_query("neonColor",_param_name)
        pass

    def openingScnUrl(self,_param_name:str = 'openingScnUrl'):
        inst = None
        self._add_to_query("openingScnUrl",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def quality(self,_param_name:str = 'quality'):
        inst = None
        self._add_to_query("quality",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def slots(self,_param_name:str = 'slots') -> 'ProbabilisticBundleConfigSlot':
        param_list = []
        inst = ProbabilisticBundleConfigSlot(self,param_list)
        self._add_to_query("slots",_param_name,inst)
        self.value_slots = inst
        return inst

    def stars(self,_param_name:str = 'stars'):
        inst = None
        self._add_to_query("stars",_param_name)
        pass


class ProbabilisticBundleSlotItemInterface(GraphQLObject):
    value_id = None
    value_intensity = None
    value_neonColor = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def intensity(self,_param_name:str = 'intensity'):
        inst = None
        self._add_to_query("intensity",_param_name)
        pass

    def neonColor(self,_param_name:str = 'neonColor'):
        inst = None
        self._add_to_query("neonColor",_param_name)
        pass


class ProbabilisticBundleSlot(GraphQLObject):
    value_drawnConfig:'ProbabilisticBundleSlotConfig' = None
    value_intensity = None
    value_items:'list[ProbabilisticBundleSlotItemInterface]' = None
    value_neonColor = None
    value_probableConfigs:'list[ProbabilisticBundleSlotConfig]' = None
    def drawnConfig(self,_param_name:str = 'drawnConfig') -> 'ProbabilisticBundleSlotConfig':
        param_list = []
        inst = ProbabilisticBundleSlotConfig(self,param_list)
        self._add_to_query("drawnConfig",_param_name,inst)
        self.value_drawnConfig = inst
        return inst

    def intensity(self,_param_name:str = 'intensity'):
        inst = None
        self._add_to_query("intensity",_param_name)
        pass

    def items(self,_param_name:str = 'items') -> 'ProbabilisticBundleSlotItemInterface':
        param_list = []
        inst = ProbabilisticBundleSlotItemInterface(self,param_list)
        self._add_to_query("items",_param_name,inst)
        self.value_items = inst
        return inst

    def neonColor(self,_param_name:str = 'neonColor'):
        inst = None
        self._add_to_query("neonColor",_param_name)
        pass

    def probableConfigs(self,_param_name:str = 'probableConfigs') -> 'ProbabilisticBundleSlotConfig':
        param_list = []
        inst = ProbabilisticBundleSlotConfig(self,param_list)
        self._add_to_query("probableConfigs",_param_name,inst)
        self.value_probableConfigs = inst
        return inst


class ProbabilisticBundle(GraphQLObject):
    value_config:'ProbabilisticBundleConfig' = None
    value_description = None
    value_design = None
    value_division = None
    value_iconUrl = None
    value_id = None
    value_items:'list[ProbabilisticBundleSlotItemInterface]' = None
    value_name = None
    value_neonColor = None
    value_opened = None
    value_openingScnUrl = None
    value_pictureUrl = None
    value_quality = None
    value_rarity = None
    value_slots:'list[ProbabilisticBundleSlot]' = None
    value_so5Reward:'So5Reward' = None
    def config(self,_param_name:str = 'config') -> 'ProbabilisticBundleConfig':
        param_list = []
        inst = ProbabilisticBundleConfig(self,param_list)
        self._add_to_query("config",_param_name,inst)
        self.value_config = inst
        return inst

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def design(self,_param_name:str = 'design'):
        inst = None
        self._add_to_query("design",_param_name)
        pass

    def division(self,_param_name:str = 'division'):
        inst = None
        self._add_to_query("division",_param_name)
        pass

    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def items(self,_param_name:str = 'items') -> 'ProbabilisticBundleSlotItemInterface':
        param_list = []
        inst = ProbabilisticBundleSlotItemInterface(self,param_list)
        self._add_to_query("items",_param_name,inst)
        self.value_items = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def neonColor(self,_param_name:str = 'neonColor'):
        inst = None
        self._add_to_query("neonColor",_param_name)
        pass

    def opened(self,_param_name:str = 'opened'):
        inst = None
        self._add_to_query("opened",_param_name)
        pass

    def openingScnUrl(self,_param_name:str = 'openingScnUrl'):
        inst = None
        self._add_to_query("openingScnUrl",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def quality(self,_param_name:str = 'quality'):
        inst = None
        self._add_to_query("quality",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def slots(self,_param_name:str = 'slots') -> 'ProbabilisticBundleSlot':
        param_list = []
        inst = ProbabilisticBundleSlot(self,param_list)
        self._add_to_query("slots",_param_name,inst)
        self.value_slots = inst
        return inst

    def so5Reward(self,_param_name:str = 'so5Reward') -> 'So5Reward':
        param_list = []
        inst = So5Reward(self,param_list)
        self._add_to_query("so5Reward",_param_name,inst)
        self.value_so5Reward = inst
        return inst


class RewardConfig(GraphQLObject):
    value_arenaTicketAmount = None
    value_coinAmount = None
    value_probabilisticBundleConfig:'ProbabilisticBundle' = None
    value_probabilisticBundleConfiguration:'ProbabilisticBundleConfig' = None
    def arenaTicketAmount(self,_param_name:str = 'arenaTicketAmount'):
        inst = None
        self._add_to_query("arenaTicketAmount",_param_name)
        pass

    def coinAmount(self,_param_name:str = 'coinAmount'):
        inst = None
        self._add_to_query("coinAmount",_param_name)
        pass

    def probabilisticBundleConfig(self,_param_name:str = 'probabilisticBundleConfig') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundleConfig",_param_name,inst)
        self.value_probabilisticBundleConfig = inst
        return inst

    def probabilisticBundleConfiguration(self,_param_name:str = 'probabilisticBundleConfiguration') -> 'ProbabilisticBundleConfig':
        param_list = []
        inst = ProbabilisticBundleConfig(self,param_list)
        self._add_to_query("probabilisticBundleConfiguration",_param_name,inst)
        self.value_probabilisticBundleConfiguration = inst
        return inst


class FootballManagerTask(GraphQLObject):
    value_aasmState = None
    value_claimedAt = None
    value_coinAmount = None
    value_id = None
    value_label = None
    value_probabilisticBundle:'ProbabilisticBundle' = None
    value_progression = None
    value_readyAt = None
    value_resetAt = None
    value_rewardConfig:'RewardConfig' = None
    value_showCardTutorial = None
    value_socialWall = None
    value_target = None
    value_taskSlug = None
    value_title = None
    value_unlocksArena = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def claimedAt(self,_param_name:str = 'claimedAt'):
        inst = None
        self._add_to_query("claimedAt",_param_name)
        pass

    def coinAmount(self,_param_name:str = 'coinAmount'):
        inst = None
        self._add_to_query("coinAmount",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def label(self,_param_name:str = 'label'):
        inst = None
        self._add_to_query("label",_param_name)
        pass

    def probabilisticBundle(self,_param_name:str = 'probabilisticBundle') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundle",_param_name,inst)
        self.value_probabilisticBundle = inst
        return inst

    def progression(self,_param_name:str = 'progression'):
        inst = None
        self._add_to_query("progression",_param_name)
        pass

    def readyAt(self,_param_name:str = 'readyAt'):
        inst = None
        self._add_to_query("readyAt",_param_name)
        pass

    def resetAt(self,_param_name:str = 'resetAt'):
        inst = None
        self._add_to_query("resetAt",_param_name)
        pass

    def rewardConfig(self,_param_name:str = 'rewardConfig') -> 'RewardConfig':
        param_list = []
        inst = RewardConfig(self,param_list)
        self._add_to_query("rewardConfig",_param_name,inst)
        self.value_rewardConfig = inst
        return inst

    def showCardTutorial(self,_param_name:str = 'showCardTutorial'):
        inst = None
        self._add_to_query("showCardTutorial",_param_name)
        pass

    def socialWall(self,_param_name:str = 'socialWall'):
        inst = None
        self._add_to_query("socialWall",_param_name)
        pass

    def target(self,_param_name:str = 'target'):
        inst = None
        self._add_to_query("target",_param_name)
        pass

    def taskSlug(self,_param_name:str = 'taskSlug'):
        inst = None
        self._add_to_query("taskSlug",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def unlocksArena(self,_param_name:str = 'unlocksArena'):
        inst = None
        self._add_to_query("unlocksArena",_param_name)
        pass


class FootballRivalsEloGroup(GraphQLObject):
    value_description = None
    value__from = None
    value_id = None
    value_name = None
    value_pictureUrl = None
    value_to = None
    value_type = None
    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def _from(self,_param_name:str = '_from'):
        inst = None
        self._add_to_query("_from",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def to(self,_param_name:str = 'to'):
        inst = None
        self._add_to_query("to",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class FootballRivalsDivisionLeaderboardDivisionConfig(GraphQLObject):
    value_badgeUrl = None
    value_id = None
    value_shortTitle = None
    value_title = None
    def badgeUrl(self,_param_name:str = 'badgeUrl'):
        inst = None
        self._add_to_query("badgeUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def shortTitle(self,_param_name:str = 'shortTitle'):
        inst = None
        self._add_to_query("shortTitle",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class FootballRivalsDivisionLeaderboardRankingReward(GraphQLObject):
    value_probabilisticBundleConfig:'ProbabilisticBundle' = None
    value_probabilisticBundleConfiguration:'ProbabilisticBundleConfig' = None
    value_rank = None
    def probabilisticBundleConfig(self,_param_name:str = 'probabilisticBundleConfig') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundleConfig",_param_name,inst)
        self.value_probabilisticBundleConfig = inst
        return inst

    def probabilisticBundleConfiguration(self,_param_name:str = 'probabilisticBundleConfiguration') -> 'ProbabilisticBundleConfig':
        param_list = []
        inst = ProbabilisticBundleConfig(self,param_list)
        self._add_to_query("probabilisticBundleConfiguration",_param_name,inst)
        self.value_probabilisticBundleConfiguration = inst
        return inst

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass


class FootballRivalsDivisionLeaderboardConfig(GraphQLObject):
    value_division = None
    value_divisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_managerCountConditionToRevealLeaderboard = None
    value_maximumSize = None
    value_promotedCount = None
    value_promotedDivisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_rankingRewardConfig:'list[FootballRivalsDivisionLeaderboardRankingReward]' = None
    value_relegatedCount = None
    value_relegatedDivisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    def division(self,_param_name:str = 'division'):
        inst = None
        self._add_to_query("division",_param_name)
        pass

    def divisionConfig(self,_param_name:str = 'divisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("divisionConfig",_param_name,inst)
        self.value_divisionConfig = inst
        return inst

    def managerCountConditionToRevealLeaderboard(self,_param_name:str = 'managerCountConditionToRevealLeaderboard'):
        inst = None
        self._add_to_query("managerCountConditionToRevealLeaderboard",_param_name)
        pass

    def maximumSize(self,_param_name:str = 'maximumSize'):
        inst = None
        self._add_to_query("maximumSize",_param_name)
        pass

    def promotedCount(self,_param_name:str = 'promotedCount'):
        inst = None
        self._add_to_query("promotedCount",_param_name)
        pass

    def promotedDivisionConfig(self,_param_name:str = 'promotedDivisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("promotedDivisionConfig",_param_name,inst)
        self.value_promotedDivisionConfig = inst
        return inst

    def rankingRewardConfig(self,_param_name:str = 'rankingRewardConfig') -> 'FootballRivalsDivisionLeaderboardRankingReward':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardRankingReward(self,param_list)
        self._add_to_query("rankingRewardConfig",_param_name,inst)
        self.value_rankingRewardConfig = inst
        return inst

    def relegatedCount(self,_param_name:str = 'relegatedCount'):
        inst = None
        self._add_to_query("relegatedCount",_param_name)
        pass

    def relegatedDivisionConfig(self,_param_name:str = 'relegatedDivisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("relegatedDivisionConfig",_param_name,inst)
        self.value_relegatedDivisionConfig = inst
        return inst


class FootballRivalsSquad(GraphQLObject):
    value_administrator:'User' = None
    value_canJoin:'Validity' = None
    value_captain:'FootballRivalsManager' = None
    value_conversionCredit:'ConversionCredit' = None
    value_conversionCreditCampaign:'ConversionCreditCampaign' = None
    value_currentRanking:'FootballRivalsSquadsLeaderboardRanking' = None
    value_description = None
    value_displayName = None
    value_divisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_id = None
    value_joinDisabled = None
    value_joinRules:'So5Rules' = None
    value_joinSecret = None
    value_logo:'SkinShopItem' = None
    value_managers:'list[FootballRivalsManager]' = None
    value_membership:'UserGroupMembershipInterface' = None
    value_memberships:'list[UserGroupMembershipInterface]' = None
    value_membershipsCount = None
    value_membershipsPaginated:'So5UserGroupMembershipsPaginated' = None
    value_myMembership:'UserGroupMembershipInterface' = None
    value_publiclyAccessible = None
    value_rewardsConfig:'LeaderboardRewardsConfig' = None
    value_slug = None
    value_socialPictureUrls:'SocialPictureDerivative' = None
    value_status = None
    value_totalRewards:'RewardsOverview' = None
    def administrator(self,_param_name:str = 'administrator') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("administrator",_param_name,inst)
        self.value_administrator = inst
        return inst

    def canJoin(self,_param_name:str = 'canJoin') -> 'Validity':
        param_list = []
        inst = Validity(self,param_list)
        self._add_to_query("canJoin",_param_name,inst)
        self.value_canJoin = inst
        return inst

    def captain(self,_param_name:str = 'captain') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("captain",_param_name,inst)
        self.value_captain = inst
        return inst

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def conversionCreditCampaign(self,_param_name:str = 'conversionCreditCampaign') -> 'ConversionCreditCampaign':
        param_list = []
        inst = ConversionCreditCampaign(self,param_list)
        self._add_to_query("conversionCreditCampaign",_param_name,inst)
        self.value_conversionCreditCampaign = inst
        return inst

    def currentRanking(self,_param_name:str = 'currentRanking') -> 'FootballRivalsSquadsLeaderboardRanking':
        param_list = []
        inst = FootballRivalsSquadsLeaderboardRanking(self,param_list)
        self._add_to_query("currentRanking",_param_name,inst)
        self.value_currentRanking = inst
        return inst

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def divisionConfig(self,_param_name:str = 'divisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("divisionConfig",_param_name,inst)
        self.value_divisionConfig = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def joinDisabled(self,_param_name:str = 'joinDisabled'):
        inst = None
        self._add_to_query("joinDisabled",_param_name)
        pass

    def joinRules(self,_param_name:str = 'joinRules') -> 'So5Rules':
        param_list = []
        inst = So5Rules(self,param_list)
        self._add_to_query("joinRules",_param_name,inst)
        self.value_joinRules = inst
        return inst

    def joinSecret(self,_param_name:str = 'joinSecret'):
        inst = None
        self._add_to_query("joinSecret",_param_name)
        pass

    def logo(self,_param_name:str = 'logo') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("logo",_param_name,inst)
        self.value_logo = inst
        return inst

    def managers(self,_param_name:str = 'managers') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("managers",_param_name,inst)
        self.value_managers = inst
        return inst

    def membership(self,userSlug,_param_name:str = 'membership') -> 'UserGroupMembershipInterface':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("membership",_param_name,inst)
        self.value_membership = inst
        return inst

    def memberships(self,_param_name:str = 'memberships') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("memberships",_param_name,inst)
        self.value_memberships = inst
        return inst

    def membershipsCount(self,_param_name:str = 'membershipsCount'):
        inst = None
        self._add_to_query("membershipsCount",_param_name)
        pass

    def membershipsPaginated(self,page,pageSize,_param_name:str = 'membershipsPaginated') -> 'So5UserGroupMembershipsPaginated':
        param_list = []
        param_list.append(("page",page))
        param_list.append(("pageSize",pageSize))
        inst = So5UserGroupMembershipsPaginated(self,param_list)
        self._add_to_query("membershipsPaginated",_param_name,inst)
        self.value_membershipsPaginated = inst
        return inst

    def myMembership(self,_param_name:str = 'myMembership') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("myMembership",_param_name,inst)
        self.value_myMembership = inst
        return inst

    def publiclyAccessible(self,_param_name:str = 'publiclyAccessible'):
        inst = None
        self._add_to_query("publiclyAccessible",_param_name)
        pass

    def rewardsConfig(self,_param_name:str = 'rewardsConfig') -> 'LeaderboardRewardsConfig':
        param_list = []
        inst = LeaderboardRewardsConfig(self,param_list)
        self._add_to_query("rewardsConfig",_param_name,inst)
        self.value_rewardsConfig = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def socialPictureUrls(self,_param_name:str = 'socialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("socialPictureUrls",_param_name,inst)
        self.value_socialPictureUrls = inst
        return inst

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def totalRewards(self,_param_name:str = 'totalRewards') -> 'RewardsOverview':
        param_list = []
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalRewards",_param_name,inst)
        self.value_totalRewards = inst
        return inst


class FootballRivalsSquadsLeaderboardRanking(GraphQLObject):
    value_cumulatedScoreDifference = None
    value_divisionChange = None
    value_divisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_eligibleRewards:'list[FootballRivalsDivisionLeaderboardRankingReward]' = None
    value_id = None
    value_leaderboard:'FootballRivalsSquadsLeaderboard' = None
    value_points = None
    value_ranking = None
    value_reward:'AnyRewardInterface' = None
    value_season:'FootballRivalsSeason' = None
    value_squad:'FootballRivalsSquad' = None
    def cumulatedScoreDifference(self,_param_name:str = 'cumulatedScoreDifference'):
        inst = None
        self._add_to_query("cumulatedScoreDifference",_param_name)
        pass

    def divisionChange(self,_param_name:str = 'divisionChange'):
        inst = None
        self._add_to_query("divisionChange",_param_name)
        pass

    def divisionConfig(self,_param_name:str = 'divisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("divisionConfig",_param_name,inst)
        self.value_divisionConfig = inst
        return inst

    def eligibleRewards(self,_param_name:str = 'eligibleRewards') -> 'FootballRivalsDivisionLeaderboardRankingReward':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardRankingReward(self,param_list)
        self._add_to_query("eligibleRewards",_param_name,inst)
        self.value_eligibleRewards = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'FootballRivalsSquadsLeaderboard':
        param_list = []
        inst = FootballRivalsSquadsLeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def reward(self,_param_name:str = 'reward') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("reward",_param_name,inst)
        self.value_reward = inst
        return inst

    def season(self,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def squad(self,_param_name:str = 'squad') -> 'FootballRivalsSquad':
        param_list = []
        inst = FootballRivalsSquad(self,param_list)
        self._add_to_query("squad",_param_name,inst)
        self.value_squad = inst
        return inst


class FootballRivalsDivisionSquadLeaderboardRankingReward(GraphQLObject):
    value_rank = None
    value_rankingRewardConfig:'list[FootballRivalsDivisionLeaderboardRankingReward]' = None
    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def rankingRewardConfig(self,_param_name:str = 'rankingRewardConfig') -> 'FootballRivalsDivisionLeaderboardRankingReward':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardRankingReward(self,param_list)
        self._add_to_query("rankingRewardConfig",_param_name,inst)
        self.value_rankingRewardConfig = inst
        return inst


class FootballRivalsDivisionSquadLeaderboardConfig(GraphQLObject):
    value_divisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_maximumSize = None
    value_promotedCount = None
    value_promotedDivisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_relegatedCount = None
    value_relegatedDivisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_squadRankingRewardConfig:'list[FootballRivalsDivisionSquadLeaderboardRankingReward]' = None
    def divisionConfig(self,_param_name:str = 'divisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("divisionConfig",_param_name,inst)
        self.value_divisionConfig = inst
        return inst

    def maximumSize(self,_param_name:str = 'maximumSize'):
        inst = None
        self._add_to_query("maximumSize",_param_name)
        pass

    def promotedCount(self,_param_name:str = 'promotedCount'):
        inst = None
        self._add_to_query("promotedCount",_param_name)
        pass

    def promotedDivisionConfig(self,_param_name:str = 'promotedDivisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("promotedDivisionConfig",_param_name,inst)
        self.value_promotedDivisionConfig = inst
        return inst

    def relegatedCount(self,_param_name:str = 'relegatedCount'):
        inst = None
        self._add_to_query("relegatedCount",_param_name)
        pass

    def relegatedDivisionConfig(self,_param_name:str = 'relegatedDivisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("relegatedDivisionConfig",_param_name,inst)
        self.value_relegatedDivisionConfig = inst
        return inst

    def squadRankingRewardConfig(self,_param_name:str = 'squadRankingRewardConfig') -> 'FootballRivalsDivisionSquadLeaderboardRankingReward':
        param_list = []
        inst = FootballRivalsDivisionSquadLeaderboardRankingReward(self,param_list)
        self._add_to_query("squadRankingRewardConfig",_param_name,inst)
        self.value_squadRankingRewardConfig = inst
        return inst


class FootballRivalsSquadsLeaderboard(GraphQLObject):
    value_endDate = None
    value_id = None
    value_leaderboardConfig:'FootballRivalsDivisionLeaderboardConfig' = None
    value_rankings:'list[FootballRivalsSquadsLeaderboardRanking]' = None
    value_rankingsCount = None
    value_season:'FootballRivalsSeason' = None
    value_squadLeaderboardConfig:'FootballRivalsDivisionSquadLeaderboardConfig' = None
    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboardConfig(self,_param_name:str = 'leaderboardConfig') -> 'FootballRivalsDivisionLeaderboardConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardConfig(self,param_list)
        self._add_to_query("leaderboardConfig",_param_name,inst)
        self.value_leaderboardConfig = inst
        return inst

    def rankings(self,_param_name:str = 'rankings') -> 'FootballRivalsSquadsLeaderboardRanking':
        param_list = []
        inst = FootballRivalsSquadsLeaderboardRanking(self,param_list)
        self._add_to_query("rankings",_param_name,inst)
        self.value_rankings = inst
        return inst

    def rankingsCount(self,_param_name:str = 'rankingsCount'):
        inst = None
        self._add_to_query("rankingsCount",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def squadLeaderboardConfig(self,_param_name:str = 'squadLeaderboardConfig') -> 'FootballRivalsDivisionSquadLeaderboardConfig':
        param_list = []
        inst = FootballRivalsDivisionSquadLeaderboardConfig(self,param_list)
        self._add_to_query("squadLeaderboardConfig",_param_name,inst)
        self.value_squadLeaderboardConfig = inst
        return inst


class FootballRivalsSquadMembershipsLeaderboardRanking(GraphQLObject):
    value_captain = None
    value_cumulatedScoreDifference = None
    value_eligibleReward:'FootballRivalsDivisionLeaderboardRankingReward' = None
    value_id = None
    value_liveGamesCount = None
    value_manager:'FootballRivalsManager' = None
    value_newRecruit = None
    value_points = None
    value_ranking = None
    value_reward:'AnyRewardInterface' = None
    value_season:'FootballRivalsSeason' = None
    value_upcomingGamesCount = None
    def captain(self,_param_name:str = 'captain'):
        inst = None
        self._add_to_query("captain",_param_name)
        pass

    def cumulatedScoreDifference(self,_param_name:str = 'cumulatedScoreDifference'):
        inst = None
        self._add_to_query("cumulatedScoreDifference",_param_name)
        pass

    def eligibleReward(self,_param_name:str = 'eligibleReward') -> 'FootballRivalsDivisionLeaderboardRankingReward':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardRankingReward(self,param_list)
        self._add_to_query("eligibleReward",_param_name,inst)
        self.value_eligibleReward = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def liveGamesCount(self,_param_name:str = 'liveGamesCount'):
        inst = None
        self._add_to_query("liveGamesCount",_param_name)
        pass

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst

    def newRecruit(self,_param_name:str = 'newRecruit'):
        inst = None
        self._add_to_query("newRecruit",_param_name)
        pass

    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def reward(self,_param_name:str = 'reward') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("reward",_param_name,inst)
        self.value_reward = inst
        return inst

    def season(self,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def upcomingGamesCount(self,_param_name:str = 'upcomingGamesCount'):
        inst = None
        self._add_to_query("upcomingGamesCount",_param_name)
        pass


class FootballRivalsSquadMembershipsLeaderboard(GraphQLObject):
    value_endDate = None
    value_id = None
    value_rankings:'list[FootballRivalsSquadMembershipsLeaderboardRanking]' = None
    value_rankingsCount = None
    value_season:'FootballRivalsSeason' = None
    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def rankings(self,_param_name:str = 'rankings') -> 'FootballRivalsSquadMembershipsLeaderboardRanking':
        param_list = []
        inst = FootballRivalsSquadMembershipsLeaderboardRanking(self,param_list)
        self._add_to_query("rankings",_param_name,inst)
        self.value_rankings = inst
        return inst

    def rankingsCount(self,_param_name:str = 'rankingsCount'):
        inst = None
        self._add_to_query("rankingsCount",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst


class FootballRivalsSeasonSquad(GraphQLObject):
    value_id = None
    value_leaderboard:'FootballRivalsSquadsLeaderboard' = None
    value_membershipsLeaderboard:'FootballRivalsSquadMembershipsLeaderboard' = None
    value_season:'FootballRivalsSeason' = None
    value_squad:'FootballRivalsSquad' = None
    value_topManagerScoresCount = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'FootballRivalsSquadsLeaderboard':
        param_list = []
        inst = FootballRivalsSquadsLeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def membershipsLeaderboard(self,_param_name:str = 'membershipsLeaderboard') -> 'FootballRivalsSquadMembershipsLeaderboard':
        param_list = []
        inst = FootballRivalsSquadMembershipsLeaderboard(self,param_list)
        self._add_to_query("membershipsLeaderboard",_param_name,inst)
        self.value_membershipsLeaderboard = inst
        return inst

    def season(self,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def squad(self,_param_name:str = 'squad') -> 'FootballRivalsSquad':
        param_list = []
        inst = FootballRivalsSquad(self,param_list)
        self._add_to_query("squad",_param_name,inst)
        self.value_squad = inst
        return inst

    def topManagerScoresCount(self,_param_name:str = 'topManagerScoresCount'):
        inst = None
        self._add_to_query("topManagerScoresCount",_param_name)
        pass


class FootballRivalsSeason(GraphQLObject):
    value_cutOffDate = None
    value_endDate = None
    value_id = None
    value_leaderboard:'FootballRivalsDivisionLeaderboard' = None
    value_myLiveGames:'list[FootballRivalsGame]' = None
    value_myPastAndUpcomingGames:'FootballRivalsGameConnection' = None
    value_myStartingGames:'list[FootballRivalsGame]' = None
    value_ranking:'FootballRivalsDivisionRanking' = None
    value_seasonSquad:'FootballRivalsSeasonSquad' = None
    value_slug = None
    value_startDate = None
    def cutOffDate(self,_param_name:str = 'cutOffDate'):
        inst = None
        self._add_to_query("cutOffDate",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboard(self,managerId,userSlug,_param_name:str = 'leaderboard') -> 'FootballRivalsDivisionLeaderboard':
        param_list = []
        param_list.append(("managerId",managerId))
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsDivisionLeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def myLiveGames(self,_param_name:str = 'myLiveGames') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("myLiveGames",_param_name,inst)
        self.value_myLiveGames = inst
        return inst

    def myPastAndUpcomingGames(self,after,before,first,last,_param_name:str = 'myPastAndUpcomingGames') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("myPastAndUpcomingGames",_param_name,inst)
        self.value_myPastAndUpcomingGames = inst
        return inst

    def myStartingGames(self,_param_name:str = 'myStartingGames') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("myStartingGames",_param_name,inst)
        self.value_myStartingGames = inst
        return inst

    def ranking(self,managerId,userSlug,_param_name:str = 'ranking') -> 'FootballRivalsDivisionRanking':
        param_list = []
        param_list.append(("managerId",managerId))
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsDivisionRanking(self,param_list)
        self._add_to_query("ranking",_param_name,inst)
        self.value_ranking = inst
        return inst

    def seasonSquad(self,managerId,squadSlug,userSlug,_param_name:str = 'seasonSquad') -> 'FootballRivalsSeasonSquad':
        param_list = []
        param_list.append(("managerId",managerId))
        param_list.append(("squadSlug",squadSlug))
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsSeasonSquad(self,param_list)
        self._add_to_query("seasonSquad",_param_name,inst)
        self.value_seasonSquad = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass


class FootballRivalsDivisionRanking(GraphQLObject):
    value_cumulatedScoreDifference = None
    value_divisionChange = None
    value_divisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_eligibleReward:'FootballRivalsDivisionLeaderboardRankingReward' = None
    value_id = None
    value_leaderboard:'FootballRivalsDivisionLeaderboard' = None
    value_liveGamesCount = None
    value_manager:'FootballRivalsManager' = None
    value_points = None
    value_ranking = None
    value_reward:'AnyRewardInterface' = None
    value_season:'FootballRivalsSeason' = None
    value_upcomingGamesCount = None
    def cumulatedScoreDifference(self,_param_name:str = 'cumulatedScoreDifference'):
        inst = None
        self._add_to_query("cumulatedScoreDifference",_param_name)
        pass

    def divisionChange(self,_param_name:str = 'divisionChange'):
        inst = None
        self._add_to_query("divisionChange",_param_name)
        pass

    def divisionConfig(self,_param_name:str = 'divisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("divisionConfig",_param_name,inst)
        self.value_divisionConfig = inst
        return inst

    def eligibleReward(self,_param_name:str = 'eligibleReward') -> 'FootballRivalsDivisionLeaderboardRankingReward':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardRankingReward(self,param_list)
        self._add_to_query("eligibleReward",_param_name,inst)
        self.value_eligibleReward = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'FootballRivalsDivisionLeaderboard':
        param_list = []
        inst = FootballRivalsDivisionLeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def liveGamesCount(self,_param_name:str = 'liveGamesCount'):
        inst = None
        self._add_to_query("liveGamesCount",_param_name)
        pass

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst

    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def reward(self,_param_name:str = 'reward') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("reward",_param_name,inst)
        self.value_reward = inst
        return inst

    def season(self,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def upcomingGamesCount(self,_param_name:str = 'upcomingGamesCount'):
        inst = None
        self._add_to_query("upcomingGamesCount",_param_name)
        pass


class FootballRivalsDivisionLeaderboard(GraphQLObject):
    value_division = None
    value_endDate = None
    value_id = None
    value_leaderboardConfig:'FootballRivalsDivisionLeaderboardConfig' = None
    value_rankings:'list[FootballRivalsDivisionRanking]' = None
    value_rankingsCount = None
    value_season:'FootballRivalsSeason' = None
    def division(self,_param_name:str = 'division'):
        inst = None
        self._add_to_query("division",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboardConfig(self,_param_name:str = 'leaderboardConfig') -> 'FootballRivalsDivisionLeaderboardConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardConfig(self,param_list)
        self._add_to_query("leaderboardConfig",_param_name,inst)
        self.value_leaderboardConfig = inst
        return inst

    def rankings(self,_param_name:str = 'rankings') -> 'FootballRivalsDivisionRanking':
        param_list = []
        inst = FootballRivalsDivisionRanking(self,param_list)
        self._add_to_query("rankings",_param_name,inst)
        self.value_rankings = inst
        return inst

    def rankingsCount(self,_param_name:str = 'rankingsCount'):
        inst = None
        self._add_to_query("rankingsCount",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst


class ChallengesCountAgainstOpponentType(GraphQLObject):
    value_lossesCount = None
    value_rivalManager:'FootballRivalsManager' = None
    value_winsCount = None
    def lossesCount(self,_param_name:str = 'lossesCount'):
        inst = None
        self._add_to_query("lossesCount",_param_name)
        pass

    def rivalManager(self,_param_name:str = 'rivalManager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("rivalManager",_param_name,inst)
        self.value_rivalManager = inst
        return inst

    def winsCount(self,_param_name:str = 'winsCount'):
        inst = None
        self._add_to_query("winsCount",_param_name)
        pass


class FootballRivalsChallengeEdge(GraphQLObject):
    value_cursor = None
    value_node:'FootballRivalsChallenge' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'FootballRivalsChallenge':
        param_list = []
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class FootballRivalsChallengeConnection(GraphQLObject):
    value_edges:'list[FootballRivalsChallengeEdge]' = None
    value_nodes:'list[FootballRivalsChallenge]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'FootballRivalsChallengeEdge':
        param_list = []
        inst = FootballRivalsChallengeEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'FootballRivalsChallenge':
        param_list = []
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class FootballRivalsManagerRecords(GraphQLObject):
    value_draws = None
    value_losses = None
    value_wins = None
    def draws(self,_param_name:str = 'draws'):
        inst = None
        self._add_to_query("draws",_param_name)
        pass

    def losses(self,_param_name:str = 'losses'):
        inst = None
        self._add_to_query("losses",_param_name)
        pass

    def wins(self,_param_name:str = 'wins'):
        inst = None
        self._add_to_query("wins",_param_name)
        pass


class RivalryStatus(GraphQLObject):
    value_color = None
    value_emoji = None
    value_title = None
    def color(self,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def emoji(self,_param_name:str = 'emoji'):
        inst = None
        self._add_to_query("emoji",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class Story(GraphQLObject):
    value_aasmState = None
    value_expiresAt = None
    value_id = None
    value_readable = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def expiresAt(self,_param_name:str = 'expiresAt'):
        inst = None
        self._add_to_query("expiresAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def readable(self,_param_name:str = 'readable'):
        inst = None
        self._add_to_query("readable",_param_name)
        pass


class FootballRivalsLeagueGame(GraphQLObject):
    value_competition:'Competition' = None
    value_games:'list[FootballRivalsGame]' = None
    def competition(self,_param_name:str = 'competition') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competition",_param_name,inst)
        self.value_competition = inst
        return inst

    def games(self,_param_name:str = 'games') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst


class FootballRivalsRivalry(GraphQLObject):
    value_games:'FootballRivalsGameConnection' = None
    value_id = None
    value_pastChallenges:'FootballRivalsChallengeConnection' = None
    value_pastOutcomesPreview = None
    value_records:'FootballRivalsManagerRecords' = None
    value_status:'RivalryStatus' = None
    value_stories:'list[Story]' = None
    value_upcomingGamesByLeague:'list[FootballRivalsLeagueGame]' = None
    value_winRatio = None
    def games(self,after,before,first,last,_param_name:str = 'games') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pastChallenges(self,after,before,first,last,_param_name:str = 'pastChallenges') -> 'FootballRivalsChallengeConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsChallengeConnection(self,param_list)
        self._add_to_query("pastChallenges",_param_name,inst)
        self.value_pastChallenges = inst
        return inst

    def pastOutcomesPreview(self,first,_param_name:str = 'pastOutcomesPreview'):
        inst = None
        self._add_to_query("pastOutcomesPreview",_param_name)
        pass

    def records(self,_param_name:str = 'records') -> 'FootballRivalsManagerRecords':
        param_list = []
        inst = FootballRivalsManagerRecords(self,param_list)
        self._add_to_query("records",_param_name,inst)
        self.value_records = inst
        return inst

    def status(self,_param_name:str = 'status') -> 'RivalryStatus':
        param_list = []
        inst = RivalryStatus(self,param_list)
        self._add_to_query("status",_param_name,inst)
        self.value_status = inst
        return inst

    def stories(self,_param_name:str = 'stories') -> 'Story':
        param_list = []
        inst = Story(self,param_list)
        self._add_to_query("stories",_param_name,inst)
        self.value_stories = inst
        return inst

    def upcomingGamesByLeague(self,fromDate,sortBy,toDate,_param_name:str = 'upcomingGamesByLeague') -> 'FootballRivalsLeagueGame':
        param_list = []
        param_list.append(("fromDate",fromDate))
        param_list.append(("sortBy",sortBy))
        param_list.append(("toDate",toDate))
        inst = FootballRivalsLeagueGame(self,param_list)
        self._add_to_query("upcomingGamesByLeague",_param_name,inst)
        self.value_upcomingGamesByLeague = inst
        return inst

    def winRatio(self,_param_name:str = 'winRatio'):
        inst = None
        self._add_to_query("winRatio",_param_name)
        pass


class FootballRivalsRankingDelta(GraphQLObject):
    value_date = None
    value_ranking = None
    def date(self,_param_name:str = 'date'):
        inst = None
        self._add_to_query("date",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass


class FootballRivalsManager(GraphQLObject):
    value_arenaGames:'FootballRivalsGameConnection' = None
    value_arenaUnlocked = None
    value_completedOrReadyArenaStreakTask:'FootballManagerTask' = None
    value_completedOrReadyTask:'FootballManagerTask' = None
    value_currentArenaStreak = None
    value_currentEloGroup:'FootballRivalsEloGroup' = None
    value_currentLeaderboard:'FootballRivalsDivisionLeaderboard' = None
    value_currentRanking:'FootballRivalsDivisionRanking' = None
    value_currentSeasonSquad:'FootballRivalsSeasonSquad' = None
    value_dailyClaimTasks:'list[FootballManagerTask]' = None
    value_division = None
    value_divisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_eloGroup = None
    value_eloScore = None
    value_featuredInvitePictureUrl = None
    value_highestEloScore = None
    value_highestLineupScore = None
    value_highestScore = None
    value_id = None
    value_mostLossesAgainstOpponent:'ChallengesCountAgainstOpponentType' = None
    value_mostWinsAgainstOpponent:'ChallengesCountAgainstOpponentType' = None
    value_myRivalry:'FootballRivalsRivalry' = None
    value_myUpcomingReceivedInvitesCount = None
    value_nextEloGroup:'FootballRivalsEloGroup' = None
    value_nickname = None
    value_pastChallenges:'FootballRivalsChallengeConnection' = None
    value_pastGames:'FootballRivalsGameConnection' = None
    value_pictureUrl = None
    value_rankingHistory:'list[FootballRivalsRankingDelta]' = None
    value_readyArenaStreakTask:'FootballManagerTask' = None
    value_readyTask:'FootballManagerTask' = None
    value_records:'FootballRivalsManagerRecords' = None
    value_user:'User' = None
    def arenaGames(self,after,before,first,last,_param_name:str = 'arenaGames') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("arenaGames",_param_name,inst)
        self.value_arenaGames = inst
        return inst

    def arenaUnlocked(self,_param_name:str = 'arenaUnlocked'):
        inst = None
        self._add_to_query("arenaUnlocked",_param_name)
        pass

    def completedOrReadyArenaStreakTask(self,_param_name:str = 'completedOrReadyArenaStreakTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("completedOrReadyArenaStreakTask",_param_name,inst)
        self.value_completedOrReadyArenaStreakTask = inst
        return inst

    def completedOrReadyTask(self,_param_name:str = 'completedOrReadyTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("completedOrReadyTask",_param_name,inst)
        self.value_completedOrReadyTask = inst
        return inst

    def currentArenaStreak(self,_param_name:str = 'currentArenaStreak'):
        inst = None
        self._add_to_query("currentArenaStreak",_param_name)
        pass

    def currentEloGroup(self,_param_name:str = 'currentEloGroup') -> 'FootballRivalsEloGroup':
        param_list = []
        inst = FootballRivalsEloGroup(self,param_list)
        self._add_to_query("currentEloGroup",_param_name,inst)
        self.value_currentEloGroup = inst
        return inst

    def currentLeaderboard(self,_param_name:str = 'currentLeaderboard') -> 'FootballRivalsDivisionLeaderboard':
        param_list = []
        inst = FootballRivalsDivisionLeaderboard(self,param_list)
        self._add_to_query("currentLeaderboard",_param_name,inst)
        self.value_currentLeaderboard = inst
        return inst

    def currentRanking(self,_param_name:str = 'currentRanking') -> 'FootballRivalsDivisionRanking':
        param_list = []
        inst = FootballRivalsDivisionRanking(self,param_list)
        self._add_to_query("currentRanking",_param_name,inst)
        self.value_currentRanking = inst
        return inst

    def currentSeasonSquad(self,_param_name:str = 'currentSeasonSquad') -> 'FootballRivalsSeasonSquad':
        param_list = []
        inst = FootballRivalsSeasonSquad(self,param_list)
        self._add_to_query("currentSeasonSquad",_param_name,inst)
        self.value_currentSeasonSquad = inst
        return inst

    def dailyClaimTasks(self,_param_name:str = 'dailyClaimTasks') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("dailyClaimTasks",_param_name,inst)
        self.value_dailyClaimTasks = inst
        return inst

    def division(self,_param_name:str = 'division'):
        inst = None
        self._add_to_query("division",_param_name)
        pass

    def divisionConfig(self,_param_name:str = 'divisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("divisionConfig",_param_name,inst)
        self.value_divisionConfig = inst
        return inst

    def eloGroup(self,_param_name:str = 'eloGroup'):
        inst = None
        self._add_to_query("eloGroup",_param_name)
        pass

    def eloScore(self,_param_name:str = 'eloScore'):
        inst = None
        self._add_to_query("eloScore",_param_name)
        pass

    def featuredInvitePictureUrl(self,_param_name:str = 'featuredInvitePictureUrl'):
        inst = None
        self._add_to_query("featuredInvitePictureUrl",_param_name)
        pass

    def highestEloScore(self,_param_name:str = 'highestEloScore'):
        inst = None
        self._add_to_query("highestEloScore",_param_name)
        pass

    def highestLineupScore(self,_param_name:str = 'highestLineupScore'):
        inst = None
        self._add_to_query("highestLineupScore",_param_name)
        pass

    def highestScore(self,_param_name:str = 'highestScore'):
        inst = None
        self._add_to_query("highestScore",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mostLossesAgainstOpponent(self,_param_name:str = 'mostLossesAgainstOpponent') -> 'ChallengesCountAgainstOpponentType':
        param_list = []
        inst = ChallengesCountAgainstOpponentType(self,param_list)
        self._add_to_query("mostLossesAgainstOpponent",_param_name,inst)
        self.value_mostLossesAgainstOpponent = inst
        return inst

    def mostWinsAgainstOpponent(self,_param_name:str = 'mostWinsAgainstOpponent') -> 'ChallengesCountAgainstOpponentType':
        param_list = []
        inst = ChallengesCountAgainstOpponentType(self,param_list)
        self._add_to_query("mostWinsAgainstOpponent",_param_name,inst)
        self.value_mostWinsAgainstOpponent = inst
        return inst

    def myRivalry(self,_param_name:str = 'myRivalry') -> 'FootballRivalsRivalry':
        param_list = []
        inst = FootballRivalsRivalry(self,param_list)
        self._add_to_query("myRivalry",_param_name,inst)
        self.value_myRivalry = inst
        return inst

    def myUpcomingReceivedInvitesCount(self,_param_name:str = 'myUpcomingReceivedInvitesCount'):
        inst = None
        self._add_to_query("myUpcomingReceivedInvitesCount",_param_name)
        pass

    def nextEloGroup(self,_param_name:str = 'nextEloGroup') -> 'FootballRivalsEloGroup':
        param_list = []
        inst = FootballRivalsEloGroup(self,param_list)
        self._add_to_query("nextEloGroup",_param_name,inst)
        self.value_nextEloGroup = inst
        return inst

    def nickname(self,_param_name:str = 'nickname'):
        inst = None
        self._add_to_query("nickname",_param_name)
        pass

    def pastChallenges(self,after,before,first,last,type,_param_name:str = 'pastChallenges') -> 'FootballRivalsChallengeConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("type",type))
        inst = FootballRivalsChallengeConnection(self,param_list)
        self._add_to_query("pastChallenges",_param_name,inst)
        self.value_pastChallenges = inst
        return inst

    def pastGames(self,after,before,first,last,onlyArena,_param_name:str = 'pastGames') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("onlyArena",onlyArena))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("pastGames",_param_name,inst)
        self.value_pastGames = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def rankingHistory(self,_param_name:str = 'rankingHistory') -> 'FootballRivalsRankingDelta':
        param_list = []
        inst = FootballRivalsRankingDelta(self,param_list)
        self._add_to_query("rankingHistory",_param_name,inst)
        self.value_rankingHistory = inst
        return inst

    def readyArenaStreakTask(self,_param_name:str = 'readyArenaStreakTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("readyArenaStreakTask",_param_name,inst)
        self.value_readyArenaStreakTask = inst
        return inst

    def readyTask(self,_param_name:str = 'readyTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("readyTask",_param_name,inst)
        self.value_readyTask = inst
        return inst

    def records(self,_param_name:str = 'records') -> 'FootballRivalsManagerRecords':
        param_list = []
        inst = FootballRivalsManagerRecords(self,param_list)
        self._add_to_query("records",_param_name,inst)
        self.value_records = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class FootballRivalsContestant(GraphQLObject):
    value_eloDelta = None
    value_id = None
    value_lineup:'FootballRivalsLineup' = None
    value_manager:'FootballRivalsManager' = None
    value_outcome = None
    value_pointsDelta = None
    value_score = None
    def eloDelta(self,_param_name:str = 'eloDelta'):
        inst = None
        self._add_to_query("eloDelta",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst

    def outcome(self,_param_name:str = 'outcome'):
        inst = None
        self._add_to_query("outcome",_param_name)
        pass

    def pointsDelta(self,_param_name:str = 'pointsDelta'):
        inst = None
        self._add_to_query("pointsDelta",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass


class FootballRivalsChallenge(GraphQLObject):
    value_aasmState = None
    value_awayContestant:'FootballRivalsContestant' = None
    value_game:'FootballRivalsGame' = None
    value_homeContestant:'FootballRivalsContestant' = None
    value_id = None
    value_postChallengeResultVideo = None
    value_rarityBonusEnabled = None
    value_socialPictureUrls:'SocialPictureDerivative' = None
    value_type = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def awayContestant(self,_param_name:str = 'awayContestant') -> 'FootballRivalsContestant':
        param_list = []
        inst = FootballRivalsContestant(self,param_list)
        self._add_to_query("awayContestant",_param_name,inst)
        self.value_awayContestant = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def homeContestant(self,_param_name:str = 'homeContestant') -> 'FootballRivalsContestant':
        param_list = []
        inst = FootballRivalsContestant(self,param_list)
        self._add_to_query("homeContestant",_param_name,inst)
        self.value_homeContestant = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def postChallengeResultVideo(self,_param_name:str = 'postChallengeResultVideo'):
        inst = None
        self._add_to_query("postChallengeResultVideo",_param_name)
        pass

    def rarityBonusEnabled(self,_param_name:str = 'rarityBonusEnabled'):
        inst = None
        self._add_to_query("rarityBonusEnabled",_param_name)
        pass

    def socialPictureUrls(self,_param_name:str = 'socialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("socialPictureUrls",_param_name,inst)
        self.value_socialPictureUrls = inst
        return inst

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class Bucket(GraphQLObject):
    value_count = None
    value_max = None
    value_min = None
    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass

    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass

    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass


class FootballRivalsInvite(GraphQLObject):
    value_aasmState = None
    value_game:'FootballRivalsGame' = None
    value_id = None
    value_invitedBy:'FootballRivalsManager' = None
    value_manager:'FootballRivalsManager' = None
    value_status = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def invitedBy(self,_param_name:str = 'invitedBy') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("invitedBy",_param_name,inst)
        self.value_invitedBy = inst
        return inst

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass


class FootballRivalsChallenger(GraphQLObject):
    value_composed = None
    value_id = None
    value_invite:'FootballRivalsInvite' = None
    value_manager:'FootballRivalsManager' = None
    def composed(self,_param_name:str = 'composed'):
        inst = None
        self._add_to_query("composed",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def invite(self,_param_name:str = 'invite') -> 'FootballRivalsInvite':
        param_list = []
        inst = FootballRivalsInvite(self,param_list)
        self._add_to_query("invite",_param_name,inst)
        self.value_invite = inst
        return inst

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst


class FootballRivalsChallengerEdge(GraphQLObject):
    value_cursor = None
    value_node:'FootballRivalsChallenger' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'FootballRivalsChallenger':
        param_list = []
        inst = FootballRivalsChallenger(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class FootballRivalsChallengerConnection(GraphQLObject):
    value_edges:'list[FootballRivalsChallengerEdge]' = None
    value_nodes:'list[FootballRivalsChallenger]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'FootballRivalsChallengerEdge':
        param_list = []
        inst = FootballRivalsChallengerEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'FootballRivalsChallenger':
        param_list = []
        inst = FootballRivalsChallenger(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class FootballRivalsManagerEdge(GraphQLObject):
    value_cursor = None
    value_node:'FootballRivalsManager' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class FootballRivalsManagerConnection(GraphQLObject):
    value_edges:'list[FootballRivalsManagerEdge]' = None
    value_nodes:'list[FootballRivalsManager]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'FootballRivalsManagerEdge':
        param_list = []
        inst = FootballRivalsManagerEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class FootballRivalsDraftableObjectInterface(GraphQLObject):
    value_canSubInUntil = None
    value_capValue = None
    value_id = None
    value_lastFifteenAverageScore = None
    value_licensed = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_positions = None
    value_so5Score:'So5Score' = None
    def canSubInUntil(self,_param_name:str = 'canSubInUntil'):
        inst = None
        self._add_to_query("canSubInUntil",_param_name)
        pass

    def capValue(self,_param_name:str = 'capValue'):
        inst = None
        self._add_to_query("capValue",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastFifteenAverageScore(self,_param_name:str = 'lastFifteenAverageScore'):
        inst = None
        self._add_to_query("lastFifteenAverageScore",_param_name)
        pass

    def licensed(self,_param_name:str = 'licensed'):
        inst = None
        self._add_to_query("licensed",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def so5Score(self,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst


class FootballRivalsLineupTacticThreshold(GraphQLObject):
    value_score = None
    value_threshold = None
    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def threshold(self,_param_name:str = 'threshold'):
        inst = None
        self._add_to_query("threshold",_param_name)
        pass


class FootballRivalsLineupTactic(GraphQLObject):
    value_color = None
    value_description = None
    value_displayName = None
    value_formation = None
    value_iconUrl = None
    value_id = None
    value_slug = None
    value_stat = None
    value_statName = None
    value_thresholds:'list[FootballRivalsLineupTacticThreshold]' = None
    def color(self,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def formation(self,_param_name:str = 'formation'):
        inst = None
        self._add_to_query("formation",_param_name)
        pass

    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def stat(self,_param_name:str = 'stat'):
        inst = None
        self._add_to_query("stat",_param_name)
        pass

    def statName(self,_param_name:str = 'statName'):
        inst = None
        self._add_to_query("statName",_param_name)
        pass

    def thresholds(self,_param_name:str = 'thresholds') -> 'FootballRivalsLineupTacticThreshold':
        param_list = []
        inst = FootballRivalsLineupTacticThreshold(self,param_list)
        self._add_to_query("thresholds",_param_name,inst)
        self.value_thresholds = inst
        return inst


class FootballRivalsArenaRequest(GraphQLObject):
    value_aasmState = None
    value_id = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class CardsPreview(GraphQLObject):
    value_cards:'list[Card]' = None
    value_totalCount = None
    def cards(self,_param_name:str = 'cards') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class FootballRivalsManagersPreview(GraphQLObject):
    value_managers:'list[FootballRivalsManager]' = None
    value_totalCount = None
    def managers(self,_param_name:str = 'managers') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("managers",_param_name,inst)
        self.value_managers = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class FootballRivalsSquadMembershipChallenge(GraphQLObject):
    value_challenge:'FootballRivalsChallenge' = None
    value_id = None
    value_lineup:'FootballRivalsLineup' = None
    value_manager:'FootballRivalsManager' = None
    def challenge(self,_param_name:str = 'challenge') -> 'FootballRivalsChallenge':
        param_list = []
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("challenge",_param_name,inst)
        self.value_challenge = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst


class FootballRivalsSuggestedManager(GraphQLObject):
    value_followedBy:'FootballRivalsManager' = None
    value_followedByCount = None
    value_id = None
    value_manager:'FootballRivalsManager' = None
    def followedBy(self,_param_name:str = 'followedBy') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("followedBy",_param_name,inst)
        self.value_followedBy = inst
        return inst

    def followedByCount(self,_param_name:str = 'followedByCount'):
        inst = None
        self._add_to_query("followedByCount",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst


class UserError(GraphQLObject):
    value_code = None
    value_message = None
    value_path = None
    def code(self,_param_name:str = 'code'):
        inst = None
        self._add_to_query("code",_param_name)
        pass

    def message(self,_param_name:str = 'message'):
        inst = None
        self._add_to_query("message",_param_name)
        pass

    def path(self,_param_name:str = 'path'):
        inst = None
        self._add_to_query("path",_param_name)
        pass


class FootballRivalsOnboardingLineupSimulation(GraphQLObject):
    value_errors:'list[UserError]' = None
    value_myLineup:'FootballRivalsLineup' = None
    value_opponentLineup:'FootballRivalsLineup' = None
    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def myLineup(self,_param_name:str = 'myLineup') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("myLineup",_param_name,inst)
        self.value_myLineup = inst
        return inst

    def opponentLineup(self,_param_name:str = 'opponentLineup') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("opponentLineup",_param_name,inst)
        self.value_opponentLineup = inst
        return inst


class FootballRivalsLineupEdge(GraphQLObject):
    value_cursor = None
    value_node:'FootballRivalsLineup' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class FootballRivalsLineupUserGroupLineupConnection(GraphQLObject):
    value_edges:'list[FootballRivalsLineupEdge]' = None
    value_nodes:'list[FootballRivalsLineup]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'FootballRivalsLineupEdge':
        param_list = []
        inst = FootballRivalsLineupEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class ActivityReactionType(GraphQLObject):
    value_count = None
    value_emoji = None
    value_reacted = None
    value_reactingUsers:'list[User]' = None
    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass

    def emoji(self,_param_name:str = 'emoji'):
        inst = None
        self._add_to_query("emoji",_param_name)
        pass

    def reacted(self,_param_name:str = 'reacted'):
        inst = None
        self._add_to_query("reacted",_param_name)
        pass

    def reactingUsers(self,page,pageSize,_param_name:str = 'reactingUsers') -> 'User':
        param_list = []
        param_list.append(("page",page))
        param_list.append(("pageSize",pageSize))
        inst = User(self,param_list)
        self._add_to_query("reactingUsers",_param_name,inst)
        self.value_reactingUsers = inst
        return inst


class ActivitiesInterface(GraphQLObject):
    value_celebratable = None
    value_createdAt = None
    value_id = None
    value_reactions:'list[ActivityReactionType]' = None
    def celebratable(self,_param_name:str = 'celebratable'):
        inst = None
        self._add_to_query("celebratable",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def reactions(self,_param_name:str = 'reactions') -> 'ActivityReactionType':
        param_list = []
        inst = ActivityReactionType(self,param_list)
        self._add_to_query("reactions",_param_name,inst)
        self.value_reactions = inst
        return inst


class ActivitiesInterfaceEdge(GraphQLObject):
    value_cursor = None
    value_node:'ActivitiesInterface' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'ActivitiesInterface':
        param_list = []
        inst = ActivitiesInterface(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class ActivitiesInterfaceConnection(GraphQLObject):
    value_edges:'list[ActivitiesInterfaceEdge]' = None
    value_nodes:'list[ActivitiesInterface]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'ActivitiesInterfaceEdge':
        param_list = []
        inst = ActivitiesInterfaceEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'ActivitiesInterface':
        param_list = []
        inst = ActivitiesInterface(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class RivalsUserGroup(GraphQLObject):
    value_activities:'ActivitiesInterfaceConnection' = None
    value_administrator:'User' = None
    value_affiliate = None
    value_affiliateLinkTitle = None
    value_affiliateLinkUrl = None
    value_canJoin:'Validity' = None
    value_conversionCredit:'ConversionCredit' = None
    value_conversionCreditCampaign:'ConversionCreditCampaign' = None
    value_description = None
    value_displayName = None
    value_featured = None
    value_id = None
    value_joinDisabled = None
    value_joinRules:'So5Rules' = None
    value_joinSecret = None
    value_liveGames:'list[FootballRivalsGame]' = None
    value_logo:'SkinShopItem' = None
    value_membership:'UserGroupMembershipInterface' = None
    value_memberships:'list[UserGroupMembershipInterface]' = None
    value_membershipsCount = None
    value_membershipsPaginated:'So5UserGroupMembershipsPaginated' = None
    value_myMembership:'UserGroupMembershipInterface' = None
    value_pastGames:'FootballRivalsGameConnection' = None
    value_publiclyAccessible = None
    value_rewardsConfig:'LeaderboardRewardsConfig' = None
    value_slug = None
    value_socialPictureFingerprint = None
    value_socialPictureUrls:'SocialPictureDerivative' = None
    value_startingGames:'list[FootballRivalsGame]' = None
    value_status = None
    value_totalRewards:'RewardsOverview' = None
    value_tournament:'RivalsUserGroupTournament' = None
    value_tournamentRanking = None
    value_tournamentScore = None
    value_upcomingGames:'FootballRivalsGameConnection' = None
    def activities(self,after,before,first,last,since,_param_name:str = 'activities') -> 'ActivitiesInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("since",since))
        inst = ActivitiesInterfaceConnection(self,param_list)
        self._add_to_query("activities",_param_name,inst)
        self.value_activities = inst
        return inst

    def administrator(self,_param_name:str = 'administrator') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("administrator",_param_name,inst)
        self.value_administrator = inst
        return inst

    def affiliate(self,_param_name:str = 'affiliate'):
        inst = None
        self._add_to_query("affiliate",_param_name)
        pass

    def affiliateLinkTitle(self,_param_name:str = 'affiliateLinkTitle'):
        inst = None
        self._add_to_query("affiliateLinkTitle",_param_name)
        pass

    def affiliateLinkUrl(self,_param_name:str = 'affiliateLinkUrl'):
        inst = None
        self._add_to_query("affiliateLinkUrl",_param_name)
        pass

    def canJoin(self,_param_name:str = 'canJoin') -> 'Validity':
        param_list = []
        inst = Validity(self,param_list)
        self._add_to_query("canJoin",_param_name,inst)
        self.value_canJoin = inst
        return inst

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def conversionCreditCampaign(self,_param_name:str = 'conversionCreditCampaign') -> 'ConversionCreditCampaign':
        param_list = []
        inst = ConversionCreditCampaign(self,param_list)
        self._add_to_query("conversionCreditCampaign",_param_name,inst)
        self.value_conversionCreditCampaign = inst
        return inst

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def featured(self,_param_name:str = 'featured'):
        inst = None
        self._add_to_query("featured",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def joinDisabled(self,_param_name:str = 'joinDisabled'):
        inst = None
        self._add_to_query("joinDisabled",_param_name)
        pass

    def joinRules(self,_param_name:str = 'joinRules') -> 'So5Rules':
        param_list = []
        inst = So5Rules(self,param_list)
        self._add_to_query("joinRules",_param_name,inst)
        self.value_joinRules = inst
        return inst

    def joinSecret(self,_param_name:str = 'joinSecret'):
        inst = None
        self._add_to_query("joinSecret",_param_name)
        pass

    def liveGames(self,_param_name:str = 'liveGames') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("liveGames",_param_name,inst)
        self.value_liveGames = inst
        return inst

    def logo(self,_param_name:str = 'logo') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("logo",_param_name,inst)
        self.value_logo = inst
        return inst

    def membership(self,userSlug,_param_name:str = 'membership') -> 'UserGroupMembershipInterface':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("membership",_param_name,inst)
        self.value_membership = inst
        return inst

    def memberships(self,_param_name:str = 'memberships') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("memberships",_param_name,inst)
        self.value_memberships = inst
        return inst

    def membershipsCount(self,_param_name:str = 'membershipsCount'):
        inst = None
        self._add_to_query("membershipsCount",_param_name)
        pass

    def membershipsPaginated(self,page,pageSize,_param_name:str = 'membershipsPaginated') -> 'So5UserGroupMembershipsPaginated':
        param_list = []
        param_list.append(("page",page))
        param_list.append(("pageSize",pageSize))
        inst = So5UserGroupMembershipsPaginated(self,param_list)
        self._add_to_query("membershipsPaginated",_param_name,inst)
        self.value_membershipsPaginated = inst
        return inst

    def myMembership(self,_param_name:str = 'myMembership') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("myMembership",_param_name,inst)
        self.value_myMembership = inst
        return inst

    def pastGames(self,after,before,first,last,_param_name:str = 'pastGames') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("pastGames",_param_name,inst)
        self.value_pastGames = inst
        return inst

    def publiclyAccessible(self,_param_name:str = 'publiclyAccessible'):
        inst = None
        self._add_to_query("publiclyAccessible",_param_name)
        pass

    def rewardsConfig(self,_param_name:str = 'rewardsConfig') -> 'LeaderboardRewardsConfig':
        param_list = []
        inst = LeaderboardRewardsConfig(self,param_list)
        self._add_to_query("rewardsConfig",_param_name,inst)
        self.value_rewardsConfig = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def socialPictureFingerprint(self,myLineupId,userSlug,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def socialPictureUrls(self,myLineupId,userSlug,_param_name:str = 'socialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        param_list.append(("myLineupId",myLineupId))
        param_list.append(("userSlug",userSlug))
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("socialPictureUrls",_param_name,inst)
        self.value_socialPictureUrls = inst
        return inst

    def startingGames(self,_param_name:str = 'startingGames') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("startingGames",_param_name,inst)
        self.value_startingGames = inst
        return inst

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def totalRewards(self,_param_name:str = 'totalRewards') -> 'RewardsOverview':
        param_list = []
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalRewards",_param_name,inst)
        self.value_totalRewards = inst
        return inst

    def tournament(self,_param_name:str = 'tournament') -> 'RivalsUserGroupTournament':
        param_list = []
        inst = RivalsUserGroupTournament(self,param_list)
        self._add_to_query("tournament",_param_name,inst)
        self.value_tournament = inst
        return inst

    def tournamentRanking(self,_param_name:str = 'tournamentRanking'):
        inst = None
        self._add_to_query("tournamentRanking",_param_name)
        pass

    def tournamentScore(self,_param_name:str = 'tournamentScore'):
        inst = None
        self._add_to_query("tournamentScore",_param_name)
        pass

    def upcomingGames(self,after,before,excludingStarting,first,fromDate,last,toDate,_param_name:str = 'upcomingGames') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("excludingStarting",excludingStarting))
        param_list.append(("first",first))
        param_list.append(("fromDate",fromDate))
        param_list.append(("last",last))
        param_list.append(("toDate",toDate))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("upcomingGames",_param_name,inst)
        self.value_upcomingGames = inst
        return inst


class RivalsUserGroupEdge(GraphQLObject):
    value_cursor = None
    value_node:'RivalsUserGroup' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'RivalsUserGroup':
        param_list = []
        inst = RivalsUserGroup(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class RivalsUserGroupConnection(GraphQLObject):
    value_edges:'list[RivalsUserGroupEdge]' = None
    value_nodes:'list[RivalsUserGroup]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'RivalsUserGroupEdge':
        param_list = []
        inst = RivalsUserGroupEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'RivalsUserGroup':
        param_list = []
        inst = RivalsUserGroup(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class RivalsUserGroupTournament(GraphQLObject):
    value_affiliateUserGroups:'RivalsUserGroupConnection' = None
    value_id = None
    value_liveGames:'list[FootballRivalsGame]' = None
    value_myFeaturedGames:'list[FootballRivalsGame]' = None
    value_nextGame:'FootballRivalsGame' = None
    value_rewardsConfig:'LeaderboardRewardsConfig' = None
    value_userGroups:'RivalsUserGroupConnection' = None
    def affiliateUserGroups(self,after,before,featured,first,last,_param_name:str = 'affiliateUserGroups') -> 'RivalsUserGroupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("featured",featured))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = RivalsUserGroupConnection(self,param_list)
        self._add_to_query("affiliateUserGroups",_param_name,inst)
        self.value_affiliateUserGroups = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def liveGames(self,_param_name:str = 'liveGames') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("liveGames",_param_name,inst)
        self.value_liveGames = inst
        return inst

    def myFeaturedGames(self,_param_name:str = 'myFeaturedGames') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("myFeaturedGames",_param_name,inst)
        self.value_myFeaturedGames = inst
        return inst

    def nextGame(self,_param_name:str = 'nextGame') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("nextGame",_param_name,inst)
        self.value_nextGame = inst
        return inst

    def rewardsConfig(self,_param_name:str = 'rewardsConfig') -> 'LeaderboardRewardsConfig':
        param_list = []
        inst = LeaderboardRewardsConfig(self,param_list)
        self._add_to_query("rewardsConfig",_param_name,inst)
        self.value_rewardsConfig = inst
        return inst

    def userGroups(self,after,before,first,last,_param_name:str = 'userGroups') -> 'RivalsUserGroupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = RivalsUserGroupConnection(self,param_list)
        self._add_to_query("userGroups",_param_name,inst)
        self.value_userGroups = inst
        return inst


class FootballRivalsGame(GraphQLObject):
    value_allMyAvailableCards:'list[Card]' = None
    value_arenaChallenge:'FootballRivalsChallenge' = None
    value_arenaRequestsCount = None
    value_arenaScoreBuckets:'list[Bucket]' = None
    value_arenaTicketCost = None
    value_availableChallengers:'FootballRivalsChallengerConnection' = None
    value_availableManagers:'FootballRivalsManagerConnection' = None
    value_availablePlayers:'list[FootballRivalsDraftableObjectInterface]' = None
    value_boosted = None
    value_cap = None
    value_challenges:'list[FootballRivalsChallenge]' = None
    value_challengesPaginated:'FootballRivalsChallengeConnection' = None
    value_draftablePlayers:'list[FootballRivalsDraftableObjectInterface]' = None
    value_eloDelta = None
    value_formationKnown = None
    value_game:'Game' = None
    value_id = None
    value_lineup:'FootballRivalsLineup' = None
    value_lineupTactics:'list[FootballRivalsLineupTactic]' = None
    value_myArenaChallenge:'FootballRivalsChallenge' = None
    value_myArenaRequest:'FootballRivalsArenaRequest' = None
    value_myAvailableCards:'CardsPreview' = None
    value_myChallenge:'FootballRivalsChallenge' = None
    value_myEloDelta = None
    value_myFriendlyChallenge:'FootballRivalsChallenge' = None
    value_myFriendlyChallenges:'list[FootballRivalsChallenge]' = None
    value_myFriendlyChallengesPaginated:'FootballRivalsChallengeConnection' = None
    value_myFriendsPlaying:'FootballRivalsManagersPreview' = None
    value_myInvite:'FootballRivalsInvite' = None
    value_myInviteLink = None
    value_myInviteSocialPictureUrls:'SocialPictureDerivative' = None
    value_myInvites:'list[FootballRivalsInvite]' = None
    value_myLineup:'FootballRivalsLineup' = None
    value_myPlayingSquadMembershipsCount = None
    value_myPlayingSquadMembershipsPreview:'list[FootballRivalsManager]' = None
    value_myPointsDelta = None
    value_myPostGameStoryState = None
    value_myPotentialEloDeltaLoss = None
    value_myPotentialEloDeltaWin = None
    value_myPotentialPointsDeltaLoss = None
    value_myPotentialPointsDeltaWin = None
    value_myReceivedInvites:'list[FootballRivalsInvite]' = None
    value_myRecords:'FootballRivalsManagerRecords' = None
    value_mySentInvites:'list[FootballRivalsInvite]' = None
    value_mySquadMembershipsChallenges:'list[FootballRivalsSquadMembershipChallenge]' = None
    value_mySquadPointsDelta = None
    value_mySuggestedManagers:'list[FootballRivalsSuggestedManager]' = None
    value_onboardingLineupSimulation:'FootballRivalsOnboardingLineupSimulation' = None
    value_paginatedFeaturedFriendlyChallengers:'FootballRivalsChallengerConnection' = None
    value_pointsDelta = None
    value_pointsDeltaWinMultiplier = None
    value_recommendedChallengers:'list[FootballRivalsChallenger]' = None
    value_recommendedChallengersForNewUsers:'list[FootballRivalsChallenger]' = None
    value_records:'FootballRivalsManagerRecords' = None
    value_season:'FootballRivalsSeason' = None
    value_shouldNotify = None
    value_slug = None
    value_substitutablePlayers:'list[FootballRivalsDraftableObjectInterface]' = None
    value_userGroupLineups:'FootballRivalsLineupUserGroupLineupConnection' = None
    value_userGroupLineupsCount = None
    value_userGroupTournaments:'list[RivalsUserGroupTournament]' = None
    def allMyAvailableCards(self,_param_name:str = 'allMyAvailableCards') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("allMyAvailableCards",_param_name,inst)
        self.value_allMyAvailableCards = inst
        return inst

    def arenaChallenge(self,userSlug,_param_name:str = 'arenaChallenge') -> 'FootballRivalsChallenge':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("arenaChallenge",_param_name,inst)
        self.value_arenaChallenge = inst
        return inst

    def arenaRequestsCount(self,_param_name:str = 'arenaRequestsCount'):
        inst = None
        self._add_to_query("arenaRequestsCount",_param_name)
        pass

    def arenaScoreBuckets(self,division,_param_name:str = 'arenaScoreBuckets') -> 'Bucket':
        param_list = []
        param_list.append(("division",division))
        inst = Bucket(self,param_list)
        self._add_to_query("arenaScoreBuckets",_param_name,inst)
        self.value_arenaScoreBuckets = inst
        return inst

    def arenaTicketCost(self,_param_name:str = 'arenaTicketCost'):
        inst = None
        self._add_to_query("arenaTicketCost",_param_name)
        pass

    def availableChallengers(self,after,before,first,last,query,_param_name:str = 'availableChallengers') -> 'FootballRivalsChallengerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = FootballRivalsChallengerConnection(self,param_list)
        self._add_to_query("availableChallengers",_param_name,inst)
        self.value_availableChallengers = inst
        return inst

    def availableManagers(self,after,before,first,last,query,_param_name:str = 'availableManagers') -> 'FootballRivalsManagerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = FootballRivalsManagerConnection(self,param_list)
        self._add_to_query("availableManagers",_param_name,inst)
        self.value_availableManagers = inst
        return inst

    def availablePlayers(self,position,positions,_param_name:str = 'availablePlayers') -> 'FootballRivalsDraftableObjectInterface':
        param_list = []
        param_list.append(("position",position))
        param_list.append(("positions",positions))
        inst = FootballRivalsDraftableObjectInterface(self,param_list)
        self._add_to_query("availablePlayers",_param_name,inst)
        self.value_availablePlayers = inst
        return inst

    def boosted(self,_param_name:str = 'boosted'):
        inst = None
        self._add_to_query("boosted",_param_name)
        pass

    def cap(self,_param_name:str = 'cap'):
        inst = None
        self._add_to_query("cap",_param_name)
        pass

    def challenges(self,first,managerId,type,userSlug,_param_name:str = 'challenges') -> 'FootballRivalsChallenge':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("managerId",managerId))
        param_list.append(("type",type))
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("challenges",_param_name,inst)
        self.value_challenges = inst
        return inst

    def challengesPaginated(self,after,before,first,last,managerId,type,userSlug,_param_name:str = 'challengesPaginated') -> 'FootballRivalsChallengeConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("managerId",managerId))
        param_list.append(("type",type))
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsChallengeConnection(self,param_list)
        self._add_to_query("challengesPaginated",_param_name,inst)
        self.value_challengesPaginated = inst
        return inst

    def draftablePlayers(self,_param_name:str = 'draftablePlayers') -> 'FootballRivalsDraftableObjectInterface':
        param_list = []
        inst = FootballRivalsDraftableObjectInterface(self,param_list)
        self._add_to_query("draftablePlayers",_param_name,inst)
        self.value_draftablePlayers = inst
        return inst

    def eloDelta(self,userSlug,_param_name:str = 'eloDelta'):
        inst = None
        self._add_to_query("eloDelta",_param_name)
        pass

    def formationKnown(self,_param_name:str = 'formationKnown'):
        inst = None
        self._add_to_query("formationKnown",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lineup(self,userSlug,_param_name:str = 'lineup') -> 'FootballRivalsLineup':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def lineupTactics(self,_param_name:str = 'lineupTactics') -> 'FootballRivalsLineupTactic':
        param_list = []
        inst = FootballRivalsLineupTactic(self,param_list)
        self._add_to_query("lineupTactics",_param_name,inst)
        self.value_lineupTactics = inst
        return inst

    def myArenaChallenge(self,_param_name:str = 'myArenaChallenge') -> 'FootballRivalsChallenge':
        param_list = []
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("myArenaChallenge",_param_name,inst)
        self.value_myArenaChallenge = inst
        return inst

    def myArenaRequest(self,_param_name:str = 'myArenaRequest') -> 'FootballRivalsArenaRequest':
        param_list = []
        inst = FootballRivalsArenaRequest(self,param_list)
        self._add_to_query("myArenaRequest",_param_name,inst)
        self.value_myArenaRequest = inst
        return inst

    def myAvailableCards(self,_param_name:str = 'myAvailableCards') -> 'CardsPreview':
        param_list = []
        inst = CardsPreview(self,param_list)
        self._add_to_query("myAvailableCards",_param_name,inst)
        self.value_myAvailableCards = inst
        return inst

    def myChallenge(self,userSlug,_param_name:str = 'myChallenge') -> 'FootballRivalsChallenge':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("myChallenge",_param_name,inst)
        self.value_myChallenge = inst
        return inst

    def myEloDelta(self,_param_name:str = 'myEloDelta'):
        inst = None
        self._add_to_query("myEloDelta",_param_name)
        pass

    def myFriendlyChallenge(self,userSlug,_param_name:str = 'myFriendlyChallenge') -> 'FootballRivalsChallenge':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("myFriendlyChallenge",_param_name,inst)
        self.value_myFriendlyChallenge = inst
        return inst

    def myFriendlyChallenges(self,first,_param_name:str = 'myFriendlyChallenges') -> 'FootballRivalsChallenge':
        param_list = []
        param_list.append(("first",first))
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("myFriendlyChallenges",_param_name,inst)
        self.value_myFriendlyChallenges = inst
        return inst

    def myFriendlyChallengesPaginated(self,after,before,first,last,_param_name:str = 'myFriendlyChallengesPaginated') -> 'FootballRivalsChallengeConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsChallengeConnection(self,param_list)
        self._add_to_query("myFriendlyChallengesPaginated",_param_name,inst)
        self.value_myFriendlyChallengesPaginated = inst
        return inst

    def myFriendsPlaying(self,_param_name:str = 'myFriendsPlaying') -> 'FootballRivalsManagersPreview':
        param_list = []
        inst = FootballRivalsManagersPreview(self,param_list)
        self._add_to_query("myFriendsPlaying",_param_name,inst)
        self.value_myFriendsPlaying = inst
        return inst

    def myInvite(self,userSlug,_param_name:str = 'myInvite') -> 'FootballRivalsInvite':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsInvite(self,param_list)
        self._add_to_query("myInvite",_param_name,inst)
        self.value_myInvite = inst
        return inst

    def myInviteLink(self,_param_name:str = 'myInviteLink'):
        inst = None
        self._add_to_query("myInviteLink",_param_name)
        pass

    def myInviteSocialPictureUrls(self,_param_name:str = 'myInviteSocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("myInviteSocialPictureUrls",_param_name,inst)
        self.value_myInviteSocialPictureUrls = inst
        return inst

    def myInvites(self,_param_name:str = 'myInvites') -> 'FootballRivalsInvite':
        param_list = []
        inst = FootballRivalsInvite(self,param_list)
        self._add_to_query("myInvites",_param_name,inst)
        self.value_myInvites = inst
        return inst

    def myLineup(self,_param_name:str = 'myLineup') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("myLineup",_param_name,inst)
        self.value_myLineup = inst
        return inst

    def myPlayingSquadMembershipsCount(self,_param_name:str = 'myPlayingSquadMembershipsCount'):
        inst = None
        self._add_to_query("myPlayingSquadMembershipsCount",_param_name)
        pass

    def myPlayingSquadMembershipsPreview(self,_param_name:str = 'myPlayingSquadMembershipsPreview') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("myPlayingSquadMembershipsPreview",_param_name,inst)
        self.value_myPlayingSquadMembershipsPreview = inst
        return inst

    def myPointsDelta(self,_param_name:str = 'myPointsDelta'):
        inst = None
        self._add_to_query("myPointsDelta",_param_name)
        pass

    def myPostGameStoryState(self,_param_name:str = 'myPostGameStoryState'):
        inst = None
        self._add_to_query("myPostGameStoryState",_param_name)
        pass

    def myPotentialEloDeltaLoss(self,_param_name:str = 'myPotentialEloDeltaLoss'):
        inst = None
        self._add_to_query("myPotentialEloDeltaLoss",_param_name)
        pass

    def myPotentialEloDeltaWin(self,_param_name:str = 'myPotentialEloDeltaWin'):
        inst = None
        self._add_to_query("myPotentialEloDeltaWin",_param_name)
        pass

    def myPotentialPointsDeltaLoss(self,_param_name:str = 'myPotentialPointsDeltaLoss'):
        inst = None
        self._add_to_query("myPotentialPointsDeltaLoss",_param_name)
        pass

    def myPotentialPointsDeltaWin(self,_param_name:str = 'myPotentialPointsDeltaWin'):
        inst = None
        self._add_to_query("myPotentialPointsDeltaWin",_param_name)
        pass

    def myReceivedInvites(self,_param_name:str = 'myReceivedInvites') -> 'FootballRivalsInvite':
        param_list = []
        inst = FootballRivalsInvite(self,param_list)
        self._add_to_query("myReceivedInvites",_param_name,inst)
        self.value_myReceivedInvites = inst
        return inst

    def myRecords(self,_param_name:str = 'myRecords') -> 'FootballRivalsManagerRecords':
        param_list = []
        inst = FootballRivalsManagerRecords(self,param_list)
        self._add_to_query("myRecords",_param_name,inst)
        self.value_myRecords = inst
        return inst

    def mySentInvites(self,_param_name:str = 'mySentInvites') -> 'FootballRivalsInvite':
        param_list = []
        inst = FootballRivalsInvite(self,param_list)
        self._add_to_query("mySentInvites",_param_name,inst)
        self.value_mySentInvites = inst
        return inst

    def mySquadMembershipsChallenges(self,_param_name:str = 'mySquadMembershipsChallenges') -> 'FootballRivalsSquadMembershipChallenge':
        param_list = []
        inst = FootballRivalsSquadMembershipChallenge(self,param_list)
        self._add_to_query("mySquadMembershipsChallenges",_param_name,inst)
        self.value_mySquadMembershipsChallenges = inst
        return inst

    def mySquadPointsDelta(self,_param_name:str = 'mySquadPointsDelta'):
        inst = None
        self._add_to_query("mySquadPointsDelta",_param_name)
        pass

    def mySuggestedManagers(self,_param_name:str = 'mySuggestedManagers') -> 'FootballRivalsSuggestedManager':
        param_list = []
        inst = FootballRivalsSuggestedManager(self,param_list)
        self._add_to_query("mySuggestedManagers",_param_name,inst)
        self.value_mySuggestedManagers = inst
        return inst

    def onboardingLineupSimulation(self,appearances:'FootballRivalsAppearanceInput',tacticSlug,_param_name:str = 'onboardingLineupSimulation') -> 'FootballRivalsOnboardingLineupSimulation':
        param_list = []
        param_list.append(("appearances",appearances))
        param_list.append(("tacticSlug",tacticSlug))
        inst = FootballRivalsOnboardingLineupSimulation(self,param_list)
        self._add_to_query("onboardingLineupSimulation",_param_name,inst)
        self.value_onboardingLineupSimulation = inst
        return inst

    def paginatedFeaturedFriendlyChallengers(self,after,before,first,last,type,_param_name:str = 'paginatedFeaturedFriendlyChallengers') -> 'FootballRivalsChallengerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("type",type))
        inst = FootballRivalsChallengerConnection(self,param_list)
        self._add_to_query("paginatedFeaturedFriendlyChallengers",_param_name,inst)
        self.value_paginatedFeaturedFriendlyChallengers = inst
        return inst

    def pointsDelta(self,userSlug,_param_name:str = 'pointsDelta'):
        inst = None
        self._add_to_query("pointsDelta",_param_name)
        pass

    def pointsDeltaWinMultiplier(self,_param_name:str = 'pointsDeltaWinMultiplier'):
        inst = None
        self._add_to_query("pointsDeltaWinMultiplier",_param_name)
        pass

    def recommendedChallengers(self,_param_name:str = 'recommendedChallengers') -> 'FootballRivalsChallenger':
        param_list = []
        inst = FootballRivalsChallenger(self,param_list)
        self._add_to_query("recommendedChallengers",_param_name,inst)
        self.value_recommendedChallengers = inst
        return inst

    def recommendedChallengersForNewUsers(self,_param_name:str = 'recommendedChallengersForNewUsers') -> 'FootballRivalsChallenger':
        param_list = []
        inst = FootballRivalsChallenger(self,param_list)
        self._add_to_query("recommendedChallengersForNewUsers",_param_name,inst)
        self.value_recommendedChallengersForNewUsers = inst
        return inst

    def records(self,managerId,userSlug,_param_name:str = 'records') -> 'FootballRivalsManagerRecords':
        param_list = []
        param_list.append(("managerId",managerId))
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsManagerRecords(self,param_list)
        self._add_to_query("records",_param_name,inst)
        self.value_records = inst
        return inst

    def season(self,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def shouldNotify(self,_param_name:str = 'shouldNotify'):
        inst = None
        self._add_to_query("shouldNotify",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def substitutablePlayers(self,appearanceId,_param_name:str = 'substitutablePlayers') -> 'FootballRivalsDraftableObjectInterface':
        param_list = []
        param_list.append(("appearanceId",appearanceId))
        inst = FootballRivalsDraftableObjectInterface(self,param_list)
        self._add_to_query("substitutablePlayers",_param_name,inst)
        self.value_substitutablePlayers = inst
        return inst

    def userGroupLineups(self,after,before,first,last,slug,_param_name:str = 'userGroupLineups') -> 'FootballRivalsLineupUserGroupLineupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("slug",slug))
        inst = FootballRivalsLineupUserGroupLineupConnection(self,param_list)
        self._add_to_query("userGroupLineups",_param_name,inst)
        self.value_userGroupLineups = inst
        return inst

    def userGroupLineupsCount(self,slug,_param_name:str = 'userGroupLineupsCount'):
        inst = None
        self._add_to_query("userGroupLineupsCount",_param_name)
        pass

    def userGroupTournaments(self,_param_name:str = 'userGroupTournaments') -> 'RivalsUserGroupTournament':
        param_list = []
        inst = RivalsUserGroupTournament(self,param_list)
        self._add_to_query("userGroupTournaments",_param_name,inst)
        self.value_userGroupTournaments = inst
        return inst


class FootballRivalsPlayerScore(GraphQLObject):
    value_player:'Player' = None
    value_score = None
    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass


class FootballRivalsScoreDetailsAction(GraphQLObject):
    value_scores:'list[FootballRivalsPlayerScore]' = None
    value_statName = None
    def scores(self,_param_name:str = 'scores') -> 'FootballRivalsPlayerScore':
        param_list = []
        inst = FootballRivalsPlayerScore(self,param_list)
        self._add_to_query("scores",_param_name,inst)
        self.value_scores = inst
        return inst

    def statName(self,_param_name:str = 'statName'):
        inst = None
        self._add_to_query("statName",_param_name)
        pass


class FootballRivalsLineupScoreDetails(GraphQLObject):
    value_allAroundActions:'list[FootballRivalsScoreDetailsAction]' = None
    value_decisiveActions:'list[FootballRivalsScoreDetailsAction]' = None
    value_playerDecisiveScoresAtMatchStarts:'list[FootballRivalsPlayerScore]' = None
    value_tacticPlayerScores:'list[FootballRivalsPlayerScore]' = None
    def allAroundActions(self,_param_name:str = 'allAroundActions') -> 'FootballRivalsScoreDetailsAction':
        param_list = []
        inst = FootballRivalsScoreDetailsAction(self,param_list)
        self._add_to_query("allAroundActions",_param_name,inst)
        self.value_allAroundActions = inst
        return inst

    def decisiveActions(self,_param_name:str = 'decisiveActions') -> 'FootballRivalsScoreDetailsAction':
        param_list = []
        inst = FootballRivalsScoreDetailsAction(self,param_list)
        self._add_to_query("decisiveActions",_param_name,inst)
        self.value_decisiveActions = inst
        return inst

    def playerDecisiveScoresAtMatchStarts(self,_param_name:str = 'playerDecisiveScoresAtMatchStarts') -> 'FootballRivalsPlayerScore':
        param_list = []
        inst = FootballRivalsPlayerScore(self,param_list)
        self._add_to_query("playerDecisiveScoresAtMatchStarts",_param_name,inst)
        self.value_playerDecisiveScoresAtMatchStarts = inst
        return inst

    def tacticPlayerScores(self,_param_name:str = 'tacticPlayerScores') -> 'FootballRivalsPlayerScore':
        param_list = []
        inst = FootballRivalsPlayerScore(self,param_list)
        self._add_to_query("tacticPlayerScores",_param_name,inst)
        self.value_tacticPlayerScores = inst
        return inst


class FootballRivalsLineup(GraphQLObject):
    value_appearances:'list[FootballRivalsAppearance]' = None
    value_canSubstitute = None
    value_game:'FootballRivalsGame' = None
    value_id = None
    value_inviteSocialPictureUrls:'SocialPictureDerivative' = None
    value_manager:'FootballRivalsManager' = None
    value_score = None
    value_scoreDetails:'FootballRivalsLineupScoreDetails' = None
    value_scoreWithoutRarityBonus = None
    value_tactic:'FootballRivalsLineupTactic' = None
    value_tacticScore = None
    value_tacticStatValue = None
    def appearances(self,_param_name:str = 'appearances') -> 'FootballRivalsAppearance':
        param_list = []
        inst = FootballRivalsAppearance(self,param_list)
        self._add_to_query("appearances",_param_name,inst)
        self.value_appearances = inst
        return inst

    def canSubstitute(self,_param_name:str = 'canSubstitute'):
        inst = None
        self._add_to_query("canSubstitute",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def inviteSocialPictureUrls(self,_param_name:str = 'inviteSocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("inviteSocialPictureUrls",_param_name,inst)
        self.value_inviteSocialPictureUrls = inst
        return inst

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def scoreDetails(self,_param_name:str = 'scoreDetails') -> 'FootballRivalsLineupScoreDetails':
        param_list = []
        inst = FootballRivalsLineupScoreDetails(self,param_list)
        self._add_to_query("scoreDetails",_param_name,inst)
        self.value_scoreDetails = inst
        return inst

    def scoreWithoutRarityBonus(self,_param_name:str = 'scoreWithoutRarityBonus'):
        inst = None
        self._add_to_query("scoreWithoutRarityBonus",_param_name)
        pass

    def tactic(self,_param_name:str = 'tactic') -> 'FootballRivalsLineupTactic':
        param_list = []
        inst = FootballRivalsLineupTactic(self,param_list)
        self._add_to_query("tactic",_param_name,inst)
        self.value_tactic = inst
        return inst

    def tacticScore(self,_param_name:str = 'tacticScore'):
        inst = None
        self._add_to_query("tacticScore",_param_name)
        pass

    def tacticStatValue(self,_param_name:str = 'tacticStatValue'):
        inst = None
        self._add_to_query("tacticStatValue",_param_name)
        pass


class Game(GraphQLObject):
    value_anyPlayers:'list[AnyPlayerInterface]' = None
    value_awayFormation:'TeamFormation' = None
    value_awayGoals = None
    value_awayScore = None
    value_awayTeam:'TeamInterface' = None
    value_competition:'Competition' = None
    value_coverageStatus = None
    value_date = None
    value_extraTimeScoreAway = None
    value_extraTimeScoreHome = None
    value_homeFormation:'TeamFormation' = None
    value_homeGoals = None
    value_homeScore = None
    value_homeTeam:'TeamInterface' = None
    value_id = None
    value_lowCoverage = None
    value_minute = None
    value_myRivalsAppearances:'list[FootballRivalsAppearance]' = None
    value_myRivalsLineup:'FootballRivalsLineup' = None
    value_mySo5Appearances:'list[So5Appearance]' = None
    value_mySo5Lineups:'list[So5Lineup]' = None
    value_penaltyScoreAway = None
    value_penaltyScoreHome = None
    value_periodType = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_players:'list[Player]' = None
    value_rivalsGame:'FootballRivalsGame' = None
    value_scored = None
    value_so5Fixture:'So5Fixture' = None
    value_so5Score:'So5Score' = None
    value_status = None
    value_statusTyped = None
    value_venue = None
    value_winner:'TeamInterface' = None
    def anyPlayers(self,_param_name:str = 'anyPlayers') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayers",_param_name,inst)
        self.value_anyPlayers = inst
        return inst

    def awayFormation(self,_param_name:str = 'awayFormation') -> 'TeamFormation':
        param_list = []
        inst = TeamFormation(self,param_list)
        self._add_to_query("awayFormation",_param_name,inst)
        self.value_awayFormation = inst
        return inst

    def awayGoals(self,_param_name:str = 'awayGoals'):
        inst = None
        self._add_to_query("awayGoals",_param_name)
        pass

    def awayScore(self,_param_name:str = 'awayScore'):
        inst = None
        self._add_to_query("awayScore",_param_name)
        pass

    def awayTeam(self,_param_name:str = 'awayTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("awayTeam",_param_name,inst)
        self.value_awayTeam = inst
        return inst

    def competition(self,_param_name:str = 'competition') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competition",_param_name,inst)
        self.value_competition = inst
        return inst

    def coverageStatus(self,_param_name:str = 'coverageStatus'):
        inst = None
        self._add_to_query("coverageStatus",_param_name)
        pass

    def date(self,_param_name:str = 'date'):
        inst = None
        self._add_to_query("date",_param_name)
        pass

    def extraTimeScoreAway(self,_param_name:str = 'extraTimeScoreAway'):
        inst = None
        self._add_to_query("extraTimeScoreAway",_param_name)
        pass

    def extraTimeScoreHome(self,_param_name:str = 'extraTimeScoreHome'):
        inst = None
        self._add_to_query("extraTimeScoreHome",_param_name)
        pass

    def homeFormation(self,_param_name:str = 'homeFormation') -> 'TeamFormation':
        param_list = []
        inst = TeamFormation(self,param_list)
        self._add_to_query("homeFormation",_param_name,inst)
        self.value_homeFormation = inst
        return inst

    def homeGoals(self,_param_name:str = 'homeGoals'):
        inst = None
        self._add_to_query("homeGoals",_param_name)
        pass

    def homeScore(self,_param_name:str = 'homeScore'):
        inst = None
        self._add_to_query("homeScore",_param_name)
        pass

    def homeTeam(self,_param_name:str = 'homeTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("homeTeam",_param_name,inst)
        self.value_homeTeam = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lowCoverage(self,_param_name:str = 'lowCoverage'):
        inst = None
        self._add_to_query("lowCoverage",_param_name)
        pass

    def minute(self,_param_name:str = 'minute'):
        inst = None
        self._add_to_query("minute",_param_name)
        pass

    def myRivalsAppearances(self,_param_name:str = 'myRivalsAppearances') -> 'FootballRivalsAppearance':
        param_list = []
        inst = FootballRivalsAppearance(self,param_list)
        self._add_to_query("myRivalsAppearances",_param_name,inst)
        self.value_myRivalsAppearances = inst
        return inst

    def myRivalsLineup(self,_param_name:str = 'myRivalsLineup') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("myRivalsLineup",_param_name,inst)
        self.value_myRivalsLineup = inst
        return inst

    def mySo5Appearances(self,_param_name:str = 'mySo5Appearances') -> 'So5Appearance':
        param_list = []
        inst = So5Appearance(self,param_list)
        self._add_to_query("mySo5Appearances",_param_name,inst)
        self.value_mySo5Appearances = inst
        return inst

    def mySo5Lineups(self,_param_name:str = 'mySo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("mySo5Lineups",_param_name,inst)
        self.value_mySo5Lineups = inst
        return inst

    def penaltyScoreAway(self,_param_name:str = 'penaltyScoreAway'):
        inst = None
        self._add_to_query("penaltyScoreAway",_param_name)
        pass

    def penaltyScoreHome(self,_param_name:str = 'penaltyScoreHome'):
        inst = None
        self._add_to_query("penaltyScoreHome",_param_name)
        pass

    def periodType(self,_param_name:str = 'periodType'):
        inst = None
        self._add_to_query("periodType",_param_name)
        pass

    def playerGameScore(self,playerSlug,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def players(self,_param_name:str = 'players') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("players",_param_name,inst)
        self.value_players = inst
        return inst

    def rivalsGame(self,_param_name:str = 'rivalsGame') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("rivalsGame",_param_name,inst)
        self.value_rivalsGame = inst
        return inst

    def scored(self,_param_name:str = 'scored'):
        inst = None
        self._add_to_query("scored",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5Score(self,playerSlug,position,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("position",position))
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def statusTyped(self,_param_name:str = 'statusTyped'):
        inst = None
        self._add_to_query("statusTyped",_param_name)
        pass

    def venue(self,_param_name:str = 'venue'):
        inst = None
        self._add_to_query("venue",_param_name)
        pass

    def winner(self,_param_name:str = 'winner') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("winner",_param_name,inst)
        self.value_winner = inst
        return inst


class GameEdge(GraphQLObject):
    value_cursor = None
    value_node:'Game' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class GameConnection(GraphQLObject):
    value_edges:'list[GameEdge]' = None
    value_nodes:'list[Game]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'GameEdge':
        param_list = []
        inst = GameEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class TeamInterface(GraphQLObject):
    value_activeCompetitions:'list[Competition]' = None
    value_activeMemberships:'MembershipConnection' = None
    value_activePlayers:'PlayerConnection' = None
    value_anyActivePlayers:'AnyPlayerInterfaceConnection' = None
    value_anyGames:'AnyGameInterfaceConnection' = None
    value_anyPlayers:'AnyPlayerInterfaceConnection' = None
    value_anyRecentDepartures:'AnyPlayerInterfaceConnection' = None
    value_cards:'CardConnection' = None
    value_code = None
    value_country:'Country' = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_customBanner:'CustomBanner' = None
    value_dataPartner:'DataPartner' = None
    value_founded = None
    value_games:'GameConnection' = None
    value_id = None
    value_lastFiveAnyGames:'list[AnyGameInterface]' = None
    value_lastFiveGames:'list[Game]' = None
    value_lastRivalsGame:'FootballRivalsGame' = None
    value_latestAnyGames:'AnyGameInterfaceConnection' = None
    value_latestGames:'GameConnection' = None
    value_name = None
    value_officialName = None
    value_optaId = None
    value_pictureSecondaryUrl = None
    value_pictureUrl = None
    value_players:'PlayerConnection' = None
    value_ready = None
    value_recentDepartures:'PlayerConnection' = None
    value_shortName = None
    value_slug = None
    value_styleGuideColor = None
    value_subscriptionsCount = None
    value_upcomingAnyGames:'list[AnyGameInterface]' = None
    value_upcomingGames:'list[Game]' = None
    def activeCompetitions(self,_param_name:str = 'activeCompetitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("activeCompetitions",_param_name,inst)
        self.value_activeCompetitions = inst
        return inst

    def activeMemberships(self,after,before,first,last,_param_name:str = 'activeMemberships') -> 'MembershipConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = MembershipConnection(self,param_list)
        self._add_to_query("activeMemberships",_param_name,inst)
        self.value_activeMemberships = inst
        return inst

    def activePlayers(self,after,before,first,last,_param_name:str = 'activePlayers') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("activePlayers",_param_name,inst)
        self.value_activePlayers = inst
        return inst

    def anyActivePlayers(self,after,before,first,last,_param_name:str = 'anyActivePlayers') -> 'AnyPlayerInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyPlayerInterfaceConnection(self,param_list)
        self._add_to_query("anyActivePlayers",_param_name,inst)
        self.value_anyActivePlayers = inst
        return inst

    def anyGames(self,after,before,endDate,first,last,startDate,_param_name:str = 'anyGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("endDate",endDate))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("startDate",startDate))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyGames",_param_name,inst)
        self.value_anyGames = inst
        return inst

    def anyPlayers(self,after,before,first,last,_param_name:str = 'anyPlayers') -> 'AnyPlayerInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyPlayerInterfaceConnection(self,param_list)
        self._add_to_query("anyPlayers",_param_name,inst)
        self.value_anyPlayers = inst
        return inst

    def anyRecentDepartures(self,after,before,first,last,_param_name:str = 'anyRecentDepartures') -> 'AnyPlayerInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyPlayerInterfaceConnection(self,param_list)
        self._add_to_query("anyRecentDepartures",_param_name,inst)
        self.value_anyRecentDepartures = inst
        return inst

    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def code(self,_param_name:str = 'code'):
        inst = None
        self._add_to_query("code",_param_name)
        pass

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def customBanner(self,_param_name:str = 'customBanner') -> 'CustomBanner':
        param_list = []
        inst = CustomBanner(self,param_list)
        self._add_to_query("customBanner",_param_name,inst)
        self.value_customBanner = inst
        return inst

    def dataPartner(self,_param_name:str = 'dataPartner') -> 'DataPartner':
        param_list = []
        inst = DataPartner(self,param_list)
        self._add_to_query("dataPartner",_param_name,inst)
        self.value_dataPartner = inst
        return inst

    def founded(self,_param_name:str = 'founded'):
        inst = None
        self._add_to_query("founded",_param_name)
        pass

    def games(self,after,before,endDate,first,last,startDate,_param_name:str = 'games') -> 'GameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("endDate",endDate))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("startDate",startDate))
        inst = GameConnection(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastFiveAnyGames(self,_param_name:str = 'lastFiveAnyGames') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("lastFiveAnyGames",_param_name,inst)
        self.value_lastFiveAnyGames = inst
        return inst

    def lastFiveGames(self,_param_name:str = 'lastFiveGames') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("lastFiveGames",_param_name,inst)
        self.value_lastFiveGames = inst
        return inst

    def lastRivalsGame(self,_param_name:str = 'lastRivalsGame') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("lastRivalsGame",_param_name,inst)
        self.value_lastRivalsGame = inst
        return inst

    def latestAnyGames(self,after,before,first,includingLive,last,_param_name:str = 'latestAnyGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("includingLive",includingLive))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("latestAnyGames",_param_name,inst)
        self.value_latestAnyGames = inst
        return inst

    def latestGames(self,after,before,first,includingLive,last,_param_name:str = 'latestGames') -> 'GameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("includingLive",includingLive))
        param_list.append(("last",last))
        inst = GameConnection(self,param_list)
        self._add_to_query("latestGames",_param_name,inst)
        self.value_latestGames = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def officialName(self,_param_name:str = 'officialName'):
        inst = None
        self._add_to_query("officialName",_param_name)
        pass

    def optaId(self,_param_name:str = 'optaId'):
        inst = None
        self._add_to_query("optaId",_param_name)
        pass

    def pictureSecondaryUrl(self,_param_name:str = 'pictureSecondaryUrl'):
        inst = None
        self._add_to_query("pictureSecondaryUrl",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def players(self,after,before,first,last,_param_name:str = 'players') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("players",_param_name,inst)
        self.value_players = inst
        return inst

    def ready(self,_param_name:str = 'ready'):
        inst = None
        self._add_to_query("ready",_param_name)
        pass

    def recentDepartures(self,after,before,first,last,_param_name:str = 'recentDepartures') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("recentDepartures",_param_name,inst)
        self.value_recentDepartures = inst
        return inst

    def shortName(self,_param_name:str = 'shortName'):
        inst = None
        self._add_to_query("shortName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def styleGuideColor(self,_param_name:str = 'styleGuideColor'):
        inst = None
        self._add_to_query("styleGuideColor",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def upcomingAnyGames(self,first,_param_name:str = 'upcomingAnyGames') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("first",first))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("upcomingAnyGames",_param_name,inst)
        self.value_upcomingAnyGames = inst
        return inst

    def upcomingGames(self,first,_param_name:str = 'upcomingGames') -> 'Game':
        param_list = []
        param_list.append(("first",first))
        inst = Game(self,param_list)
        self._add_to_query("upcomingGames",_param_name,inst)
        self.value_upcomingGames = inst
        return inst


class AnyGameInterface(GraphQLObject):
    value_anyPlayers:'list[AnyPlayerInterface]' = None
    value_awayScore = None
    value_awayTeam:'TeamInterface' = None
    value_competition:'Competition' = None
    value_date = None
    value_homeScore = None
    value_homeTeam:'TeamInterface' = None
    value_id = None
    value_lowCoverage = None
    value_mySo5Appearances:'list[So5Appearance]' = None
    value_mySo5Lineups:'list[So5Lineup]' = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_scored = None
    value_so5Fixture:'So5Fixture' = None
    value_statusTyped = None
    value_venue = None
    value_winner:'TeamInterface' = None
    def anyPlayers(self,_param_name:str = 'anyPlayers') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayers",_param_name,inst)
        self.value_anyPlayers = inst
        return inst

    def awayScore(self,_param_name:str = 'awayScore'):
        inst = None
        self._add_to_query("awayScore",_param_name)
        pass

    def awayTeam(self,_param_name:str = 'awayTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("awayTeam",_param_name,inst)
        self.value_awayTeam = inst
        return inst

    def competition(self,_param_name:str = 'competition') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competition",_param_name,inst)
        self.value_competition = inst
        return inst

    def date(self,_param_name:str = 'date'):
        inst = None
        self._add_to_query("date",_param_name)
        pass

    def homeScore(self,_param_name:str = 'homeScore'):
        inst = None
        self._add_to_query("homeScore",_param_name)
        pass

    def homeTeam(self,_param_name:str = 'homeTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("homeTeam",_param_name,inst)
        self.value_homeTeam = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lowCoverage(self,_param_name:str = 'lowCoverage'):
        inst = None
        self._add_to_query("lowCoverage",_param_name)
        pass

    def mySo5Appearances(self,_param_name:str = 'mySo5Appearances') -> 'So5Appearance':
        param_list = []
        inst = So5Appearance(self,param_list)
        self._add_to_query("mySo5Appearances",_param_name,inst)
        self.value_mySo5Appearances = inst
        return inst

    def mySo5Lineups(self,_param_name:str = 'mySo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("mySo5Lineups",_param_name,inst)
        self.value_mySo5Lineups = inst
        return inst

    def playerGameScore(self,playerSlug,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def scored(self,_param_name:str = 'scored'):
        inst = None
        self._add_to_query("scored",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def statusTyped(self,_param_name:str = 'statusTyped'):
        inst = None
        self._add_to_query("statusTyped",_param_name)
        pass

    def venue(self,_param_name:str = 'venue'):
        inst = None
        self._add_to_query("venue",_param_name)
        pass

    def winner(self,_param_name:str = 'winner') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("winner",_param_name,inst)
        self.value_winner = inst
        return inst


class So5Score(GraphQLObject):
    value_allAroundStats:'list[StatScore]' = None
    value_anyGame:'AnyGameInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPlayerGameStats:'AnyPlayerGameStatsInterface' = None
    value_decisiveScore:'StatScore' = None
    value_detailedScore:'list[StatScore]' = None
    value_game:'Game' = None
    value_id = None
    value_negativeDecisiveStats:'list[StatScore]' = None
    value_player:'Player' = None
    value_playerGameStats:'PlayerGameStats' = None
    value_position = None
    value_positionTyped = None
    value_positiveDecisiveStats:'list[StatScore]' = None
    value_score = None
    value_scoreStatus = None
    value_scoringVersion = None
    def allAroundStats(self,_param_name:str = 'allAroundStats') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("allAroundStats",_param_name,inst)
        self.value_allAroundStats = inst
        return inst

    def anyGame(self,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPlayerGameStats(self,_param_name:str = 'anyPlayerGameStats') -> 'AnyPlayerGameStatsInterface':
        param_list = []
        inst = AnyPlayerGameStatsInterface(self,param_list)
        self._add_to_query("anyPlayerGameStats",_param_name,inst)
        self.value_anyPlayerGameStats = inst
        return inst

    def decisiveScore(self,_param_name:str = 'decisiveScore') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("decisiveScore",_param_name,inst)
        self.value_decisiveScore = inst
        return inst

    def detailedScore(self,_param_name:str = 'detailedScore') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("detailedScore",_param_name,inst)
        self.value_detailedScore = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def negativeDecisiveStats(self,_param_name:str = 'negativeDecisiveStats') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("negativeDecisiveStats",_param_name,inst)
        self.value_negativeDecisiveStats = inst
        return inst

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def playerGameStats(self,_param_name:str = 'playerGameStats') -> 'PlayerGameStats':
        param_list = []
        inst = PlayerGameStats(self,param_list)
        self._add_to_query("playerGameStats",_param_name,inst)
        self.value_playerGameStats = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positionTyped(self,_param_name:str = 'positionTyped'):
        inst = None
        self._add_to_query("positionTyped",_param_name)
        pass

    def positiveDecisiveStats(self,_param_name:str = 'positiveDecisiveStats') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("positiveDecisiveStats",_param_name,inst)
        self.value_positiveDecisiveStats = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def scoreStatus(self,_param_name:str = 'scoreStatus'):
        inst = None
        self._add_to_query("scoreStatus",_param_name)
        pass

    def scoringVersion(self,_param_name:str = 'scoringVersion'):
        inst = None
        self._add_to_query("scoringVersion",_param_name)
        pass


class So5ScoreEdge(GraphQLObject):
    value_cursor = None
    value_node:'So5Score' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'So5Score':
        param_list = []
        inst = So5Score(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class So5ScoreConnection(GraphQLObject):
    value_edges:'list[So5ScoreEdge]' = None
    value_nodes:'list[So5Score]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'So5ScoreEdge':
        param_list = []
        inst = So5ScoreEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'So5Score':
        param_list = []
        inst = So5Score(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class CardBoost(GraphQLObject):
    value_id = None
    value_levelToReach = None
    value_shopItem = None
    value_xpToGain = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def levelToReach(self,_param_name:str = 'levelToReach'):
        inst = None
        self._add_to_query("levelToReach",_param_name)
        pass

    def shopItem(self,_param_name:str = 'shopItem'):
        inst = None
        self._add_to_query("shopItem",_param_name)
        pass

    def xpToGain(self,_param_name:str = 'xpToGain'):
        inst = None
        self._add_to_query("xpToGain",_param_name)
        pass


class OwnerWithRates(GraphQLObject):
    value_account:'Account' = None
    value_address = None
    value_amounts:'MonetaryAmount' = None
    value_blockchain = None
    value_card:'Card' = None
    value__from = None
    value_id = None
    value_optimistic = None
    value_price = None
    value_priceInFiat:'Fiat' = None
    value_referenceId = None
    value_settleAt = None
    value_transferType = None
    def account(self,_param_name:str = 'account') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("account",_param_name,inst)
        self.value_account = inst
        return inst

    def address(self,_param_name:str = 'address'):
        inst = None
        self._add_to_query("address",_param_name)
        pass

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def blockchain(self,_param_name:str = 'blockchain'):
        inst = None
        self._add_to_query("blockchain",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def _from(self,_param_name:str = '_from'):
        inst = None
        self._add_to_query("_from",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def optimistic(self,_param_name:str = 'optimistic'):
        inst = None
        self._add_to_query("optimistic",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def priceInFiat(self,_param_name:str = 'priceInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("priceInFiat",_param_name,inst)
        self.value_priceInFiat = inst
        return inst

    def referenceId(self,_param_name:str = 'referenceId'):
        inst = None
        self._add_to_query("referenceId",_param_name)
        pass

    def settleAt(self,_param_name:str = 'settleAt'):
        inst = None
        self._add_to_query("settleAt",_param_name)
        pass

    def transferType(self,_param_name:str = 'transferType'):
        inst = None
        self._add_to_query("transferType",_param_name)
        pass


class Owner(GraphQLObject):
    value_account:'Account' = None
    value_address = None
    value_amounts:'MonetaryAmount' = None
    value_blockchain = None
    value_card:'Card' = None
    value__from = None
    value_id = None
    value_optimistic = None
    value_price = None
    value_referenceId = None
    value_settleAt = None
    value_transferType = None
    def account(self,_param_name:str = 'account') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("account",_param_name,inst)
        self.value_account = inst
        return inst

    def address(self,_param_name:str = 'address'):
        inst = None
        self._add_to_query("address",_param_name)
        pass

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def blockchain(self,_param_name:str = 'blockchain'):
        inst = None
        self._add_to_query("blockchain",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def _from(self,_param_name:str = '_from'):
        inst = None
        self._add_to_query("_from",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def optimistic(self,_param_name:str = 'optimistic'):
        inst = None
        self._add_to_query("optimistic",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def referenceId(self,_param_name:str = 'referenceId'):
        inst = None
        self._add_to_query("referenceId",_param_name)
        pass

    def settleAt(self,_param_name:str = 'settleAt'):
        inst = None
        self._add_to_query("settleAt",_param_name)
        pass

    def transferType(self,_param_name:str = 'transferType'):
        inst = None
        self._add_to_query("transferType",_param_name)
        pass


class UserOwner(GraphQLObject):
    value_account:'Account' = None
    value_address = None
    value_amounts:'MonetaryAmount' = None
    value_blockchain = None
    value_card:'Card' = None
    value__from = None
    value_id = None
    value_optimistic = None
    value_ownerable:'User' = None
    value_price = None
    value_referenceId = None
    value_settleAt = None
    value_transferType = None
    def account(self,_param_name:str = 'account') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("account",_param_name,inst)
        self.value_account = inst
        return inst

    def address(self,_param_name:str = 'address'):
        inst = None
        self._add_to_query("address",_param_name)
        pass

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def blockchain(self,_param_name:str = 'blockchain'):
        inst = None
        self._add_to_query("blockchain",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def _from(self,_param_name:str = '_from'):
        inst = None
        self._add_to_query("_from",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def optimistic(self,_param_name:str = 'optimistic'):
        inst = None
        self._add_to_query("optimistic",_param_name)
        pass

    def ownerable(self,_param_name:str = 'ownerable') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("ownerable",_param_name,inst)
        self.value_ownerable = inst
        return inst

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def referenceId(self,_param_name:str = 'referenceId'):
        inst = None
        self._add_to_query("referenceId",_param_name)
        pass

    def settleAt(self,_param_name:str = 'settleAt'):
        inst = None
        self._add_to_query("settleAt",_param_name)
        pass

    def transferType(self,_param_name:str = 'transferType'):
        inst = None
        self._add_to_query("transferType",_param_name)
        pass


class Card(GraphQLObject):
    value_age = None
    value_allSo5Scores:'So5ScoreConnection' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPositions = None
    value_anyTeam:'TeamInterface' = None
    value_assetId = None
    value_availableCardBoosters = None
    value_availableCardBoosts:'list[CardBoost]' = None
    value_availableUserShopItems:'list[UserShopItem]' = None
    value_averageScore = None
    value_backPictureUrl = None
    value_birthTxHash = None
    value_blockchain = None
    value_blockchainId = None
    value_blueprint:'Blueprint' = None
    value_cardCollectionCards:'list[CardCollectionCard]' = None
    value_cardEditionName = None
    value_cardStats:'CardStats' = None
    value_collection = None
    value_contractAddress = None
    value_coverageStatus = None
    value_createdAt = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_customCardEditionName = None
    value_decks:'list[Deck]' = None
    value_displayRarity = None
    value_eligiblePlayerGameScores:'list[PlayerGameScoreInterface]' = None
    value_eligibleUpcomingLeagueTracks:'list[So5LeagueTrack]' = None
    value_ethereumId = None
    value_ethereumOwner:'TokenOwner' = None
    value_footballPlayer:'Player' = None
    value_gameForLeague:'Game' = None
    value_grade = None
    value_gradeAfterTransfer = None
    value_id = None
    value_inRollup = None
    value_inSeasonEligible = None
    value_inSeasonUntil = None
    value_ipfsPictureUrl = None
    value_ipfsUrl = None
    value_latestEnglishAuction:'TokenAuction' = None
    value_latestPrimaryOffer:'TokenPrimaryOffer' = None
    value_levelUpAppliedCount = None
    value_liveSingleBuyOffers:'list[TokenOffer]' = None
    value_liveSingleSaleOffer:'TokenOffer' = None
    value_liveSo5Lineup:'So5Lineup' = None
    value_maxLevelUpAppliedCount = None
    value_myMintedSingleSaleOffer:'TokenOffer' = None
    value_name = None
    value_notContractOwners:'list[OwnerWithRates]' = None
    value_openForDomesticStats = None
    value_openForGameStats = None
    value_openForGameStatsCompetitions:'list[Competition]' = None
    value_openedSo5Lineup:'So5Lineup' = None
    value_openedSo5Lineups:'list[So5Lineup]' = None
    value_owner:'Owner' = None
    value_ownerSince = None
    value_ownerWithRates:'OwnerWithRates' = None
    value_ownershipHistory:'list[TokenOwner]' = None
    value_pendingWithdrawal:'TokenWithdrawal' = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_positionTyped = None
    value_power = None
    value_powerBreakdown:'PowerBreakdown' = None
    value_powerMalusAfterTransfer = None
    value_priceRange:'Range' = None
    value_privateMinPrices:'MonetaryAmount' = None
    value_publicMinPrices:'MonetaryAmount' = None
    value_rarity = None
    value_rarityTyped = None
    value_rawSo5Scores = None
    value_rivalsPower = None
    value_season:'Season' = None
    value_seasonYear = None
    value_secondaryMarketFeeEnabled = None
    value_sentInLiveOffers:'list[TokenOffer]' = None
    value_serialNumber = None
    value_shirtNumber = None
    value_singleCivilYear = None
    value_slug = None
    value_so5Scores:'list[So5Score]' = None
    value_sport = None
    value_starkwareTokenId = None
    value_subscriptionsCount = None
    value_supply = None
    value_team = None
    value_threeDimensional = None
    value_threeDimensionalAsset:'ThreeDimensionalAsset' = None
    value_token:'Token' = None
    value_tokenOwner:'TokenOwner' = None
    value_tradeableStatus = None
    value_u23Eligible = None
    value_user:'User' = None
    value_userOwner:'UserOwner' = None
    value_videoUrl = None
    value_visible = None
    value_walletStatus = None
    value_xp = None
    value_xpAfterTransfer = None
    value_xpNeededForCurrentGrade = None
    value_xpNeededForNextGrade = None
    def age(self,_param_name:str = 'age'):
        inst = None
        self._add_to_query("age",_param_name)
        pass

    def allSo5Scores(self,after,before,first,last,_param_name:str = 'allSo5Scores') -> 'So5ScoreConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = So5ScoreConnection(self,param_list)
        self._add_to_query("allSo5Scores",_param_name,inst)
        self.value_allSo5Scores = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPositions(self,_param_name:str = 'anyPositions'):
        inst = None
        self._add_to_query("anyPositions",_param_name)
        pass

    def anyTeam(self,_param_name:str = 'anyTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("anyTeam",_param_name,inst)
        self.value_anyTeam = inst
        return inst

    def assetId(self,_param_name:str = 'assetId'):
        inst = None
        self._add_to_query("assetId",_param_name)
        pass

    def availableCardBoosters(self,_param_name:str = 'availableCardBoosters'):
        inst = None
        self._add_to_query("availableCardBoosters",_param_name)
        pass

    def availableCardBoosts(self,_param_name:str = 'availableCardBoosts') -> 'CardBoost':
        param_list = []
        inst = CardBoost(self,param_list)
        self._add_to_query("availableCardBoosts",_param_name,inst)
        self.value_availableCardBoosts = inst
        return inst

    def availableUserShopItems(self,_param_name:str = 'availableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("availableUserShopItems",_param_name,inst)
        self.value_availableUserShopItems = inst
        return inst

    def averageScore(self,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def backPictureUrl(self,_param_name:str = 'backPictureUrl'):
        inst = None
        self._add_to_query("backPictureUrl",_param_name)
        pass

    def birthTxHash(self,_param_name:str = 'birthTxHash'):
        inst = None
        self._add_to_query("birthTxHash",_param_name)
        pass

    def blockchain(self,_param_name:str = 'blockchain'):
        inst = None
        self._add_to_query("blockchain",_param_name)
        pass

    def blockchainId(self,_param_name:str = 'blockchainId'):
        inst = None
        self._add_to_query("blockchainId",_param_name)
        pass

    def blueprint(self,_param_name:str = 'blueprint') -> 'Blueprint':
        param_list = []
        inst = Blueprint(self,param_list)
        self._add_to_query("blueprint",_param_name,inst)
        self.value_blueprint = inst
        return inst

    def cardCollectionCards(self,_param_name:str = 'cardCollectionCards') -> 'CardCollectionCard':
        param_list = []
        inst = CardCollectionCard(self,param_list)
        self._add_to_query("cardCollectionCards",_param_name,inst)
        self.value_cardCollectionCards = inst
        return inst

    def cardEditionName(self,_param_name:str = 'cardEditionName'):
        inst = None
        self._add_to_query("cardEditionName",_param_name)
        pass

    def cardStats(self,_param_name:str = 'cardStats') -> 'CardStats':
        param_list = []
        inst = CardStats(self,param_list)
        self._add_to_query("cardStats",_param_name,inst)
        self.value_cardStats = inst
        return inst

    def collection(self,_param_name:str = 'collection'):
        inst = None
        self._add_to_query("collection",_param_name)
        pass

    def contractAddress(self,_param_name:str = 'contractAddress'):
        inst = None
        self._add_to_query("contractAddress",_param_name)
        pass

    def coverageStatus(self,_param_name:str = 'coverageStatus'):
        inst = None
        self._add_to_query("coverageStatus",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def customCardEditionName(self,_param_name:str = 'customCardEditionName'):
        inst = None
        self._add_to_query("customCardEditionName",_param_name)
        pass

    def decks(self,_param_name:str = 'decks') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def displayRarity(self,_param_name:str = 'displayRarity'):
        inst = None
        self._add_to_query("displayRarity",_param_name)
        pass

    def eligiblePlayerGameScores(self,so5LeaderboardSlug,_param_name:str = 'eligiblePlayerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("eligiblePlayerGameScores",_param_name,inst)
        self.value_eligiblePlayerGameScores = inst
        return inst

    def eligibleUpcomingLeagueTracks(self,_param_name:str = 'eligibleUpcomingLeagueTracks') -> 'So5LeagueTrack':
        param_list = []
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("eligibleUpcomingLeagueTracks",_param_name,inst)
        self.value_eligibleUpcomingLeagueTracks = inst
        return inst

    def ethereumId(self,_param_name:str = 'ethereumId'):
        inst = None
        self._add_to_query("ethereumId",_param_name)
        pass

    def ethereumOwner(self,_param_name:str = 'ethereumOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ethereumOwner",_param_name,inst)
        self.value_ethereumOwner = inst
        return inst

    def footballPlayer(self,_param_name:str = 'footballPlayer') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("footballPlayer",_param_name,inst)
        self.value_footballPlayer = inst
        return inst

    def gameForLeague(self,so5LeaderboardSlug,so5LeagueSlug,_param_name:str = 'gameForLeague') -> 'Game':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = Game(self,param_list)
        self._add_to_query("gameForLeague",_param_name,inst)
        self.value_gameForLeague = inst
        return inst

    def grade(self,_param_name:str = 'grade'):
        inst = None
        self._add_to_query("grade",_param_name)
        pass

    def gradeAfterTransfer(self,_param_name:str = 'gradeAfterTransfer'):
        inst = None
        self._add_to_query("gradeAfterTransfer",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def inRollup(self,_param_name:str = 'inRollup'):
        inst = None
        self._add_to_query("inRollup",_param_name)
        pass

    def inSeasonEligible(self,_param_name:str = 'inSeasonEligible'):
        inst = None
        self._add_to_query("inSeasonEligible",_param_name)
        pass

    def inSeasonUntil(self,_param_name:str = 'inSeasonUntil'):
        inst = None
        self._add_to_query("inSeasonUntil",_param_name)
        pass

    def ipfsPictureUrl(self,_param_name:str = 'ipfsPictureUrl'):
        inst = None
        self._add_to_query("ipfsPictureUrl",_param_name)
        pass

    def ipfsUrl(self,_param_name:str = 'ipfsUrl'):
        inst = None
        self._add_to_query("ipfsUrl",_param_name)
        pass

    def latestEnglishAuction(self,_param_name:str = 'latestEnglishAuction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("latestEnglishAuction",_param_name,inst)
        self.value_latestEnglishAuction = inst
        return inst

    def latestPrimaryOffer(self,_param_name:str = 'latestPrimaryOffer') -> 'TokenPrimaryOffer':
        param_list = []
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("latestPrimaryOffer",_param_name,inst)
        self.value_latestPrimaryOffer = inst
        return inst

    def levelUpAppliedCount(self,_param_name:str = 'levelUpAppliedCount'):
        inst = None
        self._add_to_query("levelUpAppliedCount",_param_name)
        pass

    def liveSingleBuyOffers(self,_param_name:str = 'liveSingleBuyOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleBuyOffers",_param_name,inst)
        self.value_liveSingleBuyOffers = inst
        return inst

    def liveSingleSaleOffer(self,_param_name:str = 'liveSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleSaleOffer",_param_name,inst)
        self.value_liveSingleSaleOffer = inst
        return inst

    def liveSo5Lineup(self,_param_name:str = 'liveSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("liveSo5Lineup",_param_name,inst)
        self.value_liveSo5Lineup = inst
        return inst

    def maxLevelUpAppliedCount(self,_param_name:str = 'maxLevelUpAppliedCount'):
        inst = None
        self._add_to_query("maxLevelUpAppliedCount",_param_name)
        pass

    def myMintedSingleSaleOffer(self,_param_name:str = 'myMintedSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("myMintedSingleSaleOffer",_param_name,inst)
        self.value_myMintedSingleSaleOffer = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def notContractOwners(self,_param_name:str = 'notContractOwners') -> 'OwnerWithRates':
        param_list = []
        inst = OwnerWithRates(self,param_list)
        self._add_to_query("notContractOwners",_param_name,inst)
        self.value_notContractOwners = inst
        return inst

    def openForDomesticStats(self,_param_name:str = 'openForDomesticStats'):
        inst = None
        self._add_to_query("openForDomesticStats",_param_name)
        pass

    def openForGameStats(self,_param_name:str = 'openForGameStats'):
        inst = None
        self._add_to_query("openForGameStats",_param_name)
        pass

    def openForGameStatsCompetitions(self,_param_name:str = 'openForGameStatsCompetitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("openForGameStatsCompetitions",_param_name,inst)
        self.value_openForGameStatsCompetitions = inst
        return inst

    def openedSo5Lineup(self,_param_name:str = 'openedSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("openedSo5Lineup",_param_name,inst)
        self.value_openedSo5Lineup = inst
        return inst

    def openedSo5Lineups(self,_param_name:str = 'openedSo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("openedSo5Lineups",_param_name,inst)
        self.value_openedSo5Lineups = inst
        return inst

    def owner(self,_param_name:str = 'owner') -> 'Owner':
        param_list = []
        inst = Owner(self,param_list)
        self._add_to_query("owner",_param_name,inst)
        self.value_owner = inst
        return inst

    def ownerSince(self,_param_name:str = 'ownerSince'):
        inst = None
        self._add_to_query("ownerSince",_param_name)
        pass

    def ownerWithRates(self,_param_name:str = 'ownerWithRates') -> 'OwnerWithRates':
        param_list = []
        inst = OwnerWithRates(self,param_list)
        self._add_to_query("ownerWithRates",_param_name,inst)
        self.value_ownerWithRates = inst
        return inst

    def ownershipHistory(self,_param_name:str = 'ownershipHistory') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ownershipHistory",_param_name,inst)
        self.value_ownershipHistory = inst
        return inst

    def pendingWithdrawal(self,_param_name:str = 'pendingWithdrawal') -> 'TokenWithdrawal':
        param_list = []
        inst = TokenWithdrawal(self,param_list)
        self._add_to_query("pendingWithdrawal",_param_name,inst)
        self.value_pendingWithdrawal = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positionTyped(self,_param_name:str = 'positionTyped'):
        inst = None
        self._add_to_query("positionTyped",_param_name)
        pass

    def power(self,so5LeaderboardSlug,_param_name:str = 'power'):
        inst = None
        self._add_to_query("power",_param_name)
        pass

    def powerBreakdown(self,so5LeaderboardSlug,_param_name:str = 'powerBreakdown') -> 'PowerBreakdown':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PowerBreakdown(self,param_list)
        self._add_to_query("powerBreakdown",_param_name,inst)
        self.value_powerBreakdown = inst
        return inst

    def powerMalusAfterTransfer(self,_param_name:str = 'powerMalusAfterTransfer'):
        inst = None
        self._add_to_query("powerMalusAfterTransfer",_param_name)
        pass

    def priceRange(self,_param_name:str = 'priceRange') -> 'Range':
        param_list = []
        inst = Range(self,param_list)
        self._add_to_query("priceRange",_param_name,inst)
        self.value_priceRange = inst
        return inst

    def privateMinPrices(self,_param_name:str = 'privateMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("privateMinPrices",_param_name,inst)
        self.value_privateMinPrices = inst
        return inst

    def publicMinPrices(self,_param_name:str = 'publicMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("publicMinPrices",_param_name,inst)
        self.value_publicMinPrices = inst
        return inst

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def rarityTyped(self,_param_name:str = 'rarityTyped'):
        inst = None
        self._add_to_query("rarityTyped",_param_name)
        pass

    def rawSo5Scores(self,last,lowCoverage,_param_name:str = 'rawSo5Scores'):
        inst = None
        self._add_to_query("rawSo5Scores",_param_name)
        pass

    def rivalsPower(self,_param_name:str = 'rivalsPower'):
        inst = None
        self._add_to_query("rivalsPower",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def seasonYear(self,_param_name:str = 'seasonYear'):
        inst = None
        self._add_to_query("seasonYear",_param_name)
        pass

    def secondaryMarketFeeEnabled(self,_param_name:str = 'secondaryMarketFeeEnabled'):
        inst = None
        self._add_to_query("secondaryMarketFeeEnabled",_param_name)
        pass

    def sentInLiveOffers(self,_param_name:str = 'sentInLiveOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("sentInLiveOffers",_param_name,inst)
        self.value_sentInLiveOffers = inst
        return inst

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def shirtNumber(self,_param_name:str = 'shirtNumber'):
        inst = None
        self._add_to_query("shirtNumber",_param_name)
        pass

    def singleCivilYear(self,_param_name:str = 'singleCivilYear'):
        inst = None
        self._add_to_query("singleCivilYear",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Scores(self,last,lowCoverage,_param_name:str = 'so5Scores') -> 'So5Score':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        inst = So5Score(self,param_list)
        self._add_to_query("so5Scores",_param_name,inst)
        self.value_so5Scores = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def starkwareTokenId(self,_param_name:str = 'starkwareTokenId'):
        inst = None
        self._add_to_query("starkwareTokenId",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def supply(self,_param_name:str = 'supply'):
        inst = None
        self._add_to_query("supply",_param_name)
        pass

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass

    def threeDimensional(self,_param_name:str = 'threeDimensional'):
        inst = None
        self._add_to_query("threeDimensional",_param_name)
        pass

    def threeDimensionalAsset(self,_param_name:str = 'threeDimensionalAsset') -> 'ThreeDimensionalAsset':
        param_list = []
        inst = ThreeDimensionalAsset(self,param_list)
        self._add_to_query("threeDimensionalAsset",_param_name,inst)
        self.value_threeDimensionalAsset = inst
        return inst

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst

    def tokenOwner(self,_param_name:str = 'tokenOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("tokenOwner",_param_name,inst)
        self.value_tokenOwner = inst
        return inst

    def tradeableStatus(self,_param_name:str = 'tradeableStatus'):
        inst = None
        self._add_to_query("tradeableStatus",_param_name)
        pass

    def u23Eligible(self,_param_name:str = 'u23Eligible'):
        inst = None
        self._add_to_query("u23Eligible",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def userOwner(self,_param_name:str = 'userOwner') -> 'UserOwner':
        param_list = []
        inst = UserOwner(self,param_list)
        self._add_to_query("userOwner",_param_name,inst)
        self.value_userOwner = inst
        return inst

    def videoUrl(self,derivative,_param_name:str = 'videoUrl'):
        inst = None
        self._add_to_query("videoUrl",_param_name)
        pass

    def visible(self,_param_name:str = 'visible'):
        inst = None
        self._add_to_query("visible",_param_name)
        pass

    def walletStatus(self,_param_name:str = 'walletStatus'):
        inst = None
        self._add_to_query("walletStatus",_param_name)
        pass

    def xp(self,_param_name:str = 'xp'):
        inst = None
        self._add_to_query("xp",_param_name)
        pass

    def xpAfterTransfer(self,_param_name:str = 'xpAfterTransfer'):
        inst = None
        self._add_to_query("xpAfterTransfer",_param_name)
        pass

    def xpNeededForCurrentGrade(self,_param_name:str = 'xpNeededForCurrentGrade'):
        inst = None
        self._add_to_query("xpNeededForCurrentGrade",_param_name)
        pass

    def xpNeededForNextGrade(self,_param_name:str = 'xpNeededForNextGrade'):
        inst = None
        self._add_to_query("xpNeededForNextGrade",_param_name)
        pass


class CardEdge(GraphQLObject):
    value_cursor = None
    value_node:'Card' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class CardConnection(GraphQLObject):
    value_edges:'list[CardEdge]' = None
    value_nodes:'list[Card]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'CardEdge':
        param_list = []
        inst = CardEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class Season(GraphQLObject):
    value_cards:'CardConnection' = None
    value_id = None
    value_name = None
    value_startYear = None
    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def startYear(self,_param_name:str = 'startYear'):
        inst = None
        self._add_to_query("startYear",_param_name)
        pass


class Stats(GraphQLObject):
    value_appearances = None
    value_assists = None
    value_goals = None
    value_id = None
    value_minutesPlayed = None
    value_player:'Player' = None
    value_redCards = None
    value_season:'Season' = None
    value_substituteIn = None
    value_substituteOut = None
    value_yellowCards = None
    def appearances(self,_param_name:str = 'appearances'):
        inst = None
        self._add_to_query("appearances",_param_name)
        pass

    def assists(self,_param_name:str = 'assists'):
        inst = None
        self._add_to_query("assists",_param_name)
        pass

    def goals(self,_param_name:str = 'goals'):
        inst = None
        self._add_to_query("goals",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def minutesPlayed(self,_param_name:str = 'minutesPlayed'):
        inst = None
        self._add_to_query("minutesPlayed",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def redCards(self,_param_name:str = 'redCards'):
        inst = None
        self._add_to_query("redCards",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def substituteIn(self,_param_name:str = 'substituteIn'):
        inst = None
        self._add_to_query("substituteIn",_param_name)
        pass

    def substituteOut(self,_param_name:str = 'substituteOut'):
        inst = None
        self._add_to_query("substituteOut",_param_name)
        pass

    def yellowCards(self,_param_name:str = 'yellowCards'):
        inst = None
        self._add_to_query("yellowCards",_param_name)
        pass


class Membership(GraphQLObject):
    value_aggregatedStats:'Stats' = None
    value_club:'Club' = None
    value_endDate = None
    value_id = None
    value_membershipTeam = None
    value_player:'Player' = None
    value_startDate = None
    value_stats:'list[Stats]' = None
    def aggregatedStats(self,_param_name:str = 'aggregatedStats') -> 'Stats':
        param_list = []
        inst = Stats(self,param_list)
        self._add_to_query("aggregatedStats",_param_name,inst)
        self.value_aggregatedStats = inst
        return inst

    def club(self,_param_name:str = 'club') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("club",_param_name,inst)
        self.value_club = inst
        return inst

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def membershipTeam(self,_param_name:str = 'membershipTeam'):
        inst = None
        self._add_to_query("membershipTeam",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def stats(self,_param_name:str = 'stats') -> 'Stats':
        param_list = []
        inst = Stats(self,param_list)
        self._add_to_query("stats",_param_name,inst)
        self.value_stats = inst
        return inst


class Injury(GraphQLObject):
    value_active = None
    value_expectedEndDate = None
    value_id = None
    value_kind = None
    value_startDate = None
    def active(self,_param_name:str = 'active'):
        inst = None
        self._add_to_query("active",_param_name)
        pass

    def expectedEndDate(self,_param_name:str = 'expectedEndDate'):
        inst = None
        self._add_to_query("expectedEndDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def kind(self,_param_name:str = 'kind'):
        inst = None
        self._add_to_query("kind",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass


class NationalTeam(GraphQLObject):
    value_activeCompetitions:'list[Competition]' = None
    value_activeMemberships:'MembershipConnection' = None
    value_activePlayers:'PlayerConnection' = None
    value_anyActivePlayers:'AnyPlayerInterfaceConnection' = None
    value_anyGames:'AnyGameInterfaceConnection' = None
    value_anyPlayers:'AnyPlayerInterfaceConnection' = None
    value_anyRecentDepartures:'AnyPlayerInterfaceConnection' = None
    value_cards:'CardConnection' = None
    value_code = None
    value_country:'Country' = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_customBanner:'CustomBanner' = None
    value_dataPartner:'DataPartner' = None
    value_founded = None
    value_games:'GameConnection' = None
    value_id = None
    value_internationalCompetition:'Competition' = None
    value_lastFiveAnyGames:'list[AnyGameInterface]' = None
    value_lastFiveGames:'list[Game]' = None
    value_lastRivalsGame:'FootballRivalsGame' = None
    value_latestAnyGames:'AnyGameInterfaceConnection' = None
    value_latestGames:'GameConnection' = None
    value_name = None
    value_officialName = None
    value_optaId = None
    value_pictureSecondaryUrl = None
    value_pictureUrl = None
    value_players:'PlayerConnection' = None
    value_ready = None
    value_recentDepartures:'PlayerConnection' = None
    value_shortName = None
    value_slug = None
    value_styleGuideColor = None
    value_subscriptionsCount = None
    value_topPlayers:'list[Player]' = None
    value_upcomingAnyGames:'list[AnyGameInterface]' = None
    value_upcomingGames:'list[Game]' = None
    def activeCompetitions(self,_param_name:str = 'activeCompetitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("activeCompetitions",_param_name,inst)
        self.value_activeCompetitions = inst
        return inst

    def activeMemberships(self,after,before,first,last,_param_name:str = 'activeMemberships') -> 'MembershipConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = MembershipConnection(self,param_list)
        self._add_to_query("activeMemberships",_param_name,inst)
        self.value_activeMemberships = inst
        return inst

    def activePlayers(self,after,before,first,last,_param_name:str = 'activePlayers') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("activePlayers",_param_name,inst)
        self.value_activePlayers = inst
        return inst

    def anyActivePlayers(self,after,before,first,last,_param_name:str = 'anyActivePlayers') -> 'AnyPlayerInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyPlayerInterfaceConnection(self,param_list)
        self._add_to_query("anyActivePlayers",_param_name,inst)
        self.value_anyActivePlayers = inst
        return inst

    def anyGames(self,after,before,endDate,first,last,startDate,_param_name:str = 'anyGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("endDate",endDate))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("startDate",startDate))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyGames",_param_name,inst)
        self.value_anyGames = inst
        return inst

    def anyPlayers(self,after,before,first,last,_param_name:str = 'anyPlayers') -> 'AnyPlayerInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyPlayerInterfaceConnection(self,param_list)
        self._add_to_query("anyPlayers",_param_name,inst)
        self.value_anyPlayers = inst
        return inst

    def anyRecentDepartures(self,after,before,first,last,_param_name:str = 'anyRecentDepartures') -> 'AnyPlayerInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyPlayerInterfaceConnection(self,param_list)
        self._add_to_query("anyRecentDepartures",_param_name,inst)
        self.value_anyRecentDepartures = inst
        return inst

    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def code(self,_param_name:str = 'code'):
        inst = None
        self._add_to_query("code",_param_name)
        pass

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def customBanner(self,_param_name:str = 'customBanner') -> 'CustomBanner':
        param_list = []
        inst = CustomBanner(self,param_list)
        self._add_to_query("customBanner",_param_name,inst)
        self.value_customBanner = inst
        return inst

    def dataPartner(self,_param_name:str = 'dataPartner') -> 'DataPartner':
        param_list = []
        inst = DataPartner(self,param_list)
        self._add_to_query("dataPartner",_param_name,inst)
        self.value_dataPartner = inst
        return inst

    def founded(self,_param_name:str = 'founded'):
        inst = None
        self._add_to_query("founded",_param_name)
        pass

    def games(self,after,before,endDate,first,last,startDate,_param_name:str = 'games') -> 'GameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("endDate",endDate))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("startDate",startDate))
        inst = GameConnection(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def internationalCompetition(self,_param_name:str = 'internationalCompetition') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("internationalCompetition",_param_name,inst)
        self.value_internationalCompetition = inst
        return inst

    def lastFiveAnyGames(self,_param_name:str = 'lastFiveAnyGames') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("lastFiveAnyGames",_param_name,inst)
        self.value_lastFiveAnyGames = inst
        return inst

    def lastFiveGames(self,_param_name:str = 'lastFiveGames') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("lastFiveGames",_param_name,inst)
        self.value_lastFiveGames = inst
        return inst

    def lastRivalsGame(self,_param_name:str = 'lastRivalsGame') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("lastRivalsGame",_param_name,inst)
        self.value_lastRivalsGame = inst
        return inst

    def latestAnyGames(self,after,before,first,includingLive,last,_param_name:str = 'latestAnyGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("includingLive",includingLive))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("latestAnyGames",_param_name,inst)
        self.value_latestAnyGames = inst
        return inst

    def latestGames(self,after,before,first,includingLive,last,_param_name:str = 'latestGames') -> 'GameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("includingLive",includingLive))
        param_list.append(("last",last))
        inst = GameConnection(self,param_list)
        self._add_to_query("latestGames",_param_name,inst)
        self.value_latestGames = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def officialName(self,_param_name:str = 'officialName'):
        inst = None
        self._add_to_query("officialName",_param_name)
        pass

    def optaId(self,_param_name:str = 'optaId'):
        inst = None
        self._add_to_query("optaId",_param_name)
        pass

    def pictureSecondaryUrl(self,_param_name:str = 'pictureSecondaryUrl'):
        inst = None
        self._add_to_query("pictureSecondaryUrl",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def players(self,after,before,first,last,_param_name:str = 'players') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("players",_param_name,inst)
        self.value_players = inst
        return inst

    def ready(self,_param_name:str = 'ready'):
        inst = None
        self._add_to_query("ready",_param_name)
        pass

    def recentDepartures(self,after,before,first,last,_param_name:str = 'recentDepartures') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("recentDepartures",_param_name,inst)
        self.value_recentDepartures = inst
        return inst

    def shortName(self,_param_name:str = 'shortName'):
        inst = None
        self._add_to_query("shortName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def styleGuideColor(self,_param_name:str = 'styleGuideColor'):
        inst = None
        self._add_to_query("styleGuideColor",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def topPlayers(self,_param_name:str = 'topPlayers') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("topPlayers",_param_name,inst)
        self.value_topPlayers = inst
        return inst

    def upcomingAnyGames(self,first,_param_name:str = 'upcomingAnyGames') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("first",first))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("upcomingAnyGames",_param_name,inst)
        self.value_upcomingAnyGames = inst
        return inst

    def upcomingGames(self,first,_param_name:str = 'upcomingGames') -> 'Game':
        param_list = []
        param_list.append(("first",first))
        inst = Game(self,param_list)
        self._add_to_query("upcomingGames",_param_name,inst)
        self.value_upcomingGames = inst
        return inst


class Suspension(GraphQLObject):
    value_active = None
    value_competition:'Competition' = None
    value_endDate = None
    value_id = None
    value_kind = None
    value_matches = None
    value_reason = None
    value_startDate = None
    def active(self,_param_name:str = 'active'):
        inst = None
        self._add_to_query("active",_param_name)
        pass

    def competition(self,_param_name:str = 'competition') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competition",_param_name,inst)
        self.value_competition = inst
        return inst

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def kind(self,_param_name:str = 'kind'):
        inst = None
        self._add_to_query("kind",_param_name)
        pass

    def matches(self,_param_name:str = 'matches'):
        inst = None
        self._add_to_query("matches",_param_name)
        pass

    def reason(self,_param_name:str = 'reason'):
        inst = None
        self._add_to_query("reason",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass


class CardSeasonSupply(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_limited = None
    value_player:'Player' = None
    value_rare = None
    value_season:'Season' = None
    value_superRare = None
    value_unique = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def limited(self,_param_name:str = 'limited'):
        inst = None
        self._add_to_query("limited",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def rare(self,_param_name:str = 'rare'):
        inst = None
        self._add_to_query("rare",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def superRare(self,_param_name:str = 'superRare'):
        inst = None
        self._add_to_query("superRare",_param_name)
        pass

    def unique(self,_param_name:str = 'unique'):
        inst = None
        self._add_to_query("unique",_param_name)
        pass


class PlayerStatus(GraphQLObject):
    value_id = None
    value_lastFifteenSo5Appearances = None
    value_lastFifteenSo5AverageScore = None
    value_lastFiveSo5Appearances = None
    value_lastFiveSo5AverageScore = None
    value_lastTenPlayedSo5AverageScore = None
    value_lastTenSo5Appearances = None
    value_playingStatus = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastFifteenSo5Appearances(self,_param_name:str = 'lastFifteenSo5Appearances'):
        inst = None
        self._add_to_query("lastFifteenSo5Appearances",_param_name)
        pass

    def lastFifteenSo5AverageScore(self,_param_name:str = 'lastFifteenSo5AverageScore'):
        inst = None
        self._add_to_query("lastFifteenSo5AverageScore",_param_name)
        pass

    def lastFiveSo5Appearances(self,_param_name:str = 'lastFiveSo5Appearances'):
        inst = None
        self._add_to_query("lastFiveSo5Appearances",_param_name)
        pass

    def lastFiveSo5AverageScore(self,_param_name:str = 'lastFiveSo5AverageScore'):
        inst = None
        self._add_to_query("lastFiveSo5AverageScore",_param_name)
        pass

    def lastTenPlayedSo5AverageScore(self,_param_name:str = 'lastTenPlayedSo5AverageScore'):
        inst = None
        self._add_to_query("lastTenPlayedSo5AverageScore",_param_name)
        pass

    def lastTenSo5Appearances(self,_param_name:str = 'lastTenSo5Appearances'):
        inst = None
        self._add_to_query("lastTenSo5Appearances",_param_name)
        pass

    def playingStatus(self,_param_name:str = 'playingStatus'):
        inst = None
        self._add_to_query("playingStatus",_param_name)
        pass


class TokenPrice(GraphQLObject):
    value_amount = None
    value_amountInFiat:'Fiat' = None
    value_amounts:'MonetaryAmount' = None
    value_card:'AnyCardInterface' = None
    value_date = None
    value_deal = None
    value_id = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def amountInFiat(self,_param_name:str = 'amountInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("amountInFiat",_param_name,inst)
        self.value_amountInFiat = inst
        return inst

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def date(self,_param_name:str = 'date'):
        inst = None
        self._add_to_query("date",_param_name)
        pass

    def deal(self,_param_name:str = 'deal'):
        inst = None
        self._add_to_query("deal",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class TokenPriceEdge(GraphQLObject):
    value_cursor = None
    value_node:'TokenPrice' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'TokenPrice':
        param_list = []
        inst = TokenPrice(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class TokenPriceConnection(GraphQLObject):
    value_edges:'list[TokenPriceEdge]' = None
    value_nodes:'list[TokenPrice]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'TokenPriceEdge':
        param_list = []
        inst = TokenPriceEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'TokenPrice':
        param_list = []
        inst = TokenPrice(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class Player(GraphQLObject):
    value_activeClub:'Club' = None
    value_activeClubMembership:'Membership' = None
    value_activeInjuries:'list[Injury]' = None
    value_activeNationalTeam:'NationalTeam' = None
    value_activeSuspensions:'list[Suspension]' = None
    value_age = None
    value_allPlayerGameScores:'PlayerGameScoreInterfaceConnection' = None
    value_allSo5Scores:'So5ScoreConnection' = None
    value_anyCardWithLivePrimaryOffer:'AnyCardInterface' = None
    value_anyFutureGames:'AnyGameInterfaceConnection' = None
    value_anyGameStats:'list[AnyPlayerGameStatsInterface]' = None
    value_anyGamesForFixture:'list[AnyGameInterface]' = None
    value_anyGamesForLeaderboard:'list[AnyGameInterface]' = None
    value_anyPastGames:'AnyGameInterfaceConnection' = None
    value_anyPositions = None
    value_anyRelatedPlayers:'list[AnyPlayerInterface]' = None
    value_appearances = None
    value_avatarPictureUrl = None
    value_averageScore = None
    value_averageStats = None
    value_beforeLastOwningMembership:'Membership' = None
    value_bestFoot = None
    value_birthDate = None
    value_birthDay = None
    value_cardPositions = None
    value_cardSupply:'list[CardSeasonSupply]' = None
    value_cardWithLivePrimaryOffer = None
    value_cards:'CardConnection' = None
    value_careerSeasons:'list[Season]' = None
    value_clubMemberships:'list[Membership]' = None
    value_country:'Country' = None
    value_currentSeason:'Season' = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_displayName = None
    value_firstName = None
    value_fullPictureUrl = None
    value_futureGames:'GameConnection' = None
    value_gameForLeaderboard:'Game' = None
    value_gameStats:'list[PlayerGameStats]' = None
    value_gamesForLeaderboard:'list[Game]' = None
    value_height = None
    value_id = None
    value_injuries:'list[Injury]' = None
    value_lastClub:'Club' = None
    value_lastFifteenSo5Appearances = None
    value_lastFiveSo5Appearances = None
    value_lastName = None
    value_lastTenSo5Appearances = None
    value_lowestPriceAnyCard:'AnyCardInterface' = None
    value_lowestPriceCard = None
    value_matchName = None
    value_memberships:'list[Membership]' = None
    value_optaId = None
    value_pastGames:'GameConnection' = None
    value_pictureUrl = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_playerGameScores:'list[PlayerGameScoreInterface]' = None
    value_playingStatus = None
    value_position = None
    value_positionTyped = None
    value_rankingForPositionLeague = None
    value_rawPlayerGameScores = None
    value_rawSo5Scores = None
    value_relatedPlayers:'list[Player]' = None
    value_seasonAppearances = None
    value_shirtNumber = None
    value_slug = None
    value_so5Score:'So5Score' = None
    value_so5Scores:'list[So5Score]' = None
    value_sport = None
    value_squaredPictureUrl = None
    value_stats:'Stats' = None
    value_status:'PlayerStatus' = None
    value_subscriptionsCount = None
    value_suspensions:'list[Suspension]' = None
    value_tokenPrices:'TokenPriceConnection' = None
    value_u23Eligible = None
    value_u23EligibleUntil = None
    value_user:'User' = None
    value_weight = None
    def activeClub(self,_param_name:str = 'activeClub') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("activeClub",_param_name,inst)
        self.value_activeClub = inst
        return inst

    def activeClubMembership(self,_param_name:str = 'activeClubMembership') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("activeClubMembership",_param_name,inst)
        self.value_activeClubMembership = inst
        return inst

    def activeInjuries(self,_param_name:str = 'activeInjuries') -> 'Injury':
        param_list = []
        inst = Injury(self,param_list)
        self._add_to_query("activeInjuries",_param_name,inst)
        self.value_activeInjuries = inst
        return inst

    def activeNationalTeam(self,_param_name:str = 'activeNationalTeam') -> 'NationalTeam':
        param_list = []
        inst = NationalTeam(self,param_list)
        self._add_to_query("activeNationalTeam",_param_name,inst)
        self.value_activeNationalTeam = inst
        return inst

    def activeSuspensions(self,_param_name:str = 'activeSuspensions') -> 'Suspension':
        param_list = []
        inst = Suspension(self,param_list)
        self._add_to_query("activeSuspensions",_param_name,inst)
        self.value_activeSuspensions = inst
        return inst

    def age(self,_param_name:str = 'age'):
        inst = None
        self._add_to_query("age",_param_name)
        pass

    def allPlayerGameScores(self,after,before,first,last,position,_param_name:str = 'allPlayerGameScores') -> 'PlayerGameScoreInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterfaceConnection(self,param_list)
        self._add_to_query("allPlayerGameScores",_param_name,inst)
        self.value_allPlayerGameScores = inst
        return inst

    def allSo5Scores(self,after,before,first,last,position,_param_name:str = 'allSo5Scores') -> 'So5ScoreConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("position",position))
        inst = So5ScoreConnection(self,param_list)
        self._add_to_query("allSo5Scores",_param_name,inst)
        self.value_allSo5Scores = inst
        return inst

    def anyCardWithLivePrimaryOffer(self,rarity,_param_name:str = 'anyCardWithLivePrimaryOffer') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCardWithLivePrimaryOffer",_param_name,inst)
        self.value_anyCardWithLivePrimaryOffer = inst
        return inst

    def anyFutureGames(self,after,before,first,last,_param_name:str = 'anyFutureGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyFutureGames",_param_name,inst)
        self.value_anyFutureGames = inst
        return inst

    def anyGameStats(self,last,lowCoverage,_param_name:str = 'anyGameStats') -> 'AnyPlayerGameStatsInterface':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        inst = AnyPlayerGameStatsInterface(self,param_list)
        self._add_to_query("anyGameStats",_param_name,inst)
        self.value_anyGameStats = inst
        return inst

    def anyGamesForFixture(self,so5FixtureSlug,_param_name:str = 'anyGamesForFixture') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("so5FixtureSlug",so5FixtureSlug))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGamesForFixture",_param_name,inst)
        self.value_anyGamesForFixture = inst
        return inst

    def anyGamesForLeaderboard(self,so5LeaderboardSlug,_param_name:str = 'anyGamesForLeaderboard') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGamesForLeaderboard",_param_name,inst)
        self.value_anyGamesForLeaderboard = inst
        return inst

    def anyPastGames(self,after,before,first,last,_param_name:str = 'anyPastGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyPastGames",_param_name,inst)
        self.value_anyPastGames = inst
        return inst

    def anyPositions(self,_param_name:str = 'anyPositions'):
        inst = None
        self._add_to_query("anyPositions",_param_name)
        pass

    def anyRelatedPlayers(self,_param_name:str = 'anyRelatedPlayers') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyRelatedPlayers",_param_name,inst)
        self.value_anyRelatedPlayers = inst
        return inst

    def appearances(self,_param_name:str = 'appearances'):
        inst = None
        self._add_to_query("appearances",_param_name)
        pass

    def avatarPictureUrl(self,_param_name:str = 'avatarPictureUrl'):
        inst = None
        self._add_to_query("avatarPictureUrl",_param_name)
        pass

    def averageScore(self,position,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def averageStats(self,limit,stat,type,_param_name:str = 'averageStats'):
        inst = None
        self._add_to_query("averageStats",_param_name)
        pass

    def beforeLastOwningMembership(self,_param_name:str = 'beforeLastOwningMembership') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("beforeLastOwningMembership",_param_name,inst)
        self.value_beforeLastOwningMembership = inst
        return inst

    def bestFoot(self,_param_name:str = 'bestFoot'):
        inst = None
        self._add_to_query("bestFoot",_param_name)
        pass

    def birthDate(self,_param_name:str = 'birthDate'):
        inst = None
        self._add_to_query("birthDate",_param_name)
        pass

    def birthDay(self,_param_name:str = 'birthDay'):
        inst = None
        self._add_to_query("birthDay",_param_name)
        pass

    def cardPositions(self,_param_name:str = 'cardPositions'):
        inst = None
        self._add_to_query("cardPositions",_param_name)
        pass

    def cardSupply(self,_param_name:str = 'cardSupply') -> 'CardSeasonSupply':
        param_list = []
        inst = CardSeasonSupply(self,param_list)
        self._add_to_query("cardSupply",_param_name,inst)
        self.value_cardSupply = inst
        return inst

    def cardWithLivePrimaryOffer(self,rarity,_param_name:str = 'cardWithLivePrimaryOffer'):
        inst = None
        self._add_to_query("cardWithLivePrimaryOffer",_param_name)
        pass

    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def careerSeasons(self,type,_param_name:str = 'careerSeasons') -> 'Season':
        param_list = []
        param_list.append(("type",type))
        inst = Season(self,param_list)
        self._add_to_query("careerSeasons",_param_name,inst)
        self.value_careerSeasons = inst
        return inst

    def clubMemberships(self,_param_name:str = 'clubMemberships') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("clubMemberships",_param_name,inst)
        self.value_clubMemberships = inst
        return inst

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def currentSeason(self,_param_name:str = 'currentSeason') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("currentSeason",_param_name,inst)
        self.value_currentSeason = inst
        return inst

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def firstName(self,_param_name:str = 'firstName'):
        inst = None
        self._add_to_query("firstName",_param_name)
        pass

    def fullPictureUrl(self,_param_name:str = 'fullPictureUrl'):
        inst = None
        self._add_to_query("fullPictureUrl",_param_name)
        pass

    def futureGames(self,after,before,first,last,_param_name:str = 'futureGames') -> 'GameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = GameConnection(self,param_list)
        self._add_to_query("futureGames",_param_name,inst)
        self.value_futureGames = inst
        return inst

    def gameForLeaderboard(self,so5LeaderboardSlug,_param_name:str = 'gameForLeaderboard') -> 'Game':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = Game(self,param_list)
        self._add_to_query("gameForLeaderboard",_param_name,inst)
        self.value_gameForLeaderboard = inst
        return inst

    def gameStats(self,last,lowCoverage,_param_name:str = 'gameStats') -> 'PlayerGameStats':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        inst = PlayerGameStats(self,param_list)
        self._add_to_query("gameStats",_param_name,inst)
        self.value_gameStats = inst
        return inst

    def gamesForLeaderboard(self,so5LeaderboardSlug,_param_name:str = 'gamesForLeaderboard') -> 'Game':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = Game(self,param_list)
        self._add_to_query("gamesForLeaderboard",_param_name,inst)
        self.value_gamesForLeaderboard = inst
        return inst

    def height(self,_param_name:str = 'height'):
        inst = None
        self._add_to_query("height",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def injuries(self,_param_name:str = 'injuries') -> 'Injury':
        param_list = []
        inst = Injury(self,param_list)
        self._add_to_query("injuries",_param_name,inst)
        self.value_injuries = inst
        return inst

    def lastClub(self,_param_name:str = 'lastClub') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("lastClub",_param_name,inst)
        self.value_lastClub = inst
        return inst

    def lastFifteenSo5Appearances(self,_param_name:str = 'lastFifteenSo5Appearances'):
        inst = None
        self._add_to_query("lastFifteenSo5Appearances",_param_name)
        pass

    def lastFiveSo5Appearances(self,_param_name:str = 'lastFiveSo5Appearances'):
        inst = None
        self._add_to_query("lastFiveSo5Appearances",_param_name)
        pass

    def lastName(self,_param_name:str = 'lastName'):
        inst = None
        self._add_to_query("lastName",_param_name)
        pass

    def lastTenSo5Appearances(self,_param_name:str = 'lastTenSo5Appearances'):
        inst = None
        self._add_to_query("lastTenSo5Appearances",_param_name)
        pass

    def lowestPriceAnyCard(self,rarity,seasonStartYear,teamSlug,_param_name:str = 'lowestPriceAnyCard') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        param_list.append(("seasonStartYear",seasonStartYear))
        param_list.append(("teamSlug",teamSlug))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("lowestPriceAnyCard",_param_name,inst)
        self.value_lowestPriceAnyCard = inst
        return inst

    def lowestPriceCard(self,rarity,_param_name:str = 'lowestPriceCard'):
        inst = None
        self._add_to_query("lowestPriceCard",_param_name)
        pass

    def matchName(self,_param_name:str = 'matchName'):
        inst = None
        self._add_to_query("matchName",_param_name)
        pass

    def memberships(self,_param_name:str = 'memberships') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("memberships",_param_name,inst)
        self.value_memberships = inst
        return inst

    def optaId(self,_param_name:str = 'optaId'):
        inst = None
        self._add_to_query("optaId",_param_name)
        pass

    def pastGames(self,after,before,first,last,_param_name:str = 'pastGames') -> 'GameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = GameConnection(self,param_list)
        self._add_to_query("pastGames",_param_name,inst)
        self.value_pastGames = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def playerGameScore(self,gameId,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("gameId",gameId))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def playerGameScores(self,last,lowCoverage,position,_param_name:str = 'playerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScores",_param_name,inst)
        self.value_playerGameScores = inst
        return inst

    def playingStatus(self,_param_name:str = 'playingStatus'):
        inst = None
        self._add_to_query("playingStatus",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positionTyped(self,_param_name:str = 'positionTyped'):
        inst = None
        self._add_to_query("positionTyped",_param_name)
        pass

    def rankingForPositionLeague(self,_param_name:str = 'rankingForPositionLeague'):
        inst = None
        self._add_to_query("rankingForPositionLeague",_param_name)
        pass

    def rawPlayerGameScores(self,last,lowCoverage,position,_param_name:str = 'rawPlayerGameScores'):
        inst = None
        self._add_to_query("rawPlayerGameScores",_param_name)
        pass

    def rawSo5Scores(self,last,lowCoverage,position,_param_name:str = 'rawSo5Scores'):
        inst = None
        self._add_to_query("rawSo5Scores",_param_name)
        pass

    def relatedPlayers(self,_param_name:str = 'relatedPlayers') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("relatedPlayers",_param_name,inst)
        self.value_relatedPlayers = inst
        return inst

    def seasonAppearances(self,_param_name:str = 'seasonAppearances'):
        inst = None
        self._add_to_query("seasonAppearances",_param_name)
        pass

    def shirtNumber(self,_param_name:str = 'shirtNumber'):
        inst = None
        self._add_to_query("shirtNumber",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Score(self,gameId,position,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        param_list.append(("gameId",gameId))
        param_list.append(("position",position))
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst

    def so5Scores(self,last,lowCoverage,position,_param_name:str = 'so5Scores') -> 'So5Score':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        param_list.append(("position",position))
        inst = So5Score(self,param_list)
        self._add_to_query("so5Scores",_param_name,inst)
        self.value_so5Scores = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def squaredPictureUrl(self,_param_name:str = 'squaredPictureUrl'):
        inst = None
        self._add_to_query("squaredPictureUrl",_param_name)
        pass

    def stats(self,seasonStartYear,_param_name:str = 'stats') -> 'Stats':
        param_list = []
        param_list.append(("seasonStartYear",seasonStartYear))
        inst = Stats(self,param_list)
        self._add_to_query("stats",_param_name,inst)
        self.value_stats = inst
        return inst

    def status(self,_param_name:str = 'status') -> 'PlayerStatus':
        param_list = []
        inst = PlayerStatus(self,param_list)
        self._add_to_query("status",_param_name,inst)
        self.value_status = inst
        return inst

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def suspensions(self,_param_name:str = 'suspensions') -> 'Suspension':
        param_list = []
        inst = Suspension(self,param_list)
        self._add_to_query("suspensions",_param_name,inst)
        self.value_suspensions = inst
        return inst

    def tokenPrices(self,after,before,first,last,rarity,season,seasonEligibility,since,_param_name:str = 'tokenPrices') -> 'TokenPriceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("rarity",rarity))
        param_list.append(("season",season))
        param_list.append(("seasonEligibility",seasonEligibility))
        param_list.append(("since",since))
        inst = TokenPriceConnection(self,param_list)
        self._add_to_query("tokenPrices",_param_name,inst)
        self.value_tokenPrices = inst
        return inst

    def u23Eligible(self,_param_name:str = 'u23Eligible'):
        inst = None
        self._add_to_query("u23Eligible",_param_name)
        pass

    def u23EligibleUntil(self,_param_name:str = 'u23EligibleUntil'):
        inst = None
        self._add_to_query("u23EligibleUntil",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def weight(self,_param_name:str = 'weight'):
        inst = None
        self._add_to_query("weight",_param_name)
        pass


class PickablePlayer(GraphQLObject):
    value_id = None
    value_pictureUrl = None
    value_player:'Player' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst


class AnyContestantInterface(GraphQLObject):
    value_gamesDrawn = None
    value_gamesLost = None
    value_gamesPlayed = None
    value_gamesWon = None
    value_id = None
    value_rank = None
    value_rankStatus = None
    value_rankType = None
    value_team:'TeamInterface' = None
    def gamesDrawn(self,_param_name:str = 'gamesDrawn'):
        inst = None
        self._add_to_query("gamesDrawn",_param_name)
        pass

    def gamesLost(self,_param_name:str = 'gamesLost'):
        inst = None
        self._add_to_query("gamesLost",_param_name)
        pass

    def gamesPlayed(self,_param_name:str = 'gamesPlayed'):
        inst = None
        self._add_to_query("gamesPlayed",_param_name)
        pass

    def gamesWon(self,_param_name:str = 'gamesWon'):
        inst = None
        self._add_to_query("gamesWon",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def rankStatus(self,_param_name:str = 'rankStatus'):
        inst = None
        self._add_to_query("rankStatus",_param_name)
        pass

    def rankType(self,_param_name:str = 'rankType'):
        inst = None
        self._add_to_query("rankType",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst


class StageGroup(GraphQLObject):
    value_contestants:'list[AnyContestantInterface]' = None
    value_id = None
    value_name = None
    def contestants(self,_param_name:str = 'contestants') -> 'AnyContestantInterface':
        param_list = []
        inst = AnyContestantInterface(self,param_list)
        self._add_to_query("contestants",_param_name,inst)
        self.value_contestants = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass


class TournamentCalendarStage(GraphQLObject):
    value_groups:'list[StageGroup]' = None
    value_id = None
    value_name = None
    def groups(self,_param_name:str = 'groups') -> 'StageGroup':
        param_list = []
        inst = StageGroup(self,param_list)
        self._add_to_query("groups",_param_name,inst)
        self.value_groups = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass


class Competition(GraphQLObject):
    value_backgroundColor = None
    value_backgroundPictureUrl = None
    value_clubs:'ClubConnection' = None
    value_contestants:'list[Contestant]' = None
    value_country:'Country' = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_customBanner:'CustomBanner' = None
    value_displayName = None
    value_featuredCardPictureUrls = None
    value_featuredPlayer:'PickablePlayer' = None
    value_format = None
    value_futureGames:'GameConnection' = None
    value_id = None
    value_logoUrl = None
    value_name = None
    value_openForGameStats = None
    value_orderedPlayers:'PlayerConnection' = None
    value_pastGames:'GameConnection' = None
    value_pictureSecondaryUrl = None
    value_pictureUrl = None
    value_playersByLastFiveAverage:'PlayerConnection' = None
    value_released = None
    value_seasons:'list[Season]' = None
    value_slug = None
    value_stages:'list[TournamentCalendarStage]' = None
    value_subscriptionsCount = None
    value_type = None
    def backgroundColor(self,_param_name:str = 'backgroundColor'):
        inst = None
        self._add_to_query("backgroundColor",_param_name)
        pass

    def backgroundPictureUrl(self,_param_name:str = 'backgroundPictureUrl'):
        inst = None
        self._add_to_query("backgroundPictureUrl",_param_name)
        pass

    def clubs(self,after,before,first,last,_param_name:str = 'clubs') -> 'ClubConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = ClubConnection(self,param_list)
        self._add_to_query("clubs",_param_name,inst)
        self.value_clubs = inst
        return inst

    def contestants(self,seasonStartYear,_param_name:str = 'contestants') -> 'Contestant':
        param_list = []
        param_list.append(("seasonStartYear",seasonStartYear))
        inst = Contestant(self,param_list)
        self._add_to_query("contestants",_param_name,inst)
        self.value_contestants = inst
        return inst

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def customBanner(self,_param_name:str = 'customBanner') -> 'CustomBanner':
        param_list = []
        inst = CustomBanner(self,param_list)
        self._add_to_query("customBanner",_param_name,inst)
        self.value_customBanner = inst
        return inst

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def featuredCardPictureUrls(self,_param_name:str = 'featuredCardPictureUrls'):
        inst = None
        self._add_to_query("featuredCardPictureUrls",_param_name)
        pass

    def featuredPlayer(self,_param_name:str = 'featuredPlayer') -> 'PickablePlayer':
        param_list = []
        inst = PickablePlayer(self,param_list)
        self._add_to_query("featuredPlayer",_param_name,inst)
        self.value_featuredPlayer = inst
        return inst

    def format(self,_param_name:str = 'format'):
        inst = None
        self._add_to_query("format",_param_name)
        pass

    def futureGames(self,after,before,first,last,_param_name:str = 'futureGames') -> 'GameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = GameConnection(self,param_list)
        self._add_to_query("futureGames",_param_name,inst)
        self.value_futureGames = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def logoUrl(self,_param_name:str = 'logoUrl'):
        inst = None
        self._add_to_query("logoUrl",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def openForGameStats(self,_param_name:str = 'openForGameStats'):
        inst = None
        self._add_to_query("openForGameStats",_param_name)
        pass

    def orderedPlayers(self,after,averageStat,before,first,last,limit,_param_name:str = 'orderedPlayers') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("averageStat",averageStat))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("limit",limit))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("orderedPlayers",_param_name,inst)
        self.value_orderedPlayers = inst
        return inst

    def pastGames(self,after,before,first,last,_param_name:str = 'pastGames') -> 'GameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = GameConnection(self,param_list)
        self._add_to_query("pastGames",_param_name,inst)
        self.value_pastGames = inst
        return inst

    def pictureSecondaryUrl(self,_param_name:str = 'pictureSecondaryUrl'):
        inst = None
        self._add_to_query("pictureSecondaryUrl",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def playersByLastFiveAverage(self,after,before,first,last,_param_name:str = 'playersByLastFiveAverage') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("playersByLastFiveAverage",_param_name,inst)
        self.value_playersByLastFiveAverage = inst
        return inst

    def released(self,_param_name:str = 'released'):
        inst = None
        self._add_to_query("released",_param_name)
        pass

    def seasons(self,_param_name:str = 'seasons') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("seasons",_param_name,inst)
        self.value_seasons = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def stages(self,seasonStartYear,_param_name:str = 'stages') -> 'TournamentCalendarStage':
        param_list = []
        param_list.append(("seasonStartYear",seasonStartYear))
        inst = TournamentCalendarStage(self,param_list)
        self._add_to_query("stages",_param_name,inst)
        self.value_stages = inst
        return inst

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class Club(GraphQLObject):
    value_activeCompetitions:'list[Competition]' = None
    value_activeContestant:'AnyContestantInterface' = None
    value_activeMemberships:'MembershipConnection' = None
    value_activePlayers:'PlayerConnection' = None
    value_anyActivePlayers:'AnyPlayerInterfaceConnection' = None
    value_anyGames:'AnyGameInterfaceConnection' = None
    value_anyPlayers:'AnyPlayerInterfaceConnection' = None
    value_anyRecentDepartures:'AnyPlayerInterfaceConnection' = None
    value_anyTopPlayers:'list[AnyPlayerInterface]' = None
    value_cards:'CardConnection' = None
    value_code = None
    value_country:'Country' = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_customBanner:'CustomBanner' = None
    value_dataPartner:'DataPartner' = None
    value_domesticLeague:'Competition' = None
    value_domesticLeagueRanking = None
    value_founded = None
    value_games:'GameConnection' = None
    value_id = None
    value_lastFiveAnyGames:'list[AnyGameInterface]' = None
    value_lastFiveGames:'list[Game]' = None
    value_lastRivalsGame:'FootballRivalsGame' = None
    value_latestAnyGames:'AnyGameInterfaceConnection' = None
    value_latestGames:'GameConnection' = None
    value_name = None
    value_officialName = None
    value_optaId = None
    value_pictureSecondaryUrl = None
    value_pictureUrl = None
    value_players:'PlayerConnection' = None
    value_ready = None
    value_recentDepartures:'PlayerConnection' = None
    value_relatedClubs:'list[Club]' = None
    value_shortName = None
    value_slug = None
    value_styleGuideColor = None
    value_subscriptionsCount = None
    value_topPlayers:'list[Player]' = None
    value_upcomingAnyGames:'list[AnyGameInterface]' = None
    value_upcomingGames:'list[Game]' = None
    def activeCompetitions(self,_param_name:str = 'activeCompetitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("activeCompetitions",_param_name,inst)
        self.value_activeCompetitions = inst
        return inst

    def activeContestant(self,_param_name:str = 'activeContestant') -> 'AnyContestantInterface':
        param_list = []
        inst = AnyContestantInterface(self,param_list)
        self._add_to_query("activeContestant",_param_name,inst)
        self.value_activeContestant = inst
        return inst

    def activeMemberships(self,after,before,first,last,_param_name:str = 'activeMemberships') -> 'MembershipConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = MembershipConnection(self,param_list)
        self._add_to_query("activeMemberships",_param_name,inst)
        self.value_activeMemberships = inst
        return inst

    def activePlayers(self,after,before,first,last,_param_name:str = 'activePlayers') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("activePlayers",_param_name,inst)
        self.value_activePlayers = inst
        return inst

    def anyActivePlayers(self,after,before,first,last,_param_name:str = 'anyActivePlayers') -> 'AnyPlayerInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyPlayerInterfaceConnection(self,param_list)
        self._add_to_query("anyActivePlayers",_param_name,inst)
        self.value_anyActivePlayers = inst
        return inst

    def anyGames(self,after,before,endDate,first,last,startDate,_param_name:str = 'anyGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("endDate",endDate))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("startDate",startDate))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyGames",_param_name,inst)
        self.value_anyGames = inst
        return inst

    def anyPlayers(self,after,before,first,last,_param_name:str = 'anyPlayers') -> 'AnyPlayerInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyPlayerInterfaceConnection(self,param_list)
        self._add_to_query("anyPlayers",_param_name,inst)
        self.value_anyPlayers = inst
        return inst

    def anyRecentDepartures(self,after,before,first,last,_param_name:str = 'anyRecentDepartures') -> 'AnyPlayerInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyPlayerInterfaceConnection(self,param_list)
        self._add_to_query("anyRecentDepartures",_param_name,inst)
        self.value_anyRecentDepartures = inst
        return inst

    def anyTopPlayers(self,_param_name:str = 'anyTopPlayers') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyTopPlayers",_param_name,inst)
        self.value_anyTopPlayers = inst
        return inst

    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def code(self,_param_name:str = 'code'):
        inst = None
        self._add_to_query("code",_param_name)
        pass

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def customBanner(self,_param_name:str = 'customBanner') -> 'CustomBanner':
        param_list = []
        inst = CustomBanner(self,param_list)
        self._add_to_query("customBanner",_param_name,inst)
        self.value_customBanner = inst
        return inst

    def dataPartner(self,_param_name:str = 'dataPartner') -> 'DataPartner':
        param_list = []
        inst = DataPartner(self,param_list)
        self._add_to_query("dataPartner",_param_name,inst)
        self.value_dataPartner = inst
        return inst

    def domesticLeague(self,_param_name:str = 'domesticLeague') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("domesticLeague",_param_name,inst)
        self.value_domesticLeague = inst
        return inst

    def domesticLeagueRanking(self,_param_name:str = 'domesticLeagueRanking'):
        inst = None
        self._add_to_query("domesticLeagueRanking",_param_name)
        pass

    def founded(self,_param_name:str = 'founded'):
        inst = None
        self._add_to_query("founded",_param_name)
        pass

    def games(self,after,before,endDate,first,last,startDate,_param_name:str = 'games') -> 'GameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("endDate",endDate))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("startDate",startDate))
        inst = GameConnection(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastFiveAnyGames(self,_param_name:str = 'lastFiveAnyGames') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("lastFiveAnyGames",_param_name,inst)
        self.value_lastFiveAnyGames = inst
        return inst

    def lastFiveGames(self,_param_name:str = 'lastFiveGames') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("lastFiveGames",_param_name,inst)
        self.value_lastFiveGames = inst
        return inst

    def lastRivalsGame(self,_param_name:str = 'lastRivalsGame') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("lastRivalsGame",_param_name,inst)
        self.value_lastRivalsGame = inst
        return inst

    def latestAnyGames(self,after,before,first,includingLive,last,_param_name:str = 'latestAnyGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("includingLive",includingLive))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("latestAnyGames",_param_name,inst)
        self.value_latestAnyGames = inst
        return inst

    def latestGames(self,after,before,first,includingLive,last,_param_name:str = 'latestGames') -> 'GameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("includingLive",includingLive))
        param_list.append(("last",last))
        inst = GameConnection(self,param_list)
        self._add_to_query("latestGames",_param_name,inst)
        self.value_latestGames = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def officialName(self,_param_name:str = 'officialName'):
        inst = None
        self._add_to_query("officialName",_param_name)
        pass

    def optaId(self,_param_name:str = 'optaId'):
        inst = None
        self._add_to_query("optaId",_param_name)
        pass

    def pictureSecondaryUrl(self,_param_name:str = 'pictureSecondaryUrl'):
        inst = None
        self._add_to_query("pictureSecondaryUrl",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def players(self,after,before,first,last,_param_name:str = 'players') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("players",_param_name,inst)
        self.value_players = inst
        return inst

    def ready(self,_param_name:str = 'ready'):
        inst = None
        self._add_to_query("ready",_param_name)
        pass

    def recentDepartures(self,after,before,first,last,_param_name:str = 'recentDepartures') -> 'PlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = PlayerConnection(self,param_list)
        self._add_to_query("recentDepartures",_param_name,inst)
        self.value_recentDepartures = inst
        return inst

    def relatedClubs(self,_param_name:str = 'relatedClubs') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("relatedClubs",_param_name,inst)
        self.value_relatedClubs = inst
        return inst

    def shortName(self,_param_name:str = 'shortName'):
        inst = None
        self._add_to_query("shortName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def styleGuideColor(self,_param_name:str = 'styleGuideColor'):
        inst = None
        self._add_to_query("styleGuideColor",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def topPlayers(self,_param_name:str = 'topPlayers') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("topPlayers",_param_name,inst)
        self.value_topPlayers = inst
        return inst

    def upcomingAnyGames(self,first,_param_name:str = 'upcomingAnyGames') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("first",first))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("upcomingAnyGames",_param_name,inst)
        self.value_upcomingAnyGames = inst
        return inst

    def upcomingGames(self,first,_param_name:str = 'upcomingGames') -> 'Game':
        param_list = []
        param_list.append(("first",first))
        inst = Game(self,param_list)
        self._add_to_query("upcomingGames",_param_name,inst)
        self.value_upcomingGames = inst
        return inst


class AnyPlayerInterface(GraphQLObject):
    value_activeClub:'Club' = None
    value_activeClubMembership:'Membership' = None
    value_activeInjuries:'list[Injury]' = None
    value_activeNationalTeam:'NationalTeam' = None
    value_activeSuspensions:'list[Suspension]' = None
    value_age = None
    value_allPlayerGameScores:'PlayerGameScoreInterfaceConnection' = None
    value_anyCardWithLivePrimaryOffer:'AnyCardInterface' = None
    value_anyFutureGames:'AnyGameInterfaceConnection' = None
    value_anyGameStats:'list[AnyPlayerGameStatsInterface]' = None
    value_anyGamesForFixture:'list[AnyGameInterface]' = None
    value_anyGamesForLeaderboard:'list[AnyGameInterface]' = None
    value_anyPastGames:'AnyGameInterfaceConnection' = None
    value_anyPositions = None
    value_anyRelatedPlayers:'list[AnyPlayerInterface]' = None
    value_appearances = None
    value_avatarPictureUrl = None
    value_averageScore = None
    value_beforeLastOwningMembership:'Membership' = None
    value_birthDay = None
    value_cardPositions = None
    value_cardSupply:'list[CardSeasonSupply]' = None
    value_cardWithLivePrimaryOffer = None
    value_careerSeasons:'list[Season]' = None
    value_clubMemberships:'list[Membership]' = None
    value_country:'Country' = None
    value_currentSeason:'Season' = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_displayName = None
    value_firstName = None
    value_fullPictureUrl = None
    value_height = None
    value_injuries:'list[Injury]' = None
    value_lastClub:'Club' = None
    value_lastFifteenSo5Appearances = None
    value_lastFiveSo5Appearances = None
    value_lastName = None
    value_lastTenSo5Appearances = None
    value_lowestPriceAnyCard:'AnyCardInterface' = None
    value_lowestPriceCard = None
    value_matchName = None
    value_memberships:'list[Membership]' = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_playerGameScores:'list[PlayerGameScoreInterface]' = None
    value_rawPlayerGameScores = None
    value_seasonAppearances = None
    value_shirtNumber = None
    value_slug = None
    value_sport = None
    value_squaredPictureUrl = None
    value_subscriptionsCount = None
    value_suspensions:'list[Suspension]' = None
    value_tokenPrices:'TokenPriceConnection' = None
    value_user:'User' = None
    value_weight = None
    def activeClub(self,_param_name:str = 'activeClub') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("activeClub",_param_name,inst)
        self.value_activeClub = inst
        return inst

    def activeClubMembership(self,_param_name:str = 'activeClubMembership') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("activeClubMembership",_param_name,inst)
        self.value_activeClubMembership = inst
        return inst

    def activeInjuries(self,_param_name:str = 'activeInjuries') -> 'Injury':
        param_list = []
        inst = Injury(self,param_list)
        self._add_to_query("activeInjuries",_param_name,inst)
        self.value_activeInjuries = inst
        return inst

    def activeNationalTeam(self,_param_name:str = 'activeNationalTeam') -> 'NationalTeam':
        param_list = []
        inst = NationalTeam(self,param_list)
        self._add_to_query("activeNationalTeam",_param_name,inst)
        self.value_activeNationalTeam = inst
        return inst

    def activeSuspensions(self,_param_name:str = 'activeSuspensions') -> 'Suspension':
        param_list = []
        inst = Suspension(self,param_list)
        self._add_to_query("activeSuspensions",_param_name,inst)
        self.value_activeSuspensions = inst
        return inst

    def age(self,_param_name:str = 'age'):
        inst = None
        self._add_to_query("age",_param_name)
        pass

    def allPlayerGameScores(self,after,before,first,last,position,_param_name:str = 'allPlayerGameScores') -> 'PlayerGameScoreInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterfaceConnection(self,param_list)
        self._add_to_query("allPlayerGameScores",_param_name,inst)
        self.value_allPlayerGameScores = inst
        return inst

    def anyCardWithLivePrimaryOffer(self,rarity,_param_name:str = 'anyCardWithLivePrimaryOffer') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCardWithLivePrimaryOffer",_param_name,inst)
        self.value_anyCardWithLivePrimaryOffer = inst
        return inst

    def anyFutureGames(self,after,before,first,last,_param_name:str = 'anyFutureGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyFutureGames",_param_name,inst)
        self.value_anyFutureGames = inst
        return inst

    def anyGameStats(self,last,lowCoverage,_param_name:str = 'anyGameStats') -> 'AnyPlayerGameStatsInterface':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        inst = AnyPlayerGameStatsInterface(self,param_list)
        self._add_to_query("anyGameStats",_param_name,inst)
        self.value_anyGameStats = inst
        return inst

    def anyGamesForFixture(self,so5FixtureSlug,_param_name:str = 'anyGamesForFixture') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("so5FixtureSlug",so5FixtureSlug))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGamesForFixture",_param_name,inst)
        self.value_anyGamesForFixture = inst
        return inst

    def anyGamesForLeaderboard(self,so5LeaderboardSlug,_param_name:str = 'anyGamesForLeaderboard') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGamesForLeaderboard",_param_name,inst)
        self.value_anyGamesForLeaderboard = inst
        return inst

    def anyPastGames(self,after,before,first,last,_param_name:str = 'anyPastGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyPastGames",_param_name,inst)
        self.value_anyPastGames = inst
        return inst

    def anyPositions(self,_param_name:str = 'anyPositions'):
        inst = None
        self._add_to_query("anyPositions",_param_name)
        pass

    def anyRelatedPlayers(self,_param_name:str = 'anyRelatedPlayers') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyRelatedPlayers",_param_name,inst)
        self.value_anyRelatedPlayers = inst
        return inst

    def appearances(self,_param_name:str = 'appearances'):
        inst = None
        self._add_to_query("appearances",_param_name)
        pass

    def avatarPictureUrl(self,_param_name:str = 'avatarPictureUrl'):
        inst = None
        self._add_to_query("avatarPictureUrl",_param_name)
        pass

    def averageScore(self,position,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def beforeLastOwningMembership(self,_param_name:str = 'beforeLastOwningMembership') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("beforeLastOwningMembership",_param_name,inst)
        self.value_beforeLastOwningMembership = inst
        return inst

    def birthDay(self,_param_name:str = 'birthDay'):
        inst = None
        self._add_to_query("birthDay",_param_name)
        pass

    def cardPositions(self,_param_name:str = 'cardPositions'):
        inst = None
        self._add_to_query("cardPositions",_param_name)
        pass

    def cardSupply(self,_param_name:str = 'cardSupply') -> 'CardSeasonSupply':
        param_list = []
        inst = CardSeasonSupply(self,param_list)
        self._add_to_query("cardSupply",_param_name,inst)
        self.value_cardSupply = inst
        return inst

    def cardWithLivePrimaryOffer(self,rarity,_param_name:str = 'cardWithLivePrimaryOffer'):
        inst = None
        self._add_to_query("cardWithLivePrimaryOffer",_param_name)
        pass

    def careerSeasons(self,type,_param_name:str = 'careerSeasons') -> 'Season':
        param_list = []
        param_list.append(("type",type))
        inst = Season(self,param_list)
        self._add_to_query("careerSeasons",_param_name,inst)
        self.value_careerSeasons = inst
        return inst

    def clubMemberships(self,_param_name:str = 'clubMemberships') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("clubMemberships",_param_name,inst)
        self.value_clubMemberships = inst
        return inst

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def currentSeason(self,_param_name:str = 'currentSeason') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("currentSeason",_param_name,inst)
        self.value_currentSeason = inst
        return inst

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def firstName(self,_param_name:str = 'firstName'):
        inst = None
        self._add_to_query("firstName",_param_name)
        pass

    def fullPictureUrl(self,_param_name:str = 'fullPictureUrl'):
        inst = None
        self._add_to_query("fullPictureUrl",_param_name)
        pass

    def height(self,_param_name:str = 'height'):
        inst = None
        self._add_to_query("height",_param_name)
        pass

    def injuries(self,_param_name:str = 'injuries') -> 'Injury':
        param_list = []
        inst = Injury(self,param_list)
        self._add_to_query("injuries",_param_name,inst)
        self.value_injuries = inst
        return inst

    def lastClub(self,_param_name:str = 'lastClub') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("lastClub",_param_name,inst)
        self.value_lastClub = inst
        return inst

    def lastFifteenSo5Appearances(self,_param_name:str = 'lastFifteenSo5Appearances'):
        inst = None
        self._add_to_query("lastFifteenSo5Appearances",_param_name)
        pass

    def lastFiveSo5Appearances(self,_param_name:str = 'lastFiveSo5Appearances'):
        inst = None
        self._add_to_query("lastFiveSo5Appearances",_param_name)
        pass

    def lastName(self,_param_name:str = 'lastName'):
        inst = None
        self._add_to_query("lastName",_param_name)
        pass

    def lastTenSo5Appearances(self,_param_name:str = 'lastTenSo5Appearances'):
        inst = None
        self._add_to_query("lastTenSo5Appearances",_param_name)
        pass

    def lowestPriceAnyCard(self,rarity,seasonStartYear,teamSlug,_param_name:str = 'lowestPriceAnyCard') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        param_list.append(("seasonStartYear",seasonStartYear))
        param_list.append(("teamSlug",teamSlug))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("lowestPriceAnyCard",_param_name,inst)
        self.value_lowestPriceAnyCard = inst
        return inst

    def lowestPriceCard(self,rarity,_param_name:str = 'lowestPriceCard'):
        inst = None
        self._add_to_query("lowestPriceCard",_param_name)
        pass

    def matchName(self,_param_name:str = 'matchName'):
        inst = None
        self._add_to_query("matchName",_param_name)
        pass

    def memberships(self,_param_name:str = 'memberships') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("memberships",_param_name,inst)
        self.value_memberships = inst
        return inst

    def playerGameScore(self,gameId,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("gameId",gameId))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def playerGameScores(self,last,lowCoverage,position,_param_name:str = 'playerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScores",_param_name,inst)
        self.value_playerGameScores = inst
        return inst

    def rawPlayerGameScores(self,last,lowCoverage,position,_param_name:str = 'rawPlayerGameScores'):
        inst = None
        self._add_to_query("rawPlayerGameScores",_param_name)
        pass

    def seasonAppearances(self,_param_name:str = 'seasonAppearances'):
        inst = None
        self._add_to_query("seasonAppearances",_param_name)
        pass

    def shirtNumber(self,_param_name:str = 'shirtNumber'):
        inst = None
        self._add_to_query("shirtNumber",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def squaredPictureUrl(self,_param_name:str = 'squaredPictureUrl'):
        inst = None
        self._add_to_query("squaredPictureUrl",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def suspensions(self,_param_name:str = 'suspensions') -> 'Suspension':
        param_list = []
        inst = Suspension(self,param_list)
        self._add_to_query("suspensions",_param_name,inst)
        self.value_suspensions = inst
        return inst

    def tokenPrices(self,after,before,first,last,rarity,season,seasonEligibility,since,_param_name:str = 'tokenPrices') -> 'TokenPriceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("rarity",rarity))
        param_list.append(("season",season))
        param_list.append(("seasonEligibility",seasonEligibility))
        param_list.append(("since",since))
        inst = TokenPriceConnection(self,param_list)
        self._add_to_query("tokenPrices",_param_name,inst)
        self.value_tokenPrices = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def weight(self,_param_name:str = 'weight'):
        inst = None
        self._add_to_query("weight",_param_name)
        pass


class UserAward(GraphQLObject):
    value_award = None
    value_category = None
    value_claimableReward = None
    value_claimedLevel = None
    value_completed = None
    value_id = None
    value_level = None
    value_maxLevel = None
    value_nextLevel = None
    value_nextRequirement = None
    value_nextReward = None
    value_progression = None
    value_rewards = None
    value_slug = None
    value_updatedAt = None
    def award(self,_param_name:str = 'award'):
        inst = None
        self._add_to_query("award",_param_name)
        pass

    def category(self,_param_name:str = 'category'):
        inst = None
        self._add_to_query("category",_param_name)
        pass

    def claimableReward(self,_param_name:str = 'claimableReward'):
        inst = None
        self._add_to_query("claimableReward",_param_name)
        pass

    def claimedLevel(self,_param_name:str = 'claimedLevel'):
        inst = None
        self._add_to_query("claimedLevel",_param_name)
        pass

    def completed(self,_param_name:str = 'completed'):
        inst = None
        self._add_to_query("completed",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def level(self,_param_name:str = 'level'):
        inst = None
        self._add_to_query("level",_param_name)
        pass

    def maxLevel(self,_param_name:str = 'maxLevel'):
        inst = None
        self._add_to_query("maxLevel",_param_name)
        pass

    def nextLevel(self,_param_name:str = 'nextLevel'):
        inst = None
        self._add_to_query("nextLevel",_param_name)
        pass

    def nextRequirement(self,_param_name:str = 'nextRequirement'):
        inst = None
        self._add_to_query("nextRequirement",_param_name)
        pass

    def nextReward(self,_param_name:str = 'nextReward'):
        inst = None
        self._add_to_query("nextReward",_param_name)
        pass

    def progression(self,_param_name:str = 'progression'):
        inst = None
        self._add_to_query("progression",_param_name)
        pass

    def rewards(self,_param_name:str = 'rewards'):
        inst = None
        self._add_to_query("rewards",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def updatedAt(self,_param_name:str = 'updatedAt'):
        inst = None
        self._add_to_query("updatedAt",_param_name)
        pass


class CardCount(GraphQLObject):
    value_common = None
    value_customSeries = None
    value_limited = None
    value_rare = None
    value_superRare = None
    value_total = None
    value_unique = None
    def common(self,_param_name:str = 'common'):
        inst = None
        self._add_to_query("common",_param_name)
        pass

    def customSeries(self,_param_name:str = 'customSeries'):
        inst = None
        self._add_to_query("customSeries",_param_name)
        pass

    def limited(self,_param_name:str = 'limited'):
        inst = None
        self._add_to_query("limited",_param_name)
        pass

    def rare(self,_param_name:str = 'rare'):
        inst = None
        self._add_to_query("rare",_param_name)
        pass

    def superRare(self,_param_name:str = 'superRare'):
        inst = None
        self._add_to_query("superRare",_param_name)
        pass

    def total(self,_param_name:str = 'total'):
        inst = None
        self._add_to_query("total",_param_name)
        pass

    def unique(self,_param_name:str = 'unique'):
        inst = None
        self._add_to_query("unique",_param_name)
        pass


class DeckEdge(GraphQLObject):
    value_cursor = None
    value_node:'Deck' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class DeckConnection(GraphQLObject):
    value_edges:'list[DeckEdge]' = None
    value_nodes:'list[Deck]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'DeckEdge':
        param_list = []
        inst = DeckEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class UserSportStatistic(GraphQLObject):
    value_format = None
    value_id = None
    value_name = None
    value_title = None
    value_value = None
    def format(self,_param_name:str = 'format'):
        inst = None
        self._add_to_query("format",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def value(self,_param_name:str = 'value'):
        inst = None
        self._add_to_query("value",_param_name)
        pass


class UserSportProfile(GraphQLObject):
    value_achievementBadges:'list[SkinShopItem]' = None
    value_background:'SkinShopItem' = None
    value_bannerColor = None
    value_bannerUrl = None
    value_cardsCount:'CardCount' = None
    value_clubBadge:'SkinShopItem' = None
    value_clubName = None
    value_deck:'Deck' = None
    value_decks:'DeckConnection' = None
    value_gallerySocialPictureUrls:'SocialPictureDerivative' = None
    value_highlightedDeck:'Deck' = None
    value_id = None
    value_managerProfileSocialPictureUrls:'SocialPictureDerivative' = None
    value_onboarded = None
    value_onboardingStatus = None
    value_selectedUserSportStatistics:'list[UserSportStatistic]' = None
    value_shieldUrl = None
    value_socialPictureFingerprint = None
    value_sport = None
    value_userSportStatistics:'list[UserSportStatistic]' = None
    value_variant = None
    def achievementBadges(self,_param_name:str = 'achievementBadges') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("achievementBadges",_param_name,inst)
        self.value_achievementBadges = inst
        return inst

    def background(self,_param_name:str = 'background') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("background",_param_name,inst)
        self.value_background = inst
        return inst

    def bannerColor(self,_param_name:str = 'bannerColor'):
        inst = None
        self._add_to_query("bannerColor",_param_name)
        pass

    def bannerUrl(self,_param_name:str = 'bannerUrl'):
        inst = None
        self._add_to_query("bannerUrl",_param_name)
        pass

    def cardsCount(self,_param_name:str = 'cardsCount') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("cardsCount",_param_name,inst)
        self.value_cardsCount = inst
        return inst

    def clubBadge(self,_param_name:str = 'clubBadge') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("clubBadge",_param_name,inst)
        self.value_clubBadge = inst
        return inst

    def clubName(self,_param_name:str = 'clubName'):
        inst = None
        self._add_to_query("clubName",_param_name)
        pass

    def deck(self,name,slug,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        param_list.append(("name",name))
        param_list.append(("slug",slug))
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def decks(self,after,before,first,last,query,_param_name:str = 'decks') -> 'DeckConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = DeckConnection(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def gallerySocialPictureUrls(self,_param_name:str = 'gallerySocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("gallerySocialPictureUrls",_param_name,inst)
        self.value_gallerySocialPictureUrls = inst
        return inst

    def highlightedDeck(self,_param_name:str = 'highlightedDeck') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("highlightedDeck",_param_name,inst)
        self.value_highlightedDeck = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def managerProfileSocialPictureUrls(self,_param_name:str = 'managerProfileSocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("managerProfileSocialPictureUrls",_param_name,inst)
        self.value_managerProfileSocialPictureUrls = inst
        return inst

    def onboarded(self,_param_name:str = 'onboarded'):
        inst = None
        self._add_to_query("onboarded",_param_name)
        pass

    def onboardingStatus(self,_param_name:str = 'onboardingStatus'):
        inst = None
        self._add_to_query("onboardingStatus",_param_name)
        pass

    def selectedUserSportStatistics(self,_param_name:str = 'selectedUserSportStatistics') -> 'UserSportStatistic':
        param_list = []
        inst = UserSportStatistic(self,param_list)
        self._add_to_query("selectedUserSportStatistics",_param_name,inst)
        self.value_selectedUserSportStatistics = inst
        return inst

    def shieldUrl(self,_param_name:str = 'shieldUrl'):
        inst = None
        self._add_to_query("shieldUrl",_param_name)
        pass

    def socialPictureFingerprint(self,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def userSportStatistics(self,_param_name:str = 'userSportStatistics') -> 'UserSportStatistic':
        param_list = []
        inst = UserSportStatistic(self,param_list)
        self._add_to_query("userSportStatistics",_param_name,inst)
        self.value_userSportStatistics = inst
        return inst

    def variant(self,_param_name:str = 'variant'):
        inst = None
        self._add_to_query("variant",_param_name)
        pass


class BaseballUserSportProfile(GraphQLObject):
    value_achievementBadges:'list[SkinShopItem]' = None
    value_background:'SkinShopItem' = None
    value_bannerColor = None
    value_bannerUrl = None
    value_cardsCount:'CardCount' = None
    value_clubBadge:'SkinShopItem' = None
    value_clubName = None
    value_deck:'Deck' = None
    value_decks:'DeckConnection' = None
    value_gallerySocialPictureUrls:'SocialPictureDerivative' = None
    value_highlightedDeck:'Deck' = None
    value_id = None
    value_managerProfileSocialPictureUrls:'SocialPictureDerivative' = None
    value_onboarded = None
    value_onboardingStatus = None
    value_selectedUserSportStatistics:'list[UserSportStatistic]' = None
    value_shieldUrl = None
    value_socialPictureFingerprint = None
    value_userSportStatistics:'list[UserSportStatistic]' = None
    value_variant = None
    def achievementBadges(self,_param_name:str = 'achievementBadges') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("achievementBadges",_param_name,inst)
        self.value_achievementBadges = inst
        return inst

    def background(self,_param_name:str = 'background') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("background",_param_name,inst)
        self.value_background = inst
        return inst

    def bannerColor(self,_param_name:str = 'bannerColor'):
        inst = None
        self._add_to_query("bannerColor",_param_name)
        pass

    def bannerUrl(self,_param_name:str = 'bannerUrl'):
        inst = None
        self._add_to_query("bannerUrl",_param_name)
        pass

    def cardsCount(self,_param_name:str = 'cardsCount') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("cardsCount",_param_name,inst)
        self.value_cardsCount = inst
        return inst

    def clubBadge(self,_param_name:str = 'clubBadge') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("clubBadge",_param_name,inst)
        self.value_clubBadge = inst
        return inst

    def clubName(self,_param_name:str = 'clubName'):
        inst = None
        self._add_to_query("clubName",_param_name)
        pass

    def deck(self,name,slug,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        param_list.append(("name",name))
        param_list.append(("slug",slug))
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def decks(self,after,before,first,last,query,_param_name:str = 'decks') -> 'DeckConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = DeckConnection(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def gallerySocialPictureUrls(self,_param_name:str = 'gallerySocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("gallerySocialPictureUrls",_param_name,inst)
        self.value_gallerySocialPictureUrls = inst
        return inst

    def highlightedDeck(self,_param_name:str = 'highlightedDeck') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("highlightedDeck",_param_name,inst)
        self.value_highlightedDeck = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def managerProfileSocialPictureUrls(self,_param_name:str = 'managerProfileSocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("managerProfileSocialPictureUrls",_param_name,inst)
        self.value_managerProfileSocialPictureUrls = inst
        return inst

    def onboarded(self,_param_name:str = 'onboarded'):
        inst = None
        self._add_to_query("onboarded",_param_name)
        pass

    def onboardingStatus(self,_param_name:str = 'onboardingStatus'):
        inst = None
        self._add_to_query("onboardingStatus",_param_name)
        pass

    def selectedUserSportStatistics(self,_param_name:str = 'selectedUserSportStatistics') -> 'UserSportStatistic':
        param_list = []
        inst = UserSportStatistic(self,param_list)
        self._add_to_query("selectedUserSportStatistics",_param_name,inst)
        self.value_selectedUserSportStatistics = inst
        return inst

    def shieldUrl(self,_param_name:str = 'shieldUrl'):
        inst = None
        self._add_to_query("shieldUrl",_param_name)
        pass

    def socialPictureFingerprint(self,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def userSportStatistics(self,_param_name:str = 'userSportStatistics') -> 'UserSportStatistic':
        param_list = []
        inst = UserSportStatistic(self,param_list)
        self._add_to_query("userSportStatistics",_param_name,inst)
        self.value_userSportStatistics = inst
        return inst

    def variant(self,_param_name:str = 'variant'):
        inst = None
        self._add_to_query("variant",_param_name)
        pass


class TokenOfferEdge(GraphQLObject):
    value_cursor = None
    value_node:'TokenOffer' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class TokenOfferConnection(GraphQLObject):
    value_edges:'list[TokenOfferEdge]' = None
    value_nodes:'list[TokenOffer]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'TokenOfferEdge':
        param_list = []
        inst = TokenOfferEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class CardCollectionEdge(GraphQLObject):
    value_cursor = None
    value_node:'CardCollection' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'CardCollection':
        param_list = []
        inst = CardCollection(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class SeasonCount(GraphQLObject):
    value_count = None
    value_season:'Season' = None
    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst


class CardCollectionConnection(GraphQLObject):
    value_edges:'list[CardCollectionEdge]' = None
    value_nodes:'list[CardCollection]' = None
    value_pageInfo:'PageInfo' = None
    value_raritiesCount:'list[RarityCount]' = None
    value_seasonsCount:'list[SeasonCount]' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'CardCollectionEdge':
        param_list = []
        inst = CardCollectionEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'CardCollection':
        param_list = []
        inst = CardCollection(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def raritiesCount(self,_param_name:str = 'raritiesCount') -> 'RarityCount':
        param_list = []
        inst = RarityCount(self,param_list)
        self._add_to_query("raritiesCount",_param_name,inst)
        self.value_raritiesCount = inst
        return inst

    def seasonsCount(self,_param_name:str = 'seasonsCount') -> 'SeasonCount':
        param_list = []
        inst = SeasonCount(self,param_list)
        self._add_to_query("seasonsCount",_param_name,inst)
        self.value_seasonsCount = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class DeckCard(GraphQLObject):
    value_card:'Card' = None
    value_cardIndex = None
    value_id = None
    value_label = None
    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def cardIndex(self,_param_name:str = 'cardIndex'):
        inst = None
        self._add_to_query("cardIndex",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def label(self,_param_name:str = 'label'):
        inst = None
        self._add_to_query("label",_param_name)
        pass


class DeckCardEdge(GraphQLObject):
    value_cursor = None
    value_node:'DeckCard' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'DeckCard':
        param_list = []
        inst = DeckCard(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class DeckCardConnection(GraphQLObject):
    value_edges:'list[DeckCardEdge]' = None
    value_nodes:'list[DeckCard]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'DeckCardEdge':
        param_list = []
        inst = DeckCardEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'DeckCard':
        param_list = []
        inst = DeckCard(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class CustomDeck(GraphQLObject):
    value_cards:'CardConnection' = None
    value_cardsCount = None
    value_deckCards:'DeckCardConnection' = None
    value_deckCardsCount = None
    value_deckIndex = None
    value_firstCard:'Card' = None
    value_id = None
    value_name = None
    value_slug = None
    value_user:'User' = None
    value_visible = None
    def cards(self,after,before,first,last,_param_name:str = 'cards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = CardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def cardsCount(self,_param_name:str = 'cardsCount'):
        inst = None
        self._add_to_query("cardsCount",_param_name)
        pass

    def deckCards(self,after,before,first,last,_param_name:str = 'deckCards') -> 'DeckCardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = DeckCardConnection(self,param_list)
        self._add_to_query("deckCards",_param_name,inst)
        self.value_deckCards = inst
        return inst

    def deckCardsCount(self,_param_name:str = 'deckCardsCount'):
        inst = None
        self._add_to_query("deckCardsCount",_param_name)
        pass

    def deckIndex(self,_param_name:str = 'deckIndex'):
        inst = None
        self._add_to_query("deckIndex",_param_name)
        pass

    def firstCard(self,_param_name:str = 'firstCard') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("firstCard",_param_name,inst)
        self.value_firstCard = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def visible(self,_param_name:str = 'visible'):
        inst = None
        self._add_to_query("visible",_param_name)
        pass


class CustomDeckEdge(GraphQLObject):
    value_cursor = None
    value_node:'CustomDeck' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'CustomDeck':
        param_list = []
        inst = CustomDeck(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class CustomDeckConnection(GraphQLObject):
    value_edges:'list[CustomDeckEdge]' = None
    value_nodes:'list[CustomDeck]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'CustomDeckEdge':
        param_list = []
        inst = CustomDeckEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'CustomDeck':
        param_list = []
        inst = CustomDeck(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class FootballUserSportProfile(GraphQLObject):
    value_achievementBadges:'list[SkinShopItem]' = None
    value_background:'SkinShopItem' = None
    value_bannerColor = None
    value_bannerUrl = None
    value_cardsCount:'CardCount' = None
    value_clubBadge:'SkinShopItem' = None
    value_clubName = None
    value_deck:'Deck' = None
    value_decks:'DeckConnection' = None
    value_gallerySocialPictureUrls:'SocialPictureDerivative' = None
    value_highlightedDeck:'Deck' = None
    value_id = None
    value_managerProfileSocialPictureUrls:'SocialPictureDerivative' = None
    value_onboarded = None
    value_onboardingStatus = None
    value_selectedUserSportStatistics:'list[UserSportStatistic]' = None
    value_shieldUrl = None
    value_socialPictureFingerprint = None
    value_userSportStatistics:'list[UserSportStatistic]' = None
    value_variant = None
    def achievementBadges(self,_param_name:str = 'achievementBadges') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("achievementBadges",_param_name,inst)
        self.value_achievementBadges = inst
        return inst

    def background(self,_param_name:str = 'background') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("background",_param_name,inst)
        self.value_background = inst
        return inst

    def bannerColor(self,_param_name:str = 'bannerColor'):
        inst = None
        self._add_to_query("bannerColor",_param_name)
        pass

    def bannerUrl(self,_param_name:str = 'bannerUrl'):
        inst = None
        self._add_to_query("bannerUrl",_param_name)
        pass

    def cardsCount(self,_param_name:str = 'cardsCount') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("cardsCount",_param_name,inst)
        self.value_cardsCount = inst
        return inst

    def clubBadge(self,_param_name:str = 'clubBadge') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("clubBadge",_param_name,inst)
        self.value_clubBadge = inst
        return inst

    def clubName(self,_param_name:str = 'clubName'):
        inst = None
        self._add_to_query("clubName",_param_name)
        pass

    def deck(self,name,slug,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        param_list.append(("name",name))
        param_list.append(("slug",slug))
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def decks(self,after,before,first,last,query,_param_name:str = 'decks') -> 'DeckConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = DeckConnection(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def gallerySocialPictureUrls(self,_param_name:str = 'gallerySocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("gallerySocialPictureUrls",_param_name,inst)
        self.value_gallerySocialPictureUrls = inst
        return inst

    def highlightedDeck(self,_param_name:str = 'highlightedDeck') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("highlightedDeck",_param_name,inst)
        self.value_highlightedDeck = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def managerProfileSocialPictureUrls(self,_param_name:str = 'managerProfileSocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("managerProfileSocialPictureUrls",_param_name,inst)
        self.value_managerProfileSocialPictureUrls = inst
        return inst

    def onboarded(self,_param_name:str = 'onboarded'):
        inst = None
        self._add_to_query("onboarded",_param_name)
        pass

    def onboardingStatus(self,_param_name:str = 'onboardingStatus'):
        inst = None
        self._add_to_query("onboardingStatus",_param_name)
        pass

    def selectedUserSportStatistics(self,_param_name:str = 'selectedUserSportStatistics') -> 'UserSportStatistic':
        param_list = []
        inst = UserSportStatistic(self,param_list)
        self._add_to_query("selectedUserSportStatistics",_param_name,inst)
        self.value_selectedUserSportStatistics = inst
        return inst

    def shieldUrl(self,_param_name:str = 'shieldUrl'):
        inst = None
        self._add_to_query("shieldUrl",_param_name)
        pass

    def socialPictureFingerprint(self,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def userSportStatistics(self,_param_name:str = 'userSportStatistics') -> 'UserSportStatistic':
        param_list = []
        inst = UserSportStatistic(self,param_list)
        self._add_to_query("userSportStatistics",_param_name,inst)
        self.value_userSportStatistics = inst
        return inst

    def variant(self,_param_name:str = 'variant'):
        inst = None
        self._add_to_query("variant",_param_name)
        pass


class TokenAuctionEdge(GraphQLObject):
    value_cursor = None
    value_node:'TokenAuction' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class TokenAuctionConnection(GraphQLObject):
    value_edges:'list[TokenAuctionEdge]' = None
    value_nodes:'list[TokenAuction]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'TokenAuctionEdge':
        param_list = []
        inst = TokenAuctionEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class ManagerTaskRewardInterface(GraphQLObject):
    value_count = None
    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass


class ManagerProgressionTask(GraphQLObject):
    value_aasmState = None
    value_category:'ManagerProgressionCategory' = None
    value_claimedAt = None
    value_completedAt = None
    value_configRewards:'list[ManagerTaskRewardInterface]' = None
    value_declarative = None
    value_description = None
    value_id = None
    value_name = None
    value_points = None
    value_probabilisticBundles:'list[ProbabilisticBundle]' = None
    value_progress = None
    value_target = None
    value_title = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def category(self,_param_name:str = 'category') -> 'ManagerProgressionCategory':
        param_list = []
        inst = ManagerProgressionCategory(self,param_list)
        self._add_to_query("category",_param_name,inst)
        self.value_category = inst
        return inst

    def claimedAt(self,_param_name:str = 'claimedAt'):
        inst = None
        self._add_to_query("claimedAt",_param_name)
        pass

    def completedAt(self,_param_name:str = 'completedAt'):
        inst = None
        self._add_to_query("completedAt",_param_name)
        pass

    def configRewards(self,_param_name:str = 'configRewards') -> 'ManagerTaskRewardInterface':
        param_list = []
        inst = ManagerTaskRewardInterface(self,param_list)
        self._add_to_query("configRewards",_param_name,inst)
        self.value_configRewards = inst
        return inst

    def declarative(self,_param_name:str = 'declarative'):
        inst = None
        self._add_to_query("declarative",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def probabilisticBundles(self,_param_name:str = 'probabilisticBundles') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundles",_param_name,inst)
        self.value_probabilisticBundles = inst
        return inst

    def progress(self,_param_name:str = 'progress'):
        inst = None
        self._add_to_query("progress",_param_name)
        pass

    def target(self,_param_name:str = 'target'):
        inst = None
        self._add_to_query("target",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class ManagerProgressionCategory(GraphQLObject):
    value_badgeUrl = None
    value_categoryTasks = None
    value_description = None
    value_id = None
    value_name = None
    value_tasks:'list[ManagerProgressionTask]' = None
    value_title = None
    value_type = None
    def badgeUrl(self,_param_name:str = 'badgeUrl'):
        inst = None
        self._add_to_query("badgeUrl",_param_name)
        pass

    def categoryTasks(self,_param_name:str = 'categoryTasks'):
        inst = None
        self._add_to_query("categoryTasks",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def tasks(self,_param_name:str = 'tasks') -> 'ManagerProgressionTask':
        param_list = []
        inst = ManagerProgressionTask(self,param_list)
        self._add_to_query("tasks",_param_name,inst)
        self.value_tasks = inst
        return inst

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class ManagerProgression(GraphQLObject):
    value_categories:'list[ManagerProgressionCategory]' = None
    value_id = None
    value_levelReached = None
    value_points = None
    value_pointsForNextLevel = None
    value_sport = None
    def categories(self,names,type,_param_name:str = 'categories') -> 'ManagerProgressionCategory':
        param_list = []
        param_list.append(("names",names))
        param_list.append(("type",type))
        inst = ManagerProgressionCategory(self,param_list)
        self._add_to_query("categories",_param_name,inst)
        self.value_categories = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def levelReached(self,_param_name:str = 'levelReached'):
        inst = None
        self._add_to_query("levelReached",_param_name)
        pass

    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def pointsForNextLevel(self,_param_name:str = 'pointsForNextLevel'):
        inst = None
        self._add_to_query("pointsForNextLevel",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class ManagerTeamEdge(GraphQLObject):
    value_cursor = None
    value_node:'ManagerTeam' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'ManagerTeam':
        param_list = []
        inst = ManagerTeam(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class ManagerTeamConnection(GraphQLObject):
    value_edges:'list[ManagerTeamEdge]' = None
    value_nodes:'list[ManagerTeam]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'ManagerTeamEdge':
        param_list = []
        inst = ManagerTeamEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'ManagerTeam':
        param_list = []
        inst = ManagerTeam(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class NBAUserSportProfile(GraphQLObject):
    value_achievementBadges:'list[SkinShopItem]' = None
    value_background:'SkinShopItem' = None
    value_bannerColor = None
    value_bannerUrl = None
    value_cardsCount:'CardCount' = None
    value_clubBadge:'SkinShopItem' = None
    value_clubName = None
    value_deck:'Deck' = None
    value_decks:'DeckConnection' = None
    value_gallerySocialPictureUrls:'SocialPictureDerivative' = None
    value_highlightedDeck:'Deck' = None
    value_id = None
    value_managerProfileSocialPictureUrls:'SocialPictureDerivative' = None
    value_onboarded = None
    value_onboardingStatus = None
    value_selectedUserSportStatistics:'list[UserSportStatistic]' = None
    value_shieldUrl = None
    value_socialPictureFingerprint = None
    value_userSportStatistics:'list[UserSportStatistic]' = None
    value_variant = None
    def achievementBadges(self,_param_name:str = 'achievementBadges') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("achievementBadges",_param_name,inst)
        self.value_achievementBadges = inst
        return inst

    def background(self,_param_name:str = 'background') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("background",_param_name,inst)
        self.value_background = inst
        return inst

    def bannerColor(self,_param_name:str = 'bannerColor'):
        inst = None
        self._add_to_query("bannerColor",_param_name)
        pass

    def bannerUrl(self,_param_name:str = 'bannerUrl'):
        inst = None
        self._add_to_query("bannerUrl",_param_name)
        pass

    def cardsCount(self,_param_name:str = 'cardsCount') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("cardsCount",_param_name,inst)
        self.value_cardsCount = inst
        return inst

    def clubBadge(self,_param_name:str = 'clubBadge') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("clubBadge",_param_name,inst)
        self.value_clubBadge = inst
        return inst

    def clubName(self,_param_name:str = 'clubName'):
        inst = None
        self._add_to_query("clubName",_param_name)
        pass

    def deck(self,name,slug,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        param_list.append(("name",name))
        param_list.append(("slug",slug))
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def decks(self,after,before,first,last,query,_param_name:str = 'decks') -> 'DeckConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = DeckConnection(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def gallerySocialPictureUrls(self,_param_name:str = 'gallerySocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("gallerySocialPictureUrls",_param_name,inst)
        self.value_gallerySocialPictureUrls = inst
        return inst

    def highlightedDeck(self,_param_name:str = 'highlightedDeck') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("highlightedDeck",_param_name,inst)
        self.value_highlightedDeck = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def managerProfileSocialPictureUrls(self,_param_name:str = 'managerProfileSocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("managerProfileSocialPictureUrls",_param_name,inst)
        self.value_managerProfileSocialPictureUrls = inst
        return inst

    def onboarded(self,_param_name:str = 'onboarded'):
        inst = None
        self._add_to_query("onboarded",_param_name)
        pass

    def onboardingStatus(self,_param_name:str = 'onboardingStatus'):
        inst = None
        self._add_to_query("onboardingStatus",_param_name)
        pass

    def selectedUserSportStatistics(self,_param_name:str = 'selectedUserSportStatistics') -> 'UserSportStatistic':
        param_list = []
        inst = UserSportStatistic(self,param_list)
        self._add_to_query("selectedUserSportStatistics",_param_name,inst)
        self.value_selectedUserSportStatistics = inst
        return inst

    def shieldUrl(self,_param_name:str = 'shieldUrl'):
        inst = None
        self._add_to_query("shieldUrl",_param_name)
        pass

    def socialPictureFingerprint(self,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def userSportStatistics(self,_param_name:str = 'userSportStatistics') -> 'UserSportStatistic':
        param_list = []
        inst = UserSportStatistic(self,param_list)
        self._add_to_query("userSportStatistics",_param_name,inst)
        self.value_userSportStatistics = inst
        return inst

    def variant(self,_param_name:str = 'variant'):
        inst = None
        self._add_to_query("variant",_param_name)
        pass


class So5Podium(GraphQLObject):
    value_count = None
    value_displayName = None
    value_ranking = None
    value_so5LeaderboardType = None
    value_svgLogoUrl = None
    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass

    def displayName(self,short,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def so5LeaderboardType(self,_param_name:str = 'so5LeaderboardType'):
        inst = None
        self._add_to_query("so5LeaderboardType",_param_name)
        pass

    def svgLogoUrl(self,_param_name:str = 'svgLogoUrl'):
        inst = None
        self._add_to_query("svgLogoUrl",_param_name)
        pass


class UserProfileBadge(GraphQLObject):
    value_description = None
    value_pictureUrl = None
    value_slug = None
    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass


class MarketplacePreference(GraphQLObject):
    value_defaultValue = None
    value_name = None
    value_value = None
    value_values = None
    def defaultValue(self,_param_name:str = 'defaultValue'):
        inst = None
        self._add_to_query("defaultValue",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def value(self,_param_name:str = 'value'):
        inst = None
        self._add_to_query("value",_param_name)
        pass

    def values(self,_param_name:str = 'values'):
        inst = None
        self._add_to_query("values",_param_name)
        pass


class MarketplaceSportPreferences(GraphQLObject):
    value_preferences:'list[MarketplacePreference]' = None
    value_sport = None
    def preferences(self,_param_name:str = 'preferences') -> 'MarketplacePreference':
        param_list = []
        inst = MarketplacePreference(self,param_list)
        self._add_to_query("preferences",_param_name,inst)
        self.value_preferences = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class UserProfile(GraphQLObject):
    value_badge:'UserProfileBadge' = None
    value_clubBanner:'SkinShopItem' = None
    value_clubName = None
    value_clubShield:'SkinShopItem' = None
    value_discordUsername = None
    value_enabledWallets = None
    value_id = None
    value_marketplacePreferences:'list[MarketplaceSportPreferences]' = None
    value_pictureUrl = None
    value_proSince = None
    value_rookie = None
    value_status = None
    value_twitterUsername = None
    value_user:'User' = None
    value_verified = None
    def badge(self,_param_name:str = 'badge') -> 'UserProfileBadge':
        param_list = []
        inst = UserProfileBadge(self,param_list)
        self._add_to_query("badge",_param_name,inst)
        self.value_badge = inst
        return inst

    def clubBanner(self,_param_name:str = 'clubBanner') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("clubBanner",_param_name,inst)
        self.value_clubBanner = inst
        return inst

    def clubName(self,_param_name:str = 'clubName'):
        inst = None
        self._add_to_query("clubName",_param_name)
        pass

    def clubShield(self,_param_name:str = 'clubShield') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("clubShield",_param_name,inst)
        self.value_clubShield = inst
        return inst

    def discordUsername(self,_param_name:str = 'discordUsername'):
        inst = None
        self._add_to_query("discordUsername",_param_name)
        pass

    def enabledWallets(self,_param_name:str = 'enabledWallets'):
        inst = None
        self._add_to_query("enabledWallets",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def marketplacePreferences(self,sports,_param_name:str = 'marketplacePreferences') -> 'MarketplaceSportPreferences':
        param_list = []
        param_list.append(("sports",sports))
        inst = MarketplaceSportPreferences(self,param_list)
        self._add_to_query("marketplacePreferences",_param_name,inst)
        self.value_marketplacePreferences = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def proSince(self,_param_name:str = 'proSince'):
        inst = None
        self._add_to_query("proSince",_param_name)
        pass

    def rookie(self,_param_name:str = 'rookie'):
        inst = None
        self._add_to_query("rookie",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def twitterUsername(self,_param_name:str = 'twitterUsername'):
        inst = None
        self._add_to_query("twitterUsername",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def verified(self,_param_name:str = 'verified'):
        inst = None
        self._add_to_query("verified",_param_name)
        pass


class UserEdge(GraphQLObject):
    value_cursor = None
    value_node:'User' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class UserConnection(GraphQLObject):
    value_edges:'list[UserEdge]' = None
    value_nodes:'list[User]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'UserEdge':
        param_list = []
        inst = UserEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class TrophiesSummary(GraphQLObject):
    value_cardRewards = None
    value_finalRankings = None
    value_podiumRankings = None
    value_totalMonetaryRewards:'MonetaryAmount' = None
    def cardRewards(self,rarity,_param_name:str = 'cardRewards'):
        inst = None
        self._add_to_query("cardRewards",_param_name)
        pass

    def finalRankings(self,_param_name:str = 'finalRankings'):
        inst = None
        self._add_to_query("finalRankings",_param_name)
        pass

    def podiumRankings(self,ranking,_param_name:str = 'podiumRankings'):
        inst = None
        self._add_to_query("podiumRankings",_param_name)
        pass

    def totalMonetaryRewards(self,referenceCurrency,_param_name:str = 'totalMonetaryRewards') -> 'MonetaryAmount':
        param_list = []
        param_list.append(("referenceCurrency",referenceCurrency))
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("totalMonetaryRewards",_param_name,inst)
        self.value_totalMonetaryRewards = inst
        return inst


class So5Trophies(GraphQLObject):
    value_cardRewards = None
    value_finalRankings = None
    value_podiumRankings = None
    value_so5TournamentType:'So5Tournament' = None
    value_totalMonetaryRewards:'MonetaryAmount' = None
    def cardRewards(self,rarity,_param_name:str = 'cardRewards'):
        inst = None
        self._add_to_query("cardRewards",_param_name)
        pass

    def finalRankings(self,_param_name:str = 'finalRankings'):
        inst = None
        self._add_to_query("finalRankings",_param_name)
        pass

    def podiumRankings(self,ranking,_param_name:str = 'podiumRankings'):
        inst = None
        self._add_to_query("podiumRankings",_param_name)
        pass

    def so5TournamentType(self,_param_name:str = 'so5TournamentType') -> 'So5Tournament':
        param_list = []
        inst = So5Tournament(self,param_list)
        self._add_to_query("so5TournamentType",_param_name,inst)
        self.value_so5TournamentType = inst
        return inst

    def totalMonetaryRewards(self,referenceCurrency,_param_name:str = 'totalMonetaryRewards') -> 'MonetaryAmount':
        param_list = []
        param_list.append(("referenceCurrency",referenceCurrency))
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("totalMonetaryRewards",_param_name,inst)
        self.value_totalMonetaryRewards = inst
        return inst


class So5TrophiesSummary(GraphQLObject):
    value_cardRewards = None
    value_finalRankings = None
    value_podiumRankings = None
    value_totalMonetaryRewards:'MonetaryAmount' = None
    def cardRewards(self,rarity,_param_name:str = 'cardRewards'):
        inst = None
        self._add_to_query("cardRewards",_param_name)
        pass

    def finalRankings(self,_param_name:str = 'finalRankings'):
        inst = None
        self._add_to_query("finalRankings",_param_name)
        pass

    def podiumRankings(self,ranking,_param_name:str = 'podiumRankings'):
        inst = None
        self._add_to_query("podiumRankings",_param_name)
        pass

    def totalMonetaryRewards(self,referenceCurrency,_param_name:str = 'totalMonetaryRewards') -> 'MonetaryAmount':
        param_list = []
        param_list.append(("referenceCurrency",referenceCurrency))
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("totalMonetaryRewards",_param_name,inst)
        self.value_totalMonetaryRewards = inst
        return inst


class UserWithSubscriptionSlug(GraphQLObject):
    value_accounts:'list[Account]' = None
    value_active = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_awards:'list[UserAward]' = None
    value_baseballProfile:'UserSportProfile' = None
    value_baseballUserProfile:'BaseballUserSportProfile' = None
    value_blueprintCards:'AnyCardInterfaceConnection' = None
    value_boughtSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_buyingTokenAuctions:'list[TokenAuction]' = None
    value_cardCollections:'CardCollectionConnection' = None
    value_cardCounts:'CardCount' = None
    value_cards:'AnyCardInterfaceConnection' = None
    value_cardsCount = None
    value_createdAt = None
    value_customDecks:'CustomDeckConnection' = None
    value_disabled = None
    value_endedWithNoBuyerSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_ethVaultId = None
    value_ethereumAddress = None
    value_followed:'EmailSubscription' = None
    value_followers:'UserWithSubscriptionSlugConnection' = None
    value_followersCount = None
    value_following:'UserWithSubscriptionSlugConnection' = None
    value_followingCount = None
    value_footballCardCollections:'CardCollectionConnection' = None
    value_footballCardCounts:'CardCount' = None
    value_footballCards:'CardConnection' = None
    value_footballProfile:'UserSportProfile' = None
    value_footballRivalsManager:'FootballRivalsManager' = None
    value_footballUserProfile:'FootballUserSportProfile' = None
    value_hoursToAnswerTrades = None
    value_id = None
    value_liveSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_lostTokenAuctions:'TokenAuctionConnection' = None
    value_managerProgression:'ManagerProgression' = None
    value_managerProgressionTasksCount = None
    value_managerTeams:'ManagerTeamConnection' = None
    value_nbaProfile:'UserSportProfile' = None
    value_nbaUserProfile:'NBAUserSportProfile' = None
    value_nickname = None
    value_paginatedCards:'CardConnection' = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_podiumRankings:'So5RankingConnection' = None
    value_podiums:'list[So5Podium]' = None
    value_profile:'UserProfile' = None
    value_recommendedManagers:'UserConnection' = None
    value_rewardedRankings:'So5RankingConnection' = None
    value_singleSaleTokenOffers:'TokenOfferConnection' = None
    value_slug = None
    value_so5TrophiesSummary:'TrophiesSummary' = None
    value_soldSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_sorareAddress = None
    value_starkKey = None
    value_starkKeyRegistered = None
    value_status = None
    value_subscriptionSlug = None
    value_suspended = None
    value_tokenAuctions:'TokenAuctionConnection' = None
    value_trophies:'list[So5Trophies]' = None
    value_trophiesSummary:'So5TrophiesSummary' = None
    value_userSportProfile = None
    value_wonTokenAuctions:'TokenAuctionConnection' = None
    def accounts(self,_param_name:str = 'accounts') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("accounts",_param_name,inst)
        self.value_accounts = inst
        return inst

    def active(self,_param_name:str = 'active'):
        inst = None
        self._add_to_query("active",_param_name)
        pass

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def awards(self,category,_param_name:str = 'awards') -> 'UserAward':
        param_list = []
        param_list.append(("category",category))
        inst = UserAward(self,param_list)
        self._add_to_query("awards",_param_name,inst)
        self.value_awards = inst
        return inst

    def baseballProfile(self,_param_name:str = 'baseballProfile') -> 'UserSportProfile':
        param_list = []
        inst = UserSportProfile(self,param_list)
        self._add_to_query("baseballProfile",_param_name,inst)
        self.value_baseballProfile = inst
        return inst

    def baseballUserProfile(self,_param_name:str = 'baseballUserProfile') -> 'BaseballUserSportProfile':
        param_list = []
        inst = BaseballUserSportProfile(self,param_list)
        self._add_to_query("baseballUserProfile",_param_name,inst)
        self.value_baseballUserProfile = inst
        return inst

    def blueprintCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'blueprintCards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("blueprintCards",_param_name,inst)
        self.value_blueprintCards = inst
        return inst

    def boughtSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'boughtSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("boughtSingleSaleTokenOffers",_param_name,inst)
        self.value_boughtSingleSaleTokenOffers = inst
        return inst

    def buyingTokenAuctions(self,newlyListed,sport,_param_name:str = 'buyingTokenAuctions') -> 'TokenAuction':
        param_list = []
        param_list.append(("newlyListed",newlyListed))
        param_list.append(("sport",sport))
        inst = TokenAuction(self,param_list)
        self._add_to_query("buyingTokenAuctions",_param_name,inst)
        self.value_buyingTokenAuctions = inst
        return inst

    def cardCollections(self,after,before,favoriteOnly,first,last,query,rarities,seasonStartYears,sport,startedOnly,teamSlug,_param_name:str = 'cardCollections') -> 'CardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("favoriteOnly",favoriteOnly))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("seasonStartYears",seasonStartYears))
        param_list.append(("sport",sport))
        param_list.append(("startedOnly",startedOnly))
        param_list.append(("teamSlug",teamSlug))
        inst = CardCollectionConnection(self,param_list)
        self._add_to_query("cardCollections",_param_name,inst)
        self.value_cardCollections = inst
        return inst

    def cardCounts(self,_param_name:str = 'cardCounts') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("cardCounts",_param_name,inst)
        self.value_cardCounts = inst
        return inst

    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def cardsCount(self,_param_name:str = 'cardsCount'):
        inst = None
        self._add_to_query("cardsCount",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def customDecks(self,after,before,first,last,query,_param_name:str = 'customDecks') -> 'CustomDeckConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = CustomDeckConnection(self,param_list)
        self._add_to_query("customDecks",_param_name,inst)
        self.value_customDecks = inst
        return inst

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def endedWithNoBuyerSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'endedWithNoBuyerSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("endedWithNoBuyerSingleSaleTokenOffers",_param_name,inst)
        self.value_endedWithNoBuyerSingleSaleTokenOffers = inst
        return inst

    def ethVaultId(self,_param_name:str = 'ethVaultId'):
        inst = None
        self._add_to_query("ethVaultId",_param_name)
        pass

    def ethereumAddress(self,_param_name:str = 'ethereumAddress'):
        inst = None
        self._add_to_query("ethereumAddress",_param_name)
        pass

    def followed(self,_param_name:str = 'followed') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("followed",_param_name,inst)
        self.value_followed = inst
        return inst

    def followers(self,after,before,first,last,_param_name:str = 'followers') -> 'UserWithSubscriptionSlugConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserWithSubscriptionSlugConnection(self,param_list)
        self._add_to_query("followers",_param_name,inst)
        self.value_followers = inst
        return inst

    def followersCount(self,_param_name:str = 'followersCount'):
        inst = None
        self._add_to_query("followersCount",_param_name)
        pass

    def following(self,after,before,first,last,_param_name:str = 'following') -> 'UserWithSubscriptionSlugConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserWithSubscriptionSlugConnection(self,param_list)
        self._add_to_query("following",_param_name,inst)
        self.value_following = inst
        return inst

    def followingCount(self,_param_name:str = 'followingCount'):
        inst = None
        self._add_to_query("followingCount",_param_name)
        pass

    def footballCardCollections(self,after,before,favoriteOnly,first,last,query,rarities,seasonStartYears,startedOnly,teamSlug,_param_name:str = 'footballCardCollections') -> 'CardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("favoriteOnly",favoriteOnly))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("seasonStartYears",seasonStartYears))
        param_list.append(("startedOnly",startedOnly))
        param_list.append(("teamSlug",teamSlug))
        inst = CardCollectionConnection(self,param_list)
        self._add_to_query("footballCardCollections",_param_name,inst)
        self.value_footballCardCollections = inst
        return inst

    def footballCardCounts(self,_param_name:str = 'footballCardCounts') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("footballCardCounts",_param_name,inst)
        self.value_footballCardCounts = inst
        return inst

    def footballCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'footballCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("footballCards",_param_name,inst)
        self.value_footballCards = inst
        return inst

    def footballProfile(self,variant,_param_name:str = 'footballProfile') -> 'UserSportProfile':
        param_list = []
        param_list.append(("variant",variant))
        inst = UserSportProfile(self,param_list)
        self._add_to_query("footballProfile",_param_name,inst)
        self.value_footballProfile = inst
        return inst

    def footballRivalsManager(self,_param_name:str = 'footballRivalsManager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("footballRivalsManager",_param_name,inst)
        self.value_footballRivalsManager = inst
        return inst

    def footballUserProfile(self,variant,_param_name:str = 'footballUserProfile') -> 'FootballUserSportProfile':
        param_list = []
        param_list.append(("variant",variant))
        inst = FootballUserSportProfile(self,param_list)
        self._add_to_query("footballUserProfile",_param_name,inst)
        self.value_footballUserProfile = inst
        return inst

    def hoursToAnswerTrades(self,_param_name:str = 'hoursToAnswerTrades'):
        inst = None
        self._add_to_query("hoursToAnswerTrades",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def liveSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'liveSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("liveSingleSaleTokenOffers",_param_name,inst)
        self.value_liveSingleSaleTokenOffers = inst
        return inst

    def lostTokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'lostTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("lostTokenAuctions",_param_name,inst)
        self.value_lostTokenAuctions = inst
        return inst

    def managerProgression(self,sport,_param_name:str = 'managerProgression') -> 'ManagerProgression':
        param_list = []
        param_list.append(("sport",sport))
        inst = ManagerProgression(self,param_list)
        self._add_to_query("managerProgression",_param_name,inst)
        self.value_managerProgression = inst
        return inst

    def managerProgressionTasksCount(self,sport,state,type,_param_name:str = 'managerProgressionTasksCount'):
        inst = None
        self._add_to_query("managerProgressionTasksCount",_param_name)
        pass

    def managerTeams(self,after,before,first,last,_param_name:str = 'managerTeams') -> 'ManagerTeamConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = ManagerTeamConnection(self,param_list)
        self._add_to_query("managerTeams",_param_name,inst)
        self.value_managerTeams = inst
        return inst

    def nbaProfile(self,_param_name:str = 'nbaProfile') -> 'UserSportProfile':
        param_list = []
        inst = UserSportProfile(self,param_list)
        self._add_to_query("nbaProfile",_param_name,inst)
        self.value_nbaProfile = inst
        return inst

    def nbaUserProfile(self,_param_name:str = 'nbaUserProfile') -> 'NBAUserSportProfile':
        param_list = []
        inst = NBAUserSportProfile(self,param_list)
        self._add_to_query("nbaUserProfile",_param_name,inst)
        self.value_nbaUserProfile = inst
        return inst

    def nickname(self,_param_name:str = 'nickname'):
        inst = None
        self._add_to_query("nickname",_param_name)
        pass

    def paginatedCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'paginatedCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("paginatedCards",_param_name,inst)
        self.value_paginatedCards = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def podiumRankings(self,after,before,first,last,ranking,so5LeaderboardType,sport,_param_name:str = 'podiumRankings') -> 'So5RankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("ranking",ranking))
        param_list.append(("so5LeaderboardType",so5LeaderboardType))
        param_list.append(("sport",sport))
        inst = So5RankingConnection(self,param_list)
        self._add_to_query("podiumRankings",_param_name,inst)
        self.value_podiumRankings = inst
        return inst

    def podiums(self,sport,_param_name:str = 'podiums') -> 'So5Podium':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5Podium(self,param_list)
        self._add_to_query("podiums",_param_name,inst)
        self.value_podiums = inst
        return inst

    def profile(self,_param_name:str = 'profile') -> 'UserProfile':
        param_list = []
        inst = UserProfile(self,param_list)
        self._add_to_query("profile",_param_name,inst)
        self.value_profile = inst
        return inst

    def recommendedManagers(self,after,before,first,last,sport,_param_name:str = 'recommendedManagers') -> 'UserConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = UserConnection(self,param_list)
        self._add_to_query("recommendedManagers",_param_name,inst)
        self.value_recommendedManagers = inst
        return inst

    def rewardedRankings(self,after,before,first,last,so5LeaderboardType,sport,_param_name:str = 'rewardedRankings') -> 'So5RankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("so5LeaderboardType",so5LeaderboardType))
        param_list.append(("sport",sport))
        inst = So5RankingConnection(self,param_list)
        self._add_to_query("rewardedRankings",_param_name,inst)
        self.value_rewardedRankings = inst
        return inst

    def singleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'singleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("singleSaleTokenOffers",_param_name,inst)
        self.value_singleSaleTokenOffers = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5TrophiesSummary(self,sport,_param_name:str = 'so5TrophiesSummary') -> 'TrophiesSummary':
        param_list = []
        param_list.append(("sport",sport))
        inst = TrophiesSummary(self,param_list)
        self._add_to_query("so5TrophiesSummary",_param_name,inst)
        self.value_so5TrophiesSummary = inst
        return inst

    def soldSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'soldSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("soldSingleSaleTokenOffers",_param_name,inst)
        self.value_soldSingleSaleTokenOffers = inst
        return inst

    def sorareAddress(self,_param_name:str = 'sorareAddress'):
        inst = None
        self._add_to_query("sorareAddress",_param_name)
        pass

    def starkKey(self,_param_name:str = 'starkKey'):
        inst = None
        self._add_to_query("starkKey",_param_name)
        pass

    def starkKeyRegistered(self,_param_name:str = 'starkKeyRegistered'):
        inst = None
        self._add_to_query("starkKeyRegistered",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def subscriptionSlug(self,_param_name:str = 'subscriptionSlug'):
        inst = None
        self._add_to_query("subscriptionSlug",_param_name)
        pass

    def suspended(self,_param_name:str = 'suspended'):
        inst = None
        self._add_to_query("suspended",_param_name)
        pass

    def tokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'tokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("tokenAuctions",_param_name,inst)
        self.value_tokenAuctions = inst
        return inst

    def trophies(self,_param_name:str = 'trophies') -> 'So5Trophies':
        param_list = []
        inst = So5Trophies(self,param_list)
        self._add_to_query("trophies",_param_name,inst)
        self.value_trophies = inst
        return inst

    def trophiesSummary(self,sport,_param_name:str = 'trophiesSummary') -> 'So5TrophiesSummary':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5TrophiesSummary(self,param_list)
        self._add_to_query("trophiesSummary",_param_name,inst)
        self.value_trophiesSummary = inst
        return inst

    def userSportProfile(self,sport,variant,_param_name:str = 'userSportProfile'):
        inst = None
        self._add_to_query("userSportProfile",_param_name)
        pass

    def wonTokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'wonTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("wonTokenAuctions",_param_name,inst)
        self.value_wonTokenAuctions = inst
        return inst


class UserWithSubscriptionSlugEdge(GraphQLObject):
    value_cursor = None
    value_node:'UserWithSubscriptionSlug' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'UserWithSubscriptionSlug':
        param_list = []
        inst = UserWithSubscriptionSlug(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class UserWithSubscriptionSlugConnection(GraphQLObject):
    value_edges:'list[UserWithSubscriptionSlugEdge]' = None
    value_nodes:'list[UserWithSubscriptionSlug]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'UserWithSubscriptionSlugEdge':
        param_list = []
        inst = UserWithSubscriptionSlugEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'UserWithSubscriptionSlug':
        param_list = []
        inst = UserWithSubscriptionSlug(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class NBATeam(GraphQLObject):
    value_id = None
    value_name = None
    value_market = None
    value_fullName = None
    value_slug = None
    value_svgUrl = None
    value_darkThemeSvgUrl = None
    value_monochromeSvgUrl = None
    value_teamStyleGuidePrimaryColor = None
    value_players:'list[NBAPlayer]' = None
    value_abbreviation = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def market(self,_param_name:str = 'market'):
        inst = None
        self._add_to_query("market",_param_name)
        pass

    def fullName(self,_param_name:str = 'fullName'):
        inst = None
        self._add_to_query("fullName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def svgUrl(self,_param_name:str = 'svgUrl'):
        inst = None
        self._add_to_query("svgUrl",_param_name)
        pass

    def darkThemeSvgUrl(self,_param_name:str = 'darkThemeSvgUrl'):
        inst = None
        self._add_to_query("darkThemeSvgUrl",_param_name)
        pass

    def monochromeSvgUrl(self,_param_name:str = 'monochromeSvgUrl'):
        inst = None
        self._add_to_query("monochromeSvgUrl",_param_name)
        pass

    def teamStyleGuidePrimaryColor(self,_param_name:str = 'teamStyleGuidePrimaryColor'):
        inst = None
        self._add_to_query("teamStyleGuidePrimaryColor",_param_name)
        pass

    def players(self,_param_name:str = 'players') -> 'NBAPlayer':
        param_list = []
        inst = NBAPlayer(self,param_list)
        self._add_to_query("players",_param_name,inst)
        self.value_players = inst
        return inst

    def abbreviation(self,_param_name:str = 'abbreviation'):
        inst = None
        self._add_to_query("abbreviation",_param_name)
        pass


class NBAPlayerGameDetailedStats(GraphQLObject):
    value_points = None
    value_rebounds = None
    value_assists = None
    value_blocks = None
    value_steals = None
    value_turnovers = None
    value_made3PointFGs = None
    value_doubleDoubles = None
    value_tripleDoubles = None
    value_minutes = None
    value_secondsPlayed = None
    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def rebounds(self,_param_name:str = 'rebounds'):
        inst = None
        self._add_to_query("rebounds",_param_name)
        pass

    def assists(self,_param_name:str = 'assists'):
        inst = None
        self._add_to_query("assists",_param_name)
        pass

    def blocks(self,_param_name:str = 'blocks'):
        inst = None
        self._add_to_query("blocks",_param_name)
        pass

    def steals(self,_param_name:str = 'steals'):
        inst = None
        self._add_to_query("steals",_param_name)
        pass

    def turnovers(self,_param_name:str = 'turnovers'):
        inst = None
        self._add_to_query("turnovers",_param_name)
        pass

    def made3PointFGs(self,_param_name:str = 'made3PointFGs'):
        inst = None
        self._add_to_query("made3PointFGs",_param_name)
        pass

    def doubleDoubles(self,_param_name:str = 'doubleDoubles'):
        inst = None
        self._add_to_query("doubleDoubles",_param_name)
        pass

    def tripleDoubles(self,_param_name:str = 'tripleDoubles'):
        inst = None
        self._add_to_query("tripleDoubles",_param_name)
        pass

    def minutes(self,_param_name:str = 'minutes'):
        inst = None
        self._add_to_query("minutes",_param_name)
        pass

    def secondsPlayed(self,_param_name:str = 'secondsPlayed'):
        inst = None
        self._add_to_query("secondsPlayed",_param_name)
        pass


class NBAPlayerGameDetailedScores(GraphQLObject):
    value_points = None
    value_rebounds = None
    value_assists = None
    value_blocks = None
    value_steals = None
    value_turnovers = None
    value_fieldGoalAttempts = None
    value_freeThrowAttempts = None
    value_made3PointFGs = None
    value_doubleDoubles = None
    value_tripleDoubles = None
    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def rebounds(self,_param_name:str = 'rebounds'):
        inst = None
        self._add_to_query("rebounds",_param_name)
        pass

    def assists(self,_param_name:str = 'assists'):
        inst = None
        self._add_to_query("assists",_param_name)
        pass

    def blocks(self,_param_name:str = 'blocks'):
        inst = None
        self._add_to_query("blocks",_param_name)
        pass

    def steals(self,_param_name:str = 'steals'):
        inst = None
        self._add_to_query("steals",_param_name)
        pass

    def turnovers(self,_param_name:str = 'turnovers'):
        inst = None
        self._add_to_query("turnovers",_param_name)
        pass

    def fieldGoalAttempts(self,_param_name:str = 'fieldGoalAttempts'):
        inst = None
        self._add_to_query("fieldGoalAttempts",_param_name)
        pass

    def freeThrowAttempts(self,_param_name:str = 'freeThrowAttempts'):
        inst = None
        self._add_to_query("freeThrowAttempts",_param_name)
        pass

    def made3PointFGs(self,_param_name:str = 'made3PointFGs'):
        inst = None
        self._add_to_query("made3PointFGs",_param_name)
        pass

    def doubleDoubles(self,_param_name:str = 'doubleDoubles'):
        inst = None
        self._add_to_query("doubleDoubles",_param_name)
        pass

    def tripleDoubles(self,_param_name:str = 'tripleDoubles'):
        inst = None
        self._add_to_query("tripleDoubles",_param_name)
        pass


class NBAGame(GraphQLObject):
    value_id = None
    value_status = None
    value_startDate = None
    value_homeTeam:'NBATeam' = None
    value_awayTeam:'NBATeam' = None
    value_homeScore = None
    value_awayScore = None
    value_quarter = None
    value_isHalftime = None
    value_pastPlayerPerformance:'list[NBAPlayerGameStats]' = None
    value_gameWeek = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def homeTeam(self,_param_name:str = 'homeTeam') -> 'NBATeam':
        param_list = []
        inst = NBATeam(self,param_list)
        self._add_to_query("homeTeam",_param_name,inst)
        self.value_homeTeam = inst
        return inst

    def awayTeam(self,_param_name:str = 'awayTeam') -> 'NBATeam':
        param_list = []
        inst = NBATeam(self,param_list)
        self._add_to_query("awayTeam",_param_name,inst)
        self.value_awayTeam = inst
        return inst

    def homeScore(self,_param_name:str = 'homeScore'):
        inst = None
        self._add_to_query("homeScore",_param_name)
        pass

    def awayScore(self,_param_name:str = 'awayScore'):
        inst = None
        self._add_to_query("awayScore",_param_name)
        pass

    def quarter(self,_param_name:str = 'quarter'):
        inst = None
        self._add_to_query("quarter",_param_name)
        pass

    def isHalftime(self,_param_name:str = 'isHalftime'):
        inst = None
        self._add_to_query("isHalftime",_param_name)
        pass

    def pastPlayerPerformance(self,playerSlug,last,_param_name:str = 'pastPlayerPerformance') -> 'NBAPlayerGameStats':
        param_list = []
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("last",last))
        inst = NBAPlayerGameStats(self,param_list)
        self._add_to_query("pastPlayerPerformance",_param_name,inst)
        self.value_pastPlayerPerformance = inst
        return inst

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass


class NBAPlayerGameStats(GraphQLObject):
    value_score = None
    value_playedInGame = None
    value_detailedStats:'NBAPlayerGameDetailedStats' = None
    value_detailedScores:'NBAPlayerGameDetailedScores' = None
    value_game:'NBAGame' = None
    value_team:'NBATeam' = None
    value_againstTeam:'NBATeam' = None
    value_scoreForScoringStrategy = None
    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def playedInGame(self,_param_name:str = 'playedInGame'):
        inst = None
        self._add_to_query("playedInGame",_param_name)
        pass

    def detailedStats(self,_param_name:str = 'detailedStats') -> 'NBAPlayerGameDetailedStats':
        param_list = []
        inst = NBAPlayerGameDetailedStats(self,param_list)
        self._add_to_query("detailedStats",_param_name,inst)
        self.value_detailedStats = inst
        return inst

    def detailedScores(self,_param_name:str = 'detailedScores') -> 'NBAPlayerGameDetailedScores':
        param_list = []
        inst = NBAPlayerGameDetailedScores(self,param_list)
        self._add_to_query("detailedScores",_param_name,inst)
        self.value_detailedScores = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'NBAGame':
        param_list = []
        inst = NBAGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def team(self,_param_name:str = 'team') -> 'NBATeam':
        param_list = []
        inst = NBATeam(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def againstTeam(self,_param_name:str = 'againstTeam') -> 'NBATeam':
        param_list = []
        inst = NBATeam(self,param_list)
        self._add_to_query("againstTeam",_param_name,inst)
        self.value_againstTeam = inst
        return inst

    def scoreForScoringStrategy(self,strategy,_param_name:str = 'scoreForScoringStrategy'):
        inst = None
        self._add_to_query("scoreForScoringStrategy",_param_name)
        pass


class NBACard(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPositions = None
    value_anyTeam:'TeamInterface' = None
    value_assetId = None
    value_averageScore = None
    value_backPictureUrl = None
    value_basketballPlayer:'NBAPlayer' = None
    value_blueprint:'Blueprint' = None
    value_cardEditionName = None
    value_cardStats:'CardStats' = None
    value_collection = None
    value_contractAddress = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_decks:'list[Deck]' = None
    value_displayRarity = None
    value_eligiblePlayerGameScores:'list[PlayerGameScoreInterface]' = None
    value_eligibleUpcomingLeagueTracks:'list[So5LeagueTrack]' = None
    value_ethereumId = None
    value_ethereumOwner:'TokenOwner' = None
    value_grade = None
    value_gradeAfterTransfer = None
    value_inSeasonEligible = None
    value_inSeasonUntil = None
    value_ipfsPictureUrl = None
    value_ipfsUrl = None
    value_latestEnglishAuction:'TokenAuction' = None
    value_latestPrimaryOffer:'TokenPrimaryOffer' = None
    value_liveSingleBuyOffers:'list[TokenOffer]' = None
    value_liveSingleSaleOffer:'TokenOffer' = None
    value_liveSo5Lineup:'So5Lineup' = None
    value_myMintedSingleSaleOffer:'TokenOffer' = None
    value_name = None
    value_openedSo5Lineup:'So5Lineup' = None
    value_openedSo5Lineups:'list[So5Lineup]' = None
    value_ownershipHistory:'list[TokenOwner]' = None
    value_pendingWithdrawal:'TokenWithdrawal' = None
    value_pictureUrl = None
    value_power = None
    value_powerBreakdown:'PowerBreakdown' = None
    value_powerMalusAfterTransfer = None
    value_priceRange:'Range' = None
    value_privateMinPrices:'MonetaryAmount' = None
    value_publicMinPrices:'MonetaryAmount' = None
    value_rarityTyped = None
    value_seasonYear = None
    value_secondaryMarketFeeEnabled = None
    value_sentInLiveOffers:'list[TokenOffer]' = None
    value_serialNumber = None
    value_singleCivilYear = None
    value_slug = None
    value_sport = None
    value_subscriptionsCount = None
    value_supply = None
    value_threeDimensional = None
    value_threeDimensionalAsset:'ThreeDimensionalAsset' = None
    value_token:'Token' = None
    value_tokenOwner:'TokenOwner' = None
    value_tradeableStatus = None
    value_user:'User' = None
    value_videoUrl = None
    value_walletStatus = None
    value_xp = None
    value_xpAfterTransfer = None
    value_xpNeededForCurrentGrade = None
    value_xpNeededForNextGrade = None
    value_id = None
    value_owner:'User' = None
    value_player:'NBAPlayer' = None
    value_team:'NBATeam' = None
    value_rarity = None
    value_season = None
    value_positions = None
    value_fullImageUrl = None
    value_avatarImageUrl = None
    value_backImageUrl = None
    value_cardLevel = None
    value_xpThresholdForCurrentCardLevel = None
    value_xpThresholdForNextCardLevel = None
    value_seasonBonus = None
    value_rarityBonus = None
    value_xpBonus = None
    value_collectionBonus = None
    value_totalBonus = None
    value_bonusLossAfterTransfer = None
    value_liveLineup:'NBALineup' = None
    value_openedLineups:'list[NBALineup]' = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPositions(self,_param_name:str = 'anyPositions'):
        inst = None
        self._add_to_query("anyPositions",_param_name)
        pass

    def anyTeam(self,_param_name:str = 'anyTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("anyTeam",_param_name,inst)
        self.value_anyTeam = inst
        return inst

    def assetId(self,_param_name:str = 'assetId'):
        inst = None
        self._add_to_query("assetId",_param_name)
        pass

    def averageScore(self,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def backPictureUrl(self,_param_name:str = 'backPictureUrl'):
        inst = None
        self._add_to_query("backPictureUrl",_param_name)
        pass

    def basketballPlayer(self,_param_name:str = 'basketballPlayer') -> 'NBAPlayer':
        param_list = []
        inst = NBAPlayer(self,param_list)
        self._add_to_query("basketballPlayer",_param_name,inst)
        self.value_basketballPlayer = inst
        return inst

    def blueprint(self,_param_name:str = 'blueprint') -> 'Blueprint':
        param_list = []
        inst = Blueprint(self,param_list)
        self._add_to_query("blueprint",_param_name,inst)
        self.value_blueprint = inst
        return inst

    def cardEditionName(self,_param_name:str = 'cardEditionName'):
        inst = None
        self._add_to_query("cardEditionName",_param_name)
        pass

    def cardStats(self,_param_name:str = 'cardStats') -> 'CardStats':
        param_list = []
        inst = CardStats(self,param_list)
        self._add_to_query("cardStats",_param_name,inst)
        self.value_cardStats = inst
        return inst

    def collection(self,_param_name:str = 'collection'):
        inst = None
        self._add_to_query("collection",_param_name)
        pass

    def contractAddress(self,_param_name:str = 'contractAddress'):
        inst = None
        self._add_to_query("contractAddress",_param_name)
        pass

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def decks(self,_param_name:str = 'decks') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def displayRarity(self,_param_name:str = 'displayRarity'):
        inst = None
        self._add_to_query("displayRarity",_param_name)
        pass

    def eligiblePlayerGameScores(self,so5LeaderboardSlug,_param_name:str = 'eligiblePlayerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("eligiblePlayerGameScores",_param_name,inst)
        self.value_eligiblePlayerGameScores = inst
        return inst

    def eligibleUpcomingLeagueTracks(self,_param_name:str = 'eligibleUpcomingLeagueTracks') -> 'So5LeagueTrack':
        param_list = []
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("eligibleUpcomingLeagueTracks",_param_name,inst)
        self.value_eligibleUpcomingLeagueTracks = inst
        return inst

    def ethereumId(self,_param_name:str = 'ethereumId'):
        inst = None
        self._add_to_query("ethereumId",_param_name)
        pass

    def ethereumOwner(self,_param_name:str = 'ethereumOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ethereumOwner",_param_name,inst)
        self.value_ethereumOwner = inst
        return inst

    def grade(self,_param_name:str = 'grade'):
        inst = None
        self._add_to_query("grade",_param_name)
        pass

    def gradeAfterTransfer(self,_param_name:str = 'gradeAfterTransfer'):
        inst = None
        self._add_to_query("gradeAfterTransfer",_param_name)
        pass

    def inSeasonEligible(self,_param_name:str = 'inSeasonEligible'):
        inst = None
        self._add_to_query("inSeasonEligible",_param_name)
        pass

    def inSeasonUntil(self,_param_name:str = 'inSeasonUntil'):
        inst = None
        self._add_to_query("inSeasonUntil",_param_name)
        pass

    def ipfsPictureUrl(self,_param_name:str = 'ipfsPictureUrl'):
        inst = None
        self._add_to_query("ipfsPictureUrl",_param_name)
        pass

    def ipfsUrl(self,_param_name:str = 'ipfsUrl'):
        inst = None
        self._add_to_query("ipfsUrl",_param_name)
        pass

    def latestEnglishAuction(self,_param_name:str = 'latestEnglishAuction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("latestEnglishAuction",_param_name,inst)
        self.value_latestEnglishAuction = inst
        return inst

    def latestPrimaryOffer(self,_param_name:str = 'latestPrimaryOffer') -> 'TokenPrimaryOffer':
        param_list = []
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("latestPrimaryOffer",_param_name,inst)
        self.value_latestPrimaryOffer = inst
        return inst

    def liveSingleBuyOffers(self,_param_name:str = 'liveSingleBuyOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleBuyOffers",_param_name,inst)
        self.value_liveSingleBuyOffers = inst
        return inst

    def liveSingleSaleOffer(self,_param_name:str = 'liveSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleSaleOffer",_param_name,inst)
        self.value_liveSingleSaleOffer = inst
        return inst

    def liveSo5Lineup(self,_param_name:str = 'liveSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("liveSo5Lineup",_param_name,inst)
        self.value_liveSo5Lineup = inst
        return inst

    def myMintedSingleSaleOffer(self,_param_name:str = 'myMintedSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("myMintedSingleSaleOffer",_param_name,inst)
        self.value_myMintedSingleSaleOffer = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def openedSo5Lineup(self,_param_name:str = 'openedSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("openedSo5Lineup",_param_name,inst)
        self.value_openedSo5Lineup = inst
        return inst

    def openedSo5Lineups(self,_param_name:str = 'openedSo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("openedSo5Lineups",_param_name,inst)
        self.value_openedSo5Lineups = inst
        return inst

    def ownershipHistory(self,_param_name:str = 'ownershipHistory') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ownershipHistory",_param_name,inst)
        self.value_ownershipHistory = inst
        return inst

    def pendingWithdrawal(self,_param_name:str = 'pendingWithdrawal') -> 'TokenWithdrawal':
        param_list = []
        inst = TokenWithdrawal(self,param_list)
        self._add_to_query("pendingWithdrawal",_param_name,inst)
        self.value_pendingWithdrawal = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def power(self,so5LeaderboardSlug,_param_name:str = 'power'):
        inst = None
        self._add_to_query("power",_param_name)
        pass

    def powerBreakdown(self,so5LeaderboardSlug,_param_name:str = 'powerBreakdown') -> 'PowerBreakdown':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PowerBreakdown(self,param_list)
        self._add_to_query("powerBreakdown",_param_name,inst)
        self.value_powerBreakdown = inst
        return inst

    def powerMalusAfterTransfer(self,_param_name:str = 'powerMalusAfterTransfer'):
        inst = None
        self._add_to_query("powerMalusAfterTransfer",_param_name)
        pass

    def priceRange(self,_param_name:str = 'priceRange') -> 'Range':
        param_list = []
        inst = Range(self,param_list)
        self._add_to_query("priceRange",_param_name,inst)
        self.value_priceRange = inst
        return inst

    def privateMinPrices(self,_param_name:str = 'privateMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("privateMinPrices",_param_name,inst)
        self.value_privateMinPrices = inst
        return inst

    def publicMinPrices(self,_param_name:str = 'publicMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("publicMinPrices",_param_name,inst)
        self.value_publicMinPrices = inst
        return inst

    def rarityTyped(self,_param_name:str = 'rarityTyped'):
        inst = None
        self._add_to_query("rarityTyped",_param_name)
        pass

    def seasonYear(self,_param_name:str = 'seasonYear'):
        inst = None
        self._add_to_query("seasonYear",_param_name)
        pass

    def secondaryMarketFeeEnabled(self,_param_name:str = 'secondaryMarketFeeEnabled'):
        inst = None
        self._add_to_query("secondaryMarketFeeEnabled",_param_name)
        pass

    def sentInLiveOffers(self,_param_name:str = 'sentInLiveOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("sentInLiveOffers",_param_name,inst)
        self.value_sentInLiveOffers = inst
        return inst

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def singleCivilYear(self,_param_name:str = 'singleCivilYear'):
        inst = None
        self._add_to_query("singleCivilYear",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def supply(self,_param_name:str = 'supply'):
        inst = None
        self._add_to_query("supply",_param_name)
        pass

    def threeDimensional(self,_param_name:str = 'threeDimensional'):
        inst = None
        self._add_to_query("threeDimensional",_param_name)
        pass

    def threeDimensionalAsset(self,_param_name:str = 'threeDimensionalAsset') -> 'ThreeDimensionalAsset':
        param_list = []
        inst = ThreeDimensionalAsset(self,param_list)
        self._add_to_query("threeDimensionalAsset",_param_name,inst)
        self.value_threeDimensionalAsset = inst
        return inst

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst

    def tokenOwner(self,_param_name:str = 'tokenOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("tokenOwner",_param_name,inst)
        self.value_tokenOwner = inst
        return inst

    def tradeableStatus(self,_param_name:str = 'tradeableStatus'):
        inst = None
        self._add_to_query("tradeableStatus",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def videoUrl(self,derivative,_param_name:str = 'videoUrl'):
        inst = None
        self._add_to_query("videoUrl",_param_name)
        pass

    def walletStatus(self,_param_name:str = 'walletStatus'):
        inst = None
        self._add_to_query("walletStatus",_param_name)
        pass

    def xp(self,_param_name:str = 'xp'):
        inst = None
        self._add_to_query("xp",_param_name)
        pass

    def xpAfterTransfer(self,_param_name:str = 'xpAfterTransfer'):
        inst = None
        self._add_to_query("xpAfterTransfer",_param_name)
        pass

    def xpNeededForCurrentGrade(self,_param_name:str = 'xpNeededForCurrentGrade'):
        inst = None
        self._add_to_query("xpNeededForCurrentGrade",_param_name)
        pass

    def xpNeededForNextGrade(self,_param_name:str = 'xpNeededForNextGrade'):
        inst = None
        self._add_to_query("xpNeededForNextGrade",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def owner(self,_param_name:str = 'owner') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("owner",_param_name,inst)
        self.value_owner = inst
        return inst

    def player(self,_param_name:str = 'player') -> 'NBAPlayer':
        param_list = []
        inst = NBAPlayer(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def team(self,_param_name:str = 'team') -> 'NBATeam':
        param_list = []
        inst = NBATeam(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def season(self,_param_name:str = 'season'):
        inst = None
        self._add_to_query("season",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def fullImageUrl(self,_param_name:str = 'fullImageUrl'):
        inst = None
        self._add_to_query("fullImageUrl",_param_name)
        pass

    def avatarImageUrl(self,_param_name:str = 'avatarImageUrl'):
        inst = None
        self._add_to_query("avatarImageUrl",_param_name)
        pass

    def backImageUrl(self,_param_name:str = 'backImageUrl'):
        inst = None
        self._add_to_query("backImageUrl",_param_name)
        pass

    def cardLevel(self,_param_name:str = 'cardLevel'):
        inst = None
        self._add_to_query("cardLevel",_param_name)
        pass

    def xpThresholdForCurrentCardLevel(self,_param_name:str = 'xpThresholdForCurrentCardLevel'):
        inst = None
        self._add_to_query("xpThresholdForCurrentCardLevel",_param_name)
        pass

    def xpThresholdForNextCardLevel(self,_param_name:str = 'xpThresholdForNextCardLevel'):
        inst = None
        self._add_to_query("xpThresholdForNextCardLevel",_param_name)
        pass

    def seasonBonus(self,_param_name:str = 'seasonBonus'):
        inst = None
        self._add_to_query("seasonBonus",_param_name)
        pass

    def rarityBonus(self,_param_name:str = 'rarityBonus'):
        inst = None
        self._add_to_query("rarityBonus",_param_name)
        pass

    def xpBonus(self,_param_name:str = 'xpBonus'):
        inst = None
        self._add_to_query("xpBonus",_param_name)
        pass

    def collectionBonus(self,_param_name:str = 'collectionBonus'):
        inst = None
        self._add_to_query("collectionBonus",_param_name)
        pass

    def totalBonus(self,_param_name:str = 'totalBonus'):
        inst = None
        self._add_to_query("totalBonus",_param_name)
        pass

    def bonusLossAfterTransfer(self,_param_name:str = 'bonusLossAfterTransfer'):
        inst = None
        self._add_to_query("bonusLossAfterTransfer",_param_name)
        pass

    def liveLineup(self,_param_name:str = 'liveLineup') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("liveLineup",_param_name,inst)
        self.value_liveLineup = inst
        return inst

    def openedLineups(self,_param_name:str = 'openedLineups') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("openedLineups",_param_name,inst)
        self.value_openedLineups = inst
        return inst


class NBACardInLineupGameScore(GraphQLObject):
    value_score = None
    value_gameStats:'NBAPlayerGameStats' = None
    value_detailedGameScores:'NBAPlayerGameDetailedScores' = None
    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def gameStats(self,_param_name:str = 'gameStats') -> 'NBAPlayerGameStats':
        param_list = []
        inst = NBAPlayerGameStats(self,param_list)
        self._add_to_query("gameStats",_param_name,inst)
        self.value_gameStats = inst
        return inst

    def detailedGameScores(self,_param_name:str = 'detailedGameScores') -> 'NBAPlayerGameDetailedScores':
        param_list = []
        inst = NBAPlayerGameDetailedScores(self,param_list)
        self._add_to_query("detailedGameScores",_param_name,inst)
        self.value_detailedGameScores = inst
        return inst


class NBACardInLineup(GraphQLObject):
    value_lineup:'NBALineup' = None
    value_card:'NBACard' = None
    value_playerInFixture:'NBAPlayerInFixture' = None
    value_score = None
    value_totalBonus = None
    value_isMvp = None
    value_gameScores:'list[NBACardInLineupGameScore]' = None
    def lineup(self,_param_name:str = 'lineup') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def playerInFixture(self,_param_name:str = 'playerInFixture') -> 'NBAPlayerInFixture':
        param_list = []
        inst = NBAPlayerInFixture(self,param_list)
        self._add_to_query("playerInFixture",_param_name,inst)
        self.value_playerInFixture = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def totalBonus(self,_param_name:str = 'totalBonus'):
        inst = None
        self._add_to_query("totalBonus",_param_name)
        pass

    def isMvp(self,_param_name:str = 'isMvp'):
        inst = None
        self._add_to_query("isMvp",_param_name)
        pass

    def gameScores(self,_param_name:str = 'gameScores') -> 'NBACardInLineupGameScore':
        param_list = []
        inst = NBACardInLineupGameScore(self,param_list)
        self._add_to_query("gameScores",_param_name,inst)
        self.value_gameScores = inst
        return inst


class NBAGameWithCardInLineup(GraphQLObject):
    value_game:'NBAGame' = None
    value_homeCardsInLineups:'list[NBACardInLineup]' = None
    value_awayCardsInLineups:'list[NBACardInLineup]' = None
    def game(self,_param_name:str = 'game') -> 'NBAGame':
        param_list = []
        inst = NBAGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def homeCardsInLineups(self,_param_name:str = 'homeCardsInLineups') -> 'NBACardInLineup':
        param_list = []
        inst = NBACardInLineup(self,param_list)
        self._add_to_query("homeCardsInLineups",_param_name,inst)
        self.value_homeCardsInLineups = inst
        return inst

    def awayCardsInLineups(self,_param_name:str = 'awayCardsInLineups') -> 'NBACardInLineup':
        param_list = []
        inst = NBACardInLineup(self,param_list)
        self._add_to_query("awayCardsInLineups",_param_name,inst)
        self.value_awayCardsInLineups = inst
        return inst


class CardInPrizePool(GraphQLObject):
    value_rarity = None
    value_tier = None
    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def tier(self,_param_name:str = 'tier'):
        inst = None
        self._add_to_query("tier",_param_name)
        pass


class ProjectedReward(GraphQLObject):
    value_rarity = None
    value_tier = None
    value_cards:'list[CardInPrizePool]' = None
    value_amountUSDCents = None
    value_amountCoins = None
    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def tier(self,_param_name:str = 'tier'):
        inst = None
        self._add_to_query("tier",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'CardInPrizePool':
        param_list = []
        inst = CardInPrizePool(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass


class NBAReward(GraphQLObject):
    value_id = None
    value_card:'NBACard' = None
    value_backImageUrl = None
    value_tier = None
    value_lineup:'NBALineup' = None
    value_state = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def backImageUrl(self,_param_name:str = 'backImageUrl'):
        inst = None
        self._add_to_query("backImageUrl",_param_name)
        pass

    def tier(self,_param_name:str = 'tier'):
        inst = None
        self._add_to_query("tier",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass


class NBALineup(GraphQLObject):
    value_id = None
    value_leaderboard:'NBALeaderboard' = None
    value_cards:'list[NBACardInLineup]' = None
    value_games:'list[NBAGameWithCardInLineup]' = None
    value_score = None
    value_rank = None
    value_user:'User' = None
    value_xpScore = None
    value_projectedReward:'ProjectedReward' = None
    value_lineupRewards = None
    value_reward:'NBAReward' = None
    value_rewards:'list[NBAReward]' = None
    value_canceledAt = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'NBALeaderboard':
        param_list = []
        inst = NBALeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def cards(self,_param_name:str = 'cards') -> 'NBACardInLineup':
        param_list = []
        inst = NBACardInLineup(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def games(self,_param_name:str = 'games') -> 'NBAGameWithCardInLineup':
        param_list = []
        inst = NBAGameWithCardInLineup(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def xpScore(self,_param_name:str = 'xpScore'):
        inst = None
        self._add_to_query("xpScore",_param_name)
        pass

    def projectedReward(self,_param_name:str = 'projectedReward') -> 'ProjectedReward':
        param_list = []
        inst = ProjectedReward(self,param_list)
        self._add_to_query("projectedReward",_param_name,inst)
        self.value_projectedReward = inst
        return inst

    def lineupRewards(self,_param_name:str = 'lineupRewards'):
        inst = None
        self._add_to_query("lineupRewards",_param_name)
        pass

    def reward(self,_param_name:str = 'reward') -> 'NBAReward':
        param_list = []
        inst = NBAReward(self,param_list)
        self._add_to_query("reward",_param_name,inst)
        self.value_reward = inst
        return inst

    def rewards(self,_param_name:str = 'rewards') -> 'NBAReward':
        param_list = []
        inst = NBAReward(self,param_list)
        self._add_to_query("rewards",_param_name,inst)
        self.value_rewards = inst
        return inst

    def canceledAt(self,_param_name:str = 'canceledAt'):
        inst = None
        self._add_to_query("canceledAt",_param_name)
        pass


class NBALineupConnection(GraphQLObject):
    value_nodes:'list[NBALineup]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class PrizePoolPodiumPrize(GraphQLObject):
    value_rank = None
    value_rarity = None
    value_cardRarity = None
    value_tier = None
    value_cardTier = None
    value_cards:'list[CardInPrizePool]' = None
    value_amountUSDCents = None
    value_amountCoins = None
    value_cashRewardOnly = None
    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def cardRarity(self,_param_name:str = 'cardRarity'):
        inst = None
        self._add_to_query("cardRarity",_param_name)
        pass

    def tier(self,_param_name:str = 'tier'):
        inst = None
        self._add_to_query("tier",_param_name)
        pass

    def cardTier(self,_param_name:str = 'cardTier'):
        inst = None
        self._add_to_query("cardTier",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'CardInPrizePool':
        param_list = []
        inst = CardInPrizePool(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass

    def cashRewardOnly(self,_param_name:str = 'cashRewardOnly'):
        inst = None
        self._add_to_query("cashRewardOnly",_param_name)
        pass


class PrizePoolPrizeLevelBoundary(GraphQLObject):
    value_rank = None
    value_isPercent = None
    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def isPercent(self,_param_name:str = 'isPercent'):
        inst = None
        self._add_to_query("isPercent",_param_name)
        pass


class PrizeLevel(GraphQLObject):
    value__from:'PrizePoolPrizeLevelBoundary' = None
    value_to:'PrizePoolPrizeLevelBoundary' = None
    value_rarity = None
    value_cardRarity = None
    value_tier = None
    value_cardTier = None
    value_cards:'list[CardInPrizePool]' = None
    value_amountUSDCents = None
    value_amountCoins = None
    value_cashRewardOnly = None
    def _from(self,_param_name:str = '_from') -> 'PrizePoolPrizeLevelBoundary':
        param_list = []
        inst = PrizePoolPrizeLevelBoundary(self,param_list)
        self._add_to_query("_from",_param_name,inst)
        self.value__from = inst
        return inst

    def to(self,_param_name:str = 'to') -> 'PrizePoolPrizeLevelBoundary':
        param_list = []
        inst = PrizePoolPrizeLevelBoundary(self,param_list)
        self._add_to_query("to",_param_name,inst)
        self.value_to = inst
        return inst

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def cardRarity(self,_param_name:str = 'cardRarity'):
        inst = None
        self._add_to_query("cardRarity",_param_name)
        pass

    def tier(self,_param_name:str = 'tier'):
        inst = None
        self._add_to_query("tier",_param_name)
        pass

    def cardTier(self,_param_name:str = 'cardTier'):
        inst = None
        self._add_to_query("cardTier",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'CardInPrizePool':
        param_list = []
        inst = CardInPrizePool(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass

    def cashRewardOnly(self,_param_name:str = 'cashRewardOnly'):
        inst = None
        self._add_to_query("cashRewardOnly",_param_name)
        pass


class LeaderboardPrizePool(GraphQLObject):
    value_commonCardsMaxThreshold = None
    value_commonCardsCount = None
    value_limitedCardsCount = None
    value_rareCardsCount = None
    value_superRareCardsCount = None
    value_uniqueCardsCount = None
    value_amountUSDCents = None
    value_amountCoins = None
    value_podium:'list[PrizePoolPodiumPrize]' = None
    value_participation:'list[PrizeLevel]' = None
    def commonCardsMaxThreshold(self,_param_name:str = 'commonCardsMaxThreshold'):
        inst = None
        self._add_to_query("commonCardsMaxThreshold",_param_name)
        pass

    def commonCardsCount(self,_param_name:str = 'commonCardsCount'):
        inst = None
        self._add_to_query("commonCardsCount",_param_name)
        pass

    def limitedCardsCount(self,_param_name:str = 'limitedCardsCount'):
        inst = None
        self._add_to_query("limitedCardsCount",_param_name)
        pass

    def rareCardsCount(self,_param_name:str = 'rareCardsCount'):
        inst = None
        self._add_to_query("rareCardsCount",_param_name)
        pass

    def superRareCardsCount(self,_param_name:str = 'superRareCardsCount'):
        inst = None
        self._add_to_query("superRareCardsCount",_param_name)
        pass

    def uniqueCardsCount(self,_param_name:str = 'uniqueCardsCount'):
        inst = None
        self._add_to_query("uniqueCardsCount",_param_name)
        pass

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass

    def podium(self,_param_name:str = 'podium') -> 'PrizePoolPodiumPrize':
        param_list = []
        inst = PrizePoolPodiumPrize(self,param_list)
        self._add_to_query("podium",_param_name,inst)
        self.value_podium = inst
        return inst

    def participation(self,_param_name:str = 'participation') -> 'PrizeLevel':
        param_list = []
        inst = PrizeLevel(self,param_list)
        self._add_to_query("participation",_param_name,inst)
        self.value_participation = inst
        return inst


class LeaderboardRulesMinimumRarityRequirement(GraphQLObject):
    value_rarity = None
    value_minCount = None
    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def minCount(self,_param_name:str = 'minCount'):
        inst = None
        self._add_to_query("minCount",_param_name)
        pass


class PlayerAgeRequirements(GraphQLObject):
    value_minAge = None
    value_maxAge = None
    def minAge(self,_param_name:str = 'minAge'):
        inst = None
        self._add_to_query("minAge",_param_name)
        pass

    def maxAge(self,_param_name:str = 'maxAge'):
        inst = None
        self._add_to_query("maxAge",_param_name)
        pass


class NBALeaderboardRequirements(GraphQLObject):
    value_allowedRarities = None
    value_minRarity:'LeaderboardRulesMinimumRarityRequirement' = None
    value_minRookieCount = None
    value_tenGameAverageTotalLimit = None
    value_allowMVP = None
    value_allowedConference = None
    value_playerAgeRequirements:'PlayerAgeRequirements' = None
    value_marketplaceQueryParameters = None
    value_minCurrentSeasonCardCount = None
    value_lineupSlotPositions = None
    def allowedRarities(self,_param_name:str = 'allowedRarities'):
        inst = None
        self._add_to_query("allowedRarities",_param_name)
        pass

    def minRarity(self,_param_name:str = 'minRarity') -> 'LeaderboardRulesMinimumRarityRequirement':
        param_list = []
        inst = LeaderboardRulesMinimumRarityRequirement(self,param_list)
        self._add_to_query("minRarity",_param_name,inst)
        self.value_minRarity = inst
        return inst

    def minRookieCount(self,_param_name:str = 'minRookieCount'):
        inst = None
        self._add_to_query("minRookieCount",_param_name)
        pass

    def tenGameAverageTotalLimit(self,_param_name:str = 'tenGameAverageTotalLimit'):
        inst = None
        self._add_to_query("tenGameAverageTotalLimit",_param_name)
        pass

    def allowMVP(self,_param_name:str = 'allowMVP'):
        inst = None
        self._add_to_query("allowMVP",_param_name)
        pass

    def allowedConference(self,_param_name:str = 'allowedConference'):
        inst = None
        self._add_to_query("allowedConference",_param_name)
        pass

    def playerAgeRequirements(self,_param_name:str = 'playerAgeRequirements') -> 'PlayerAgeRequirements':
        param_list = []
        inst = PlayerAgeRequirements(self,param_list)
        self._add_to_query("playerAgeRequirements",_param_name,inst)
        self.value_playerAgeRequirements = inst
        return inst

    def marketplaceQueryParameters(self,_param_name:str = 'marketplaceQueryParameters'):
        inst = None
        self._add_to_query("marketplaceQueryParameters",_param_name)
        pass

    def minCurrentSeasonCardCount(self,_param_name:str = 'minCurrentSeasonCardCount'):
        inst = None
        self._add_to_query("minCurrentSeasonCardCount",_param_name)
        pass

    def lineupSlotPositions(self,_param_name:str = 'lineupSlotPositions'):
        inst = None
        self._add_to_query("lineupSlotPositions",_param_name)
        pass


class NBACardForComposeLineup(GraphQLObject):
    value_card:'NBACard' = None
    value_usedInOtherLineup:'NBALineup' = None
    value_tenGameAverageForComposeLineup = None
    value_totalBonusInLineup = None
    def card(self,_param_name:str = 'card') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def usedInOtherLineup(self,_param_name:str = 'usedInOtherLineup') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("usedInOtherLineup",_param_name,inst)
        self.value_usedInOtherLineup = inst
        return inst

    def tenGameAverageForComposeLineup(self,_param_name:str = 'tenGameAverageForComposeLineup'):
        inst = None
        self._add_to_query("tenGameAverageForComposeLineup",_param_name)
        pass

    def totalBonusInLineup(self,_param_name:str = 'totalBonusInLineup'):
        inst = None
        self._add_to_query("totalBonusInLineup",_param_name)
        pass


class NBACardForComposeLineupConnection(GraphQLObject):
    value_nodes:'list[NBACardForComposeLineup]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'NBACardForComposeLineup':
        param_list = []
        inst = NBACardForComposeLineup(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class NBALeaderboard(GraphQLObject):
    value_id = None
    value_slug = None
    value_displayName = None
    value_displayNameWithoutRarity = None
    value_descriptions = None
    value_lineups:'NBALineupConnection' = None
    value_myLineups:'list[NBALineup]' = None
    value_lineupsCount = None
    value_fixture:'NBAFixture' = None
    value_games:'list[NBAGame]' = None
    value_prizePool:'LeaderboardPrizePool' = None
    value_requirements:'NBALeaderboardRequirements' = None
    value_leaderboardRarity = None
    value_isUserEligible = None
    value_isTraining = None
    value_iconImageUrl = None
    value_monochromeIconImageUrl = None
    value_myComposeLineupCards:'NBACardForComposeLineupConnection' = None
    value_scoringStrategy = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def displayNameWithoutRarity(self,_param_name:str = 'displayNameWithoutRarity'):
        inst = None
        self._add_to_query("displayNameWithoutRarity",_param_name)
        pass

    def descriptions(self,_param_name:str = 'descriptions'):
        inst = None
        self._add_to_query("descriptions",_param_name)
        pass

    def lineups(self,first,after,userId,_param_name:str = 'lineups') -> 'NBALineupConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("userId",userId))
        inst = NBALineupConnection(self,param_list)
        self._add_to_query("lineups",_param_name,inst)
        self.value_lineups = inst
        return inst

    def myLineups(self,_param_name:str = 'myLineups') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("myLineups",_param_name,inst)
        self.value_myLineups = inst
        return inst

    def lineupsCount(self,_param_name:str = 'lineupsCount'):
        inst = None
        self._add_to_query("lineupsCount",_param_name)
        pass

    def fixture(self,_param_name:str = 'fixture') -> 'NBAFixture':
        param_list = []
        inst = NBAFixture(self,param_list)
        self._add_to_query("fixture",_param_name,inst)
        self.value_fixture = inst
        return inst

    def games(self,_param_name:str = 'games') -> 'NBAGame':
        param_list = []
        inst = NBAGame(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def prizePool(self,_param_name:str = 'prizePool') -> 'LeaderboardPrizePool':
        param_list = []
        inst = LeaderboardPrizePool(self,param_list)
        self._add_to_query("prizePool",_param_name,inst)
        self.value_prizePool = inst
        return inst

    def requirements(self,_param_name:str = 'requirements') -> 'NBALeaderboardRequirements':
        param_list = []
        inst = NBALeaderboardRequirements(self,param_list)
        self._add_to_query("requirements",_param_name,inst)
        self.value_requirements = inst
        return inst

    def leaderboardRarity(self,_param_name:str = 'leaderboardRarity'):
        inst = None
        self._add_to_query("leaderboardRarity",_param_name)
        pass

    def isUserEligible(self,_param_name:str = 'isUserEligible'):
        inst = None
        self._add_to_query("isUserEligible",_param_name)
        pass

    def isTraining(self,_param_name:str = 'isTraining'):
        inst = None
        self._add_to_query("isTraining",_param_name)
        pass

    def iconImageUrl(self,_param_name:str = 'iconImageUrl'):
        inst = None
        self._add_to_query("iconImageUrl",_param_name)
        pass

    def monochromeIconImageUrl(self,_param_name:str = 'monochromeIconImageUrl'):
        inst = None
        self._add_to_query("monochromeIconImageUrl",_param_name)
        pass

    def myComposeLineupCards(self,query,lineupId,first,after,includeUsed,includeOverTenGameAverageTotalLimit,inSeasonEligible,indexInLineup,cardsInLineupPartial,_param_name:str = 'myComposeLineupCards') -> 'NBACardForComposeLineupConnection':
        param_list = []
        param_list.append(("query",query))
        param_list.append(("lineupId",lineupId))
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("includeUsed",includeUsed))
        param_list.append(("includeOverTenGameAverageTotalLimit",includeOverTenGameAverageTotalLimit))
        param_list.append(("inSeasonEligible",inSeasonEligible))
        param_list.append(("indexInLineup",indexInLineup))
        param_list.append(("cardsInLineupPartial",cardsInLineupPartial))
        inst = NBACardForComposeLineupConnection(self,param_list)
        self._add_to_query("myComposeLineupCards",_param_name,inst)
        self.value_myComposeLineupCards = inst
        return inst

    def scoringStrategy(self,_param_name:str = 'scoringStrategy'):
        inst = None
        self._add_to_query("scoringStrategy",_param_name)
        pass


class NBAPlayerFixtureStatsConnection(GraphQLObject):
    value_nodes:'list[NBAPlayerInFixture]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'NBAPlayerInFixture':
        param_list = []
        inst = NBAPlayerInFixture(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class NBAFixture(GraphQLObject):
    value_id = None
    value_slug = None
    value_fixtureState = None
    value_gameWeek = None
    value_startDate = None
    value_endDate = None
    value_games:'list[NBAGame]' = None
    value_leaderboards:'list[NBALeaderboard]' = None
    value_myEligibleGames:'list[NBAGame]' = None
    value_myLiveLineupGames:'list[NBAGameWithCardInLineup]' = None
    value_myLineups:'list[NBALineup]' = None
    value_userLineups:'list[NBALineup]' = None
    value_playerFixtureStats:'NBAPlayerFixtureStatsConnection' = None
    value_rewardPool:'list[NBAPlayer]' = None
    value_nextFixture:'NBAFixture' = None
    value_previousFixture:'NBAFixture' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def fixtureState(self,_param_name:str = 'fixtureState'):
        inst = None
        self._add_to_query("fixtureState",_param_name)
        pass

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def games(self,_param_name:str = 'games') -> 'NBAGame':
        param_list = []
        inst = NBAGame(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def leaderboards(self,includeTraining,_param_name:str = 'leaderboards') -> 'NBALeaderboard':
        param_list = []
        param_list.append(("includeTraining",includeTraining))
        inst = NBALeaderboard(self,param_list)
        self._add_to_query("leaderboards",_param_name,inst)
        self.value_leaderboards = inst
        return inst

    def myEligibleGames(self,_param_name:str = 'myEligibleGames') -> 'NBAGame':
        param_list = []
        inst = NBAGame(self,param_list)
        self._add_to_query("myEligibleGames",_param_name,inst)
        self.value_myEligibleGames = inst
        return inst

    def myLiveLineupGames(self,_param_name:str = 'myLiveLineupGames') -> 'NBAGameWithCardInLineup':
        param_list = []
        inst = NBAGameWithCardInLineup(self,param_list)
        self._add_to_query("myLiveLineupGames",_param_name,inst)
        self.value_myLiveLineupGames = inst
        return inst

    def myLineups(self,_param_name:str = 'myLineups') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("myLineups",_param_name,inst)
        self.value_myLineups = inst
        return inst

    def userLineups(self,userId,_param_name:str = 'userLineups') -> 'NBALineup':
        param_list = []
        param_list.append(("userId",userId))
        inst = NBALineup(self,param_list)
        self._add_to_query("userLineups",_param_name,inst)
        self.value_userLineups = inst
        return inst

    def playerFixtureStats(self,first,after,hideUnownedPlayers,playerOwnershipFilter:'PlayerOwnershipFilter',order,_param_name:str = 'playerFixtureStats') -> 'NBAPlayerFixtureStatsConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("hideUnownedPlayers",hideUnownedPlayers))
        param_list.append(("playerOwnershipFilter",playerOwnershipFilter))
        param_list.append(("order",order))
        inst = NBAPlayerFixtureStatsConnection(self,param_list)
        self._add_to_query("playerFixtureStats",_param_name,inst)
        self.value_playerFixtureStats = inst
        return inst

    def rewardPool(self,rarity,cardRarity,tier,_param_name:str = 'rewardPool') -> 'NBAPlayer':
        param_list = []
        param_list.append(("rarity",rarity))
        param_list.append(("cardRarity",cardRarity))
        param_list.append(("tier",tier))
        inst = NBAPlayer(self,param_list)
        self._add_to_query("rewardPool",_param_name,inst)
        self.value_rewardPool = inst
        return inst

    def nextFixture(self,_param_name:str = 'nextFixture') -> 'NBAFixture':
        param_list = []
        inst = NBAFixture(self,param_list)
        self._add_to_query("nextFixture",_param_name,inst)
        self.value_nextFixture = inst
        return inst

    def previousFixture(self,_param_name:str = 'previousFixture') -> 'NBAFixture':
        param_list = []
        inst = NBAFixture(self,param_list)
        self._add_to_query("previousFixture",_param_name,inst)
        self.value_previousFixture = inst
        return inst


class NBAPlayerInFixtureStatus(GraphQLObject):
    value_gameStats:'list[NBAPlayerGameStats]' = None
    value_upcomingGames:'list[NBAGame]' = None
    value_inGame = None
    value_isScoreFinal = None
    value_statusIconType = None
    value_hasTBDGames = None
    def gameStats(self,_param_name:str = 'gameStats') -> 'NBAPlayerGameStats':
        param_list = []
        inst = NBAPlayerGameStats(self,param_list)
        self._add_to_query("gameStats",_param_name,inst)
        self.value_gameStats = inst
        return inst

    def upcomingGames(self,_param_name:str = 'upcomingGames') -> 'NBAGame':
        param_list = []
        inst = NBAGame(self,param_list)
        self._add_to_query("upcomingGames",_param_name,inst)
        self.value_upcomingGames = inst
        return inst

    def inGame(self,_param_name:str = 'inGame'):
        inst = None
        self._add_to_query("inGame",_param_name)
        pass

    def isScoreFinal(self,_param_name:str = 'isScoreFinal'):
        inst = None
        self._add_to_query("isScoreFinal",_param_name)
        pass

    def statusIconType(self,_param_name:str = 'statusIconType'):
        inst = None
        self._add_to_query("statusIconType",_param_name)
        pass

    def hasTBDGames(self,_param_name:str = 'hasTBDGames'):
        inst = None
        self._add_to_query("hasTBDGames",_param_name)
        pass


class NBAPlayerInFixture(GraphQLObject):
    value_fixture:'NBAFixture' = None
    value_player:'NBAPlayer' = None
    value_score = None
    value_status:'NBAPlayerInFixtureStatus' = None
    value_tenGameAverage = None
    def fixture(self,_param_name:str = 'fixture') -> 'NBAFixture':
        param_list = []
        inst = NBAFixture(self,param_list)
        self._add_to_query("fixture",_param_name,inst)
        self.value_fixture = inst
        return inst

    def player(self,_param_name:str = 'player') -> 'NBAPlayer':
        param_list = []
        inst = NBAPlayer(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def status(self,_param_name:str = 'status') -> 'NBAPlayerInFixtureStatus':
        param_list = []
        inst = NBAPlayerInFixtureStatus(self,param_list)
        self._add_to_query("status",_param_name,inst)
        self.value_status = inst
        return inst

    def tenGameAverage(self,_param_name:str = 'tenGameAverage'):
        inst = None
        self._add_to_query("tenGameAverage",_param_name)
        pass


class NBAPlayerAverageGameDetailedStats(GraphQLObject):
    value_points = None
    value_rebounds = None
    value_assists = None
    value_blocks = None
    value_steals = None
    value_turnovers = None
    value_made3PointFGs = None
    value_doubleDoubles = None
    value_tripleDoubles = None
    value_secondsPlayed = None
    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def rebounds(self,_param_name:str = 'rebounds'):
        inst = None
        self._add_to_query("rebounds",_param_name)
        pass

    def assists(self,_param_name:str = 'assists'):
        inst = None
        self._add_to_query("assists",_param_name)
        pass

    def blocks(self,_param_name:str = 'blocks'):
        inst = None
        self._add_to_query("blocks",_param_name)
        pass

    def steals(self,_param_name:str = 'steals'):
        inst = None
        self._add_to_query("steals",_param_name)
        pass

    def turnovers(self,_param_name:str = 'turnovers'):
        inst = None
        self._add_to_query("turnovers",_param_name)
        pass

    def made3PointFGs(self,_param_name:str = 'made3PointFGs'):
        inst = None
        self._add_to_query("made3PointFGs",_param_name)
        pass

    def doubleDoubles(self,_param_name:str = 'doubleDoubles'):
        inst = None
        self._add_to_query("doubleDoubles",_param_name)
        pass

    def tripleDoubles(self,_param_name:str = 'tripleDoubles'):
        inst = None
        self._add_to_query("tripleDoubles",_param_name)
        pass

    def secondsPlayed(self,_param_name:str = 'secondsPlayed'):
        inst = None
        self._add_to_query("secondsPlayed",_param_name)
        pass


class NBAPlayerAverageGameStats(GraphQLObject):
    value_score = None
    value_detailedStats:'NBAPlayerAverageGameDetailedStats' = None
    value_detailedScores:'NBAPlayerGameDetailedScores' = None
    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def detailedStats(self,_param_name:str = 'detailedStats') -> 'NBAPlayerAverageGameDetailedStats':
        param_list = []
        inst = NBAPlayerAverageGameDetailedStats(self,param_list)
        self._add_to_query("detailedStats",_param_name,inst)
        self.value_detailedStats = inst
        return inst

    def detailedScores(self,_param_name:str = 'detailedScores') -> 'NBAPlayerGameDetailedScores':
        param_list = []
        inst = NBAPlayerGameDetailedScores(self,param_list)
        self._add_to_query("detailedScores",_param_name,inst)
        self.value_detailedScores = inst
        return inst


class PlayerInjury(GraphQLObject):
    value_status = None
    value_description = None
    value_comment = None
    value_startDate = None
    value_updateDate = None
    value_updateDateTime = None
    value_returnDate = None
    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def comment(self,_param_name:str = 'comment'):
        inst = None
        self._add_to_query("comment",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def updateDate(self,_param_name:str = 'updateDate'):
        inst = None
        self._add_to_query("updateDate",_param_name)
        pass

    def updateDateTime(self,_param_name:str = 'updateDateTime'):
        inst = None
        self._add_to_query("updateDateTime",_param_name)
        pass

    def returnDate(self,_param_name:str = 'returnDate'):
        inst = None
        self._add_to_query("returnDate",_param_name)
        pass


class NBACardConnection(GraphQLObject):
    value_nodes:'list[NBACard]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class PlayerNewsUpdate(GraphQLObject):
    value_date = None
    value_headline = None
    value_notes = None
    value_analysis = None
    def date(self,_param_name:str = 'date'):
        inst = None
        self._add_to_query("date",_param_name)
        pass

    def headline(self,_param_name:str = 'headline'):
        inst = None
        self._add_to_query("headline",_param_name)
        pass

    def notes(self,_param_name:str = 'notes'):
        inst = None
        self._add_to_query("notes",_param_name)
        pass

    def analysis(self,_param_name:str = 'analysis'):
        inst = None
        self._add_to_query("analysis",_param_name)
        pass


class NBAPlayer(GraphQLObject):
    value_activeClub:'Club' = None
    value_activeClubMembership:'Membership' = None
    value_activeInjuries:'list[Injury]' = None
    value_activeNationalTeam:'NationalTeam' = None
    value_activeSuspensions:'list[Suspension]' = None
    value_age = None
    value_allPlayerGameScores:'PlayerGameScoreInterfaceConnection' = None
    value_anyCardWithLivePrimaryOffer:'AnyCardInterface' = None
    value_anyFutureGames:'AnyGameInterfaceConnection' = None
    value_anyGameStats:'list[AnyPlayerGameStatsInterface]' = None
    value_anyGamesForFixture:'list[AnyGameInterface]' = None
    value_anyGamesForLeaderboard:'list[AnyGameInterface]' = None
    value_anyPastGames:'AnyGameInterfaceConnection' = None
    value_anyPositions = None
    value_anyRelatedPlayers:'list[AnyPlayerInterface]' = None
    value_appearances = None
    value_avatarPictureUrl = None
    value_averageScore = None
    value_beforeLastOwningMembership:'Membership' = None
    value_birthDay = None
    value_cardPositions = None
    value_cardSupply:'list[CardSeasonSupply]' = None
    value_cardWithLivePrimaryOffer = None
    value_careerSeasons:'list[Season]' = None
    value_clubMemberships:'list[Membership]' = None
    value_country:'Country' = None
    value_currentSeason:'Season' = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_displayName = None
    value_firstName = None
    value_fullPictureUrl = None
    value_height = None
    value_injuries:'list[Injury]' = None
    value_lastClub:'Club' = None
    value_lastFifteenSo5Appearances = None
    value_lastFiveSo5Appearances = None
    value_lastName = None
    value_lastTenSo5Appearances = None
    value_lowestPriceAnyCard:'AnyCardInterface' = None
    value_lowestPriceCard = None
    value_matchName = None
    value_memberships:'list[Membership]' = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_playerGameScores:'list[PlayerGameScoreInterface]' = None
    value_rawPlayerGameScores = None
    value_seasonAppearances = None
    value_shirtNumber = None
    value_slug = None
    value_sport = None
    value_squaredPictureUrl = None
    value_subscriptionsCount = None
    value_suspensions:'list[Suspension]' = None
    value_tokenPrices:'TokenPriceConnection' = None
    value_user:'User' = None
    value_weight = None
    value_id = None
    value_birthDate = None
    value_birthPlaceCountry = None
    value_positions = None
    value_team:'NBATeam' = None
    value_avatarImageUrl = None
    value_latestFinalGameStats:'list[NBAPlayerGameStats]' = None
    value_latestFinalFixtureStats:'list[NBAPlayerInFixture]' = None
    value_latestFixtureStats:'list[NBAPlayerInFixture]' = None
    value_fixtureGames:'list[NBAGame]' = None
    value_upcomingGames:'list[NBAGame]' = None
    value_inFixture:'NBAPlayerInFixture' = None
    value_tenGameAverage = None
    value_tenGameAverageGameStats:'NBAPlayerAverageGameStats' = None
    value_isActive = None
    value_playerInjury:'PlayerInjury' = None
    value_cards:'NBACardConnection' = None
    value_pictureUrl = None
    value_rotowireId = None
    value_newsUpdates:'list[PlayerNewsUpdate]' = None
    def activeClub(self,_param_name:str = 'activeClub') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("activeClub",_param_name,inst)
        self.value_activeClub = inst
        return inst

    def activeClubMembership(self,_param_name:str = 'activeClubMembership') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("activeClubMembership",_param_name,inst)
        self.value_activeClubMembership = inst
        return inst

    def activeInjuries(self,_param_name:str = 'activeInjuries') -> 'Injury':
        param_list = []
        inst = Injury(self,param_list)
        self._add_to_query("activeInjuries",_param_name,inst)
        self.value_activeInjuries = inst
        return inst

    def activeNationalTeam(self,_param_name:str = 'activeNationalTeam') -> 'NationalTeam':
        param_list = []
        inst = NationalTeam(self,param_list)
        self._add_to_query("activeNationalTeam",_param_name,inst)
        self.value_activeNationalTeam = inst
        return inst

    def activeSuspensions(self,_param_name:str = 'activeSuspensions') -> 'Suspension':
        param_list = []
        inst = Suspension(self,param_list)
        self._add_to_query("activeSuspensions",_param_name,inst)
        self.value_activeSuspensions = inst
        return inst

    def age(self,_param_name:str = 'age'):
        inst = None
        self._add_to_query("age",_param_name)
        pass

    def allPlayerGameScores(self,after,before,first,last,position,_param_name:str = 'allPlayerGameScores') -> 'PlayerGameScoreInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterfaceConnection(self,param_list)
        self._add_to_query("allPlayerGameScores",_param_name,inst)
        self.value_allPlayerGameScores = inst
        return inst

    def anyCardWithLivePrimaryOffer(self,rarity,_param_name:str = 'anyCardWithLivePrimaryOffer') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCardWithLivePrimaryOffer",_param_name,inst)
        self.value_anyCardWithLivePrimaryOffer = inst
        return inst

    def anyFutureGames(self,after,before,first,last,_param_name:str = 'anyFutureGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyFutureGames",_param_name,inst)
        self.value_anyFutureGames = inst
        return inst

    def anyGameStats(self,last,lowCoverage,_param_name:str = 'anyGameStats') -> 'AnyPlayerGameStatsInterface':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        inst = AnyPlayerGameStatsInterface(self,param_list)
        self._add_to_query("anyGameStats",_param_name,inst)
        self.value_anyGameStats = inst
        return inst

    def anyGamesForFixture(self,so5FixtureSlug,_param_name:str = 'anyGamesForFixture') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("so5FixtureSlug",so5FixtureSlug))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGamesForFixture",_param_name,inst)
        self.value_anyGamesForFixture = inst
        return inst

    def anyGamesForLeaderboard(self,so5LeaderboardSlug,_param_name:str = 'anyGamesForLeaderboard') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGamesForLeaderboard",_param_name,inst)
        self.value_anyGamesForLeaderboard = inst
        return inst

    def anyPastGames(self,after,before,first,last,_param_name:str = 'anyPastGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyPastGames",_param_name,inst)
        self.value_anyPastGames = inst
        return inst

    def anyPositions(self,_param_name:str = 'anyPositions'):
        inst = None
        self._add_to_query("anyPositions",_param_name)
        pass

    def anyRelatedPlayers(self,_param_name:str = 'anyRelatedPlayers') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyRelatedPlayers",_param_name,inst)
        self.value_anyRelatedPlayers = inst
        return inst

    def appearances(self,_param_name:str = 'appearances'):
        inst = None
        self._add_to_query("appearances",_param_name)
        pass

    def avatarPictureUrl(self,_param_name:str = 'avatarPictureUrl'):
        inst = None
        self._add_to_query("avatarPictureUrl",_param_name)
        pass

    def averageScore(self,position,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def beforeLastOwningMembership(self,_param_name:str = 'beforeLastOwningMembership') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("beforeLastOwningMembership",_param_name,inst)
        self.value_beforeLastOwningMembership = inst
        return inst

    def birthDay(self,_param_name:str = 'birthDay'):
        inst = None
        self._add_to_query("birthDay",_param_name)
        pass

    def cardPositions(self,_param_name:str = 'cardPositions'):
        inst = None
        self._add_to_query("cardPositions",_param_name)
        pass

    def cardSupply(self,_param_name:str = 'cardSupply') -> 'CardSeasonSupply':
        param_list = []
        inst = CardSeasonSupply(self,param_list)
        self._add_to_query("cardSupply",_param_name,inst)
        self.value_cardSupply = inst
        return inst

    def cardWithLivePrimaryOffer(self,rarity,_param_name:str = 'cardWithLivePrimaryOffer'):
        inst = None
        self._add_to_query("cardWithLivePrimaryOffer",_param_name)
        pass

    def careerSeasons(self,type,_param_name:str = 'careerSeasons') -> 'Season':
        param_list = []
        param_list.append(("type",type))
        inst = Season(self,param_list)
        self._add_to_query("careerSeasons",_param_name,inst)
        self.value_careerSeasons = inst
        return inst

    def clubMemberships(self,_param_name:str = 'clubMemberships') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("clubMemberships",_param_name,inst)
        self.value_clubMemberships = inst
        return inst

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def currentSeason(self,_param_name:str = 'currentSeason') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("currentSeason",_param_name,inst)
        self.value_currentSeason = inst
        return inst

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def firstName(self,_param_name:str = 'firstName'):
        inst = None
        self._add_to_query("firstName",_param_name)
        pass

    def fullPictureUrl(self,_param_name:str = 'fullPictureUrl'):
        inst = None
        self._add_to_query("fullPictureUrl",_param_name)
        pass

    def height(self,_param_name:str = 'height'):
        inst = None
        self._add_to_query("height",_param_name)
        pass

    def injuries(self,_param_name:str = 'injuries') -> 'Injury':
        param_list = []
        inst = Injury(self,param_list)
        self._add_to_query("injuries",_param_name,inst)
        self.value_injuries = inst
        return inst

    def lastClub(self,_param_name:str = 'lastClub') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("lastClub",_param_name,inst)
        self.value_lastClub = inst
        return inst

    def lastFifteenSo5Appearances(self,_param_name:str = 'lastFifteenSo5Appearances'):
        inst = None
        self._add_to_query("lastFifteenSo5Appearances",_param_name)
        pass

    def lastFiveSo5Appearances(self,_param_name:str = 'lastFiveSo5Appearances'):
        inst = None
        self._add_to_query("lastFiveSo5Appearances",_param_name)
        pass

    def lastName(self,_param_name:str = 'lastName'):
        inst = None
        self._add_to_query("lastName",_param_name)
        pass

    def lastTenSo5Appearances(self,_param_name:str = 'lastTenSo5Appearances'):
        inst = None
        self._add_to_query("lastTenSo5Appearances",_param_name)
        pass

    def lowestPriceAnyCard(self,rarity,seasonStartYear,teamSlug,_param_name:str = 'lowestPriceAnyCard') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        param_list.append(("seasonStartYear",seasonStartYear))
        param_list.append(("teamSlug",teamSlug))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("lowestPriceAnyCard",_param_name,inst)
        self.value_lowestPriceAnyCard = inst
        return inst

    def lowestPriceCard(self,rarity,_param_name:str = 'lowestPriceCard'):
        inst = None
        self._add_to_query("lowestPriceCard",_param_name)
        pass

    def matchName(self,_param_name:str = 'matchName'):
        inst = None
        self._add_to_query("matchName",_param_name)
        pass

    def memberships(self,_param_name:str = 'memberships') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("memberships",_param_name,inst)
        self.value_memberships = inst
        return inst

    def playerGameScore(self,gameId,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("gameId",gameId))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def playerGameScores(self,last,lowCoverage,position,_param_name:str = 'playerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScores",_param_name,inst)
        self.value_playerGameScores = inst
        return inst

    def rawPlayerGameScores(self,last,lowCoverage,position,_param_name:str = 'rawPlayerGameScores'):
        inst = None
        self._add_to_query("rawPlayerGameScores",_param_name)
        pass

    def seasonAppearances(self,_param_name:str = 'seasonAppearances'):
        inst = None
        self._add_to_query("seasonAppearances",_param_name)
        pass

    def shirtNumber(self,_param_name:str = 'shirtNumber'):
        inst = None
        self._add_to_query("shirtNumber",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def squaredPictureUrl(self,_param_name:str = 'squaredPictureUrl'):
        inst = None
        self._add_to_query("squaredPictureUrl",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def suspensions(self,_param_name:str = 'suspensions') -> 'Suspension':
        param_list = []
        inst = Suspension(self,param_list)
        self._add_to_query("suspensions",_param_name,inst)
        self.value_suspensions = inst
        return inst

    def tokenPrices(self,after,before,first,last,rarity,season,seasonEligibility,since,_param_name:str = 'tokenPrices') -> 'TokenPriceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("rarity",rarity))
        param_list.append(("season",season))
        param_list.append(("seasonEligibility",seasonEligibility))
        param_list.append(("since",since))
        inst = TokenPriceConnection(self,param_list)
        self._add_to_query("tokenPrices",_param_name,inst)
        self.value_tokenPrices = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def weight(self,_param_name:str = 'weight'):
        inst = None
        self._add_to_query("weight",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def birthDate(self,_param_name:str = 'birthDate'):
        inst = None
        self._add_to_query("birthDate",_param_name)
        pass

    def birthPlaceCountry(self,_param_name:str = 'birthPlaceCountry'):
        inst = None
        self._add_to_query("birthPlaceCountry",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'NBATeam':
        param_list = []
        inst = NBATeam(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def avatarImageUrl(self,_param_name:str = 'avatarImageUrl'):
        inst = None
        self._add_to_query("avatarImageUrl",_param_name)
        pass

    def latestFinalGameStats(self,last,_param_name:str = 'latestFinalGameStats') -> 'NBAPlayerGameStats':
        param_list = []
        param_list.append(("last",last))
        inst = NBAPlayerGameStats(self,param_list)
        self._add_to_query("latestFinalGameStats",_param_name,inst)
        self.value_latestFinalGameStats = inst
        return inst

    def latestFinalFixtureStats(self,last,_param_name:str = 'latestFinalFixtureStats') -> 'NBAPlayerInFixture':
        param_list = []
        param_list.append(("last",last))
        inst = NBAPlayerInFixture(self,param_list)
        self._add_to_query("latestFinalFixtureStats",_param_name,inst)
        self.value_latestFinalFixtureStats = inst
        return inst

    def latestFixtureStats(self,last,_param_name:str = 'latestFixtureStats') -> 'NBAPlayerInFixture':
        param_list = []
        param_list.append(("last",last))
        inst = NBAPlayerInFixture(self,param_list)
        self._add_to_query("latestFixtureStats",_param_name,inst)
        self.value_latestFixtureStats = inst
        return inst

    def fixtureGames(self,fixtureSlug,_param_name:str = 'fixtureGames') -> 'NBAGame':
        param_list = []
        param_list.append(("fixtureSlug",fixtureSlug))
        inst = NBAGame(self,param_list)
        self._add_to_query("fixtureGames",_param_name,inst)
        self.value_fixtureGames = inst
        return inst

    def upcomingGames(self,next,_param_name:str = 'upcomingGames') -> 'NBAGame':
        param_list = []
        param_list.append(("next",next))
        inst = NBAGame(self,param_list)
        self._add_to_query("upcomingGames",_param_name,inst)
        self.value_upcomingGames = inst
        return inst

    def inFixture(self,fixtureSlug,_param_name:str = 'inFixture') -> 'NBAPlayerInFixture':
        param_list = []
        param_list.append(("fixtureSlug",fixtureSlug))
        inst = NBAPlayerInFixture(self,param_list)
        self._add_to_query("inFixture",_param_name,inst)
        self.value_inFixture = inst
        return inst

    def tenGameAverage(self,_param_name:str = 'tenGameAverage'):
        inst = None
        self._add_to_query("tenGameAverage",_param_name)
        pass

    def tenGameAverageGameStats(self,_param_name:str = 'tenGameAverageGameStats') -> 'NBAPlayerAverageGameStats':
        param_list = []
        inst = NBAPlayerAverageGameStats(self,param_list)
        self._add_to_query("tenGameAverageGameStats",_param_name,inst)
        self.value_tenGameAverageGameStats = inst
        return inst

    def isActive(self,_param_name:str = 'isActive'):
        inst = None
        self._add_to_query("isActive",_param_name)
        pass

    def playerInjury(self,_param_name:str = 'playerInjury') -> 'PlayerInjury':
        param_list = []
        inst = PlayerInjury(self,param_list)
        self._add_to_query("playerInjury",_param_name,inst)
        self.value_playerInjury = inst
        return inst

    def cards(self,first,after,positions,rarities,_param_name:str = 'cards') -> 'NBACardConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        inst = NBACardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def rotowireId(self,_param_name:str = 'rotowireId'):
        inst = None
        self._add_to_query("rotowireId",_param_name)
        pass

    def newsUpdates(self,last,_param_name:str = 'newsUpdates') -> 'PlayerNewsUpdate':
        param_list = []
        param_list.append(("last",last))
        inst = PlayerNewsUpdate(self,param_list)
        self._add_to_query("newsUpdates",_param_name,inst)
        self.value_newsUpdates = inst
        return inst


class NBACollectionCardScoreBreakdown(GraphQLObject):
    value_owner = None
    value_ownedFor90Days = None
    value_newCard = None
    value_firstSerialNumber = None
    value_shirtMatchingSerialNumber = None
    value_specialEditionCard = None
    value_total = None
    def owner(self,_param_name:str = 'owner'):
        inst = None
        self._add_to_query("owner",_param_name)
        pass

    def ownedFor90Days(self,_param_name:str = 'ownedFor90Days'):
        inst = None
        self._add_to_query("ownedFor90Days",_param_name)
        pass

    def newCard(self,_param_name:str = 'newCard'):
        inst = None
        self._add_to_query("newCard",_param_name)
        pass

    def firstSerialNumber(self,_param_name:str = 'firstSerialNumber'):
        inst = None
        self._add_to_query("firstSerialNumber",_param_name)
        pass

    def shirtMatchingSerialNumber(self,_param_name:str = 'shirtMatchingSerialNumber'):
        inst = None
        self._add_to_query("shirtMatchingSerialNumber",_param_name)
        pass

    def specialEditionCard(self,_param_name:str = 'specialEditionCard'):
        inst = None
        self._add_to_query("specialEditionCard",_param_name)
        pass

    def total(self,_param_name:str = 'total'):
        inst = None
        self._add_to_query("total",_param_name)
        pass


class NBACollectionCard(GraphQLObject):
    value_card:'NBACard' = None
    value_heldSince = None
    value_scoreBreakdown:'NBACollectionCardScoreBreakdown' = None
    value_isDisplayCard = None
    def card(self,_param_name:str = 'card') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def heldSince(self,_param_name:str = 'heldSince'):
        inst = None
        self._add_to_query("heldSince",_param_name)
        pass

    def scoreBreakdown(self,_param_name:str = 'scoreBreakdown') -> 'NBACollectionCardScoreBreakdown':
        param_list = []
        inst = NBACollectionCardScoreBreakdown(self,param_list)
        self._add_to_query("scoreBreakdown",_param_name,inst)
        self.value_scoreBreakdown = inst
        return inst

    def isDisplayCard(self,_param_name:str = 'isDisplayCard'):
        inst = None
        self._add_to_query("isDisplayCard",_param_name)
        pass


class NBACollectionSlot(GraphQLObject):
    value_requiredPlayer:'NBAPlayer' = None
    value_collectionCard:'NBACollectionCard' = None
    value_displayCard:'NBACard' = None
    value_ownedCards:'list[NBACard]' = None
    def requiredPlayer(self,_param_name:str = 'requiredPlayer') -> 'NBAPlayer':
        param_list = []
        inst = NBAPlayer(self,param_list)
        self._add_to_query("requiredPlayer",_param_name,inst)
        self.value_requiredPlayer = inst
        return inst

    def collectionCard(self,_param_name:str = 'collectionCard') -> 'NBACollectionCard':
        param_list = []
        inst = NBACollectionCard(self,param_list)
        self._add_to_query("collectionCard",_param_name,inst)
        self.value_collectionCard = inst
        return inst

    def displayCard(self,_param_name:str = 'displayCard') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("displayCard",_param_name,inst)
        self.value_displayCard = inst
        return inst

    def ownedCards(self,_param_name:str = 'ownedCards') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("ownedCards",_param_name,inst)
        self.value_ownedCards = inst
        return inst


class UserNBACollection(GraphQLObject):
    value_id = None
    value_collection:'NBACollection' = None
    value_rank = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def collection(self,_param_name:str = 'collection') -> 'NBACollection':
        param_list = []
        inst = NBACollection(self,param_list)
        self._add_to_query("collection",_param_name,inst)
        self.value_collection = inst
        return inst

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass


class NBACollectionConnection(GraphQLObject):
    value_nodes:'list[UserNBACollection]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'UserNBACollection':
        param_list = []
        inst = UserNBACollection(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class NBACollection(GraphQLObject):
    value_slug = None
    value_isComplete = None
    value_slots:'list[NBACollectionSlot]' = None
    value_slotsCount = None
    value_filledSlots = None
    value_collectionScore = None
    value_collectionBonus = None
    value_liveRank = None
    value_scoreRankingSize = None
    value_team:'NBATeam' = None
    value_season = None
    value_rarity = None
    value_user:'User' = None
    value_bestByScore:'NBACollectionConnection' = None
    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def isComplete(self,_param_name:str = 'isComplete'):
        inst = None
        self._add_to_query("isComplete",_param_name)
        pass

    def slots(self,_param_name:str = 'slots') -> 'NBACollectionSlot':
        param_list = []
        inst = NBACollectionSlot(self,param_list)
        self._add_to_query("slots",_param_name,inst)
        self.value_slots = inst
        return inst

    def slotsCount(self,_param_name:str = 'slotsCount'):
        inst = None
        self._add_to_query("slotsCount",_param_name)
        pass

    def filledSlots(self,_param_name:str = 'filledSlots'):
        inst = None
        self._add_to_query("filledSlots",_param_name)
        pass

    def collectionScore(self,_param_name:str = 'collectionScore'):
        inst = None
        self._add_to_query("collectionScore",_param_name)
        pass

    def collectionBonus(self,_param_name:str = 'collectionBonus'):
        inst = None
        self._add_to_query("collectionBonus",_param_name)
        pass

    def liveRank(self,_param_name:str = 'liveRank'):
        inst = None
        self._add_to_query("liveRank",_param_name)
        pass

    def scoreRankingSize(self,_param_name:str = 'scoreRankingSize'):
        inst = None
        self._add_to_query("scoreRankingSize",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'NBATeam':
        param_list = []
        inst = NBATeam(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def season(self,_param_name:str = 'season'):
        inst = None
        self._add_to_query("season",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def bestByScore(self,first,after,_param_name:str = 'bestByScore') -> 'NBACollectionConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        inst = NBACollectionConnection(self,param_list)
        self._add_to_query("bestByScore",_param_name,inst)
        self.value_bestByScore = inst
        return inst


class CardCountsByRarity(GraphQLObject):
    value_uniqueCount = None
    value_superRareCount = None
    value_rareCount = None
    value_limitedCount = None
    value_commonCount = None
    def uniqueCount(self,_param_name:str = 'uniqueCount'):
        inst = None
        self._add_to_query("uniqueCount",_param_name)
        pass

    def superRareCount(self,_param_name:str = 'superRareCount'):
        inst = None
        self._add_to_query("superRareCount",_param_name)
        pass

    def rareCount(self,_param_name:str = 'rareCount'):
        inst = None
        self._add_to_query("rareCount",_param_name)
        pass

    def limitedCount(self,_param_name:str = 'limitedCount'):
        inst = None
        self._add_to_query("limitedCount",_param_name)
        pass

    def commonCount(self,_param_name:str = 'commonCount'):
        inst = None
        self._add_to_query("commonCount",_param_name)
        pass


class BaseballTeam(GraphQLObject):
    value_id = None
    value_name = None
    value_market = None
    value_fullName = None
    value_slug = None
    value_abbreviation = None
    value_svgUrl = None
    value_darkThemeSvgUrl = None
    value_monochromeSvgUrl = None
    value_teamStyleGuidePrimaryColor = None
    value_teamStyleGuideSecondaryColor = None
    value_players:'list[BaseballPlayer]' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def market(self,_param_name:str = 'market'):
        inst = None
        self._add_to_query("market",_param_name)
        pass

    def fullName(self,_param_name:str = 'fullName'):
        inst = None
        self._add_to_query("fullName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def abbreviation(self,_param_name:str = 'abbreviation'):
        inst = None
        self._add_to_query("abbreviation",_param_name)
        pass

    def svgUrl(self,_param_name:str = 'svgUrl'):
        inst = None
        self._add_to_query("svgUrl",_param_name)
        pass

    def darkThemeSvgUrl(self,_param_name:str = 'darkThemeSvgUrl'):
        inst = None
        self._add_to_query("darkThemeSvgUrl",_param_name)
        pass

    def monochromeSvgUrl(self,_param_name:str = 'monochromeSvgUrl'):
        inst = None
        self._add_to_query("monochromeSvgUrl",_param_name)
        pass

    def teamStyleGuidePrimaryColor(self,_param_name:str = 'teamStyleGuidePrimaryColor'):
        inst = None
        self._add_to_query("teamStyleGuidePrimaryColor",_param_name)
        pass

    def teamStyleGuideSecondaryColor(self,_param_name:str = 'teamStyleGuideSecondaryColor'):
        inst = None
        self._add_to_query("teamStyleGuideSecondaryColor",_param_name)
        pass

    def players(self,_param_name:str = 'players') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("players",_param_name,inst)
        self.value_players = inst
        return inst


class BaseballInning(GraphQLObject):
    value_half = None
    value_number = None
    def half(self,_param_name:str = 'half'):
        inst = None
        self._add_to_query("half",_param_name)
        pass

    def number(self,_param_name:str = 'number'):
        inst = None
        self._add_to_query("number",_param_name)
        pass


class BaseballScore(GraphQLObject):
    value_pitching = None
    value_batting = None
    def pitching(self,_param_name:str = 'pitching'):
        inst = None
        self._add_to_query("pitching",_param_name)
        pass

    def batting(self,_param_name:str = 'batting'):
        inst = None
        self._add_to_query("batting",_param_name)
        pass


class BaseballPlayerGamePitchingStats(GraphQLObject):
    value_outs = None
    value_strikeouts = None
    value_hitsAllowed = None
    value_earnedRuns = None
    value_walks = None
    value_hitBatsmen = None
    value_win = None
    value_loss = None
    value_save = None
    value_hold = None
    value_reliefAppearance = None
    def outs(self,_param_name:str = 'outs'):
        inst = None
        self._add_to_query("outs",_param_name)
        pass

    def strikeouts(self,_param_name:str = 'strikeouts'):
        inst = None
        self._add_to_query("strikeouts",_param_name)
        pass

    def hitsAllowed(self,_param_name:str = 'hitsAllowed'):
        inst = None
        self._add_to_query("hitsAllowed",_param_name)
        pass

    def earnedRuns(self,_param_name:str = 'earnedRuns'):
        inst = None
        self._add_to_query("earnedRuns",_param_name)
        pass

    def walks(self,_param_name:str = 'walks'):
        inst = None
        self._add_to_query("walks",_param_name)
        pass

    def hitBatsmen(self,_param_name:str = 'hitBatsmen'):
        inst = None
        self._add_to_query("hitBatsmen",_param_name)
        pass

    def win(self,_param_name:str = 'win'):
        inst = None
        self._add_to_query("win",_param_name)
        pass

    def loss(self,_param_name:str = 'loss'):
        inst = None
        self._add_to_query("loss",_param_name)
        pass

    def save(self,_param_name:str = 'save'):
        inst = None
        self._add_to_query("save",_param_name)
        pass

    def hold(self,_param_name:str = 'hold'):
        inst = None
        self._add_to_query("hold",_param_name)
        pass

    def reliefAppearance(self,_param_name:str = 'reliefAppearance'):
        inst = None
        self._add_to_query("reliefAppearance",_param_name)
        pass


class BaseballPlayerGameBattingStats(GraphQLObject):
    value_runs = None
    value_rbi = None
    value_singles = None
    value_doubles = None
    value_triples = None
    value_homeRuns = None
    value_walks = None
    value_strikeouts = None
    value_stolenBases = None
    value_hitByPitch = None
    value_stealsCaught = None
    def runs(self,_param_name:str = 'runs'):
        inst = None
        self._add_to_query("runs",_param_name)
        pass

    def rbi(self,_param_name:str = 'rbi'):
        inst = None
        self._add_to_query("rbi",_param_name)
        pass

    def singles(self,_param_name:str = 'singles'):
        inst = None
        self._add_to_query("singles",_param_name)
        pass

    def doubles(self,_param_name:str = 'doubles'):
        inst = None
        self._add_to_query("doubles",_param_name)
        pass

    def triples(self,_param_name:str = 'triples'):
        inst = None
        self._add_to_query("triples",_param_name)
        pass

    def homeRuns(self,_param_name:str = 'homeRuns'):
        inst = None
        self._add_to_query("homeRuns",_param_name)
        pass

    def walks(self,_param_name:str = 'walks'):
        inst = None
        self._add_to_query("walks",_param_name)
        pass

    def strikeouts(self,_param_name:str = 'strikeouts'):
        inst = None
        self._add_to_query("strikeouts",_param_name)
        pass

    def stolenBases(self,_param_name:str = 'stolenBases'):
        inst = None
        self._add_to_query("stolenBases",_param_name)
        pass

    def hitByPitch(self,_param_name:str = 'hitByPitch'):
        inst = None
        self._add_to_query("hitByPitch",_param_name)
        pass

    def stealsCaught(self,_param_name:str = 'stealsCaught'):
        inst = None
        self._add_to_query("stealsCaught",_param_name)
        pass


class BaseballPlayerGameDetailedPitchingScores(GraphQLObject):
    value_outs = None
    value_strikeouts = None
    value_hitsAllowed = None
    value_earnedRuns = None
    value_walks = None
    value_hitBatsmen = None
    value_win = None
    value_loss = None
    value_save = None
    value_hold = None
    value_reliefAppearance = None
    def outs(self,_param_name:str = 'outs'):
        inst = None
        self._add_to_query("outs",_param_name)
        pass

    def strikeouts(self,_param_name:str = 'strikeouts'):
        inst = None
        self._add_to_query("strikeouts",_param_name)
        pass

    def hitsAllowed(self,_param_name:str = 'hitsAllowed'):
        inst = None
        self._add_to_query("hitsAllowed",_param_name)
        pass

    def earnedRuns(self,_param_name:str = 'earnedRuns'):
        inst = None
        self._add_to_query("earnedRuns",_param_name)
        pass

    def walks(self,_param_name:str = 'walks'):
        inst = None
        self._add_to_query("walks",_param_name)
        pass

    def hitBatsmen(self,_param_name:str = 'hitBatsmen'):
        inst = None
        self._add_to_query("hitBatsmen",_param_name)
        pass

    def win(self,_param_name:str = 'win'):
        inst = None
        self._add_to_query("win",_param_name)
        pass

    def loss(self,_param_name:str = 'loss'):
        inst = None
        self._add_to_query("loss",_param_name)
        pass

    def save(self,_param_name:str = 'save'):
        inst = None
        self._add_to_query("save",_param_name)
        pass

    def hold(self,_param_name:str = 'hold'):
        inst = None
        self._add_to_query("hold",_param_name)
        pass

    def reliefAppearance(self,_param_name:str = 'reliefAppearance'):
        inst = None
        self._add_to_query("reliefAppearance",_param_name)
        pass


class BaseballPlayerGameDetailedBattingScores(GraphQLObject):
    value_runs = None
    value_rbi = None
    value_singles = None
    value_doubles = None
    value_triples = None
    value_homeRuns = None
    value_walks = None
    value_strikeouts = None
    value_stolenBases = None
    value_hitByPitch = None
    value_stealsCaught = None
    def runs(self,_param_name:str = 'runs'):
        inst = None
        self._add_to_query("runs",_param_name)
        pass

    def rbi(self,_param_name:str = 'rbi'):
        inst = None
        self._add_to_query("rbi",_param_name)
        pass

    def singles(self,_param_name:str = 'singles'):
        inst = None
        self._add_to_query("singles",_param_name)
        pass

    def doubles(self,_param_name:str = 'doubles'):
        inst = None
        self._add_to_query("doubles",_param_name)
        pass

    def triples(self,_param_name:str = 'triples'):
        inst = None
        self._add_to_query("triples",_param_name)
        pass

    def homeRuns(self,_param_name:str = 'homeRuns'):
        inst = None
        self._add_to_query("homeRuns",_param_name)
        pass

    def walks(self,_param_name:str = 'walks'):
        inst = None
        self._add_to_query("walks",_param_name)
        pass

    def strikeouts(self,_param_name:str = 'strikeouts'):
        inst = None
        self._add_to_query("strikeouts",_param_name)
        pass

    def stolenBases(self,_param_name:str = 'stolenBases'):
        inst = None
        self._add_to_query("stolenBases",_param_name)
        pass

    def hitByPitch(self,_param_name:str = 'hitByPitch'):
        inst = None
        self._add_to_query("hitByPitch",_param_name)
        pass

    def stealsCaught(self,_param_name:str = 'stealsCaught'):
        inst = None
        self._add_to_query("stealsCaught",_param_name)
        pass


class BaseballPlayerGameStats(GraphQLObject):
    value_score:'BaseballScore' = None
    value_playedInGame = None
    value_pitching:'BaseballPlayerGamePitchingStats' = None
    value_batting:'BaseballPlayerGameBattingStats' = None
    value_detailedPitchingScores:'BaseballPlayerGameDetailedPitchingScores' = None
    value_detailedBattingScores:'BaseballPlayerGameDetailedBattingScores' = None
    value_game:'BaseballGame' = None
    value_team:'BaseballTeam' = None
    value_againstTeam:'BaseballTeam' = None
    def score(self,_param_name:str = 'score') -> 'BaseballScore':
        param_list = []
        inst = BaseballScore(self,param_list)
        self._add_to_query("score",_param_name,inst)
        self.value_score = inst
        return inst

    def playedInGame(self,_param_name:str = 'playedInGame'):
        inst = None
        self._add_to_query("playedInGame",_param_name)
        pass

    def pitching(self,_param_name:str = 'pitching') -> 'BaseballPlayerGamePitchingStats':
        param_list = []
        inst = BaseballPlayerGamePitchingStats(self,param_list)
        self._add_to_query("pitching",_param_name,inst)
        self.value_pitching = inst
        return inst

    def batting(self,_param_name:str = 'batting') -> 'BaseballPlayerGameBattingStats':
        param_list = []
        inst = BaseballPlayerGameBattingStats(self,param_list)
        self._add_to_query("batting",_param_name,inst)
        self.value_batting = inst
        return inst

    def detailedPitchingScores(self,_param_name:str = 'detailedPitchingScores') -> 'BaseballPlayerGameDetailedPitchingScores':
        param_list = []
        inst = BaseballPlayerGameDetailedPitchingScores(self,param_list)
        self._add_to_query("detailedPitchingScores",_param_name,inst)
        self.value_detailedPitchingScores = inst
        return inst

    def detailedBattingScores(self,_param_name:str = 'detailedBattingScores') -> 'BaseballPlayerGameDetailedBattingScores':
        param_list = []
        inst = BaseballPlayerGameDetailedBattingScores(self,param_list)
        self._add_to_query("detailedBattingScores",_param_name,inst)
        self.value_detailedBattingScores = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'BaseballGame':
        param_list = []
        inst = BaseballGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def team(self,_param_name:str = 'team') -> 'BaseballTeam':
        param_list = []
        inst = BaseballTeam(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def againstTeam(self,_param_name:str = 'againstTeam') -> 'BaseballTeam':
        param_list = []
        inst = BaseballTeam(self,param_list)
        self._add_to_query("againstTeam",_param_name,inst)
        self.value_againstTeam = inst
        return inst


class BaseballGame(GraphQLObject):
    value_sportradarId = None
    value_id = None
    value_status = None
    value_startDate = None
    value_homeTeam:'BaseballTeam' = None
    value_awayTeam:'BaseballTeam' = None
    value_homeScore = None
    value_awayScore = None
    value_inning:'BaseballInning' = None
    value_homeProbableStartingPitcher:'BaseballPlayer' = None
    value_awayProbableStartingPitcher:'BaseballPlayer' = None
    value_homeStartingPitcher:'BaseballPlayer' = None
    value_awayStartingPitcher:'BaseballPlayer' = None
    value_pastPlayerPerformance:'list[BaseballPlayerGameStats]' = None
    value_gameWeek = None
    def sportradarId(self,_param_name:str = 'sportradarId'):
        inst = None
        self._add_to_query("sportradarId",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def homeTeam(self,_param_name:str = 'homeTeam') -> 'BaseballTeam':
        param_list = []
        inst = BaseballTeam(self,param_list)
        self._add_to_query("homeTeam",_param_name,inst)
        self.value_homeTeam = inst
        return inst

    def awayTeam(self,_param_name:str = 'awayTeam') -> 'BaseballTeam':
        param_list = []
        inst = BaseballTeam(self,param_list)
        self._add_to_query("awayTeam",_param_name,inst)
        self.value_awayTeam = inst
        return inst

    def homeScore(self,_param_name:str = 'homeScore'):
        inst = None
        self._add_to_query("homeScore",_param_name)
        pass

    def awayScore(self,_param_name:str = 'awayScore'):
        inst = None
        self._add_to_query("awayScore",_param_name)
        pass

    def inning(self,_param_name:str = 'inning') -> 'BaseballInning':
        param_list = []
        inst = BaseballInning(self,param_list)
        self._add_to_query("inning",_param_name,inst)
        self.value_inning = inst
        return inst

    def homeProbableStartingPitcher(self,_param_name:str = 'homeProbableStartingPitcher') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("homeProbableStartingPitcher",_param_name,inst)
        self.value_homeProbableStartingPitcher = inst
        return inst

    def awayProbableStartingPitcher(self,_param_name:str = 'awayProbableStartingPitcher') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("awayProbableStartingPitcher",_param_name,inst)
        self.value_awayProbableStartingPitcher = inst
        return inst

    def homeStartingPitcher(self,_param_name:str = 'homeStartingPitcher') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("homeStartingPitcher",_param_name,inst)
        self.value_homeStartingPitcher = inst
        return inst

    def awayStartingPitcher(self,_param_name:str = 'awayStartingPitcher') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("awayStartingPitcher",_param_name,inst)
        self.value_awayStartingPitcher = inst
        return inst

    def pastPlayerPerformance(self,playerSlug,last,_param_name:str = 'pastPlayerPerformance') -> 'BaseballPlayerGameStats':
        param_list = []
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("last",last))
        inst = BaseballPlayerGameStats(self,param_list)
        self._add_to_query("pastPlayerPerformance",_param_name,inst)
        self.value_pastPlayerPerformance = inst
        return inst

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass


class Inning(GraphQLObject):
    value_half = None
    value_number = None
    def half(self,_param_name:str = 'half'):
        inst = None
        self._add_to_query("half",_param_name)
        pass

    def number(self,_param_name:str = 'number'):
        inst = None
        self._add_to_query("number",_param_name)
        pass


class GameOfBaseball(GraphQLObject):
    value_anyPlayers:'list[AnyPlayerInterface]' = None
    value_awayScore = None
    value_awayTeam:'TeamInterface' = None
    value_baseballGame:'BaseballGame' = None
    value_competition:'Competition' = None
    value_date = None
    value_hitterPlayerGameScore:'BaseballPlayerGameScore' = None
    value_homeScore = None
    value_homeTeam:'TeamInterface' = None
    value_id = None
    value_inning:'Inning' = None
    value_lowCoverage = None
    value_mySo5Appearances:'list[So5Appearance]' = None
    value_mySo5Lineups:'list[So5Lineup]' = None
    value_pitcherPlayerGameScore:'BaseballPlayerGameScore' = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_probablePitchers:'list[BaseballPlayer]' = None
    value_scored = None
    value_so5Fixture:'So5Fixture' = None
    value_statusTyped = None
    value_venue = None
    value_winner:'TeamInterface' = None
    def anyPlayers(self,_param_name:str = 'anyPlayers') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayers",_param_name,inst)
        self.value_anyPlayers = inst
        return inst

    def awayScore(self,_param_name:str = 'awayScore'):
        inst = None
        self._add_to_query("awayScore",_param_name)
        pass

    def awayTeam(self,_param_name:str = 'awayTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("awayTeam",_param_name,inst)
        self.value_awayTeam = inst
        return inst

    def baseballGame(self,_param_name:str = 'baseballGame') -> 'BaseballGame':
        param_list = []
        inst = BaseballGame(self,param_list)
        self._add_to_query("baseballGame",_param_name,inst)
        self.value_baseballGame = inst
        return inst

    def competition(self,_param_name:str = 'competition') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competition",_param_name,inst)
        self.value_competition = inst
        return inst

    def date(self,_param_name:str = 'date'):
        inst = None
        self._add_to_query("date",_param_name)
        pass

    def hitterPlayerGameScore(self,playerSlug,_param_name:str = 'hitterPlayerGameScore') -> 'BaseballPlayerGameScore':
        param_list = []
        param_list.append(("playerSlug",playerSlug))
        inst = BaseballPlayerGameScore(self,param_list)
        self._add_to_query("hitterPlayerGameScore",_param_name,inst)
        self.value_hitterPlayerGameScore = inst
        return inst

    def homeScore(self,_param_name:str = 'homeScore'):
        inst = None
        self._add_to_query("homeScore",_param_name)
        pass

    def homeTeam(self,_param_name:str = 'homeTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("homeTeam",_param_name,inst)
        self.value_homeTeam = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def inning(self,_param_name:str = 'inning') -> 'Inning':
        param_list = []
        inst = Inning(self,param_list)
        self._add_to_query("inning",_param_name,inst)
        self.value_inning = inst
        return inst

    def lowCoverage(self,_param_name:str = 'lowCoverage'):
        inst = None
        self._add_to_query("lowCoverage",_param_name)
        pass

    def mySo5Appearances(self,_param_name:str = 'mySo5Appearances') -> 'So5Appearance':
        param_list = []
        inst = So5Appearance(self,param_list)
        self._add_to_query("mySo5Appearances",_param_name,inst)
        self.value_mySo5Appearances = inst
        return inst

    def mySo5Lineups(self,_param_name:str = 'mySo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("mySo5Lineups",_param_name,inst)
        self.value_mySo5Lineups = inst
        return inst

    def pitcherPlayerGameScore(self,playerSlug,_param_name:str = 'pitcherPlayerGameScore') -> 'BaseballPlayerGameScore':
        param_list = []
        param_list.append(("playerSlug",playerSlug))
        inst = BaseballPlayerGameScore(self,param_list)
        self._add_to_query("pitcherPlayerGameScore",_param_name,inst)
        self.value_pitcherPlayerGameScore = inst
        return inst

    def playerGameScore(self,playerSlug,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def probablePitchers(self,_param_name:str = 'probablePitchers') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("probablePitchers",_param_name,inst)
        self.value_probablePitchers = inst
        return inst

    def scored(self,_param_name:str = 'scored'):
        inst = None
        self._add_to_query("scored",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def statusTyped(self,_param_name:str = 'statusTyped'):
        inst = None
        self._add_to_query("statusTyped",_param_name)
        pass

    def venue(self,_param_name:str = 'venue'):
        inst = None
        self._add_to_query("venue",_param_name)
        pass

    def winner(self,_param_name:str = 'winner') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("winner",_param_name,inst)
        self.value_winner = inst
        return inst


class PlayerGameStatsBaseball(GraphQLObject):
    value_anyGame:'AnyGameInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyTeam:'TeamInterface' = None
    value_baseballGame:'GameOfBaseball' = None
    value_baseballPlayer:'BaseballPlayer' = None
    value_baseballPlayerGameScore:'BaseballPlayerGameScore' = None
    value_hittingAtBase = None
    value_hittingAtPlate = None
    value_hittingCaughtStealing = None
    value_hittingDoubles = None
    value_hittingHitByPitch = None
    value_hittingHomeRuns = None
    value_hittingRuns = None
    value_hittingRunsBattedIn = None
    value_hittingSingles = None
    value_hittingStolenBases = None
    value_hittingStrikeouts = None
    value_hittingTriples = None
    value_hittingWalks = None
    value_id = None
    value_live = None
    value_onGameSheet = None
    value_pitchingEarnedRuns = None
    value_pitchingHitBatsmen = None
    value_pitchingHitsAllowed = None
    value_pitchingHolds = None
    value_pitchingInningsPitched = None
    value_pitchingPitchCount = None
    value_pitchingReliefAppearance = None
    value_pitchingSaves = None
    value_pitchingStrikeouts = None
    value_pitchingWalks = None
    value_pitchingWins = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_probablePitcher = None
    value_reviewed = None
    def anyGame(self,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyTeam(self,_param_name:str = 'anyTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("anyTeam",_param_name,inst)
        self.value_anyTeam = inst
        return inst

    def baseballGame(self,_param_name:str = 'baseballGame') -> 'GameOfBaseball':
        param_list = []
        inst = GameOfBaseball(self,param_list)
        self._add_to_query("baseballGame",_param_name,inst)
        self.value_baseballGame = inst
        return inst

    def baseballPlayer(self,_param_name:str = 'baseballPlayer') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("baseballPlayer",_param_name,inst)
        self.value_baseballPlayer = inst
        return inst

    def baseballPlayerGameScore(self,position,_param_name:str = 'baseballPlayerGameScore') -> 'BaseballPlayerGameScore':
        param_list = []
        param_list.append(("position",position))
        inst = BaseballPlayerGameScore(self,param_list)
        self._add_to_query("baseballPlayerGameScore",_param_name,inst)
        self.value_baseballPlayerGameScore = inst
        return inst

    def hittingAtBase(self,_param_name:str = 'hittingAtBase'):
        inst = None
        self._add_to_query("hittingAtBase",_param_name)
        pass

    def hittingAtPlate(self,_param_name:str = 'hittingAtPlate'):
        inst = None
        self._add_to_query("hittingAtPlate",_param_name)
        pass

    def hittingCaughtStealing(self,_param_name:str = 'hittingCaughtStealing'):
        inst = None
        self._add_to_query("hittingCaughtStealing",_param_name)
        pass

    def hittingDoubles(self,_param_name:str = 'hittingDoubles'):
        inst = None
        self._add_to_query("hittingDoubles",_param_name)
        pass

    def hittingHitByPitch(self,_param_name:str = 'hittingHitByPitch'):
        inst = None
        self._add_to_query("hittingHitByPitch",_param_name)
        pass

    def hittingHomeRuns(self,_param_name:str = 'hittingHomeRuns'):
        inst = None
        self._add_to_query("hittingHomeRuns",_param_name)
        pass

    def hittingRuns(self,_param_name:str = 'hittingRuns'):
        inst = None
        self._add_to_query("hittingRuns",_param_name)
        pass

    def hittingRunsBattedIn(self,_param_name:str = 'hittingRunsBattedIn'):
        inst = None
        self._add_to_query("hittingRunsBattedIn",_param_name)
        pass

    def hittingSingles(self,_param_name:str = 'hittingSingles'):
        inst = None
        self._add_to_query("hittingSingles",_param_name)
        pass

    def hittingStolenBases(self,_param_name:str = 'hittingStolenBases'):
        inst = None
        self._add_to_query("hittingStolenBases",_param_name)
        pass

    def hittingStrikeouts(self,_param_name:str = 'hittingStrikeouts'):
        inst = None
        self._add_to_query("hittingStrikeouts",_param_name)
        pass

    def hittingTriples(self,_param_name:str = 'hittingTriples'):
        inst = None
        self._add_to_query("hittingTriples",_param_name)
        pass

    def hittingWalks(self,_param_name:str = 'hittingWalks'):
        inst = None
        self._add_to_query("hittingWalks",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def live(self,_param_name:str = 'live'):
        inst = None
        self._add_to_query("live",_param_name)
        pass

    def onGameSheet(self,_param_name:str = 'onGameSheet'):
        inst = None
        self._add_to_query("onGameSheet",_param_name)
        pass

    def pitchingEarnedRuns(self,_param_name:str = 'pitchingEarnedRuns'):
        inst = None
        self._add_to_query("pitchingEarnedRuns",_param_name)
        pass

    def pitchingHitBatsmen(self,_param_name:str = 'pitchingHitBatsmen'):
        inst = None
        self._add_to_query("pitchingHitBatsmen",_param_name)
        pass

    def pitchingHitsAllowed(self,_param_name:str = 'pitchingHitsAllowed'):
        inst = None
        self._add_to_query("pitchingHitsAllowed",_param_name)
        pass

    def pitchingHolds(self,_param_name:str = 'pitchingHolds'):
        inst = None
        self._add_to_query("pitchingHolds",_param_name)
        pass

    def pitchingInningsPitched(self,_param_name:str = 'pitchingInningsPitched'):
        inst = None
        self._add_to_query("pitchingInningsPitched",_param_name)
        pass

    def pitchingPitchCount(self,_param_name:str = 'pitchingPitchCount'):
        inst = None
        self._add_to_query("pitchingPitchCount",_param_name)
        pass

    def pitchingReliefAppearance(self,_param_name:str = 'pitchingReliefAppearance'):
        inst = None
        self._add_to_query("pitchingReliefAppearance",_param_name)
        pass

    def pitchingSaves(self,_param_name:str = 'pitchingSaves'):
        inst = None
        self._add_to_query("pitchingSaves",_param_name)
        pass

    def pitchingStrikeouts(self,_param_name:str = 'pitchingStrikeouts'):
        inst = None
        self._add_to_query("pitchingStrikeouts",_param_name)
        pass

    def pitchingWalks(self,_param_name:str = 'pitchingWalks'):
        inst = None
        self._add_to_query("pitchingWalks",_param_name)
        pass

    def pitchingWins(self,_param_name:str = 'pitchingWins'):
        inst = None
        self._add_to_query("pitchingWins",_param_name)
        pass

    def playerGameScore(self,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def probablePitcher(self,_param_name:str = 'probablePitcher'):
        inst = None
        self._add_to_query("probablePitcher",_param_name)
        pass

    def reviewed(self,_param_name:str = 'reviewed'):
        inst = None
        self._add_to_query("reviewed",_param_name)
        pass


class BaseballPlayerGameScore(GraphQLObject):
    value_anyGame:'AnyGameInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPlayerGameStats:'AnyPlayerGameStatsInterface' = None
    value_baseballGame:'GameOfBaseball' = None
    value_baseballPlayer:'BaseballPlayer' = None
    value_baseballPlayerGameStats:'PlayerGameStatsBaseball' = None
    value_detailedScore:'list[StatScore]' = None
    value_id = None
    value_position = None
    value_positionTyped = None
    value_score = None
    value_scoreStatus = None
    value_scoringVersion = None
    def anyGame(self,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPlayerGameStats(self,_param_name:str = 'anyPlayerGameStats') -> 'AnyPlayerGameStatsInterface':
        param_list = []
        inst = AnyPlayerGameStatsInterface(self,param_list)
        self._add_to_query("anyPlayerGameStats",_param_name,inst)
        self.value_anyPlayerGameStats = inst
        return inst

    def baseballGame(self,_param_name:str = 'baseballGame') -> 'GameOfBaseball':
        param_list = []
        inst = GameOfBaseball(self,param_list)
        self._add_to_query("baseballGame",_param_name,inst)
        self.value_baseballGame = inst
        return inst

    def baseballPlayer(self,_param_name:str = 'baseballPlayer') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("baseballPlayer",_param_name,inst)
        self.value_baseballPlayer = inst
        return inst

    def baseballPlayerGameStats(self,_param_name:str = 'baseballPlayerGameStats') -> 'PlayerGameStatsBaseball':
        param_list = []
        inst = PlayerGameStatsBaseball(self,param_list)
        self._add_to_query("baseballPlayerGameStats",_param_name,inst)
        self.value_baseballPlayerGameStats = inst
        return inst

    def detailedScore(self,_param_name:str = 'detailedScore') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("detailedScore",_param_name,inst)
        self.value_detailedScore = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positionTyped(self,_param_name:str = 'positionTyped'):
        inst = None
        self._add_to_query("positionTyped",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def scoreStatus(self,_param_name:str = 'scoreStatus'):
        inst = None
        self._add_to_query("scoreStatus",_param_name)
        pass

    def scoringVersion(self,_param_name:str = 'scoringVersion'):
        inst = None
        self._add_to_query("scoringVersion",_param_name)
        pass


class BaseballCard(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPositions = None
    value_anyTeam:'TeamInterface' = None
    value_assetId = None
    value_averageScore = None
    value_backPictureUrl = None
    value_baseballPlayer:'BaseballPlayer' = None
    value_blueprint:'Blueprint' = None
    value_cardEditionName = None
    value_cardStats:'CardStats' = None
    value_collection = None
    value_contractAddress = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_decks:'list[Deck]' = None
    value_displayRarity = None
    value_eligiblePlayerGameScores:'list[PlayerGameScoreInterface]' = None
    value_eligibleUpcomingLeagueTracks:'list[So5LeagueTrack]' = None
    value_ethereumId = None
    value_ethereumOwner:'TokenOwner' = None
    value_grade = None
    value_gradeAfterTransfer = None
    value_inSeasonEligible = None
    value_inSeasonUntil = None
    value_ipfsPictureUrl = None
    value_ipfsUrl = None
    value_latestEnglishAuction:'TokenAuction' = None
    value_latestPrimaryOffer:'TokenPrimaryOffer' = None
    value_liveSingleBuyOffers:'list[TokenOffer]' = None
    value_liveSingleSaleOffer:'TokenOffer' = None
    value_liveSo5Lineup:'So5Lineup' = None
    value_myMintedSingleSaleOffer:'TokenOffer' = None
    value_name = None
    value_openedSo5Lineup:'So5Lineup' = None
    value_openedSo5Lineups:'list[So5Lineup]' = None
    value_ownershipHistory:'list[TokenOwner]' = None
    value_pendingWithdrawal:'TokenWithdrawal' = None
    value_pictureUrl = None
    value_power = None
    value_powerBreakdown:'PowerBreakdown' = None
    value_powerMalusAfterTransfer = None
    value_priceRange:'Range' = None
    value_privateMinPrices:'MonetaryAmount' = None
    value_publicMinPrices:'MonetaryAmount' = None
    value_rarityTyped = None
    value_seasonYear = None
    value_secondaryMarketFeeEnabled = None
    value_sentInLiveOffers:'list[TokenOffer]' = None
    value_serialNumber = None
    value_singleCivilYear = None
    value_slug = None
    value_sport = None
    value_subscriptionsCount = None
    value_supply = None
    value_threeDimensional = None
    value_threeDimensionalAsset:'ThreeDimensionalAsset' = None
    value_token:'Token' = None
    value_tokenOwner:'TokenOwner' = None
    value_tradeableStatus = None
    value_user:'User' = None
    value_videoUrl = None
    value_walletStatus = None
    value_xp = None
    value_xpAfterTransfer = None
    value_xpNeededForCurrentGrade = None
    value_xpNeededForNextGrade = None
    value_id = None
    value_owner:'User' = None
    value_player:'BaseballPlayer' = None
    value_team:'BaseballTeam' = None
    value_rarity = None
    value_season = None
    value_positions = None
    value_fullImageUrl = None
    value_avatarImageUrl = None
    value_backImageUrl = None
    value_cardLevel = None
    value_xpThresholdForCurrentCardLevel = None
    value_xpThresholdForNextCardLevel = None
    value_seasonBonus = None
    value_rarityBonus = None
    value_xpBonus = None
    value_collectionBonus = None
    value_totalBonus = None
    value_bonusLossAfterTransfer = None
    value_liveLineup:'BaseballLineup' = None
    value_openedLineups:'list[BaseballLineup]' = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPositions(self,_param_name:str = 'anyPositions'):
        inst = None
        self._add_to_query("anyPositions",_param_name)
        pass

    def anyTeam(self,_param_name:str = 'anyTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("anyTeam",_param_name,inst)
        self.value_anyTeam = inst
        return inst

    def assetId(self,_param_name:str = 'assetId'):
        inst = None
        self._add_to_query("assetId",_param_name)
        pass

    def averageScore(self,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def backPictureUrl(self,_param_name:str = 'backPictureUrl'):
        inst = None
        self._add_to_query("backPictureUrl",_param_name)
        pass

    def baseballPlayer(self,_param_name:str = 'baseballPlayer') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("baseballPlayer",_param_name,inst)
        self.value_baseballPlayer = inst
        return inst

    def blueprint(self,_param_name:str = 'blueprint') -> 'Blueprint':
        param_list = []
        inst = Blueprint(self,param_list)
        self._add_to_query("blueprint",_param_name,inst)
        self.value_blueprint = inst
        return inst

    def cardEditionName(self,_param_name:str = 'cardEditionName'):
        inst = None
        self._add_to_query("cardEditionName",_param_name)
        pass

    def cardStats(self,_param_name:str = 'cardStats') -> 'CardStats':
        param_list = []
        inst = CardStats(self,param_list)
        self._add_to_query("cardStats",_param_name,inst)
        self.value_cardStats = inst
        return inst

    def collection(self,_param_name:str = 'collection'):
        inst = None
        self._add_to_query("collection",_param_name)
        pass

    def contractAddress(self,_param_name:str = 'contractAddress'):
        inst = None
        self._add_to_query("contractAddress",_param_name)
        pass

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def decks(self,_param_name:str = 'decks') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def displayRarity(self,_param_name:str = 'displayRarity'):
        inst = None
        self._add_to_query("displayRarity",_param_name)
        pass

    def eligiblePlayerGameScores(self,so5LeaderboardSlug,_param_name:str = 'eligiblePlayerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("eligiblePlayerGameScores",_param_name,inst)
        self.value_eligiblePlayerGameScores = inst
        return inst

    def eligibleUpcomingLeagueTracks(self,_param_name:str = 'eligibleUpcomingLeagueTracks') -> 'So5LeagueTrack':
        param_list = []
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("eligibleUpcomingLeagueTracks",_param_name,inst)
        self.value_eligibleUpcomingLeagueTracks = inst
        return inst

    def ethereumId(self,_param_name:str = 'ethereumId'):
        inst = None
        self._add_to_query("ethereumId",_param_name)
        pass

    def ethereumOwner(self,_param_name:str = 'ethereumOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ethereumOwner",_param_name,inst)
        self.value_ethereumOwner = inst
        return inst

    def grade(self,_param_name:str = 'grade'):
        inst = None
        self._add_to_query("grade",_param_name)
        pass

    def gradeAfterTransfer(self,_param_name:str = 'gradeAfterTransfer'):
        inst = None
        self._add_to_query("gradeAfterTransfer",_param_name)
        pass

    def inSeasonEligible(self,_param_name:str = 'inSeasonEligible'):
        inst = None
        self._add_to_query("inSeasonEligible",_param_name)
        pass

    def inSeasonUntil(self,_param_name:str = 'inSeasonUntil'):
        inst = None
        self._add_to_query("inSeasonUntil",_param_name)
        pass

    def ipfsPictureUrl(self,_param_name:str = 'ipfsPictureUrl'):
        inst = None
        self._add_to_query("ipfsPictureUrl",_param_name)
        pass

    def ipfsUrl(self,_param_name:str = 'ipfsUrl'):
        inst = None
        self._add_to_query("ipfsUrl",_param_name)
        pass

    def latestEnglishAuction(self,_param_name:str = 'latestEnglishAuction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("latestEnglishAuction",_param_name,inst)
        self.value_latestEnglishAuction = inst
        return inst

    def latestPrimaryOffer(self,_param_name:str = 'latestPrimaryOffer') -> 'TokenPrimaryOffer':
        param_list = []
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("latestPrimaryOffer",_param_name,inst)
        self.value_latestPrimaryOffer = inst
        return inst

    def liveSingleBuyOffers(self,_param_name:str = 'liveSingleBuyOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleBuyOffers",_param_name,inst)
        self.value_liveSingleBuyOffers = inst
        return inst

    def liveSingleSaleOffer(self,_param_name:str = 'liveSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleSaleOffer",_param_name,inst)
        self.value_liveSingleSaleOffer = inst
        return inst

    def liveSo5Lineup(self,_param_name:str = 'liveSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("liveSo5Lineup",_param_name,inst)
        self.value_liveSo5Lineup = inst
        return inst

    def myMintedSingleSaleOffer(self,_param_name:str = 'myMintedSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("myMintedSingleSaleOffer",_param_name,inst)
        self.value_myMintedSingleSaleOffer = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def openedSo5Lineup(self,_param_name:str = 'openedSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("openedSo5Lineup",_param_name,inst)
        self.value_openedSo5Lineup = inst
        return inst

    def openedSo5Lineups(self,_param_name:str = 'openedSo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("openedSo5Lineups",_param_name,inst)
        self.value_openedSo5Lineups = inst
        return inst

    def ownershipHistory(self,_param_name:str = 'ownershipHistory') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ownershipHistory",_param_name,inst)
        self.value_ownershipHistory = inst
        return inst

    def pendingWithdrawal(self,_param_name:str = 'pendingWithdrawal') -> 'TokenWithdrawal':
        param_list = []
        inst = TokenWithdrawal(self,param_list)
        self._add_to_query("pendingWithdrawal",_param_name,inst)
        self.value_pendingWithdrawal = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def power(self,so5LeaderboardSlug,_param_name:str = 'power'):
        inst = None
        self._add_to_query("power",_param_name)
        pass

    def powerBreakdown(self,so5LeaderboardSlug,_param_name:str = 'powerBreakdown') -> 'PowerBreakdown':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PowerBreakdown(self,param_list)
        self._add_to_query("powerBreakdown",_param_name,inst)
        self.value_powerBreakdown = inst
        return inst

    def powerMalusAfterTransfer(self,_param_name:str = 'powerMalusAfterTransfer'):
        inst = None
        self._add_to_query("powerMalusAfterTransfer",_param_name)
        pass

    def priceRange(self,_param_name:str = 'priceRange') -> 'Range':
        param_list = []
        inst = Range(self,param_list)
        self._add_to_query("priceRange",_param_name,inst)
        self.value_priceRange = inst
        return inst

    def privateMinPrices(self,_param_name:str = 'privateMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("privateMinPrices",_param_name,inst)
        self.value_privateMinPrices = inst
        return inst

    def publicMinPrices(self,_param_name:str = 'publicMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("publicMinPrices",_param_name,inst)
        self.value_publicMinPrices = inst
        return inst

    def rarityTyped(self,_param_name:str = 'rarityTyped'):
        inst = None
        self._add_to_query("rarityTyped",_param_name)
        pass

    def seasonYear(self,_param_name:str = 'seasonYear'):
        inst = None
        self._add_to_query("seasonYear",_param_name)
        pass

    def secondaryMarketFeeEnabled(self,_param_name:str = 'secondaryMarketFeeEnabled'):
        inst = None
        self._add_to_query("secondaryMarketFeeEnabled",_param_name)
        pass

    def sentInLiveOffers(self,_param_name:str = 'sentInLiveOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("sentInLiveOffers",_param_name,inst)
        self.value_sentInLiveOffers = inst
        return inst

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def singleCivilYear(self,_param_name:str = 'singleCivilYear'):
        inst = None
        self._add_to_query("singleCivilYear",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def supply(self,_param_name:str = 'supply'):
        inst = None
        self._add_to_query("supply",_param_name)
        pass

    def threeDimensional(self,_param_name:str = 'threeDimensional'):
        inst = None
        self._add_to_query("threeDimensional",_param_name)
        pass

    def threeDimensionalAsset(self,_param_name:str = 'threeDimensionalAsset') -> 'ThreeDimensionalAsset':
        param_list = []
        inst = ThreeDimensionalAsset(self,param_list)
        self._add_to_query("threeDimensionalAsset",_param_name,inst)
        self.value_threeDimensionalAsset = inst
        return inst

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst

    def tokenOwner(self,_param_name:str = 'tokenOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("tokenOwner",_param_name,inst)
        self.value_tokenOwner = inst
        return inst

    def tradeableStatus(self,_param_name:str = 'tradeableStatus'):
        inst = None
        self._add_to_query("tradeableStatus",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def videoUrl(self,derivative,_param_name:str = 'videoUrl'):
        inst = None
        self._add_to_query("videoUrl",_param_name)
        pass

    def walletStatus(self,_param_name:str = 'walletStatus'):
        inst = None
        self._add_to_query("walletStatus",_param_name)
        pass

    def xp(self,_param_name:str = 'xp'):
        inst = None
        self._add_to_query("xp",_param_name)
        pass

    def xpAfterTransfer(self,_param_name:str = 'xpAfterTransfer'):
        inst = None
        self._add_to_query("xpAfterTransfer",_param_name)
        pass

    def xpNeededForCurrentGrade(self,_param_name:str = 'xpNeededForCurrentGrade'):
        inst = None
        self._add_to_query("xpNeededForCurrentGrade",_param_name)
        pass

    def xpNeededForNextGrade(self,_param_name:str = 'xpNeededForNextGrade'):
        inst = None
        self._add_to_query("xpNeededForNextGrade",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def owner(self,_param_name:str = 'owner') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("owner",_param_name,inst)
        self.value_owner = inst
        return inst

    def player(self,_param_name:str = 'player') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def team(self,_param_name:str = 'team') -> 'BaseballTeam':
        param_list = []
        inst = BaseballTeam(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def season(self,_param_name:str = 'season'):
        inst = None
        self._add_to_query("season",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def fullImageUrl(self,_param_name:str = 'fullImageUrl'):
        inst = None
        self._add_to_query("fullImageUrl",_param_name)
        pass

    def avatarImageUrl(self,_param_name:str = 'avatarImageUrl'):
        inst = None
        self._add_to_query("avatarImageUrl",_param_name)
        pass

    def backImageUrl(self,_param_name:str = 'backImageUrl'):
        inst = None
        self._add_to_query("backImageUrl",_param_name)
        pass

    def cardLevel(self,_param_name:str = 'cardLevel'):
        inst = None
        self._add_to_query("cardLevel",_param_name)
        pass

    def xpThresholdForCurrentCardLevel(self,_param_name:str = 'xpThresholdForCurrentCardLevel'):
        inst = None
        self._add_to_query("xpThresholdForCurrentCardLevel",_param_name)
        pass

    def xpThresholdForNextCardLevel(self,_param_name:str = 'xpThresholdForNextCardLevel'):
        inst = None
        self._add_to_query("xpThresholdForNextCardLevel",_param_name)
        pass

    def seasonBonus(self,_param_name:str = 'seasonBonus'):
        inst = None
        self._add_to_query("seasonBonus",_param_name)
        pass

    def rarityBonus(self,_param_name:str = 'rarityBonus'):
        inst = None
        self._add_to_query("rarityBonus",_param_name)
        pass

    def xpBonus(self,_param_name:str = 'xpBonus'):
        inst = None
        self._add_to_query("xpBonus",_param_name)
        pass

    def collectionBonus(self,_param_name:str = 'collectionBonus'):
        inst = None
        self._add_to_query("collectionBonus",_param_name)
        pass

    def totalBonus(self,_param_name:str = 'totalBonus'):
        inst = None
        self._add_to_query("totalBonus",_param_name)
        pass

    def bonusLossAfterTransfer(self,_param_name:str = 'bonusLossAfterTransfer'):
        inst = None
        self._add_to_query("bonusLossAfterTransfer",_param_name)
        pass

    def liveLineup(self,_param_name:str = 'liveLineup') -> 'BaseballLineup':
        param_list = []
        inst = BaseballLineup(self,param_list)
        self._add_to_query("liveLineup",_param_name,inst)
        self.value_liveLineup = inst
        return inst

    def openedLineups(self,_param_name:str = 'openedLineups') -> 'BaseballLineup':
        param_list = []
        inst = BaseballLineup(self,param_list)
        self._add_to_query("openedLineups",_param_name,inst)
        self.value_openedLineups = inst
        return inst


class BaseballCardInLineupGameScore(GraphQLObject):
    value_score:'BaseballScore' = None
    value_gameStats:'BaseballPlayerGameStats' = None
    value_detailedPitchingGameScore:'BaseballPlayerGameDetailedPitchingScores' = None
    value_detailedBattingGameScore:'BaseballPlayerGameDetailedBattingScores' = None
    def score(self,_param_name:str = 'score') -> 'BaseballScore':
        param_list = []
        inst = BaseballScore(self,param_list)
        self._add_to_query("score",_param_name,inst)
        self.value_score = inst
        return inst

    def gameStats(self,_param_name:str = 'gameStats') -> 'BaseballPlayerGameStats':
        param_list = []
        inst = BaseballPlayerGameStats(self,param_list)
        self._add_to_query("gameStats",_param_name,inst)
        self.value_gameStats = inst
        return inst

    def detailedPitchingGameScore(self,_param_name:str = 'detailedPitchingGameScore') -> 'BaseballPlayerGameDetailedPitchingScores':
        param_list = []
        inst = BaseballPlayerGameDetailedPitchingScores(self,param_list)
        self._add_to_query("detailedPitchingGameScore",_param_name,inst)
        self.value_detailedPitchingGameScore = inst
        return inst

    def detailedBattingGameScore(self,_param_name:str = 'detailedBattingGameScore') -> 'BaseballPlayerGameDetailedBattingScores':
        param_list = []
        inst = BaseballPlayerGameDetailedBattingScores(self,param_list)
        self._add_to_query("detailedBattingGameScore",_param_name,inst)
        self.value_detailedBattingGameScore = inst
        return inst


class BaseballCardInLineup(GraphQLObject):
    value_lineup:'BaseballLineup' = None
    value_indexInLineup = None
    value_card:'BaseballCard' = None
    value_playerInFixture:'BaseballPlayerInFixture' = None
    value_score = None
    value_totalBonus = None
    value_gameScores:'list[BaseballCardInLineupGameScore]' = None
    def lineup(self,_param_name:str = 'lineup') -> 'BaseballLineup':
        param_list = []
        inst = BaseballLineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def indexInLineup(self,_param_name:str = 'indexInLineup'):
        inst = None
        self._add_to_query("indexInLineup",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'BaseballCard':
        param_list = []
        inst = BaseballCard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def playerInFixture(self,_param_name:str = 'playerInFixture') -> 'BaseballPlayerInFixture':
        param_list = []
        inst = BaseballPlayerInFixture(self,param_list)
        self._add_to_query("playerInFixture",_param_name,inst)
        self.value_playerInFixture = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def totalBonus(self,_param_name:str = 'totalBonus'):
        inst = None
        self._add_to_query("totalBonus",_param_name)
        pass

    def gameScores(self,_param_name:str = 'gameScores') -> 'BaseballCardInLineupGameScore':
        param_list = []
        inst = BaseballCardInLineupGameScore(self,param_list)
        self._add_to_query("gameScores",_param_name,inst)
        self.value_gameScores = inst
        return inst


class BaseballGameWithCardInLineup(GraphQLObject):
    value_game:'BaseballGame' = None
    value_homeCardsInLineups:'list[BaseballCardInLineup]' = None
    value_awayCardsInLineups:'list[BaseballCardInLineup]' = None
    def game(self,_param_name:str = 'game') -> 'BaseballGame':
        param_list = []
        inst = BaseballGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def homeCardsInLineups(self,_param_name:str = 'homeCardsInLineups') -> 'BaseballCardInLineup':
        param_list = []
        inst = BaseballCardInLineup(self,param_list)
        self._add_to_query("homeCardsInLineups",_param_name,inst)
        self.value_homeCardsInLineups = inst
        return inst

    def awayCardsInLineups(self,_param_name:str = 'awayCardsInLineups') -> 'BaseballCardInLineup':
        param_list = []
        inst = BaseballCardInLineup(self,param_list)
        self._add_to_query("awayCardsInLineups",_param_name,inst)
        self.value_awayCardsInLineups = inst
        return inst


class BaseballReward(GraphQLObject):
    value_id = None
    value_card:'BaseballCard' = None
    value_backImageUrl = None
    value_tier = None
    value_lineup:'BaseballLineup' = None
    value_state = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'BaseballCard':
        param_list = []
        inst = BaseballCard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def backImageUrl(self,_param_name:str = 'backImageUrl'):
        inst = None
        self._add_to_query("backImageUrl",_param_name)
        pass

    def tier(self,_param_name:str = 'tier'):
        inst = None
        self._add_to_query("tier",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'BaseballLineup':
        param_list = []
        inst = BaseballLineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass


class BaseballLineup(GraphQLObject):
    value_id = None
    value_leaderboard:'BaseballLeaderboard' = None
    value_cards:'list[BaseballCardInLineup]' = None
    value_games:'list[BaseballGameWithCardInLineup]' = None
    value_score = None
    value_rank = None
    value_user:'User' = None
    value_xpScore = None
    value_projectedReward:'ProjectedReward' = None
    value_lineupRewards = None
    value_reward:'BaseballReward' = None
    value_rewards:'list[BaseballReward]' = None
    value_canceledAt = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'BaseballLeaderboard':
        param_list = []
        inst = BaseballLeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def cards(self,_param_name:str = 'cards') -> 'BaseballCardInLineup':
        param_list = []
        inst = BaseballCardInLineup(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def games(self,_param_name:str = 'games') -> 'BaseballGameWithCardInLineup':
        param_list = []
        inst = BaseballGameWithCardInLineup(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def xpScore(self,_param_name:str = 'xpScore'):
        inst = None
        self._add_to_query("xpScore",_param_name)
        pass

    def projectedReward(self,_param_name:str = 'projectedReward') -> 'ProjectedReward':
        param_list = []
        inst = ProjectedReward(self,param_list)
        self._add_to_query("projectedReward",_param_name,inst)
        self.value_projectedReward = inst
        return inst

    def lineupRewards(self,_param_name:str = 'lineupRewards'):
        inst = None
        self._add_to_query("lineupRewards",_param_name)
        pass

    def reward(self,_param_name:str = 'reward') -> 'BaseballReward':
        param_list = []
        inst = BaseballReward(self,param_list)
        self._add_to_query("reward",_param_name,inst)
        self.value_reward = inst
        return inst

    def rewards(self,_param_name:str = 'rewards') -> 'BaseballReward':
        param_list = []
        inst = BaseballReward(self,param_list)
        self._add_to_query("rewards",_param_name,inst)
        self.value_rewards = inst
        return inst

    def canceledAt(self,_param_name:str = 'canceledAt'):
        inst = None
        self._add_to_query("canceledAt",_param_name)
        pass


class BaseballLineupConnection(GraphQLObject):
    value_nodes:'list[BaseballLineup]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'BaseballLineup':
        param_list = []
        inst = BaseballLineup(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class BaseballLeaderboardRequirements(GraphQLObject):
    value_allowedRarities = None
    value_minRarity:'LeaderboardRulesMinimumRarityRequirement' = None
    value_minRookieCount = None
    value_playerAgeRequirements:'PlayerAgeRequirements' = None
    value_allowedConference = None
    value_marketplaceQueryParameters = None
    value_minCurrentSeasonCardCount = None
    def allowedRarities(self,_param_name:str = 'allowedRarities'):
        inst = None
        self._add_to_query("allowedRarities",_param_name)
        pass

    def minRarity(self,_param_name:str = 'minRarity') -> 'LeaderboardRulesMinimumRarityRequirement':
        param_list = []
        inst = LeaderboardRulesMinimumRarityRequirement(self,param_list)
        self._add_to_query("minRarity",_param_name,inst)
        self.value_minRarity = inst
        return inst

    def minRookieCount(self,_param_name:str = 'minRookieCount'):
        inst = None
        self._add_to_query("minRookieCount",_param_name)
        pass

    def playerAgeRequirements(self,_param_name:str = 'playerAgeRequirements') -> 'PlayerAgeRequirements':
        param_list = []
        inst = PlayerAgeRequirements(self,param_list)
        self._add_to_query("playerAgeRequirements",_param_name,inst)
        self.value_playerAgeRequirements = inst
        return inst

    def allowedConference(self,_param_name:str = 'allowedConference'):
        inst = None
        self._add_to_query("allowedConference",_param_name)
        pass

    def marketplaceQueryParameters(self,_param_name:str = 'marketplaceQueryParameters'):
        inst = None
        self._add_to_query("marketplaceQueryParameters",_param_name)
        pass

    def minCurrentSeasonCardCount(self,_param_name:str = 'minCurrentSeasonCardCount'):
        inst = None
        self._add_to_query("minCurrentSeasonCardCount",_param_name)
        pass


class BaseballCardForComposeLineup(GraphQLObject):
    value_card:'BaseballCard' = None
    value_usedInOtherLineup:'BaseballLineup' = None
    value_totalBonusInLineup = None
    def card(self,_param_name:str = 'card') -> 'BaseballCard':
        param_list = []
        inst = BaseballCard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def usedInOtherLineup(self,_param_name:str = 'usedInOtherLineup') -> 'BaseballLineup':
        param_list = []
        inst = BaseballLineup(self,param_list)
        self._add_to_query("usedInOtherLineup",_param_name,inst)
        self.value_usedInOtherLineup = inst
        return inst

    def totalBonusInLineup(self,_param_name:str = 'totalBonusInLineup'):
        inst = None
        self._add_to_query("totalBonusInLineup",_param_name)
        pass


class BaseballCardForComposeLineupConnection(GraphQLObject):
    value_nodes:'list[BaseballCardForComposeLineup]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'BaseballCardForComposeLineup':
        param_list = []
        inst = BaseballCardForComposeLineup(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class BaseballLeaderboard(GraphQLObject):
    value_id = None
    value_slug = None
    value_displayName = None
    value_displayNameWithoutRarity = None
    value_descriptions = None
    value_lineups:'BaseballLineupConnection' = None
    value_myLineups:'list[BaseballLineup]' = None
    value_lineupsCount = None
    value_fixture:'BaseballFixture' = None
    value_games:'list[BaseballGame]' = None
    value_prizePool:'LeaderboardPrizePool' = None
    value_requirements:'BaseballLeaderboardRequirements' = None
    value_leaderboardRarity = None
    value_isUserEligible = None
    value_isTraining = None
    value_iconImageUrl = None
    value_monochromeIconImageUrl = None
    value_myComposeLineupCards:'BaseballCardForComposeLineupConnection' = None
    value_scoringStrategy = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def displayNameWithoutRarity(self,_param_name:str = 'displayNameWithoutRarity'):
        inst = None
        self._add_to_query("displayNameWithoutRarity",_param_name)
        pass

    def descriptions(self,_param_name:str = 'descriptions'):
        inst = None
        self._add_to_query("descriptions",_param_name)
        pass

    def lineups(self,first,after,userId,_param_name:str = 'lineups') -> 'BaseballLineupConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("userId",userId))
        inst = BaseballLineupConnection(self,param_list)
        self._add_to_query("lineups",_param_name,inst)
        self.value_lineups = inst
        return inst

    def myLineups(self,_param_name:str = 'myLineups') -> 'BaseballLineup':
        param_list = []
        inst = BaseballLineup(self,param_list)
        self._add_to_query("myLineups",_param_name,inst)
        self.value_myLineups = inst
        return inst

    def lineupsCount(self,_param_name:str = 'lineupsCount'):
        inst = None
        self._add_to_query("lineupsCount",_param_name)
        pass

    def fixture(self,_param_name:str = 'fixture') -> 'BaseballFixture':
        param_list = []
        inst = BaseballFixture(self,param_list)
        self._add_to_query("fixture",_param_name,inst)
        self.value_fixture = inst
        return inst

    def games(self,_param_name:str = 'games') -> 'BaseballGame':
        param_list = []
        inst = BaseballGame(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def prizePool(self,_param_name:str = 'prizePool') -> 'LeaderboardPrizePool':
        param_list = []
        inst = LeaderboardPrizePool(self,param_list)
        self._add_to_query("prizePool",_param_name,inst)
        self.value_prizePool = inst
        return inst

    def requirements(self,_param_name:str = 'requirements') -> 'BaseballLeaderboardRequirements':
        param_list = []
        inst = BaseballLeaderboardRequirements(self,param_list)
        self._add_to_query("requirements",_param_name,inst)
        self.value_requirements = inst
        return inst

    def leaderboardRarity(self,_param_name:str = 'leaderboardRarity'):
        inst = None
        self._add_to_query("leaderboardRarity",_param_name)
        pass

    def isUserEligible(self,_param_name:str = 'isUserEligible'):
        inst = None
        self._add_to_query("isUserEligible",_param_name)
        pass

    def isTraining(self,_param_name:str = 'isTraining'):
        inst = None
        self._add_to_query("isTraining",_param_name)
        pass

    def iconImageUrl(self,_param_name:str = 'iconImageUrl'):
        inst = None
        self._add_to_query("iconImageUrl",_param_name)
        pass

    def monochromeIconImageUrl(self,_param_name:str = 'monochromeIconImageUrl'):
        inst = None
        self._add_to_query("monochromeIconImageUrl",_param_name)
        pass

    def myComposeLineupCards(self,query,lineupId,first,after,includeUsed,inSeasonEligible,indexInLineup,cardsInLineupPartial,scoreSortOrder,_param_name:str = 'myComposeLineupCards') -> 'BaseballCardForComposeLineupConnection':
        param_list = []
        param_list.append(("query",query))
        param_list.append(("lineupId",lineupId))
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("includeUsed",includeUsed))
        param_list.append(("inSeasonEligible",inSeasonEligible))
        param_list.append(("indexInLineup",indexInLineup))
        param_list.append(("cardsInLineupPartial",cardsInLineupPartial))
        param_list.append(("scoreSortOrder",scoreSortOrder))
        inst = BaseballCardForComposeLineupConnection(self,param_list)
        self._add_to_query("myComposeLineupCards",_param_name,inst)
        self.value_myComposeLineupCards = inst
        return inst

    def scoringStrategy(self,_param_name:str = 'scoringStrategy'):
        inst = None
        self._add_to_query("scoringStrategy",_param_name)
        pass


class BaseballPlayerFixtureStatsConnection(GraphQLObject):
    value_nodes:'list[BaseballPlayerInFixture]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'BaseballPlayerInFixture':
        param_list = []
        inst = BaseballPlayerInFixture(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class BaseballFixture(GraphQLObject):
    value_id = None
    value_slug = None
    value_fixtureState = None
    value_gameWeek = None
    value_startDate = None
    value_endDate = None
    value_games:'list[BaseballGame]' = None
    value_leaderboards:'list[BaseballLeaderboard]' = None
    value_myEligibleGames:'list[BaseballGame]' = None
    value_myLiveLineupGames:'list[BaseballGameWithCardInLineup]' = None
    value_myLineups:'list[BaseballLineup]' = None
    value_userLineups:'list[BaseballLineup]' = None
    value_playerFixtureStats:'BaseballPlayerFixtureStatsConnection' = None
    value_rewardPool:'list[BaseballPlayer]' = None
    value_nextFixture:'BaseballFixture' = None
    value_previousFixture:'BaseballFixture' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def fixtureState(self,_param_name:str = 'fixtureState'):
        inst = None
        self._add_to_query("fixtureState",_param_name)
        pass

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def games(self,_param_name:str = 'games') -> 'BaseballGame':
        param_list = []
        inst = BaseballGame(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def leaderboards(self,includeTraining,_param_name:str = 'leaderboards') -> 'BaseballLeaderboard':
        param_list = []
        param_list.append(("includeTraining",includeTraining))
        inst = BaseballLeaderboard(self,param_list)
        self._add_to_query("leaderboards",_param_name,inst)
        self.value_leaderboards = inst
        return inst

    def myEligibleGames(self,_param_name:str = 'myEligibleGames') -> 'BaseballGame':
        param_list = []
        inst = BaseballGame(self,param_list)
        self._add_to_query("myEligibleGames",_param_name,inst)
        self.value_myEligibleGames = inst
        return inst

    def myLiveLineupGames(self,_param_name:str = 'myLiveLineupGames') -> 'BaseballGameWithCardInLineup':
        param_list = []
        inst = BaseballGameWithCardInLineup(self,param_list)
        self._add_to_query("myLiveLineupGames",_param_name,inst)
        self.value_myLiveLineupGames = inst
        return inst

    def myLineups(self,_param_name:str = 'myLineups') -> 'BaseballLineup':
        param_list = []
        inst = BaseballLineup(self,param_list)
        self._add_to_query("myLineups",_param_name,inst)
        self.value_myLineups = inst
        return inst

    def userLineups(self,userId,_param_name:str = 'userLineups') -> 'BaseballLineup':
        param_list = []
        param_list.append(("userId",userId))
        inst = BaseballLineup(self,param_list)
        self._add_to_query("userLineups",_param_name,inst)
        self.value_userLineups = inst
        return inst

    def playerFixtureStats(self,input:'BaseballPlayerFixtureStatsInput',_param_name:str = 'playerFixtureStats') -> 'BaseballPlayerFixtureStatsConnection':
        param_list = []
        param_list.append(("input",input))
        inst = BaseballPlayerFixtureStatsConnection(self,param_list)
        self._add_to_query("playerFixtureStats",_param_name,inst)
        self.value_playerFixtureStats = inst
        return inst

    def rewardPool(self,rarity,cardRarity,tier,_param_name:str = 'rewardPool') -> 'BaseballPlayer':
        param_list = []
        param_list.append(("rarity",rarity))
        param_list.append(("cardRarity",cardRarity))
        param_list.append(("tier",tier))
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("rewardPool",_param_name,inst)
        self.value_rewardPool = inst
        return inst

    def nextFixture(self,_param_name:str = 'nextFixture') -> 'BaseballFixture':
        param_list = []
        inst = BaseballFixture(self,param_list)
        self._add_to_query("nextFixture",_param_name,inst)
        self.value_nextFixture = inst
        return inst

    def previousFixture(self,_param_name:str = 'previousFixture') -> 'BaseballFixture':
        param_list = []
        inst = BaseballFixture(self,param_list)
        self._add_to_query("previousFixture",_param_name,inst)
        self.value_previousFixture = inst
        return inst


class BaseballPlayerInFixtureStatus(GraphQLObject):
    value_gameStats:'list[BaseballPlayerGameStats]' = None
    value_upcomingGames:'list[BaseballGame]' = None
    value_inGame = None
    value_isScoreFinal = None
    value_statusIconType = None
    value_hasTBDGames = None
    value_probablePitcherGames:'list[BaseballGame]' = None
    def gameStats(self,_param_name:str = 'gameStats') -> 'BaseballPlayerGameStats':
        param_list = []
        inst = BaseballPlayerGameStats(self,param_list)
        self._add_to_query("gameStats",_param_name,inst)
        self.value_gameStats = inst
        return inst

    def upcomingGames(self,_param_name:str = 'upcomingGames') -> 'BaseballGame':
        param_list = []
        inst = BaseballGame(self,param_list)
        self._add_to_query("upcomingGames",_param_name,inst)
        self.value_upcomingGames = inst
        return inst

    def inGame(self,_param_name:str = 'inGame'):
        inst = None
        self._add_to_query("inGame",_param_name)
        pass

    def isScoreFinal(self,_param_name:str = 'isScoreFinal'):
        inst = None
        self._add_to_query("isScoreFinal",_param_name)
        pass

    def statusIconType(self,_param_name:str = 'statusIconType'):
        inst = None
        self._add_to_query("statusIconType",_param_name)
        pass

    def hasTBDGames(self,_param_name:str = 'hasTBDGames'):
        inst = None
        self._add_to_query("hasTBDGames",_param_name)
        pass

    def probablePitcherGames(self,_param_name:str = 'probablePitcherGames') -> 'BaseballGame':
        param_list = []
        inst = BaseballGame(self,param_list)
        self._add_to_query("probablePitcherGames",_param_name,inst)
        self.value_probablePitcherGames = inst
        return inst


class BaseballPlayerInFixture(GraphQLObject):
    value_fixture:'BaseballFixture' = None
    value_player:'BaseballPlayer' = None
    value_score:'BaseballScore' = None
    value_status:'BaseballPlayerInFixtureStatus' = None
    def fixture(self,_param_name:str = 'fixture') -> 'BaseballFixture':
        param_list = []
        inst = BaseballFixture(self,param_list)
        self._add_to_query("fixture",_param_name,inst)
        self.value_fixture = inst
        return inst

    def player(self,_param_name:str = 'player') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def score(self,_param_name:str = 'score') -> 'BaseballScore':
        param_list = []
        inst = BaseballScore(self,param_list)
        self._add_to_query("score",_param_name,inst)
        self.value_score = inst
        return inst

    def status(self,_param_name:str = 'status') -> 'BaseballPlayerInFixtureStatus':
        param_list = []
        inst = BaseballPlayerInFixtureStatus(self,param_list)
        self._add_to_query("status",_param_name,inst)
        self.value_status = inst
        return inst


class BaseballPlayerAverageGamePitchingStats(GraphQLObject):
    value_outs = None
    value_strikeouts = None
    value_hitsAllowed = None
    value_earnedRuns = None
    value_walks = None
    value_hitBatsmen = None
    value_win = None
    value_loss = None
    value_save = None
    value_hold = None
    value_reliefAppearance = None
    def outs(self,_param_name:str = 'outs'):
        inst = None
        self._add_to_query("outs",_param_name)
        pass

    def strikeouts(self,_param_name:str = 'strikeouts'):
        inst = None
        self._add_to_query("strikeouts",_param_name)
        pass

    def hitsAllowed(self,_param_name:str = 'hitsAllowed'):
        inst = None
        self._add_to_query("hitsAllowed",_param_name)
        pass

    def earnedRuns(self,_param_name:str = 'earnedRuns'):
        inst = None
        self._add_to_query("earnedRuns",_param_name)
        pass

    def walks(self,_param_name:str = 'walks'):
        inst = None
        self._add_to_query("walks",_param_name)
        pass

    def hitBatsmen(self,_param_name:str = 'hitBatsmen'):
        inst = None
        self._add_to_query("hitBatsmen",_param_name)
        pass

    def win(self,_param_name:str = 'win'):
        inst = None
        self._add_to_query("win",_param_name)
        pass

    def loss(self,_param_name:str = 'loss'):
        inst = None
        self._add_to_query("loss",_param_name)
        pass

    def save(self,_param_name:str = 'save'):
        inst = None
        self._add_to_query("save",_param_name)
        pass

    def hold(self,_param_name:str = 'hold'):
        inst = None
        self._add_to_query("hold",_param_name)
        pass

    def reliefAppearance(self,_param_name:str = 'reliefAppearance'):
        inst = None
        self._add_to_query("reliefAppearance",_param_name)
        pass


class BaseballPlayerAverageGameBattingStats(GraphQLObject):
    value_runs = None
    value_rbi = None
    value_singles = None
    value_doubles = None
    value_triples = None
    value_homeRuns = None
    value_walks = None
    value_strikeouts = None
    value_stolenBases = None
    value_hitByPitch = None
    value_stealsCaught = None
    def runs(self,_param_name:str = 'runs'):
        inst = None
        self._add_to_query("runs",_param_name)
        pass

    def rbi(self,_param_name:str = 'rbi'):
        inst = None
        self._add_to_query("rbi",_param_name)
        pass

    def singles(self,_param_name:str = 'singles'):
        inst = None
        self._add_to_query("singles",_param_name)
        pass

    def doubles(self,_param_name:str = 'doubles'):
        inst = None
        self._add_to_query("doubles",_param_name)
        pass

    def triples(self,_param_name:str = 'triples'):
        inst = None
        self._add_to_query("triples",_param_name)
        pass

    def homeRuns(self,_param_name:str = 'homeRuns'):
        inst = None
        self._add_to_query("homeRuns",_param_name)
        pass

    def walks(self,_param_name:str = 'walks'):
        inst = None
        self._add_to_query("walks",_param_name)
        pass

    def strikeouts(self,_param_name:str = 'strikeouts'):
        inst = None
        self._add_to_query("strikeouts",_param_name)
        pass

    def stolenBases(self,_param_name:str = 'stolenBases'):
        inst = None
        self._add_to_query("stolenBases",_param_name)
        pass

    def hitByPitch(self,_param_name:str = 'hitByPitch'):
        inst = None
        self._add_to_query("hitByPitch",_param_name)
        pass

    def stealsCaught(self,_param_name:str = 'stealsCaught'):
        inst = None
        self._add_to_query("stealsCaught",_param_name)
        pass


class BaseballPlayerAverageGameStats(GraphQLObject):
    value_score:'BaseballScore' = None
    value_pitching:'BaseballPlayerAverageGamePitchingStats' = None
    value_batting:'BaseballPlayerAverageGameBattingStats' = None
    value_detailedPitchingScores:'BaseballPlayerGameDetailedPitchingScores' = None
    value_detailedBattingScores:'BaseballPlayerGameDetailedBattingScores' = None
    def score(self,_param_name:str = 'score') -> 'BaseballScore':
        param_list = []
        inst = BaseballScore(self,param_list)
        self._add_to_query("score",_param_name,inst)
        self.value_score = inst
        return inst

    def pitching(self,_param_name:str = 'pitching') -> 'BaseballPlayerAverageGamePitchingStats':
        param_list = []
        inst = BaseballPlayerAverageGamePitchingStats(self,param_list)
        self._add_to_query("pitching",_param_name,inst)
        self.value_pitching = inst
        return inst

    def batting(self,_param_name:str = 'batting') -> 'BaseballPlayerAverageGameBattingStats':
        param_list = []
        inst = BaseballPlayerAverageGameBattingStats(self,param_list)
        self._add_to_query("batting",_param_name,inst)
        self.value_batting = inst
        return inst

    def detailedPitchingScores(self,_param_name:str = 'detailedPitchingScores') -> 'BaseballPlayerGameDetailedPitchingScores':
        param_list = []
        inst = BaseballPlayerGameDetailedPitchingScores(self,param_list)
        self._add_to_query("detailedPitchingScores",_param_name,inst)
        self.value_detailedPitchingScores = inst
        return inst

    def detailedBattingScores(self,_param_name:str = 'detailedBattingScores') -> 'BaseballPlayerGameDetailedBattingScores':
        param_list = []
        inst = BaseballPlayerGameDetailedBattingScores(self,param_list)
        self._add_to_query("detailedBattingScores",_param_name,inst)
        self.value_detailedBattingScores = inst
        return inst


class BaseballCardConnection(GraphQLObject):
    value_nodes:'list[BaseballCard]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'BaseballCard':
        param_list = []
        inst = BaseballCard(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class BaseballPlayer(GraphQLObject):
    value_activeClub:'Club' = None
    value_activeClubMembership:'Membership' = None
    value_activeInjuries:'list[Injury]' = None
    value_activeNationalTeam:'NationalTeam' = None
    value_activeSuspensions:'list[Suspension]' = None
    value_age = None
    value_allPlayerGameScores:'PlayerGameScoreInterfaceConnection' = None
    value_anyCardWithLivePrimaryOffer:'AnyCardInterface' = None
    value_anyFutureGames:'AnyGameInterfaceConnection' = None
    value_anyGameStats:'list[AnyPlayerGameStatsInterface]' = None
    value_anyGamesForFixture:'list[AnyGameInterface]' = None
    value_anyGamesForLeaderboard:'list[AnyGameInterface]' = None
    value_anyPastGames:'AnyGameInterfaceConnection' = None
    value_anyPositions = None
    value_anyRelatedPlayers:'list[AnyPlayerInterface]' = None
    value_appearances = None
    value_avatarPictureUrl = None
    value_averageScore = None
    value_batHand = None
    value_beforeLastOwningMembership:'Membership' = None
    value_birthDay = None
    value_cardPositions = None
    value_cardSupply:'list[CardSeasonSupply]' = None
    value_cardWithLivePrimaryOffer = None
    value_careerSeasons:'list[Season]' = None
    value_clubMemberships:'list[Membership]' = None
    value_country:'Country' = None
    value_currentSeason:'Season' = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_displayName = None
    value_firstName = None
    value_fullPictureUrl = None
    value_height = None
    value_hitterAverageScore = None
    value_hitterPlayerGameScore:'BaseballPlayerGameScore' = None
    value_injuries:'list[Injury]' = None
    value_lastClub:'Club' = None
    value_lastFifteenSo5Appearances = None
    value_lastFiveSo5Appearances = None
    value_lastName = None
    value_lastTenSo5Appearances = None
    value_lowestPriceAnyCard:'AnyCardInterface' = None
    value_lowestPriceCard = None
    value_matchName = None
    value_memberships:'list[Membership]' = None
    value_pitcherAverageScore = None
    value_pitcherPlayerGameScore:'BaseballPlayerGameScore' = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_playerGameScores:'list[PlayerGameScoreInterface]' = None
    value_rawPlayerGameScores = None
    value_rotowireProjectedHitterScore = None
    value_rotowireProjectedPitcherScore = None
    value_seasonAppearances = None
    value_shirtNumber = None
    value_slug = None
    value_sport = None
    value_squaredPictureUrl = None
    value_subscriptionsCount = None
    value_suspensions:'list[Suspension]' = None
    value_throwHand = None
    value_tokenPrices:'TokenPriceConnection' = None
    value_user:'User' = None
    value_weight = None
    value_id = None
    value_birthPlaceCountry = None
    value_birthDate = None
    value_positions = None
    value_team:'BaseballTeam' = None
    value_avatarImageUrl = None
    value_latestFinalGameStats:'list[BaseballPlayerGameStats]' = None
    value_latestFixtureStats:'list[BaseballPlayerInFixture]' = None
    value_fixtureGames:'list[BaseballGame]' = None
    value_upcomingGames:'list[BaseballGame]' = None
    value_inFixture:'BaseballPlayerInFixture' = None
    value_currentSeasonAverageScore:'BaseballScore' = None
    value_last15AverageScore:'BaseballScore' = None
    value_last15AverageGameStats:'BaseballPlayerAverageGameStats' = None
    value_isActive = None
    value_playerInjury:'PlayerInjury' = None
    value_cards:'BaseballCardConnection' = None
    value_pictureUrl = None
    value_rotowireId = None
    value_newsUpdates:'list[PlayerNewsUpdate]' = None
    def activeClub(self,_param_name:str = 'activeClub') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("activeClub",_param_name,inst)
        self.value_activeClub = inst
        return inst

    def activeClubMembership(self,_param_name:str = 'activeClubMembership') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("activeClubMembership",_param_name,inst)
        self.value_activeClubMembership = inst
        return inst

    def activeInjuries(self,_param_name:str = 'activeInjuries') -> 'Injury':
        param_list = []
        inst = Injury(self,param_list)
        self._add_to_query("activeInjuries",_param_name,inst)
        self.value_activeInjuries = inst
        return inst

    def activeNationalTeam(self,_param_name:str = 'activeNationalTeam') -> 'NationalTeam':
        param_list = []
        inst = NationalTeam(self,param_list)
        self._add_to_query("activeNationalTeam",_param_name,inst)
        self.value_activeNationalTeam = inst
        return inst

    def activeSuspensions(self,_param_name:str = 'activeSuspensions') -> 'Suspension':
        param_list = []
        inst = Suspension(self,param_list)
        self._add_to_query("activeSuspensions",_param_name,inst)
        self.value_activeSuspensions = inst
        return inst

    def age(self,_param_name:str = 'age'):
        inst = None
        self._add_to_query("age",_param_name)
        pass

    def allPlayerGameScores(self,after,before,first,last,position,_param_name:str = 'allPlayerGameScores') -> 'PlayerGameScoreInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterfaceConnection(self,param_list)
        self._add_to_query("allPlayerGameScores",_param_name,inst)
        self.value_allPlayerGameScores = inst
        return inst

    def anyCardWithLivePrimaryOffer(self,rarity,_param_name:str = 'anyCardWithLivePrimaryOffer') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCardWithLivePrimaryOffer",_param_name,inst)
        self.value_anyCardWithLivePrimaryOffer = inst
        return inst

    def anyFutureGames(self,after,before,first,last,_param_name:str = 'anyFutureGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyFutureGames",_param_name,inst)
        self.value_anyFutureGames = inst
        return inst

    def anyGameStats(self,last,lowCoverage,_param_name:str = 'anyGameStats') -> 'AnyPlayerGameStatsInterface':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        inst = AnyPlayerGameStatsInterface(self,param_list)
        self._add_to_query("anyGameStats",_param_name,inst)
        self.value_anyGameStats = inst
        return inst

    def anyGamesForFixture(self,so5FixtureSlug,_param_name:str = 'anyGamesForFixture') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("so5FixtureSlug",so5FixtureSlug))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGamesForFixture",_param_name,inst)
        self.value_anyGamesForFixture = inst
        return inst

    def anyGamesForLeaderboard(self,so5LeaderboardSlug,_param_name:str = 'anyGamesForLeaderboard') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGamesForLeaderboard",_param_name,inst)
        self.value_anyGamesForLeaderboard = inst
        return inst

    def anyPastGames(self,after,before,first,last,_param_name:str = 'anyPastGames') -> 'AnyGameInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyGameInterfaceConnection(self,param_list)
        self._add_to_query("anyPastGames",_param_name,inst)
        self.value_anyPastGames = inst
        return inst

    def anyPositions(self,_param_name:str = 'anyPositions'):
        inst = None
        self._add_to_query("anyPositions",_param_name)
        pass

    def anyRelatedPlayers(self,_param_name:str = 'anyRelatedPlayers') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyRelatedPlayers",_param_name,inst)
        self.value_anyRelatedPlayers = inst
        return inst

    def appearances(self,_param_name:str = 'appearances'):
        inst = None
        self._add_to_query("appearances",_param_name)
        pass

    def avatarPictureUrl(self,_param_name:str = 'avatarPictureUrl'):
        inst = None
        self._add_to_query("avatarPictureUrl",_param_name)
        pass

    def averageScore(self,position,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def batHand(self,_param_name:str = 'batHand'):
        inst = None
        self._add_to_query("batHand",_param_name)
        pass

    def beforeLastOwningMembership(self,_param_name:str = 'beforeLastOwningMembership') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("beforeLastOwningMembership",_param_name,inst)
        self.value_beforeLastOwningMembership = inst
        return inst

    def birthDay(self,_param_name:str = 'birthDay'):
        inst = None
        self._add_to_query("birthDay",_param_name)
        pass

    def cardPositions(self,_param_name:str = 'cardPositions'):
        inst = None
        self._add_to_query("cardPositions",_param_name)
        pass

    def cardSupply(self,_param_name:str = 'cardSupply') -> 'CardSeasonSupply':
        param_list = []
        inst = CardSeasonSupply(self,param_list)
        self._add_to_query("cardSupply",_param_name,inst)
        self.value_cardSupply = inst
        return inst

    def cardWithLivePrimaryOffer(self,rarity,_param_name:str = 'cardWithLivePrimaryOffer'):
        inst = None
        self._add_to_query("cardWithLivePrimaryOffer",_param_name)
        pass

    def careerSeasons(self,type,_param_name:str = 'careerSeasons') -> 'Season':
        param_list = []
        param_list.append(("type",type))
        inst = Season(self,param_list)
        self._add_to_query("careerSeasons",_param_name,inst)
        self.value_careerSeasons = inst
        return inst

    def clubMemberships(self,_param_name:str = 'clubMemberships') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("clubMemberships",_param_name,inst)
        self.value_clubMemberships = inst
        return inst

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def currentSeason(self,_param_name:str = 'currentSeason') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("currentSeason",_param_name,inst)
        self.value_currentSeason = inst
        return inst

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def firstName(self,_param_name:str = 'firstName'):
        inst = None
        self._add_to_query("firstName",_param_name)
        pass

    def fullPictureUrl(self,_param_name:str = 'fullPictureUrl'):
        inst = None
        self._add_to_query("fullPictureUrl",_param_name)
        pass

    def height(self,_param_name:str = 'height'):
        inst = None
        self._add_to_query("height",_param_name)
        pass

    def hitterAverageScore(self,type,_param_name:str = 'hitterAverageScore'):
        inst = None
        self._add_to_query("hitterAverageScore",_param_name)
        pass

    def hitterPlayerGameScore(self,gameId,_param_name:str = 'hitterPlayerGameScore') -> 'BaseballPlayerGameScore':
        param_list = []
        param_list.append(("gameId",gameId))
        inst = BaseballPlayerGameScore(self,param_list)
        self._add_to_query("hitterPlayerGameScore",_param_name,inst)
        self.value_hitterPlayerGameScore = inst
        return inst

    def injuries(self,_param_name:str = 'injuries') -> 'Injury':
        param_list = []
        inst = Injury(self,param_list)
        self._add_to_query("injuries",_param_name,inst)
        self.value_injuries = inst
        return inst

    def lastClub(self,_param_name:str = 'lastClub') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("lastClub",_param_name,inst)
        self.value_lastClub = inst
        return inst

    def lastFifteenSo5Appearances(self,_param_name:str = 'lastFifteenSo5Appearances'):
        inst = None
        self._add_to_query("lastFifteenSo5Appearances",_param_name)
        pass

    def lastFiveSo5Appearances(self,_param_name:str = 'lastFiveSo5Appearances'):
        inst = None
        self._add_to_query("lastFiveSo5Appearances",_param_name)
        pass

    def lastName(self,_param_name:str = 'lastName'):
        inst = None
        self._add_to_query("lastName",_param_name)
        pass

    def lastTenSo5Appearances(self,_param_name:str = 'lastTenSo5Appearances'):
        inst = None
        self._add_to_query("lastTenSo5Appearances",_param_name)
        pass

    def lowestPriceAnyCard(self,rarity,seasonStartYear,teamSlug,_param_name:str = 'lowestPriceAnyCard') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        param_list.append(("seasonStartYear",seasonStartYear))
        param_list.append(("teamSlug",teamSlug))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("lowestPriceAnyCard",_param_name,inst)
        self.value_lowestPriceAnyCard = inst
        return inst

    def lowestPriceCard(self,rarity,_param_name:str = 'lowestPriceCard'):
        inst = None
        self._add_to_query("lowestPriceCard",_param_name)
        pass

    def matchName(self,_param_name:str = 'matchName'):
        inst = None
        self._add_to_query("matchName",_param_name)
        pass

    def memberships(self,_param_name:str = 'memberships') -> 'Membership':
        param_list = []
        inst = Membership(self,param_list)
        self._add_to_query("memberships",_param_name,inst)
        self.value_memberships = inst
        return inst

    def pitcherAverageScore(self,type,_param_name:str = 'pitcherAverageScore'):
        inst = None
        self._add_to_query("pitcherAverageScore",_param_name)
        pass

    def pitcherPlayerGameScore(self,gameId,_param_name:str = 'pitcherPlayerGameScore') -> 'BaseballPlayerGameScore':
        param_list = []
        param_list.append(("gameId",gameId))
        inst = BaseballPlayerGameScore(self,param_list)
        self._add_to_query("pitcherPlayerGameScore",_param_name,inst)
        self.value_pitcherPlayerGameScore = inst
        return inst

    def playerGameScore(self,gameId,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("gameId",gameId))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def playerGameScores(self,last,lowCoverage,position,_param_name:str = 'playerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScores",_param_name,inst)
        self.value_playerGameScores = inst
        return inst

    def rawPlayerGameScores(self,last,lowCoverage,position,_param_name:str = 'rawPlayerGameScores'):
        inst = None
        self._add_to_query("rawPlayerGameScores",_param_name)
        pass

    def rotowireProjectedHitterScore(self,_param_name:str = 'rotowireProjectedHitterScore'):
        inst = None
        self._add_to_query("rotowireProjectedHitterScore",_param_name)
        pass

    def rotowireProjectedPitcherScore(self,_param_name:str = 'rotowireProjectedPitcherScore'):
        inst = None
        self._add_to_query("rotowireProjectedPitcherScore",_param_name)
        pass

    def seasonAppearances(self,_param_name:str = 'seasonAppearances'):
        inst = None
        self._add_to_query("seasonAppearances",_param_name)
        pass

    def shirtNumber(self,_param_name:str = 'shirtNumber'):
        inst = None
        self._add_to_query("shirtNumber",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def squaredPictureUrl(self,_param_name:str = 'squaredPictureUrl'):
        inst = None
        self._add_to_query("squaredPictureUrl",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def suspensions(self,_param_name:str = 'suspensions') -> 'Suspension':
        param_list = []
        inst = Suspension(self,param_list)
        self._add_to_query("suspensions",_param_name,inst)
        self.value_suspensions = inst
        return inst

    def throwHand(self,_param_name:str = 'throwHand'):
        inst = None
        self._add_to_query("throwHand",_param_name)
        pass

    def tokenPrices(self,after,before,first,last,rarity,season,seasonEligibility,since,_param_name:str = 'tokenPrices') -> 'TokenPriceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("rarity",rarity))
        param_list.append(("season",season))
        param_list.append(("seasonEligibility",seasonEligibility))
        param_list.append(("since",since))
        inst = TokenPriceConnection(self,param_list)
        self._add_to_query("tokenPrices",_param_name,inst)
        self.value_tokenPrices = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def weight(self,_param_name:str = 'weight'):
        inst = None
        self._add_to_query("weight",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def birthPlaceCountry(self,_param_name:str = 'birthPlaceCountry'):
        inst = None
        self._add_to_query("birthPlaceCountry",_param_name)
        pass

    def birthDate(self,_param_name:str = 'birthDate'):
        inst = None
        self._add_to_query("birthDate",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'BaseballTeam':
        param_list = []
        inst = BaseballTeam(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def avatarImageUrl(self,_param_name:str = 'avatarImageUrl'):
        inst = None
        self._add_to_query("avatarImageUrl",_param_name)
        pass

    def latestFinalGameStats(self,last,_param_name:str = 'latestFinalGameStats') -> 'BaseballPlayerGameStats':
        param_list = []
        param_list.append(("last",last))
        inst = BaseballPlayerGameStats(self,param_list)
        self._add_to_query("latestFinalGameStats",_param_name,inst)
        self.value_latestFinalGameStats = inst
        return inst

    def latestFixtureStats(self,last,_param_name:str = 'latestFixtureStats') -> 'BaseballPlayerInFixture':
        param_list = []
        param_list.append(("last",last))
        inst = BaseballPlayerInFixture(self,param_list)
        self._add_to_query("latestFixtureStats",_param_name,inst)
        self.value_latestFixtureStats = inst
        return inst

    def fixtureGames(self,fixtureSlug,_param_name:str = 'fixtureGames') -> 'BaseballGame':
        param_list = []
        param_list.append(("fixtureSlug",fixtureSlug))
        inst = BaseballGame(self,param_list)
        self._add_to_query("fixtureGames",_param_name,inst)
        self.value_fixtureGames = inst
        return inst

    def upcomingGames(self,next,_param_name:str = 'upcomingGames') -> 'BaseballGame':
        param_list = []
        param_list.append(("next",next))
        inst = BaseballGame(self,param_list)
        self._add_to_query("upcomingGames",_param_name,inst)
        self.value_upcomingGames = inst
        return inst

    def inFixture(self,fixtureSlug,_param_name:str = 'inFixture') -> 'BaseballPlayerInFixture':
        param_list = []
        param_list.append(("fixtureSlug",fixtureSlug))
        inst = BaseballPlayerInFixture(self,param_list)
        self._add_to_query("inFixture",_param_name,inst)
        self.value_inFixture = inst
        return inst

    def currentSeasonAverageScore(self,_param_name:str = 'currentSeasonAverageScore') -> 'BaseballScore':
        param_list = []
        inst = BaseballScore(self,param_list)
        self._add_to_query("currentSeasonAverageScore",_param_name,inst)
        self.value_currentSeasonAverageScore = inst
        return inst

    def last15AverageScore(self,_param_name:str = 'last15AverageScore') -> 'BaseballScore':
        param_list = []
        inst = BaseballScore(self,param_list)
        self._add_to_query("last15AverageScore",_param_name,inst)
        self.value_last15AverageScore = inst
        return inst

    def last15AverageGameStats(self,_param_name:str = 'last15AverageGameStats') -> 'BaseballPlayerAverageGameStats':
        param_list = []
        inst = BaseballPlayerAverageGameStats(self,param_list)
        self._add_to_query("last15AverageGameStats",_param_name,inst)
        self.value_last15AverageGameStats = inst
        return inst

    def isActive(self,_param_name:str = 'isActive'):
        inst = None
        self._add_to_query("isActive",_param_name)
        pass

    def playerInjury(self,_param_name:str = 'playerInjury') -> 'PlayerInjury':
        param_list = []
        inst = PlayerInjury(self,param_list)
        self._add_to_query("playerInjury",_param_name,inst)
        self.value_playerInjury = inst
        return inst

    def cards(self,first,after,positions,rarities,_param_name:str = 'cards') -> 'BaseballCardConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        inst = BaseballCardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def rotowireId(self,_param_name:str = 'rotowireId'):
        inst = None
        self._add_to_query("rotowireId",_param_name)
        pass

    def newsUpdates(self,last,_param_name:str = 'newsUpdates') -> 'PlayerNewsUpdate':
        param_list = []
        param_list.append(("last",last))
        inst = PlayerNewsUpdate(self,param_list)
        self._add_to_query("newsUpdates",_param_name,inst)
        self.value_newsUpdates = inst
        return inst


class BaseballScoutingMissionSlot(GraphQLObject):
    value_requiredPlayer:'BaseballPlayer' = None
    value_ownedCard:'BaseballCard' = None
    def requiredPlayer(self,_param_name:str = 'requiredPlayer') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("requiredPlayer",_param_name,inst)
        self.value_requiredPlayer = inst
        return inst

    def ownedCard(self,_param_name:str = 'ownedCard') -> 'BaseballCard':
        param_list = []
        inst = BaseballCard(self,param_list)
        self._add_to_query("ownedCard",_param_name,inst)
        self.value_ownedCard = inst
        return inst


class BaseballScoutingMission(GraphQLObject):
    value_slug = None
    value_displayName = None
    value_description = None
    value_endDate = None
    value_minPlayersRequired = None
    value_isComplete = None
    value_slots:'list[BaseballScoutingMissionSlot]' = None
    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def minPlayersRequired(self,_param_name:str = 'minPlayersRequired'):
        inst = None
        self._add_to_query("minPlayersRequired",_param_name)
        pass

    def isComplete(self,_param_name:str = 'isComplete'):
        inst = None
        self._add_to_query("isComplete",_param_name)
        pass

    def slots(self,_param_name:str = 'slots') -> 'BaseballScoutingMissionSlot':
        param_list = []
        inst = BaseballScoutingMissionSlot(self,param_list)
        self._add_to_query("slots",_param_name,inst)
        self.value_slots = inst
        return inst


class BaseballCollectionCardScoreBreakdown(GraphQLObject):
    value_owner = None
    value_ownedFor90Days = None
    value_newCard = None
    value_firstSerialNumber = None
    value_shirtMatchingSerialNumber = None
    value_specialEditionCard = None
    value_total = None
    def owner(self,_param_name:str = 'owner'):
        inst = None
        self._add_to_query("owner",_param_name)
        pass

    def ownedFor90Days(self,_param_name:str = 'ownedFor90Days'):
        inst = None
        self._add_to_query("ownedFor90Days",_param_name)
        pass

    def newCard(self,_param_name:str = 'newCard'):
        inst = None
        self._add_to_query("newCard",_param_name)
        pass

    def firstSerialNumber(self,_param_name:str = 'firstSerialNumber'):
        inst = None
        self._add_to_query("firstSerialNumber",_param_name)
        pass

    def shirtMatchingSerialNumber(self,_param_name:str = 'shirtMatchingSerialNumber'):
        inst = None
        self._add_to_query("shirtMatchingSerialNumber",_param_name)
        pass

    def specialEditionCard(self,_param_name:str = 'specialEditionCard'):
        inst = None
        self._add_to_query("specialEditionCard",_param_name)
        pass

    def total(self,_param_name:str = 'total'):
        inst = None
        self._add_to_query("total",_param_name)
        pass


class BaseballCollectionCard(GraphQLObject):
    value_card:'BaseballCard' = None
    value_heldSince = None
    value_scoreBreakdown:'BaseballCollectionCardScoreBreakdown' = None
    value_isDisplayCard = None
    def card(self,_param_name:str = 'card') -> 'BaseballCard':
        param_list = []
        inst = BaseballCard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def heldSince(self,_param_name:str = 'heldSince'):
        inst = None
        self._add_to_query("heldSince",_param_name)
        pass

    def scoreBreakdown(self,_param_name:str = 'scoreBreakdown') -> 'BaseballCollectionCardScoreBreakdown':
        param_list = []
        inst = BaseballCollectionCardScoreBreakdown(self,param_list)
        self._add_to_query("scoreBreakdown",_param_name,inst)
        self.value_scoreBreakdown = inst
        return inst

    def isDisplayCard(self,_param_name:str = 'isDisplayCard'):
        inst = None
        self._add_to_query("isDisplayCard",_param_name)
        pass


class BaseballCollectionSlot(GraphQLObject):
    value_requiredPlayer:'BaseballPlayer' = None
    value_collectionCard:'BaseballCollectionCard' = None
    value_displayCard:'BaseballCard' = None
    value_ownedCards:'list[BaseballCard]' = None
    def requiredPlayer(self,_param_name:str = 'requiredPlayer') -> 'BaseballPlayer':
        param_list = []
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("requiredPlayer",_param_name,inst)
        self.value_requiredPlayer = inst
        return inst

    def collectionCard(self,_param_name:str = 'collectionCard') -> 'BaseballCollectionCard':
        param_list = []
        inst = BaseballCollectionCard(self,param_list)
        self._add_to_query("collectionCard",_param_name,inst)
        self.value_collectionCard = inst
        return inst

    def displayCard(self,_param_name:str = 'displayCard') -> 'BaseballCard':
        param_list = []
        inst = BaseballCard(self,param_list)
        self._add_to_query("displayCard",_param_name,inst)
        self.value_displayCard = inst
        return inst

    def ownedCards(self,_param_name:str = 'ownedCards') -> 'BaseballCard':
        param_list = []
        inst = BaseballCard(self,param_list)
        self._add_to_query("ownedCards",_param_name,inst)
        self.value_ownedCards = inst
        return inst


class UserBaseballCollection(GraphQLObject):
    value_collection:'BaseballCollection' = None
    value_rank = None
    def collection(self,_param_name:str = 'collection') -> 'BaseballCollection':
        param_list = []
        inst = BaseballCollection(self,param_list)
        self._add_to_query("collection",_param_name,inst)
        self.value_collection = inst
        return inst

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass


class BaseballCollectionConnection(GraphQLObject):
    value_nodes:'list[UserBaseballCollection]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'UserBaseballCollection':
        param_list = []
        inst = UserBaseballCollection(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class BaseballCollection(GraphQLObject):
    value_slug = None
    value_isComplete = None
    value_slots:'list[BaseballCollectionSlot]' = None
    value_slotsCount = None
    value_filledSlots = None
    value_collectionScore = None
    value_collectionBonus = None
    value_liveRank = None
    value_scoreRankingSize = None
    value_team:'BaseballTeam' = None
    value_season = None
    value_rarity = None
    value_user:'User' = None
    value_bestByScore:'BaseballCollectionConnection' = None
    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def isComplete(self,_param_name:str = 'isComplete'):
        inst = None
        self._add_to_query("isComplete",_param_name)
        pass

    def slots(self,_param_name:str = 'slots') -> 'BaseballCollectionSlot':
        param_list = []
        inst = BaseballCollectionSlot(self,param_list)
        self._add_to_query("slots",_param_name,inst)
        self.value_slots = inst
        return inst

    def slotsCount(self,_param_name:str = 'slotsCount'):
        inst = None
        self._add_to_query("slotsCount",_param_name)
        pass

    def filledSlots(self,_param_name:str = 'filledSlots'):
        inst = None
        self._add_to_query("filledSlots",_param_name)
        pass

    def collectionScore(self,_param_name:str = 'collectionScore'):
        inst = None
        self._add_to_query("collectionScore",_param_name)
        pass

    def collectionBonus(self,_param_name:str = 'collectionBonus'):
        inst = None
        self._add_to_query("collectionBonus",_param_name)
        pass

    def liveRank(self,_param_name:str = 'liveRank'):
        inst = None
        self._add_to_query("liveRank",_param_name)
        pass

    def scoreRankingSize(self,_param_name:str = 'scoreRankingSize'):
        inst = None
        self._add_to_query("scoreRankingSize",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'BaseballTeam':
        param_list = []
        inst = BaseballTeam(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def season(self,_param_name:str = 'season'):
        inst = None
        self._add_to_query("season",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def bestByScore(self,first,after,_param_name:str = 'bestByScore') -> 'BaseballCollectionConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        inst = BaseballCollectionConnection(self,param_list)
        self._add_to_query("bestByScore",_param_name,inst)
        self.value_bestByScore = inst
        return inst


class User(GraphQLObject):
    value_accounts:'list[Account]' = None
    value_active = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_awards:'list[UserAward]' = None
    value_baseballProfile:'UserSportProfile' = None
    value_baseballUserProfile:'BaseballUserSportProfile' = None
    value_blueprintCards:'AnyCardInterfaceConnection' = None
    value_boughtSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_buyingTokenAuctions:'list[TokenAuction]' = None
    value_cardCollections:'CardCollectionConnection' = None
    value_cardCounts:'CardCount' = None
    value_cards:'AnyCardInterfaceConnection' = None
    value_cardsCount = None
    value_createdAt = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_customDecks:'CustomDeckConnection' = None
    value_disabled = None
    value_endedWithNoBuyerSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_ethVaultId = None
    value_ethereumAddress = None
    value_followed:'EmailSubscription' = None
    value_followers:'UserWithSubscriptionSlugConnection' = None
    value_followersCount = None
    value_following:'UserWithSubscriptionSlugConnection' = None
    value_followingCount = None
    value_footballCardCollections:'CardCollectionConnection' = None
    value_footballCardCounts:'CardCount' = None
    value_footballCards:'CardConnection' = None
    value_footballProfile:'UserSportProfile' = None
    value_footballRivalsManager:'FootballRivalsManager' = None
    value_footballUserProfile:'FootballUserSportProfile' = None
    value_hoursToAnswerTrades = None
    value_id = None
    value_liveSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_lostTokenAuctions:'TokenAuctionConnection' = None
    value_managerProgression:'ManagerProgression' = None
    value_managerProgressionTasksCount = None
    value_managerTeams:'ManagerTeamConnection' = None
    value_nbaProfile:'UserSportProfile' = None
    value_nbaUserProfile:'NBAUserSportProfile' = None
    value_nickname = None
    value_paginatedCards:'CardConnection' = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_podiumRankings:'So5RankingConnection' = None
    value_podiums:'list[So5Podium]' = None
    value_profile:'UserProfile' = None
    value_recommendedManagers:'UserConnection' = None
    value_rewardedRankings:'So5RankingConnection' = None
    value_singleSaleTokenOffers:'TokenOfferConnection' = None
    value_slug = None
    value_so5TrophiesSummary:'TrophiesSummary' = None
    value_soldSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_sorareAddress = None
    value_starkKey = None
    value_starkKeyRegistered = None
    value_status = None
    value_subscriptionsCount = None
    value_suspended = None
    value_tokenAuctions:'TokenAuctionConnection' = None
    value_trophies:'list[So5Trophies]' = None
    value_trophiesSummary:'So5TrophiesSummary' = None
    value_userSportProfile = None
    value_wonTokenAuctions:'TokenAuctionConnection' = None
    value_avatarUrl = None
    value_nbaCollections:'list[NBACollection]' = None
    value_nbaCards:'NBACardConnection' = None
    value_nbaCardCounts:'CardCountsByRarity' = None
    value_nbaTrophiesSummary:'TrophiesSummary' = None
    value_baseballScoutingMissions:'list[BaseballScoutingMission]' = None
    value_baseballCollections:'list[BaseballCollection]' = None
    value_baseballCards:'BaseballCardConnection' = None
    value_baseballCardCounts:'CardCountsByRarity' = None
    value_baseballTrophiesSummary:'TrophiesSummary' = None
    def accounts(self,_param_name:str = 'accounts') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("accounts",_param_name,inst)
        self.value_accounts = inst
        return inst

    def active(self,_param_name:str = 'active'):
        inst = None
        self._add_to_query("active",_param_name)
        pass

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def awards(self,category,_param_name:str = 'awards') -> 'UserAward':
        param_list = []
        param_list.append(("category",category))
        inst = UserAward(self,param_list)
        self._add_to_query("awards",_param_name,inst)
        self.value_awards = inst
        return inst

    def baseballProfile(self,_param_name:str = 'baseballProfile') -> 'UserSportProfile':
        param_list = []
        inst = UserSportProfile(self,param_list)
        self._add_to_query("baseballProfile",_param_name,inst)
        self.value_baseballProfile = inst
        return inst

    def baseballUserProfile(self,_param_name:str = 'baseballUserProfile') -> 'BaseballUserSportProfile':
        param_list = []
        inst = BaseballUserSportProfile(self,param_list)
        self._add_to_query("baseballUserProfile",_param_name,inst)
        self.value_baseballUserProfile = inst
        return inst

    def blueprintCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'blueprintCards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("blueprintCards",_param_name,inst)
        self.value_blueprintCards = inst
        return inst

    def boughtSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'boughtSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("boughtSingleSaleTokenOffers",_param_name,inst)
        self.value_boughtSingleSaleTokenOffers = inst
        return inst

    def buyingTokenAuctions(self,newlyListed,sport,_param_name:str = 'buyingTokenAuctions') -> 'TokenAuction':
        param_list = []
        param_list.append(("newlyListed",newlyListed))
        param_list.append(("sport",sport))
        inst = TokenAuction(self,param_list)
        self._add_to_query("buyingTokenAuctions",_param_name,inst)
        self.value_buyingTokenAuctions = inst
        return inst

    def cardCollections(self,after,before,favoriteOnly,first,last,query,rarities,seasonStartYears,sport,startedOnly,teamSlug,_param_name:str = 'cardCollections') -> 'CardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("favoriteOnly",favoriteOnly))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("seasonStartYears",seasonStartYears))
        param_list.append(("sport",sport))
        param_list.append(("startedOnly",startedOnly))
        param_list.append(("teamSlug",teamSlug))
        inst = CardCollectionConnection(self,param_list)
        self._add_to_query("cardCollections",_param_name,inst)
        self.value_cardCollections = inst
        return inst

    def cardCounts(self,_param_name:str = 'cardCounts') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("cardCounts",_param_name,inst)
        self.value_cardCounts = inst
        return inst

    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def cardsCount(self,_param_name:str = 'cardsCount'):
        inst = None
        self._add_to_query("cardsCount",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def customDecks(self,after,before,first,last,query,_param_name:str = 'customDecks') -> 'CustomDeckConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = CustomDeckConnection(self,param_list)
        self._add_to_query("customDecks",_param_name,inst)
        self.value_customDecks = inst
        return inst

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def endedWithNoBuyerSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'endedWithNoBuyerSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("endedWithNoBuyerSingleSaleTokenOffers",_param_name,inst)
        self.value_endedWithNoBuyerSingleSaleTokenOffers = inst
        return inst

    def ethVaultId(self,_param_name:str = 'ethVaultId'):
        inst = None
        self._add_to_query("ethVaultId",_param_name)
        pass

    def ethereumAddress(self,_param_name:str = 'ethereumAddress'):
        inst = None
        self._add_to_query("ethereumAddress",_param_name)
        pass

    def followed(self,_param_name:str = 'followed') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("followed",_param_name,inst)
        self.value_followed = inst
        return inst

    def followers(self,after,before,first,last,_param_name:str = 'followers') -> 'UserWithSubscriptionSlugConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserWithSubscriptionSlugConnection(self,param_list)
        self._add_to_query("followers",_param_name,inst)
        self.value_followers = inst
        return inst

    def followersCount(self,_param_name:str = 'followersCount'):
        inst = None
        self._add_to_query("followersCount",_param_name)
        pass

    def following(self,after,before,first,last,_param_name:str = 'following') -> 'UserWithSubscriptionSlugConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserWithSubscriptionSlugConnection(self,param_list)
        self._add_to_query("following",_param_name,inst)
        self.value_following = inst
        return inst

    def followingCount(self,_param_name:str = 'followingCount'):
        inst = None
        self._add_to_query("followingCount",_param_name)
        pass

    def footballCardCollections(self,after,before,favoriteOnly,first,last,query,rarities,seasonStartYears,startedOnly,teamSlug,_param_name:str = 'footballCardCollections') -> 'CardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("favoriteOnly",favoriteOnly))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("seasonStartYears",seasonStartYears))
        param_list.append(("startedOnly",startedOnly))
        param_list.append(("teamSlug",teamSlug))
        inst = CardCollectionConnection(self,param_list)
        self._add_to_query("footballCardCollections",_param_name,inst)
        self.value_footballCardCollections = inst
        return inst

    def footballCardCounts(self,_param_name:str = 'footballCardCounts') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("footballCardCounts",_param_name,inst)
        self.value_footballCardCounts = inst
        return inst

    def footballCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'footballCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("footballCards",_param_name,inst)
        self.value_footballCards = inst
        return inst

    def footballProfile(self,variant,_param_name:str = 'footballProfile') -> 'UserSportProfile':
        param_list = []
        param_list.append(("variant",variant))
        inst = UserSportProfile(self,param_list)
        self._add_to_query("footballProfile",_param_name,inst)
        self.value_footballProfile = inst
        return inst

    def footballRivalsManager(self,_param_name:str = 'footballRivalsManager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("footballRivalsManager",_param_name,inst)
        self.value_footballRivalsManager = inst
        return inst

    def footballUserProfile(self,variant,_param_name:str = 'footballUserProfile') -> 'FootballUserSportProfile':
        param_list = []
        param_list.append(("variant",variant))
        inst = FootballUserSportProfile(self,param_list)
        self._add_to_query("footballUserProfile",_param_name,inst)
        self.value_footballUserProfile = inst
        return inst

    def hoursToAnswerTrades(self,_param_name:str = 'hoursToAnswerTrades'):
        inst = None
        self._add_to_query("hoursToAnswerTrades",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def liveSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'liveSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("liveSingleSaleTokenOffers",_param_name,inst)
        self.value_liveSingleSaleTokenOffers = inst
        return inst

    def lostTokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'lostTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("lostTokenAuctions",_param_name,inst)
        self.value_lostTokenAuctions = inst
        return inst

    def managerProgression(self,sport,_param_name:str = 'managerProgression') -> 'ManagerProgression':
        param_list = []
        param_list.append(("sport",sport))
        inst = ManagerProgression(self,param_list)
        self._add_to_query("managerProgression",_param_name,inst)
        self.value_managerProgression = inst
        return inst

    def managerProgressionTasksCount(self,sport,state,type,_param_name:str = 'managerProgressionTasksCount'):
        inst = None
        self._add_to_query("managerProgressionTasksCount",_param_name)
        pass

    def managerTeams(self,after,before,first,last,_param_name:str = 'managerTeams') -> 'ManagerTeamConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = ManagerTeamConnection(self,param_list)
        self._add_to_query("managerTeams",_param_name,inst)
        self.value_managerTeams = inst
        return inst

    def nbaProfile(self,_param_name:str = 'nbaProfile') -> 'UserSportProfile':
        param_list = []
        inst = UserSportProfile(self,param_list)
        self._add_to_query("nbaProfile",_param_name,inst)
        self.value_nbaProfile = inst
        return inst

    def nbaUserProfile(self,_param_name:str = 'nbaUserProfile') -> 'NBAUserSportProfile':
        param_list = []
        inst = NBAUserSportProfile(self,param_list)
        self._add_to_query("nbaUserProfile",_param_name,inst)
        self.value_nbaUserProfile = inst
        return inst

    def nickname(self,_param_name:str = 'nickname'):
        inst = None
        self._add_to_query("nickname",_param_name)
        pass

    def paginatedCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'paginatedCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("paginatedCards",_param_name,inst)
        self.value_paginatedCards = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def podiumRankings(self,after,before,first,last,ranking,so5LeaderboardType,sport,_param_name:str = 'podiumRankings') -> 'So5RankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("ranking",ranking))
        param_list.append(("so5LeaderboardType",so5LeaderboardType))
        param_list.append(("sport",sport))
        inst = So5RankingConnection(self,param_list)
        self._add_to_query("podiumRankings",_param_name,inst)
        self.value_podiumRankings = inst
        return inst

    def podiums(self,sport,_param_name:str = 'podiums') -> 'So5Podium':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5Podium(self,param_list)
        self._add_to_query("podiums",_param_name,inst)
        self.value_podiums = inst
        return inst

    def profile(self,_param_name:str = 'profile') -> 'UserProfile':
        param_list = []
        inst = UserProfile(self,param_list)
        self._add_to_query("profile",_param_name,inst)
        self.value_profile = inst
        return inst

    def recommendedManagers(self,after,before,first,last,sport,_param_name:str = 'recommendedManagers') -> 'UserConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = UserConnection(self,param_list)
        self._add_to_query("recommendedManagers",_param_name,inst)
        self.value_recommendedManagers = inst
        return inst

    def rewardedRankings(self,after,before,first,last,so5LeaderboardType,sport,_param_name:str = 'rewardedRankings') -> 'So5RankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("so5LeaderboardType",so5LeaderboardType))
        param_list.append(("sport",sport))
        inst = So5RankingConnection(self,param_list)
        self._add_to_query("rewardedRankings",_param_name,inst)
        self.value_rewardedRankings = inst
        return inst

    def singleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'singleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("singleSaleTokenOffers",_param_name,inst)
        self.value_singleSaleTokenOffers = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5TrophiesSummary(self,sport,_param_name:str = 'so5TrophiesSummary') -> 'TrophiesSummary':
        param_list = []
        param_list.append(("sport",sport))
        inst = TrophiesSummary(self,param_list)
        self._add_to_query("so5TrophiesSummary",_param_name,inst)
        self.value_so5TrophiesSummary = inst
        return inst

    def soldSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'soldSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("soldSingleSaleTokenOffers",_param_name,inst)
        self.value_soldSingleSaleTokenOffers = inst
        return inst

    def sorareAddress(self,_param_name:str = 'sorareAddress'):
        inst = None
        self._add_to_query("sorareAddress",_param_name)
        pass

    def starkKey(self,_param_name:str = 'starkKey'):
        inst = None
        self._add_to_query("starkKey",_param_name)
        pass

    def starkKeyRegistered(self,_param_name:str = 'starkKeyRegistered'):
        inst = None
        self._add_to_query("starkKeyRegistered",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def suspended(self,_param_name:str = 'suspended'):
        inst = None
        self._add_to_query("suspended",_param_name)
        pass

    def tokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'tokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("tokenAuctions",_param_name,inst)
        self.value_tokenAuctions = inst
        return inst

    def trophies(self,_param_name:str = 'trophies') -> 'So5Trophies':
        param_list = []
        inst = So5Trophies(self,param_list)
        self._add_to_query("trophies",_param_name,inst)
        self.value_trophies = inst
        return inst

    def trophiesSummary(self,sport,_param_name:str = 'trophiesSummary') -> 'So5TrophiesSummary':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5TrophiesSummary(self,param_list)
        self._add_to_query("trophiesSummary",_param_name,inst)
        self.value_trophiesSummary = inst
        return inst

    def userSportProfile(self,sport,variant,_param_name:str = 'userSportProfile'):
        inst = None
        self._add_to_query("userSportProfile",_param_name)
        pass

    def wonTokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'wonTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("wonTokenAuctions",_param_name,inst)
        self.value_wonTokenAuctions = inst
        return inst

    def avatarUrl(self,_param_name:str = 'avatarUrl'):
        inst = None
        self._add_to_query("avatarUrl",_param_name)
        pass

    def nbaCollections(self,slugsFilter,_param_name:str = 'nbaCollections') -> 'NBACollection':
        param_list = []
        param_list.append(("slugsFilter",slugsFilter))
        inst = NBACollection(self,param_list)
        self._add_to_query("nbaCollections",_param_name,inst)
        self.value_nbaCollections = inst
        return inst

    def nbaCards(self,first,after,playerSlugs,positions,rarities,_param_name:str = 'nbaCards') -> 'NBACardConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        inst = NBACardConnection(self,param_list)
        self._add_to_query("nbaCards",_param_name,inst)
        self.value_nbaCards = inst
        return inst

    def nbaCardCounts(self,_param_name:str = 'nbaCardCounts') -> 'CardCountsByRarity':
        param_list = []
        inst = CardCountsByRarity(self,param_list)
        self._add_to_query("nbaCardCounts",_param_name,inst)
        self.value_nbaCardCounts = inst
        return inst

    def nbaTrophiesSummary(self,_param_name:str = 'nbaTrophiesSummary') -> 'TrophiesSummary':
        param_list = []
        inst = TrophiesSummary(self,param_list)
        self._add_to_query("nbaTrophiesSummary",_param_name,inst)
        self.value_nbaTrophiesSummary = inst
        return inst

    def baseballScoutingMissions(self,_param_name:str = 'baseballScoutingMissions') -> 'BaseballScoutingMission':
        param_list = []
        inst = BaseballScoutingMission(self,param_list)
        self._add_to_query("baseballScoutingMissions",_param_name,inst)
        self.value_baseballScoutingMissions = inst
        return inst

    def baseballCollections(self,slugsFilter,_param_name:str = 'baseballCollections') -> 'BaseballCollection':
        param_list = []
        param_list.append(("slugsFilter",slugsFilter))
        inst = BaseballCollection(self,param_list)
        self._add_to_query("baseballCollections",_param_name,inst)
        self.value_baseballCollections = inst
        return inst

    def baseballCards(self,first,after,playerSlugs,positions,rarities,_param_name:str = 'baseballCards') -> 'BaseballCardConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        inst = BaseballCardConnection(self,param_list)
        self._add_to_query("baseballCards",_param_name,inst)
        self.value_baseballCards = inst
        return inst

    def baseballCardCounts(self,_param_name:str = 'baseballCardCounts') -> 'CardCountsByRarity':
        param_list = []
        inst = CardCountsByRarity(self,param_list)
        self._add_to_query("baseballCardCounts",_param_name,inst)
        self.value_baseballCardCounts = inst
        return inst

    def baseballTrophiesSummary(self,_param_name:str = 'baseballTrophiesSummary') -> 'TrophiesSummary':
        param_list = []
        inst = TrophiesSummary(self,param_list)
        self._add_to_query("baseballTrophiesSummary",_param_name,inst)
        self.value_baseballTrophiesSummary = inst
        return inst


class UserAccountEntry(GraphQLObject):
    value_aasmState = None
    value_account:'Account' = None
    value_amount = None
    value_amountInFiat:'Fiat' = None
    value_amounts:'MonetaryAmount' = None
    value_date = None
    value_entryType = None
    value_id = None
    value_provisional = None
    value_tokenOperation = None
    value_user:'User' = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def account(self,_param_name:str = 'account') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("account",_param_name,inst)
        self.value_account = inst
        return inst

    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def amountInFiat(self,_param_name:str = 'amountInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("amountInFiat",_param_name,inst)
        self.value_amountInFiat = inst
        return inst

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def date(self,_param_name:str = 'date'):
        inst = None
        self._add_to_query("date",_param_name)
        pass

    def entryType(self,_param_name:str = 'entryType'):
        inst = None
        self._add_to_query("entryType",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def provisional(self,_param_name:str = 'provisional'):
        inst = None
        self._add_to_query("provisional",_param_name)
        pass

    def tokenOperation(self,_param_name:str = 'tokenOperation'):
        inst = None
        self._add_to_query("tokenOperation",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class UserAccountEntryEdge(GraphQLObject):
    value_cursor = None
    value_node:'UserAccountEntry' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'UserAccountEntry':
        param_list = []
        inst = UserAccountEntry(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class UserAccountEntryConnection(GraphQLObject):
    value_edges:'list[UserAccountEntryEdge]' = None
    value_nodes:'list[UserAccountEntry]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'UserAccountEntryEdge':
        param_list = []
        inst = UserAccountEntryEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'UserAccountEntry':
        param_list = []
        inst = UserAccountEntry(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class AuctionReminderEdge(GraphQLObject):
    value_cursor = None
    value_node:'AuctionReminder' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'AuctionReminder':
        param_list = []
        inst = AuctionReminder(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class AuctionReminderConnection(GraphQLObject):
    value_edges:'list[AuctionReminderEdge]' = None
    value_nodes:'list[AuctionReminder]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'AuctionReminderEdge':
        param_list = []
        inst = AuctionReminderEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'AuctionReminder':
        param_list = []
        inst = AuctionReminder(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class AuthorizationRequest(GraphQLObject):
    value_cancelledAt = None
    value_consumedAt = None
    value_createdAt = None
    value_fingerprint = None
    value_id = None
    value_operation = None
    value_provisionedAt = None
    value_request = None
    value_reservedAt = None
    value_status = None
    def cancelledAt(self,_param_name:str = 'cancelledAt'):
        inst = None
        self._add_to_query("cancelledAt",_param_name)
        pass

    def consumedAt(self,_param_name:str = 'consumedAt'):
        inst = None
        self._add_to_query("consumedAt",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def fingerprint(self,_param_name:str = 'fingerprint'):
        inst = None
        self._add_to_query("fingerprint",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def operation(self,_param_name:str = 'operation'):
        inst = None
        self._add_to_query("operation",_param_name)
        pass

    def provisionedAt(self,_param_name:str = 'provisionedAt'):
        inst = None
        self._add_to_query("provisionedAt",_param_name)
        pass

    def request(self,_param_name:str = 'request'):
        inst = None
        self._add_to_query("request",_param_name)
        pass

    def reservedAt(self,_param_name:str = 'reservedAt'):
        inst = None
        self._add_to_query("reservedAt",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass


class AuthorizationRequestEdge(GraphQLObject):
    value_cursor = None
    value_node:'AuthorizationRequest' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'AuthorizationRequest':
        param_list = []
        inst = AuthorizationRequest(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class AuthorizationRequestConnection(GraphQLObject):
    value_edges:'list[AuthorizationRequestEdge]' = None
    value_nodes:'list[AuthorizationRequest]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'AuthorizationRequestEdge':
        param_list = []
        inst = AuthorizationRequestEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'AuthorizationRequest':
        param_list = []
        inst = AuthorizationRequest(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class CardShardsChestThresholdProbability(GraphQLObject):
    value_basisPoints = None
    value_quality = None
    def basisPoints(self,_param_name:str = 'basisPoints'):
        inst = None
        self._add_to_query("basisPoints",_param_name)
        pass

    def quality(self,_param_name:str = 'quality'):
        inst = None
        self._add_to_query("quality",_param_name)
        pass


class CardShardsChestThreshold(GraphQLObject):
    value_probabilities:'list[CardShardsChestThresholdProbability]' = None
    value_threshold = None
    def probabilities(self,_param_name:str = 'probabilities') -> 'CardShardsChestThresholdProbability':
        param_list = []
        inst = CardShardsChestThresholdProbability(self,param_list)
        self._add_to_query("probabilities",_param_name,inst)
        self.value_probabilities = inst
        return inst

    def threshold(self,_param_name:str = 'threshold'):
        inst = None
        self._add_to_query("threshold",_param_name)
        pass


class CardShardsChest(GraphQLObject):
    value_card:'AnyCardInterface' = None
    value_cardShardsCount = None
    value_id = None
    value_maxCardShardsCount = None
    value_newThresholdUnlocked = None
    value_rarity = None
    value_revealVideoUrl = None
    value_sport = None
    value_thresholds:'list[CardShardsChestThreshold]' = None
    def card(self,_param_name:str = 'card') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def cardShardsCount(self,_param_name:str = 'cardShardsCount'):
        inst = None
        self._add_to_query("cardShardsCount",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def maxCardShardsCount(self,_param_name:str = 'maxCardShardsCount'):
        inst = None
        self._add_to_query("maxCardShardsCount",_param_name)
        pass

    def newThresholdUnlocked(self,_param_name:str = 'newThresholdUnlocked'):
        inst = None
        self._add_to_query("newThresholdUnlocked",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def revealVideoUrl(self,orientation,_param_name:str = 'revealVideoUrl'):
        inst = None
        self._add_to_query("revealVideoUrl",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def thresholds(self,_param_name:str = 'thresholds') -> 'CardShardsChestThreshold':
        param_list = []
        inst = CardShardsChestThreshold(self,param_list)
        self._add_to_query("thresholds",_param_name,inst)
        self.value_thresholds = inst
        return inst


class ReferralReward(GraphQLObject):
    value_anyCard:'AnyCardInterface' = None
    value_card:'Card' = None
    value_conversionCredit:'ConversionCredit' = None
    value_conversionCreditId = None
    value_id = None
    value_shippingState = None
    value_token:'Token' = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def conversionCreditId(self,_param_name:str = 'conversionCreditId'):
        inst = None
        self._add_to_query("conversionCreditId",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def shippingState(self,_param_name:str = 'shippingState'):
        inst = None
        self._add_to_query("shippingState",_param_name)
        pass

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst


class ReferralRewardEdge(GraphQLObject):
    value_cursor = None
    value_node:'ReferralReward' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class ReferralRewardConnection(GraphQLObject):
    value_edges:'list[ReferralRewardEdge]' = None
    value_nodes:'list[ReferralReward]' = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'ReferralRewardEdge':
        param_list = []
        inst = ReferralRewardEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class OAuthApplication(GraphQLObject):
    value_id = None
    value_myAccessToken:'OAuthAccessToken' = None
    value_name = None
    value_pictureUrl = None
    value_scopes = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def myAccessToken(self,_param_name:str = 'myAccessToken') -> 'OAuthAccessToken':
        param_list = []
        inst = OAuthAccessToken(self,param_list)
        self._add_to_query("myAccessToken",_param_name,inst)
        self.value_myAccessToken = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def scopes(self,_param_name:str = 'scopes'):
        inst = None
        self._add_to_query("scopes",_param_name)
        pass


class OAuthAccessToken(GraphQLObject):
    value_application:'OAuthApplication' = None
    value_createdAt = None
    value_expiresAt = None
    value_id = None
    value_scopes = None
    def application(self,_param_name:str = 'application') -> 'OAuthApplication':
        param_list = []
        inst = OAuthApplication(self,param_list)
        self._add_to_query("application",_param_name,inst)
        self.value_application = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def expiresAt(self,_param_name:str = 'expiresAt'):
        inst = None
        self._add_to_query("expiresAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def scopes(self,_param_name:str = 'scopes'):
        inst = None
        self._add_to_query("scopes",_param_name)
        pass


class ConnectedOAuth(GraphQLObject):
    value_email = None
    value_id = None
    value_provider = None
    def email(self,_param_name:str = 'email'):
        inst = None
        self._add_to_query("email",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def provider(self,_param_name:str = 'provider'):
        inst = None
        self._add_to_query("provider",_param_name)
        pass


class UserDevice(GraphQLObject):
    value_deviceType = None
    value_id = None
    value_lastUsedAt = None
    value_os = None
    value_userAgent = None
    def deviceType(self,_param_name:str = 'deviceType'):
        inst = None
        self._add_to_query("deviceType",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastUsedAt(self,_param_name:str = 'lastUsedAt'):
        inst = None
        self._add_to_query("lastUsedAt",_param_name)
        pass

    def os(self,_param_name:str = 'os'):
        inst = None
        self._add_to_query("os",_param_name)
        pass

    def userAgent(self,_param_name:str = 'userAgent'):
        inst = None
        self._add_to_query("userAgent",_param_name)
        pass


class FootballRivalsAggregatePostGameStories(GraphQLObject):
    value_bestLineup:'FootballRivalsLineup' = None
    value_eloDelta = None
    value_losses = None
    value_wins = None
    def bestLineup(self,_param_name:str = 'bestLineup') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("bestLineup",_param_name,inst)
        self.value_bestLineup = inst
        return inst

    def eloDelta(self,_param_name:str = 'eloDelta'):
        inst = None
        self._add_to_query("eloDelta",_param_name)
        pass

    def losses(self,_param_name:str = 'losses'):
        inst = None
        self._add_to_query("losses",_param_name)
        pass

    def wins(self,_param_name:str = 'wins'):
        inst = None
        self._add_to_query("wins",_param_name)
        pass


class FootballRivalsAggregatedArenaStories(GraphQLObject):
    value_newPoints = None
    value_newRanking = None
    value_previousPoints = None
    value_previousRanking = None
    def newPoints(self,_param_name:str = 'newPoints'):
        inst = None
        self._add_to_query("newPoints",_param_name)
        pass

    def newRanking(self,_param_name:str = 'newRanking'):
        inst = None
        self._add_to_query("newRanking",_param_name)
        pass

    def previousPoints(self,_param_name:str = 'previousPoints'):
        inst = None
        self._add_to_query("previousPoints",_param_name)
        pass

    def previousRanking(self,_param_name:str = 'previousRanking'):
        inst = None
        self._add_to_query("previousRanking",_param_name)
        pass


class StoryInterface(GraphQLObject):
    value_id = None
    value_read = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass


class FootballRivalsCurrentManager(GraphQLObject):
    value_aggregatedUnreadArenaStories:'FootballRivalsAggregatePostGameStories' = None
    value_aggregatedUnreadArenaStoriesResults:'FootballRivalsAggregatedArenaStories' = None
    value_alreadyEnteredArena = None
    value_arenaGames:'FootballRivalsGameConnection' = None
    value_arenaUnlocked = None
    value_canCreateSquad = None
    value_completedOrReadyArenaStreakTask:'FootballManagerTask' = None
    value_completedOrReadyTask:'FootballManagerTask' = None
    value_currentArenaStreak = None
    value_currentEloGroup:'FootballRivalsEloGroup' = None
    value_currentLeaderboard:'FootballRivalsDivisionLeaderboard' = None
    value_currentRanking:'FootballRivalsDivisionRanking' = None
    value_currentSeasonSquad:'FootballRivalsSeasonSquad' = None
    value_dailyClaimTasks:'list[FootballManagerTask]' = None
    value_division = None
    value_divisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_eloGroup = None
    value_eloScore = None
    value_favoriteTeam:'TeamInterface' = None
    value_featuredInvitePictureUrl = None
    value_highestEloScore = None
    value_highestLineupScore = None
    value_highestScore = None
    value_id = None
    value_mostLossesAgainstOpponent:'ChallengesCountAgainstOpponentType' = None
    value_mostWinsAgainstOpponent:'ChallengesCountAgainstOpponentType' = None
    value_myUpcomingReceivedInvitesCount = None
    value_nextArenaFreePlayAvailableAt = None
    value_nextArenaRequestAvailableAt = None
    value_nextArenaTicketClaimableAt = None
    value_nextEloGroup:'FootballRivalsEloGroup' = None
    value_nextUnreadArenaPostGameStories:'FootballRivalsAggregatePostGameStories' = None
    value_nextUnreadArenaPostGameStory:'FootballRivalsGame' = None
    value_nextUnreadBotFriendlyPostGameStory:'FootballRivalsChallenge' = None
    value_nickname = None
    value_pastChallenges:'FootballRivalsChallengeConnection' = None
    value_pastGames:'FootballRivalsGameConnection' = None
    value_pictureUrl = None
    value_rankingHistory:'list[FootballRivalsRankingDelta]' = None
    value_readyArenaStreakTask:'FootballManagerTask' = None
    value_readyTask:'FootballManagerTask' = None
    value_records:'FootballRivalsManagerRecords' = None
    value_remainingArenaRequests = None
    value_remainingBetaInvites = None
    value_sawKickoffWelcomeToKickoff = None
    value_sawKickoffWelcomeToTheArena = None
    value_squad:'FootballRivalsSquad' = None
    value_suggestedManagers:'list[FootballRivalsSuggestedManager]' = None
    value_unreadArenaPostGameStoriesCount = None
    value_unreadArenaStories:'list[Story]' = None
    value_unreadArenaStoriesCount = None
    value_unreadStories:'list[StoryInterface]' = None
    value_upcomingReceivedInvitesCount = None
    value_user:'User' = None
    def aggregatedUnreadArenaStories(self,_param_name:str = 'aggregatedUnreadArenaStories') -> 'FootballRivalsAggregatePostGameStories':
        param_list = []
        inst = FootballRivalsAggregatePostGameStories(self,param_list)
        self._add_to_query("aggregatedUnreadArenaStories",_param_name,inst)
        self.value_aggregatedUnreadArenaStories = inst
        return inst

    def aggregatedUnreadArenaStoriesResults(self,_param_name:str = 'aggregatedUnreadArenaStoriesResults') -> 'FootballRivalsAggregatedArenaStories':
        param_list = []
        inst = FootballRivalsAggregatedArenaStories(self,param_list)
        self._add_to_query("aggregatedUnreadArenaStoriesResults",_param_name,inst)
        self.value_aggregatedUnreadArenaStoriesResults = inst
        return inst

    def alreadyEnteredArena(self,_param_name:str = 'alreadyEnteredArena'):
        inst = None
        self._add_to_query("alreadyEnteredArena",_param_name)
        pass

    def arenaGames(self,after,before,first,last,_param_name:str = 'arenaGames') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("arenaGames",_param_name,inst)
        self.value_arenaGames = inst
        return inst

    def arenaUnlocked(self,_param_name:str = 'arenaUnlocked'):
        inst = None
        self._add_to_query("arenaUnlocked",_param_name)
        pass

    def canCreateSquad(self,_param_name:str = 'canCreateSquad'):
        inst = None
        self._add_to_query("canCreateSquad",_param_name)
        pass

    def completedOrReadyArenaStreakTask(self,_param_name:str = 'completedOrReadyArenaStreakTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("completedOrReadyArenaStreakTask",_param_name,inst)
        self.value_completedOrReadyArenaStreakTask = inst
        return inst

    def completedOrReadyTask(self,_param_name:str = 'completedOrReadyTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("completedOrReadyTask",_param_name,inst)
        self.value_completedOrReadyTask = inst
        return inst

    def currentArenaStreak(self,_param_name:str = 'currentArenaStreak'):
        inst = None
        self._add_to_query("currentArenaStreak",_param_name)
        pass

    def currentEloGroup(self,_param_name:str = 'currentEloGroup') -> 'FootballRivalsEloGroup':
        param_list = []
        inst = FootballRivalsEloGroup(self,param_list)
        self._add_to_query("currentEloGroup",_param_name,inst)
        self.value_currentEloGroup = inst
        return inst

    def currentLeaderboard(self,_param_name:str = 'currentLeaderboard') -> 'FootballRivalsDivisionLeaderboard':
        param_list = []
        inst = FootballRivalsDivisionLeaderboard(self,param_list)
        self._add_to_query("currentLeaderboard",_param_name,inst)
        self.value_currentLeaderboard = inst
        return inst

    def currentRanking(self,_param_name:str = 'currentRanking') -> 'FootballRivalsDivisionRanking':
        param_list = []
        inst = FootballRivalsDivisionRanking(self,param_list)
        self._add_to_query("currentRanking",_param_name,inst)
        self.value_currentRanking = inst
        return inst

    def currentSeasonSquad(self,_param_name:str = 'currentSeasonSquad') -> 'FootballRivalsSeasonSquad':
        param_list = []
        inst = FootballRivalsSeasonSquad(self,param_list)
        self._add_to_query("currentSeasonSquad",_param_name,inst)
        self.value_currentSeasonSquad = inst
        return inst

    def dailyClaimTasks(self,_param_name:str = 'dailyClaimTasks') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("dailyClaimTasks",_param_name,inst)
        self.value_dailyClaimTasks = inst
        return inst

    def division(self,_param_name:str = 'division'):
        inst = None
        self._add_to_query("division",_param_name)
        pass

    def divisionConfig(self,_param_name:str = 'divisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("divisionConfig",_param_name,inst)
        self.value_divisionConfig = inst
        return inst

    def eloGroup(self,_param_name:str = 'eloGroup'):
        inst = None
        self._add_to_query("eloGroup",_param_name)
        pass

    def eloScore(self,_param_name:str = 'eloScore'):
        inst = None
        self._add_to_query("eloScore",_param_name)
        pass

    def favoriteTeam(self,_param_name:str = 'favoriteTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("favoriteTeam",_param_name,inst)
        self.value_favoriteTeam = inst
        return inst

    def featuredInvitePictureUrl(self,_param_name:str = 'featuredInvitePictureUrl'):
        inst = None
        self._add_to_query("featuredInvitePictureUrl",_param_name)
        pass

    def highestEloScore(self,_param_name:str = 'highestEloScore'):
        inst = None
        self._add_to_query("highestEloScore",_param_name)
        pass

    def highestLineupScore(self,_param_name:str = 'highestLineupScore'):
        inst = None
        self._add_to_query("highestLineupScore",_param_name)
        pass

    def highestScore(self,_param_name:str = 'highestScore'):
        inst = None
        self._add_to_query("highestScore",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mostLossesAgainstOpponent(self,_param_name:str = 'mostLossesAgainstOpponent') -> 'ChallengesCountAgainstOpponentType':
        param_list = []
        inst = ChallengesCountAgainstOpponentType(self,param_list)
        self._add_to_query("mostLossesAgainstOpponent",_param_name,inst)
        self.value_mostLossesAgainstOpponent = inst
        return inst

    def mostWinsAgainstOpponent(self,_param_name:str = 'mostWinsAgainstOpponent') -> 'ChallengesCountAgainstOpponentType':
        param_list = []
        inst = ChallengesCountAgainstOpponentType(self,param_list)
        self._add_to_query("mostWinsAgainstOpponent",_param_name,inst)
        self.value_mostWinsAgainstOpponent = inst
        return inst

    def myUpcomingReceivedInvitesCount(self,_param_name:str = 'myUpcomingReceivedInvitesCount'):
        inst = None
        self._add_to_query("myUpcomingReceivedInvitesCount",_param_name)
        pass

    def nextArenaFreePlayAvailableAt(self,_param_name:str = 'nextArenaFreePlayAvailableAt'):
        inst = None
        self._add_to_query("nextArenaFreePlayAvailableAt",_param_name)
        pass

    def nextArenaRequestAvailableAt(self,_param_name:str = 'nextArenaRequestAvailableAt'):
        inst = None
        self._add_to_query("nextArenaRequestAvailableAt",_param_name)
        pass

    def nextArenaTicketClaimableAt(self,_param_name:str = 'nextArenaTicketClaimableAt'):
        inst = None
        self._add_to_query("nextArenaTicketClaimableAt",_param_name)
        pass

    def nextEloGroup(self,_param_name:str = 'nextEloGroup') -> 'FootballRivalsEloGroup':
        param_list = []
        inst = FootballRivalsEloGroup(self,param_list)
        self._add_to_query("nextEloGroup",_param_name,inst)
        self.value_nextEloGroup = inst
        return inst

    def nextUnreadArenaPostGameStories(self,_param_name:str = 'nextUnreadArenaPostGameStories') -> 'FootballRivalsAggregatePostGameStories':
        param_list = []
        inst = FootballRivalsAggregatePostGameStories(self,param_list)
        self._add_to_query("nextUnreadArenaPostGameStories",_param_name,inst)
        self.value_nextUnreadArenaPostGameStories = inst
        return inst

    def nextUnreadArenaPostGameStory(self,_param_name:str = 'nextUnreadArenaPostGameStory') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("nextUnreadArenaPostGameStory",_param_name,inst)
        self.value_nextUnreadArenaPostGameStory = inst
        return inst

    def nextUnreadBotFriendlyPostGameStory(self,_param_name:str = 'nextUnreadBotFriendlyPostGameStory') -> 'FootballRivalsChallenge':
        param_list = []
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("nextUnreadBotFriendlyPostGameStory",_param_name,inst)
        self.value_nextUnreadBotFriendlyPostGameStory = inst
        return inst

    def nickname(self,_param_name:str = 'nickname'):
        inst = None
        self._add_to_query("nickname",_param_name)
        pass

    def pastChallenges(self,after,before,first,last,type,_param_name:str = 'pastChallenges') -> 'FootballRivalsChallengeConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("type",type))
        inst = FootballRivalsChallengeConnection(self,param_list)
        self._add_to_query("pastChallenges",_param_name,inst)
        self.value_pastChallenges = inst
        return inst

    def pastGames(self,after,before,first,last,onlyArena,_param_name:str = 'pastGames') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("onlyArena",onlyArena))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("pastGames",_param_name,inst)
        self.value_pastGames = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def rankingHistory(self,_param_name:str = 'rankingHistory') -> 'FootballRivalsRankingDelta':
        param_list = []
        inst = FootballRivalsRankingDelta(self,param_list)
        self._add_to_query("rankingHistory",_param_name,inst)
        self.value_rankingHistory = inst
        return inst

    def readyArenaStreakTask(self,_param_name:str = 'readyArenaStreakTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("readyArenaStreakTask",_param_name,inst)
        self.value_readyArenaStreakTask = inst
        return inst

    def readyTask(self,_param_name:str = 'readyTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("readyTask",_param_name,inst)
        self.value_readyTask = inst
        return inst

    def records(self,_param_name:str = 'records') -> 'FootballRivalsManagerRecords':
        param_list = []
        inst = FootballRivalsManagerRecords(self,param_list)
        self._add_to_query("records",_param_name,inst)
        self.value_records = inst
        return inst

    def remainingArenaRequests(self,_param_name:str = 'remainingArenaRequests'):
        inst = None
        self._add_to_query("remainingArenaRequests",_param_name)
        pass

    def remainingBetaInvites(self,_param_name:str = 'remainingBetaInvites'):
        inst = None
        self._add_to_query("remainingBetaInvites",_param_name)
        pass

    def sawKickoffWelcomeToKickoff(self,_param_name:str = 'sawKickoffWelcomeToKickoff'):
        inst = None
        self._add_to_query("sawKickoffWelcomeToKickoff",_param_name)
        pass

    def sawKickoffWelcomeToTheArena(self,_param_name:str = 'sawKickoffWelcomeToTheArena'):
        inst = None
        self._add_to_query("sawKickoffWelcomeToTheArena",_param_name)
        pass

    def squad(self,_param_name:str = 'squad') -> 'FootballRivalsSquad':
        param_list = []
        inst = FootballRivalsSquad(self,param_list)
        self._add_to_query("squad",_param_name,inst)
        self.value_squad = inst
        return inst

    def suggestedManagers(self,_param_name:str = 'suggestedManagers') -> 'FootballRivalsSuggestedManager':
        param_list = []
        inst = FootballRivalsSuggestedManager(self,param_list)
        self._add_to_query("suggestedManagers",_param_name,inst)
        self.value_suggestedManagers = inst
        return inst

    def unreadArenaPostGameStoriesCount(self,_param_name:str = 'unreadArenaPostGameStoriesCount'):
        inst = None
        self._add_to_query("unreadArenaPostGameStoriesCount",_param_name)
        pass

    def unreadArenaStories(self,_param_name:str = 'unreadArenaStories') -> 'Story':
        param_list = []
        inst = Story(self,param_list)
        self._add_to_query("unreadArenaStories",_param_name,inst)
        self.value_unreadArenaStories = inst
        return inst

    def unreadArenaStoriesCount(self,_param_name:str = 'unreadArenaStoriesCount'):
        inst = None
        self._add_to_query("unreadArenaStoriesCount",_param_name)
        pass

    def unreadStories(self,_param_name:str = 'unreadStories') -> 'StoryInterface':
        param_list = []
        inst = StoryInterface(self,param_list)
        self._add_to_query("unreadStories",_param_name,inst)
        self.value_unreadStories = inst
        return inst

    def upcomingReceivedInvitesCount(self,_param_name:str = 'upcomingReceivedInvitesCount'):
        inst = None
        self._add_to_query("upcomingReceivedInvitesCount",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class EthMigration(GraphQLObject):
    value_aasmState = None
    value_id = None
    value_nonce = None
    value_weiAmount = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def nonce(self,_param_name:str = 'nonce'):
        inst = None
        self._add_to_query("nonce",_param_name)
        pass

    def weiAmount(self,_param_name:str = 'weiAmount'):
        inst = None
        self._add_to_query("weiAmount",_param_name)
        pass


class Fee(GraphQLObject):
    value_feeLimit = None
    value_sourceVaultId = None
    value_tokenId = None
    def feeLimit(self,_param_name:str = 'feeLimit'):
        inst = None
        self._add_to_query("feeLimit",_param_name)
        pass

    def sourceVaultId(self,_param_name:str = 'sourceVaultId'):
        inst = None
        self._add_to_query("sourceVaultId",_param_name)
        pass

    def tokenId(self,_param_name:str = 'tokenId'):
        inst = None
        self._add_to_query("tokenId",_param_name)
        pass


class FastWithdrawal(GraphQLObject):
    value_amount = None
    value_condition = None
    value_createdAt = None
    value_expirationTimestamp = None
    value_feeInfoUser:'Fee' = None
    value_id = None
    value_nonce = None
    value_quantizedAmount = None
    value_receiverPublicKey = None
    value_receiverVaultId = None
    value_salt = None
    value_senderVaultId = None
    value_status = None
    value_to = None
    value_token = None
    value_transactionHash = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def condition(self,_param_name:str = 'condition'):
        inst = None
        self._add_to_query("condition",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def expirationTimestamp(self,_param_name:str = 'expirationTimestamp'):
        inst = None
        self._add_to_query("expirationTimestamp",_param_name)
        pass

    def feeInfoUser(self,_param_name:str = 'feeInfoUser') -> 'Fee':
        param_list = []
        inst = Fee(self,param_list)
        self._add_to_query("feeInfoUser",_param_name,inst)
        self.value_feeInfoUser = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def nonce(self,_param_name:str = 'nonce'):
        inst = None
        self._add_to_query("nonce",_param_name)
        pass

    def quantizedAmount(self,_param_name:str = 'quantizedAmount'):
        inst = None
        self._add_to_query("quantizedAmount",_param_name)
        pass

    def receiverPublicKey(self,_param_name:str = 'receiverPublicKey'):
        inst = None
        self._add_to_query("receiverPublicKey",_param_name)
        pass

    def receiverVaultId(self,_param_name:str = 'receiverVaultId'):
        inst = None
        self._add_to_query("receiverVaultId",_param_name)
        pass

    def salt(self,_param_name:str = 'salt'):
        inst = None
        self._add_to_query("salt",_param_name)
        pass

    def senderVaultId(self,_param_name:str = 'senderVaultId'):
        inst = None
        self._add_to_query("senderVaultId",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def to(self,_param_name:str = 'to'):
        inst = None
        self._add_to_query("to",_param_name)
        pass

    def token(self,_param_name:str = 'token'):
        inst = None
        self._add_to_query("token",_param_name)
        pass

    def transactionHash(self,_param_name:str = 'transactionHash'):
        inst = None
        self._add_to_query("transactionHash",_param_name)
        pass


class FastWithdrawalWithRates(GraphQLObject):
    value_amount = None
    value_amountInFiat:'Fiat' = None
    value_condition = None
    value_createdAt = None
    value_expirationTimestamp = None
    value_feeInfoUser:'Fee' = None
    value_id = None
    value_nonce = None
    value_quantizedAmount = None
    value_receiverPublicKey = None
    value_receiverVaultId = None
    value_salt = None
    value_senderVaultId = None
    value_status = None
    value_to = None
    value_token = None
    value_transactionHash = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def amountInFiat(self,_param_name:str = 'amountInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("amountInFiat",_param_name,inst)
        self.value_amountInFiat = inst
        return inst

    def condition(self,_param_name:str = 'condition'):
        inst = None
        self._add_to_query("condition",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def expirationTimestamp(self,_param_name:str = 'expirationTimestamp'):
        inst = None
        self._add_to_query("expirationTimestamp",_param_name)
        pass

    def feeInfoUser(self,_param_name:str = 'feeInfoUser') -> 'Fee':
        param_list = []
        inst = Fee(self,param_list)
        self._add_to_query("feeInfoUser",_param_name,inst)
        self.value_feeInfoUser = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def nonce(self,_param_name:str = 'nonce'):
        inst = None
        self._add_to_query("nonce",_param_name)
        pass

    def quantizedAmount(self,_param_name:str = 'quantizedAmount'):
        inst = None
        self._add_to_query("quantizedAmount",_param_name)
        pass

    def receiverPublicKey(self,_param_name:str = 'receiverPublicKey'):
        inst = None
        self._add_to_query("receiverPublicKey",_param_name)
        pass

    def receiverVaultId(self,_param_name:str = 'receiverVaultId'):
        inst = None
        self._add_to_query("receiverVaultId",_param_name)
        pass

    def salt(self,_param_name:str = 'salt'):
        inst = None
        self._add_to_query("salt",_param_name)
        pass

    def senderVaultId(self,_param_name:str = 'senderVaultId'):
        inst = None
        self._add_to_query("senderVaultId",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def to(self,_param_name:str = 'to'):
        inst = None
        self._add_to_query("to",_param_name)
        pass

    def token(self,_param_name:str = 'token'):
        inst = None
        self._add_to_query("token",_param_name)
        pass

    def transactionHash(self,_param_name:str = 'transactionHash'):
        inst = None
        self._add_to_query("transactionHash",_param_name)
        pass


class IntegerBySportType(GraphQLObject):
    value_baseball = None
    value_football = None
    value_nba = None
    def baseball(self,_param_name:str = 'baseball'):
        inst = None
        self._add_to_query("baseball",_param_name)
        pass

    def football(self,_param_name:str = 'football'):
        inst = None
        self._add_to_query("football",_param_name)
        pass

    def nba(self,_param_name:str = 'nba'):
        inst = None
        self._add_to_query("nba",_param_name)
        pass


class MangopayUser(GraphQLObject):
    value_blocked = None
    value_countryOfResidence:'Country' = None
    value_dob = None
    value_firstName = None
    value_id = None
    value_inflowsBlocked = None
    value_lastName = None
    value_mangopayTermsAndConditionsAccepted = None
    value_mangopayUserId = None
    value_nationality:'Country' = None
    value_outflowsBlocked = None
    def blocked(self,_param_name:str = 'blocked'):
        inst = None
        self._add_to_query("blocked",_param_name)
        pass

    def countryOfResidence(self,_param_name:str = 'countryOfResidence') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("countryOfResidence",_param_name,inst)
        self.value_countryOfResidence = inst
        return inst

    def dob(self,_param_name:str = 'dob'):
        inst = None
        self._add_to_query("dob",_param_name)
        pass

    def firstName(self,_param_name:str = 'firstName'):
        inst = None
        self._add_to_query("firstName",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def inflowsBlocked(self,_param_name:str = 'inflowsBlocked'):
        inst = None
        self._add_to_query("inflowsBlocked",_param_name)
        pass

    def lastName(self,_param_name:str = 'lastName'):
        inst = None
        self._add_to_query("lastName",_param_name)
        pass

    def mangopayTermsAndConditionsAccepted(self,_param_name:str = 'mangopayTermsAndConditionsAccepted'):
        inst = None
        self._add_to_query("mangopayTermsAndConditionsAccepted",_param_name)
        pass

    def mangopayUserId(self,_param_name:str = 'mangopayUserId'):
        inst = None
        self._add_to_query("mangopayUserId",_param_name)
        pass

    def nationality(self,_param_name:str = 'nationality') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("nationality",_param_name,inst)
        self.value_nationality = inst
        return inst

    def outflowsBlocked(self,_param_name:str = 'outflowsBlocked'):
        inst = None
        self._add_to_query("outflowsBlocked",_param_name)
        pass


class PrivateAccount(GraphQLObject):
    value_account:'Account' = None
    value_accountable = None
    value_id = None
    def account(self,_param_name:str = 'account') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("account",_param_name,inst)
        self.value_account = inst
        return inst

    def accountable(self,_param_name:str = 'accountable'):
        inst = None
        self._add_to_query("accountable",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class EmailSubscriptionEdge(GraphQLObject):
    value_cursor = None
    value_node:'EmailSubscription' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class EmailSubscriptionConnection(GraphQLObject):
    value_edges:'list[EmailSubscriptionEdge]' = None
    value_nodes:'list[EmailSubscription]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'EmailSubscriptionEdge':
        param_list = []
        inst = EmailSubscriptionEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class NotificationEdge(GraphQLObject):
    value_cursor = None
    value_node = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node'):
        inst = None
        self._add_to_query("node",_param_name)
        pass


class NotificationConnection(GraphQLObject):
    value_edges:'list[NotificationEdge]' = None
    value_nodes = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'NotificationEdge':
        param_list = []
        inst = NotificationEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes'):
        inst = None
        self._add_to_query("nodes",_param_name)
        pass

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class Notifications(GraphQLObject):
    value_notifications:'NotificationConnection' = None
    value_unreadCount = None
    def notifications(self,after,before,first,last,_param_name:str = 'notifications') -> 'NotificationConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = NotificationConnection(self,param_list)
        self._add_to_query("notifications",_param_name,inst)
        self.value_notifications = inst
        return inst

    def unreadCount(self,_param_name:str = 'unreadCount'):
        inst = None
        self._add_to_query("unreadCount",_param_name)
        pass


class CardDrop(GraphQLObject):
    value_pictureUrl = None
    value_slug = None
    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass


class OnboardingTask(GraphQLObject):
    value_drop:'list[CardDrop]' = None
    value_forced = None
    value_id = None
    value_name = None
    value_state = None
    value_steps = None
    def drop(self,_param_name:str = 'drop') -> 'CardDrop':
        param_list = []
        inst = CardDrop(self,param_list)
        self._add_to_query("drop",_param_name,inst)
        self.value_drop = inst
        return inst

    def forced(self,_param_name:str = 'forced'):
        inst = None
        self._add_to_query("forced",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass

    def steps(self,_param_name:str = 'steps'):
        inst = None
        self._add_to_query("steps",_param_name)
        pass


class Onboarding(GraphQLObject):
    value_completed = None
    value_enabled = None
    value_id = None
    value_skipped = None
    value_specialEventCompleted = None
    value_specialEventStarted = None
    value_tasks:'list[OnboardingTask]' = None
    value_variant = None
    def completed(self,_param_name:str = 'completed'):
        inst = None
        self._add_to_query("completed",_param_name)
        pass

    def enabled(self,_param_name:str = 'enabled'):
        inst = None
        self._add_to_query("enabled",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def skipped(self,_param_name:str = 'skipped'):
        inst = None
        self._add_to_query("skipped",_param_name)
        pass

    def specialEventCompleted(self,_param_name:str = 'specialEventCompleted'):
        inst = None
        self._add_to_query("specialEventCompleted",_param_name)
        pass

    def specialEventStarted(self,_param_name:str = 'specialEventStarted'):
        inst = None
        self._add_to_query("specialEventStarted",_param_name)
        pass

    def tasks(self,_param_name:str = 'tasks') -> 'OnboardingTask':
        param_list = []
        inst = OnboardingTask(self,param_list)
        self._add_to_query("tasks",_param_name,inst)
        self.value_tasks = inst
        return inst

    def variant(self,_param_name:str = 'variant'):
        inst = None
        self._add_to_query("variant",_param_name)
        pass


class CreditCard(GraphQLObject):
    value_brand = None
    value_expMonth = None
    value_expYear = None
    value_last4 = None
    def brand(self,_param_name:str = 'brand'):
        inst = None
        self._add_to_query("brand",_param_name)
        pass

    def expMonth(self,_param_name:str = 'expMonth'):
        inst = None
        self._add_to_query("expMonth",_param_name)
        pass

    def expYear(self,_param_name:str = 'expYear'):
        inst = None
        self._add_to_query("expYear",_param_name)
        pass

    def last4(self,_param_name:str = 'last4'):
        inst = None
        self._add_to_query("last4",_param_name)
        pass


class PaymentMethod(GraphQLObject):
    value_card:'CreditCard' = None
    value_id = None
    def card(self,_param_name:str = 'card') -> 'CreditCard':
        param_list = []
        inst = CreditCard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class PendingDeposit(GraphQLObject):
    value_amount = None
    value_amountInFiat:'Fiat' = None
    value_amounts:'MonetaryAmount' = None
    value_date = None
    value_feeAmounts:'MonetaryAmount' = None
    value_id = None
    value_providerType = None
    value_status = None
    value_transactionHash = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def amountInFiat(self,_param_name:str = 'amountInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("amountInFiat",_param_name,inst)
        self.value_amountInFiat = inst
        return inst

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def date(self,_param_name:str = 'date'):
        inst = None
        self._add_to_query("date",_param_name)
        pass

    def feeAmounts(self,_param_name:str = 'feeAmounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("feeAmounts",_param_name,inst)
        self.value_feeAmounts = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def providerType(self,_param_name:str = 'providerType'):
        inst = None
        self._add_to_query("providerType",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def transactionHash(self,_param_name:str = 'transactionHash'):
        inst = None
        self._add_to_query("transactionHash",_param_name)
        pass


class ProbabilisticBundleEdge(GraphQLObject):
    value_cursor = None
    value_node:'ProbabilisticBundle' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class ProbabilisticBundleConnection(GraphQLObject):
    value_edges:'list[ProbabilisticBundleEdge]' = None
    value_nodes:'list[ProbabilisticBundle]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'ProbabilisticBundleEdge':
        param_list = []
        inst = ProbabilisticBundleEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class Referral(GraphQLObject):
    value_aasmState = None
    value_completedAt = None
    value_expirationDate = None
    value_id = None
    value_referee:'User' = None
    value_refereeCardsBoughtAtAuctionCount = None
    value_refereeConfirmedAt = None
    value_refereeIdentification = None
    value_refereeInvitationSentAt = None
    value_refereeSportCardsBoughtAtAuctionCount = None
    value_refereeSportCardsBoughtFromPrimaryMarketCount = None
    value_referrer = None
    value_referrerReward:'ReferralReward' = None
    value_referrerRewards:'list[ReferralReward]' = None
    value_sport = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def completedAt(self,_param_name:str = 'completedAt'):
        inst = None
        self._add_to_query("completedAt",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def referee(self,_param_name:str = 'referee') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("referee",_param_name,inst)
        self.value_referee = inst
        return inst

    def refereeCardsBoughtAtAuctionCount(self,_param_name:str = 'refereeCardsBoughtAtAuctionCount'):
        inst = None
        self._add_to_query("refereeCardsBoughtAtAuctionCount",_param_name)
        pass

    def refereeConfirmedAt(self,_param_name:str = 'refereeConfirmedAt'):
        inst = None
        self._add_to_query("refereeConfirmedAt",_param_name)
        pass

    def refereeIdentification(self,_param_name:str = 'refereeIdentification'):
        inst = None
        self._add_to_query("refereeIdentification",_param_name)
        pass

    def refereeInvitationSentAt(self,_param_name:str = 'refereeInvitationSentAt'):
        inst = None
        self._add_to_query("refereeInvitationSentAt",_param_name)
        pass

    def refereeSportCardsBoughtAtAuctionCount(self,sport,_param_name:str = 'refereeSportCardsBoughtAtAuctionCount'):
        inst = None
        self._add_to_query("refereeSportCardsBoughtAtAuctionCount",_param_name)
        pass

    def refereeSportCardsBoughtFromPrimaryMarketCount(self,sport,_param_name:str = 'refereeSportCardsBoughtFromPrimaryMarketCount'):
        inst = None
        self._add_to_query("refereeSportCardsBoughtFromPrimaryMarketCount",_param_name)
        pass

    def referrer(self,_param_name:str = 'referrer'):
        inst = None
        self._add_to_query("referrer",_param_name)
        pass

    def referrerReward(self,_param_name:str = 'referrerReward') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("referrerReward",_param_name,inst)
        self.value_referrerReward = inst
        return inst

    def referrerRewards(self,_param_name:str = 'referrerRewards') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("referrerRewards",_param_name,inst)
        self.value_referrerRewards = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class ReferralMilestoneReward(GraphQLObject):
    value_id = None
    value_referralNumber = None
    value_reward:'ReferralReward' = None
    value_rewardRarity = None
    value_rewardTier = None
    value_sport = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def referralNumber(self,_param_name:str = 'referralNumber'):
        inst = None
        self._add_to_query("referralNumber",_param_name)
        pass

    def reward(self,_param_name:str = 'reward') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("reward",_param_name,inst)
        self.value_reward = inst
        return inst

    def rewardRarity(self,_param_name:str = 'rewardRarity'):
        inst = None
        self._add_to_query("rewardRarity",_param_name)
        pass

    def rewardTier(self,_param_name:str = 'rewardTier'):
        inst = None
        self._add_to_query("rewardTier",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class ReferralChallengeStats(GraphQLObject):
    value_completed = None
    value_failed = None
    value_inProgress = None
    def completed(self,_param_name:str = 'completed'):
        inst = None
        self._add_to_query("completed",_param_name)
        pass

    def failed(self,_param_name:str = 'failed'):
        inst = None
        self._add_to_query("failed",_param_name)
        pass

    def inProgress(self,_param_name:str = 'inProgress'):
        inst = None
        self._add_to_query("inProgress",_param_name)
        pass


class ReferralSpecialEventChallenge(GraphQLObject):
    value_description = None
    value_id = None
    value_stats:'ReferralChallengeStats' = None
    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def stats(self,_param_name:str = 'stats') -> 'ReferralChallengeStats':
        param_list = []
        inst = ReferralChallengeStats(self,param_list)
        self._add_to_query("stats",_param_name,inst)
        self.value_stats = inst
        return inst


class ReferralConversionCreditConfig(GraphQLObject):
    value_maxDiscount:'MonetaryAmount' = None
    value_percentageDiscountBasisPoints = None
    def maxDiscount(self,_param_name:str = 'maxDiscount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("maxDiscount",_param_name,inst)
        self.value_maxDiscount = inst
        return inst

    def percentageDiscountBasisPoints(self,_param_name:str = 'percentageDiscountBasisPoints'):
        inst = None
        self._add_to_query("percentageDiscountBasisPoints",_param_name)
        pass


class ReferralLeaderboardRanking(GraphQLObject):
    value_id = None
    value_ranking = None
    value_score = None
    value_scoreReachedAt = None
    value_user:'User' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def scoreReachedAt(self,_param_name:str = 'scoreReachedAt'):
        inst = None
        self._add_to_query("scoreReachedAt",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class ReferralLeaderboardRankingEdge(GraphQLObject):
    value_cursor = None
    value_node:'ReferralLeaderboardRanking' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'ReferralLeaderboardRanking':
        param_list = []
        inst = ReferralLeaderboardRanking(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class ReferralLeaderboardRankingConnection(GraphQLObject):
    value_edges:'list[ReferralLeaderboardRankingEdge]' = None
    value_nodes:'list[ReferralLeaderboardRanking]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'ReferralLeaderboardRankingEdge':
        param_list = []
        inst = ReferralLeaderboardRankingEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'ReferralLeaderboardRanking':
        param_list = []
        inst = ReferralLeaderboardRanking(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class ReferralLeaderboard(GraphQLObject):
    value_id = None
    value_lastRefreshedAt = None
    value_rankings:'ReferralLeaderboardRankingConnection' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastRefreshedAt(self,_param_name:str = 'lastRefreshedAt'):
        inst = None
        self._add_to_query("lastRefreshedAt",_param_name)
        pass

    def rankings(self,after,before,first,last,_param_name:str = 'rankings') -> 'ReferralLeaderboardRankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = ReferralLeaderboardRankingConnection(self,param_list)
        self._add_to_query("rankings",_param_name,inst)
        self.value_rankings = inst
        return inst


class ReferralTile(GraphQLObject):
    value_backgroundUrl = None
    value_congratsMessage = None
    value_description = None
    value_desktopBgImageUrl = None
    value_desktopVariationBgImageUrl = None
    value_dialogBackgroundUrl = None
    value_iconUrl = None
    value_id = None
    value_mobileBgImageUrl = None
    value_mobileVariationBgImageUrl = None
    value_title = None
    value_titleImageUrl = None
    def backgroundUrl(self,_param_name:str = 'backgroundUrl'):
        inst = None
        self._add_to_query("backgroundUrl",_param_name)
        pass

    def congratsMessage(self,_param_name:str = 'congratsMessage'):
        inst = None
        self._add_to_query("congratsMessage",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def desktopBgImageUrl(self,_param_name:str = 'desktopBgImageUrl'):
        inst = None
        self._add_to_query("desktopBgImageUrl",_param_name)
        pass

    def desktopVariationBgImageUrl(self,_param_name:str = 'desktopVariationBgImageUrl'):
        inst = None
        self._add_to_query("desktopVariationBgImageUrl",_param_name)
        pass

    def dialogBackgroundUrl(self,_param_name:str = 'dialogBackgroundUrl'):
        inst = None
        self._add_to_query("dialogBackgroundUrl",_param_name)
        pass

    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mobileBgImageUrl(self,_param_name:str = 'mobileBgImageUrl'):
        inst = None
        self._add_to_query("mobileBgImageUrl",_param_name)
        pass

    def mobileVariationBgImageUrl(self,_param_name:str = 'mobileVariationBgImageUrl'):
        inst = None
        self._add_to_query("mobileVariationBgImageUrl",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def titleImageUrl(self,_param_name:str = 'titleImageUrl'):
        inst = None
        self._add_to_query("titleImageUrl",_param_name)
        pass


class ReferralSpecialEvent(GraphQLObject):
    value_challenges:'list[ReferralSpecialEventChallenge]' = None
    value_config:'ReferralConversionCreditConfig' = None
    value_id = None
    value_leaderboard:'ReferralLeaderboard' = None
    value_stats:'ReferralChallengeStats' = None
    value_tile:'ReferralTile' = None
    def challenges(self,_param_name:str = 'challenges') -> 'ReferralSpecialEventChallenge':
        param_list = []
        inst = ReferralSpecialEventChallenge(self,param_list)
        self._add_to_query("challenges",_param_name,inst)
        self.value_challenges = inst
        return inst

    def config(self,_param_name:str = 'config') -> 'ReferralConversionCreditConfig':
        param_list = []
        inst = ReferralConversionCreditConfig(self,param_list)
        self._add_to_query("config",_param_name,inst)
        self.value_config = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'ReferralLeaderboard':
        param_list = []
        inst = ReferralLeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def stats(self,_param_name:str = 'stats') -> 'ReferralChallengeStats':
        param_list = []
        inst = ReferralChallengeStats(self,param_list)
        self._add_to_query("stats",_param_name,inst)
        self.value_stats = inst
        return inst

    def tile(self,_param_name:str = 'tile') -> 'ReferralTile':
        param_list = []
        inst = ReferralTile(self,param_list)
        self._add_to_query("tile",_param_name,inst)
        self.value_tile = inst
        return inst


class ReferralPaginated(GraphQLObject):
    value_currentPage = None
    value_id = None
    value_nodes:'list[Referral]' = None
    value_pages = None
    value_referrals:'list[Referral]' = None
    value_totalCount = None
    def currentPage(self,_param_name:str = 'currentPage'):
        inst = None
        self._add_to_query("currentPage",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def nodes(self,_param_name:str = 'nodes') -> 'Referral':
        param_list = []
        inst = Referral(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pages(self,_param_name:str = 'pages'):
        inst = None
        self._add_to_query("pages",_param_name)
        pass

    def referrals(self,_param_name:str = 'referrals') -> 'Referral':
        param_list = []
        inst = Referral(self,param_list)
        self._add_to_query("referrals",_param_name,inst)
        self.value_referrals = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class RevealedCardsSummary(GraphQLObject):
    value_cards:'AnyCardInterfaceConnection' = None
    value_id = None
    value_season:'Season' = None
    value_sport = None
    value_totalCards = None
    value_totalSpecialEditionCards = None
    def cards(self,after,before,first,last,_param_name:str = 'cards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def totalCards(self,_param_name:str = 'totalCards'):
        inst = None
        self._add_to_query("totalCards",_param_name)
        pass

    def totalSpecialEditionCards(self,_param_name:str = 'totalSpecialEditionCards'):
        inst = None
        self._add_to_query("totalSpecialEditionCards",_param_name)
        pass


class AnyRewardInterfaceEdge(GraphQLObject):
    value_cursor = None
    value_node:'AnyRewardInterface' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class AnyRewardInterfaceConnection(GraphQLObject):
    value_edges:'list[AnyRewardInterfaceEdge]' = None
    value_nodes:'list[AnyRewardInterface]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'AnyRewardInterfaceEdge':
        param_list = []
        inst = AnyRewardInterfaceEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class SorarePrivateKey(GraphQLObject):
    value_encryptedPrivateKey = None
    value_iv = None
    value_salt = None
    def encryptedPrivateKey(self,_param_name:str = 'encryptedPrivateKey'):
        inst = None
        self._add_to_query("encryptedPrivateKey",_param_name)
        pass

    def iv(self,_param_name:str = 'iv'):
        inst = None
        self._add_to_query("iv",_param_name)
        pass

    def salt(self,_param_name:str = 'salt'):
        inst = None
        self._add_to_query("salt",_param_name)
        pass


class Payment(GraphQLObject):
    value_aasmState = None
    value_amount = None
    value_amountInFiat:'Fiat' = None
    value_creditCardReceiptAvailable = None
    value_creditCardReceiptSent = None
    value_fiat = None
    value_fiatAmount = None
    value_fiatCurrency = None
    value_fiatReceiptUrl = None
    value_id = None
    value_spentAt = None
    value_tokenOperation = None
    value_user:'User' = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def amountInFiat(self,_param_name:str = 'amountInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("amountInFiat",_param_name,inst)
        self.value_amountInFiat = inst
        return inst

    def creditCardReceiptAvailable(self,_param_name:str = 'creditCardReceiptAvailable'):
        inst = None
        self._add_to_query("creditCardReceiptAvailable",_param_name)
        pass

    def creditCardReceiptSent(self,_param_name:str = 'creditCardReceiptSent'):
        inst = None
        self._add_to_query("creditCardReceiptSent",_param_name)
        pass

    def fiat(self,_param_name:str = 'fiat'):
        inst = None
        self._add_to_query("fiat",_param_name)
        pass

    def fiatAmount(self,_param_name:str = 'fiatAmount'):
        inst = None
        self._add_to_query("fiatAmount",_param_name)
        pass

    def fiatCurrency(self,_param_name:str = 'fiatCurrency'):
        inst = None
        self._add_to_query("fiatCurrency",_param_name)
        pass

    def fiatReceiptUrl(self,_param_name:str = 'fiatReceiptUrl'):
        inst = None
        self._add_to_query("fiatReceiptUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def spentAt(self,_param_name:str = 'spentAt'):
        inst = None
        self._add_to_query("spentAt",_param_name)
        pass

    def tokenOperation(self,_param_name:str = 'tokenOperation'):
        inst = None
        self._add_to_query("tokenOperation",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class PaymentEdge(GraphQLObject):
    value_cursor = None
    value_node:'Payment' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'Payment':
        param_list = []
        inst = Payment(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class PaymentConnection(GraphQLObject):
    value_edges:'list[PaymentEdge]' = None
    value_nodes:'list[Payment]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'PaymentEdge':
        param_list = []
        inst = PaymentEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'Payment':
        param_list = []
        inst = Payment(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class ConversionCreditEdge(GraphQLObject):
    value_cursor = None
    value_node:'ConversionCredit' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class ConversionCreditConnection(GraphQLObject):
    value_edges:'list[ConversionCreditEdge]' = None
    value_nodes:'list[ConversionCredit]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'ConversionCreditEdge':
        param_list = []
        inst = ConversionCreditEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class ActionReward(GraphQLObject):
    value_action = None
    value_id = None
    value_pickSize = None
    value_pickablePlayers:'list[PickablePlayer]' = None
    value_rewardCards:'list[RewardCard]' = None
    value_shippingState = None
    def action(self,_param_name:str = 'action'):
        inst = None
        self._add_to_query("action",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pickSize(self,_param_name:str = 'pickSize'):
        inst = None
        self._add_to_query("pickSize",_param_name)
        pass

    def pickablePlayers(self,_param_name:str = 'pickablePlayers') -> 'PickablePlayer':
        param_list = []
        inst = PickablePlayer(self,param_list)
        self._add_to_query("pickablePlayers",_param_name,inst)
        self.value_pickablePlayers = inst
        return inst

    def rewardCards(self,_param_name:str = 'rewardCards') -> 'RewardCard':
        param_list = []
        inst = RewardCard(self,param_list)
        self._add_to_query("rewardCards",_param_name,inst)
        self.value_rewardCards = inst
        return inst

    def shippingState(self,_param_name:str = 'shippingState'):
        inst = None
        self._add_to_query("shippingState",_param_name)
        pass


class DeliverableItemOrder(GraphQLObject):
    value_aasmState = None
    value_claimedAt = None
    value_createdAt = None
    value_deliverableItem:'DeliverableItemInterface' = None
    value_expiresAt = None
    value_id = None
    value_status = None
    value_user:'User' = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def claimedAt(self,_param_name:str = 'claimedAt'):
        inst = None
        self._add_to_query("claimedAt",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def deliverableItem(self,_param_name:str = 'deliverableItem') -> 'DeliverableItemInterface':
        param_list = []
        inst = DeliverableItemInterface(self,param_list)
        self._add_to_query("deliverableItem",_param_name,inst)
        self.value_deliverableItem = inst
        return inst

    def expiresAt(self,_param_name:str = 'expiresAt'):
        inst = None
        self._add_to_query("expiresAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class UserRelation(GraphQLObject):
    value_id = None
    value_knownAs = None
    value_knownPhoneNumber = None
    value_knownUser:'User' = None
    value_user:'User' = None
    value_userDiscoverableName = None
    value_userRelationsInCommonCount = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def knownAs(self,_param_name:str = 'knownAs'):
        inst = None
        self._add_to_query("knownAs",_param_name)
        pass

    def knownPhoneNumber(self,_param_name:str = 'knownPhoneNumber'):
        inst = None
        self._add_to_query("knownPhoneNumber",_param_name)
        pass

    def knownUser(self,_param_name:str = 'knownUser') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("knownUser",_param_name,inst)
        self.value_knownUser = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def userDiscoverableName(self,_param_name:str = 'userDiscoverableName'):
        inst = None
        self._add_to_query("userDiscoverableName",_param_name)
        pass

    def userRelationsInCommonCount(self,_param_name:str = 'userRelationsInCommonCount'):
        inst = None
        self._add_to_query("userRelationsInCommonCount",_param_name)
        pass


class UserRelationEdge(GraphQLObject):
    value_cursor = None
    value_node:'UserRelation' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'UserRelation':
        param_list = []
        inst = UserRelation(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class UserRelationConnection(GraphQLObject):
    value_edges:'list[UserRelationEdge]' = None
    value_nodes:'list[UserRelation]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'UserRelationEdge':
        param_list = []
        inst = UserRelationEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'UserRelation':
        param_list = []
        inst = UserRelation(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class NotificationPreference(GraphQLObject):
    value_defaultValue = None
    value_labels = None
    value_name = None
    value_value = None
    value_values = None
    def defaultValue(self,_param_name:str = 'defaultValue'):
        inst = None
        self._add_to_query("defaultValue",_param_name)
        pass

    def labels(self,_param_name:str = 'labels'):
        inst = None
        self._add_to_query("labels",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def value(self,_param_name:str = 'value'):
        inst = None
        self._add_to_query("value",_param_name)
        pass

    def values(self,_param_name:str = 'values'):
        inst = None
        self._add_to_query("values",_param_name)
        pass


class PostalAddress(GraphQLObject):
    value_additionalAddress = None
    value_city = None
    value_company = None
    value_country:'Country' = None
    value_countryCode = None
    value_firstName = None
    value_lastName = None
    value_streetAddress = None
    value_zipcode = None
    def additionalAddress(self,_param_name:str = 'additionalAddress'):
        inst = None
        self._add_to_query("additionalAddress",_param_name)
        pass

    def city(self,_param_name:str = 'city'):
        inst = None
        self._add_to_query("city",_param_name)
        pass

    def company(self,_param_name:str = 'company'):
        inst = None
        self._add_to_query("company",_param_name)
        pass

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def countryCode(self,_param_name:str = 'countryCode'):
        inst = None
        self._add_to_query("countryCode",_param_name)
        pass

    def firstName(self,_param_name:str = 'firstName'):
        inst = None
        self._add_to_query("firstName",_param_name)
        pass

    def lastName(self,_param_name:str = 'lastName'):
        inst = None
        self._add_to_query("lastName",_param_name)
        pass

    def streetAddress(self,_param_name:str = 'streetAddress'):
        inst = None
        self._add_to_query("streetAddress",_param_name)
        pass

    def zipcode(self,_param_name:str = 'zipcode'):
        inst = None
        self._add_to_query("zipcode",_param_name)
        pass


class UserSettings(GraphQLObject):
    value_ageLimitDisclaimer = None
    value_autoAcceptRivalsChallenges = None
    value_currency = None
    value_disableAllEmails = None
    value_discoverable = None
    value_discoverableName = None
    value_enabledWallets = None
    value_fiatCurrency = None
    value_hideBalance = None
    value_hideCommonCards = None
    value_hideFullyCompletedTutorials = None
    value_hidePermanentTutorials = None
    value_id = None
    value_lifecycle = None
    value_locale = None
    value_notificationPreferences:'list[NotificationPreference]' = None
    value_postalAddress:'PostalAddress' = None
    value_referrerPreferredRewardSport = None
    value_rewardCurrency = None
    value_suggestedDiscoverableName = None
    value_tcuStatus = None
    def ageLimitDisclaimer(self,_param_name:str = 'ageLimitDisclaimer'):
        inst = None
        self._add_to_query("ageLimitDisclaimer",_param_name)
        pass

    def autoAcceptRivalsChallenges(self,_param_name:str = 'autoAcceptRivalsChallenges'):
        inst = None
        self._add_to_query("autoAcceptRivalsChallenges",_param_name)
        pass

    def currency(self,_param_name:str = 'currency'):
        inst = None
        self._add_to_query("currency",_param_name)
        pass

    def disableAllEmails(self,_param_name:str = 'disableAllEmails'):
        inst = None
        self._add_to_query("disableAllEmails",_param_name)
        pass

    def discoverable(self,_param_name:str = 'discoverable'):
        inst = None
        self._add_to_query("discoverable",_param_name)
        pass

    def discoverableName(self,_param_name:str = 'discoverableName'):
        inst = None
        self._add_to_query("discoverableName",_param_name)
        pass

    def enabledWallets(self,_param_name:str = 'enabledWallets'):
        inst = None
        self._add_to_query("enabledWallets",_param_name)
        pass

    def fiatCurrency(self,_param_name:str = 'fiatCurrency'):
        inst = None
        self._add_to_query("fiatCurrency",_param_name)
        pass

    def hideBalance(self,_param_name:str = 'hideBalance'):
        inst = None
        self._add_to_query("hideBalance",_param_name)
        pass

    def hideCommonCards(self,_param_name:str = 'hideCommonCards'):
        inst = None
        self._add_to_query("hideCommonCards",_param_name)
        pass

    def hideFullyCompletedTutorials(self,_param_name:str = 'hideFullyCompletedTutorials'):
        inst = None
        self._add_to_query("hideFullyCompletedTutorials",_param_name)
        pass

    def hidePermanentTutorials(self,_param_name:str = 'hidePermanentTutorials'):
        inst = None
        self._add_to_query("hidePermanentTutorials",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lifecycle(self,_param_name:str = 'lifecycle'):
        inst = None
        self._add_to_query("lifecycle",_param_name)
        pass

    def locale(self,_param_name:str = 'locale'):
        inst = None
        self._add_to_query("locale",_param_name)
        pass

    def notificationPreferences(self,sport,_param_name:str = 'notificationPreferences') -> 'NotificationPreference':
        param_list = []
        param_list.append(("sport",sport))
        inst = NotificationPreference(self,param_list)
        self._add_to_query("notificationPreferences",_param_name,inst)
        self.value_notificationPreferences = inst
        return inst

    def postalAddress(self,_param_name:str = 'postalAddress') -> 'PostalAddress':
        param_list = []
        inst = PostalAddress(self,param_list)
        self._add_to_query("postalAddress",_param_name,inst)
        self.value_postalAddress = inst
        return inst

    def referrerPreferredRewardSport(self,_param_name:str = 'referrerPreferredRewardSport'):
        inst = None
        self._add_to_query("referrerPreferredRewardSport",_param_name)
        pass

    def rewardCurrency(self,_param_name:str = 'rewardCurrency'):
        inst = None
        self._add_to_query("rewardCurrency",_param_name)
        pass

    def suggestedDiscoverableName(self,_param_name:str = 'suggestedDiscoverableName'):
        inst = None
        self._add_to_query("suggestedDiscoverableName",_param_name)
        pass

    def tcuStatus(self,_param_name:str = 'tcuStatus'):
        inst = None
        self._add_to_query("tcuStatus",_param_name)
        pass


class PasswordEncryptedPrivateKey(GraphQLObject):
    value_iv = None
    value_payload = None
    value_salt = None
    def iv(self,_param_name:str = 'iv'):
        inst = None
        self._add_to_query("iv",_param_name)
        pass

    def payload(self,_param_name:str = 'payload'):
        inst = None
        self._add_to_query("payload",_param_name)
        pass

    def salt(self,_param_name:str = 'salt'):
        inst = None
        self._add_to_query("salt",_param_name)
        pass


class PrivateKeyRecoveryPayload(GraphQLObject):
    value_encryptionKey = None
    value_iv = None
    value_ivTemp = None
    value_payload = None
    def encryptionKey(self,_param_name:str = 'encryptionKey'):
        inst = None
        self._add_to_query("encryptionKey",_param_name)
        pass

    def iv(self,_param_name:str = 'iv'):
        inst = None
        self._add_to_query("iv",_param_name)
        pass

    def ivTemp(self,_param_name:str = 'ivTemp'):
        inst = None
        self._add_to_query("ivTemp",_param_name)
        pass

    def payload(self,_param_name:str = 'payload'):
        inst = None
        self._add_to_query("payload",_param_name)
        pass


class PrivateKeyRecoveryOption(GraphQLObject):
    value_destination = None
    value_id = None
    value_method = None
    value_status = None
    def destination(self,_param_name:str = 'destination'):
        inst = None
        self._add_to_query("destination",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def method(self,_param_name:str = 'method'):
        inst = None
        self._add_to_query("method",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass


class UserWallet(GraphQLObject):
    value_ethereumAddress = None
    value_holdsValue = None
    value_id = None
    value_passwordEncryptedPrivateKey:'PasswordEncryptedPrivateKey' = None
    value_privateKeyRecoveryPayload:'PrivateKeyRecoveryPayload' = None
    value_privateKeyRecoveryPayloads:'list[PrivateKeyRecoveryPayload]' = None
    value_recoveryOptions:'list[PrivateKeyRecoveryOption]' = None
    value_starkKey = None
    value_starkKeyWithPrefix = None
    value_status = None
    def ethereumAddress(self,_param_name:str = 'ethereumAddress'):
        inst = None
        self._add_to_query("ethereumAddress",_param_name)
        pass

    def holdsValue(self,_param_name:str = 'holdsValue'):
        inst = None
        self._add_to_query("holdsValue",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def passwordEncryptedPrivateKey(self,_param_name:str = 'passwordEncryptedPrivateKey') -> 'PasswordEncryptedPrivateKey':
        param_list = []
        inst = PasswordEncryptedPrivateKey(self,param_list)
        self._add_to_query("passwordEncryptedPrivateKey",_param_name,inst)
        self.value_passwordEncryptedPrivateKey = inst
        return inst

    def privateKeyRecoveryPayload(self,id,_param_name:str = 'privateKeyRecoveryPayload') -> 'PrivateKeyRecoveryPayload':
        param_list = []
        param_list.append(("id",id))
        inst = PrivateKeyRecoveryPayload(self,param_list)
        self._add_to_query("privateKeyRecoveryPayload",_param_name,inst)
        self.value_privateKeyRecoveryPayload = inst
        return inst

    def privateKeyRecoveryPayloads(self,_param_name:str = 'privateKeyRecoveryPayloads') -> 'PrivateKeyRecoveryPayload':
        param_list = []
        inst = PrivateKeyRecoveryPayload(self,param_list)
        self._add_to_query("privateKeyRecoveryPayloads",_param_name,inst)
        self.value_privateKeyRecoveryPayloads = inst
        return inst

    def recoveryOptions(self,_param_name:str = 'recoveryOptions') -> 'PrivateKeyRecoveryOption':
        param_list = []
        inst = PrivateKeyRecoveryOption(self,param_list)
        self._add_to_query("recoveryOptions",_param_name,inst)
        self.value_recoveryOptions = inst
        return inst

    def starkKey(self,_param_name:str = 'starkKey'):
        inst = None
        self._add_to_query("starkKey",_param_name)
        pass

    def starkKeyWithPrefix(self,_param_name:str = 'starkKeyWithPrefix'):
        inst = None
        self._add_to_query("starkKeyWithPrefix",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass


class Withdrawal(GraphQLObject):
    value_agreedFeeAmount = None
    value_amount = None
    value_createdAt = None
    value_id = None
    value_status = None
    value_to = None
    value_transactionHash = None
    def agreedFeeAmount(self,_param_name:str = 'agreedFeeAmount'):
        inst = None
        self._add_to_query("agreedFeeAmount",_param_name)
        pass

    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def to(self,_param_name:str = 'to'):
        inst = None
        self._add_to_query("to",_param_name)
        pass

    def transactionHash(self,_param_name:str = 'transactionHash'):
        inst = None
        self._add_to_query("transactionHash",_param_name)
        pass


class WithdrawalWithRates(GraphQLObject):
    value_agreedFeeAmount = None
    value_amount = None
    value_amountInFiat:'Fiat' = None
    value_createdAt = None
    value_id = None
    value_status = None
    value_to = None
    value_transactionHash = None
    def agreedFeeAmount(self,_param_name:str = 'agreedFeeAmount'):
        inst = None
        self._add_to_query("agreedFeeAmount",_param_name)
        pass

    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def amountInFiat(self,_param_name:str = 'amountInFiat') -> 'Fiat':
        param_list = []
        inst = Fiat(self,param_list)
        self._add_to_query("amountInFiat",_param_name,inst)
        self.value_amountInFiat = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def to(self,_param_name:str = 'to'):
        inst = None
        self._add_to_query("to",_param_name)
        pass

    def transactionHash(self,_param_name:str = 'transactionHash'):
        inst = None
        self._add_to_query("transactionHash",_param_name)
        pass


class NBAOnboardingCardOption(GraphQLObject):
    value_player:'NBAPlayer' = None
    value_commonCardImageUrl = None
    def player(self,_param_name:str = 'player') -> 'NBAPlayer':
        param_list = []
        inst = NBAPlayer(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def commonCardImageUrl(self,_param_name:str = 'commonCardImageUrl'):
        inst = None
        self._add_to_query("commonCardImageUrl",_param_name)
        pass


class NBAOnboarding(GraphQLObject):
    value_nextTask = None
    value_selectCardOptions:'list[NBAOnboardingCardOption]' = None
    value_leaderboard:'NBALeaderboard' = None
    def nextTask(self,_param_name:str = 'nextTask'):
        inst = None
        self._add_to_query("nextTask",_param_name)
        pass

    def selectCardOptions(self,_param_name:str = 'selectCardOptions') -> 'NBAOnboardingCardOption':
        param_list = []
        inst = NBAOnboardingCardOption(self,param_list)
        self._add_to_query("selectCardOptions",_param_name,inst)
        self.value_selectCardOptions = inst
        return inst

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'NBALeaderboard':
        param_list = []
        inst = NBALeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst


class NBACurrentUserData(GraphQLObject):
    value_onboardingState:'NBAOnboarding' = None
    def onboardingState(self,_param_name:str = 'onboardingState') -> 'NBAOnboarding':
        param_list = []
        inst = NBAOnboarding(self,param_list)
        self._add_to_query("onboardingState",_param_name,inst)
        self.value_onboardingState = inst
        return inst


class NBALeague(GraphQLObject):
    value_id = None
    value_slug = None
    value_name = None
    value_members:'list[User]' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def members(self,_param_name:str = 'members') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("members",_param_name,inst)
        self.value_members = inst
        return inst


class PlayerInterface(GraphQLObject):
    value_id = None
    value_slug = None
    value_birthDate = None
    value_age = None
    value_displayName = None
    value_firstName = None
    value_lastName = None
    value_avatarImageUrl = None
    value_team:'SportsTeamInterface' = None
    value_birthPlaceCountry = None
    value_shirtNumber = None
    value_isActive = None
    value_playerInjury:'PlayerInjury' = None
    value_pictureUrl = None
    value_avatarPictureUrl = None
    value_squaredPictureUrl = None
    value_rotowireId = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def birthDate(self,_param_name:str = 'birthDate'):
        inst = None
        self._add_to_query("birthDate",_param_name)
        pass

    def age(self,_param_name:str = 'age'):
        inst = None
        self._add_to_query("age",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def firstName(self,_param_name:str = 'firstName'):
        inst = None
        self._add_to_query("firstName",_param_name)
        pass

    def lastName(self,_param_name:str = 'lastName'):
        inst = None
        self._add_to_query("lastName",_param_name)
        pass

    def avatarImageUrl(self,_param_name:str = 'avatarImageUrl'):
        inst = None
        self._add_to_query("avatarImageUrl",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'SportsTeamInterface':
        param_list = []
        inst = SportsTeamInterface(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def birthPlaceCountry(self,_param_name:str = 'birthPlaceCountry'):
        inst = None
        self._add_to_query("birthPlaceCountry",_param_name)
        pass

    def shirtNumber(self,_param_name:str = 'shirtNumber'):
        inst = None
        self._add_to_query("shirtNumber",_param_name)
        pass

    def isActive(self,_param_name:str = 'isActive'):
        inst = None
        self._add_to_query("isActive",_param_name)
        pass

    def playerInjury(self,_param_name:str = 'playerInjury') -> 'PlayerInjury':
        param_list = []
        inst = PlayerInjury(self,param_list)
        self._add_to_query("playerInjury",_param_name,inst)
        self.value_playerInjury = inst
        return inst

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def avatarPictureUrl(self,_param_name:str = 'avatarPictureUrl'):
        inst = None
        self._add_to_query("avatarPictureUrl",_param_name)
        pass

    def squaredPictureUrl(self,_param_name:str = 'squaredPictureUrl'):
        inst = None
        self._add_to_query("squaredPictureUrl",_param_name)
        pass

    def rotowireId(self,_param_name:str = 'rotowireId'):
        inst = None
        self._add_to_query("rotowireId",_param_name)
        pass


class SportsTeamInterface(GraphQLObject):
    value_id = None
    value_name = None
    value_market = None
    value_fullName = None
    value_abbreviation = None
    value_slug = None
    value_svgUrl = None
    value_darkThemeSvgUrl = None
    value_monochromeSvgUrl = None
    value_teamStyleGuidePrimaryColor = None
    value_players:'list[PlayerInterface]' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def market(self,_param_name:str = 'market'):
        inst = None
        self._add_to_query("market",_param_name)
        pass

    def fullName(self,_param_name:str = 'fullName'):
        inst = None
        self._add_to_query("fullName",_param_name)
        pass

    def abbreviation(self,_param_name:str = 'abbreviation'):
        inst = None
        self._add_to_query("abbreviation",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def svgUrl(self,_param_name:str = 'svgUrl'):
        inst = None
        self._add_to_query("svgUrl",_param_name)
        pass

    def darkThemeSvgUrl(self,_param_name:str = 'darkThemeSvgUrl'):
        inst = None
        self._add_to_query("darkThemeSvgUrl",_param_name)
        pass

    def monochromeSvgUrl(self,_param_name:str = 'monochromeSvgUrl'):
        inst = None
        self._add_to_query("monochromeSvgUrl",_param_name)
        pass

    def teamStyleGuidePrimaryColor(self,_param_name:str = 'teamStyleGuidePrimaryColor'):
        inst = None
        self._add_to_query("teamStyleGuidePrimaryColor",_param_name)
        pass

    def players(self,_param_name:str = 'players') -> 'PlayerInterface':
        param_list = []
        inst = PlayerInterface(self,param_list)
        self._add_to_query("players",_param_name,inst)
        self.value_players = inst
        return inst


class GameInterface(GraphQLObject):
    value_id = None
    value_status = None
    value_startDate = None
    value_homeTeam:'SportsTeamInterface' = None
    value_awayTeam:'SportsTeamInterface' = None
    value_homeScore = None
    value_awayScore = None
    value_gameWeek = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def homeTeam(self,_param_name:str = 'homeTeam') -> 'SportsTeamInterface':
        param_list = []
        inst = SportsTeamInterface(self,param_list)
        self._add_to_query("homeTeam",_param_name,inst)
        self.value_homeTeam = inst
        return inst

    def awayTeam(self,_param_name:str = 'awayTeam') -> 'SportsTeamInterface':
        param_list = []
        inst = SportsTeamInterface(self,param_list)
        self._add_to_query("awayTeam",_param_name,inst)
        self.value_awayTeam = inst
        return inst

    def homeScore(self,_param_name:str = 'homeScore'):
        inst = None
        self._add_to_query("homeScore",_param_name)
        pass

    def awayScore(self,_param_name:str = 'awayScore'):
        inst = None
        self._add_to_query("awayScore",_param_name)
        pass

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass


class CardInterface(GraphQLObject):
    value_id = None
    value_slug = None
    value_assetId = None
    value_owner:'User' = None
    value_user:'User' = None
    value_rarity = None
    value_rarityTyped = None
    value_season = None
    value_seasonYear = None
    value_serialNumber = None
    value_pictureUrl = None
    value_fullImageUrl = None
    value_avatarImageUrl = None
    value_backImageUrl = None
    value_player:'PlayerInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_team:'SportsTeamInterface' = None
    value_anyTeam:'TeamInterface' = None
    value_cardLevel = None
    value_xpThresholdForCurrentCardLevel = None
    value_xpThresholdForNextCardLevel = None
    value_xp = None
    value_seasonBonus = None
    value_rarityBonus = None
    value_xpBonus = None
    value_collectionBonus = None
    value_totalBonus = None
    value_bonusLossAfterTransfer = None
    value_liveLineup:'LineupInterface' = None
    value_openedLineups:'list[LineupInterface]' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def assetId(self,_param_name:str = 'assetId'):
        inst = None
        self._add_to_query("assetId",_param_name)
        pass

    def owner(self,_param_name:str = 'owner') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("owner",_param_name,inst)
        self.value_owner = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def rarityTyped(self,_param_name:str = 'rarityTyped'):
        inst = None
        self._add_to_query("rarityTyped",_param_name)
        pass

    def season(self,_param_name:str = 'season'):
        inst = None
        self._add_to_query("season",_param_name)
        pass

    def seasonYear(self,_param_name:str = 'seasonYear'):
        inst = None
        self._add_to_query("seasonYear",_param_name)
        pass

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def fullImageUrl(self,_param_name:str = 'fullImageUrl'):
        inst = None
        self._add_to_query("fullImageUrl",_param_name)
        pass

    def avatarImageUrl(self,_param_name:str = 'avatarImageUrl'):
        inst = None
        self._add_to_query("avatarImageUrl",_param_name)
        pass

    def backImageUrl(self,_param_name:str = 'backImageUrl'):
        inst = None
        self._add_to_query("backImageUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'PlayerInterface':
        param_list = []
        inst = PlayerInterface(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def team(self,_param_name:str = 'team') -> 'SportsTeamInterface':
        param_list = []
        inst = SportsTeamInterface(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def anyTeam(self,_param_name:str = 'anyTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("anyTeam",_param_name,inst)
        self.value_anyTeam = inst
        return inst

    def cardLevel(self,_param_name:str = 'cardLevel'):
        inst = None
        self._add_to_query("cardLevel",_param_name)
        pass

    def xpThresholdForCurrentCardLevel(self,_param_name:str = 'xpThresholdForCurrentCardLevel'):
        inst = None
        self._add_to_query("xpThresholdForCurrentCardLevel",_param_name)
        pass

    def xpThresholdForNextCardLevel(self,_param_name:str = 'xpThresholdForNextCardLevel'):
        inst = None
        self._add_to_query("xpThresholdForNextCardLevel",_param_name)
        pass

    def xp(self,_param_name:str = 'xp'):
        inst = None
        self._add_to_query("xp",_param_name)
        pass

    def seasonBonus(self,_param_name:str = 'seasonBonus'):
        inst = None
        self._add_to_query("seasonBonus",_param_name)
        pass

    def rarityBonus(self,_param_name:str = 'rarityBonus'):
        inst = None
        self._add_to_query("rarityBonus",_param_name)
        pass

    def xpBonus(self,_param_name:str = 'xpBonus'):
        inst = None
        self._add_to_query("xpBonus",_param_name)
        pass

    def collectionBonus(self,_param_name:str = 'collectionBonus'):
        inst = None
        self._add_to_query("collectionBonus",_param_name)
        pass

    def totalBonus(self,_param_name:str = 'totalBonus'):
        inst = None
        self._add_to_query("totalBonus",_param_name)
        pass

    def bonusLossAfterTransfer(self,_param_name:str = 'bonusLossAfterTransfer'):
        inst = None
        self._add_to_query("bonusLossAfterTransfer",_param_name)
        pass

    def liveLineup(self,_param_name:str = 'liveLineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("liveLineup",_param_name,inst)
        self.value_liveLineup = inst
        return inst

    def openedLineups(self,_param_name:str = 'openedLineups') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("openedLineups",_param_name,inst)
        self.value_openedLineups = inst
        return inst


class PlayerGameStatsInterface(GraphQLObject):
    value_playedInGame = None
    value_game:'GameInterface' = None
    value_team:'SportsTeamInterface' = None
    value_againstTeam:'SportsTeamInterface' = None
    def playedInGame(self,_param_name:str = 'playedInGame'):
        inst = None
        self._add_to_query("playedInGame",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'GameInterface':
        param_list = []
        inst = GameInterface(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def team(self,_param_name:str = 'team') -> 'SportsTeamInterface':
        param_list = []
        inst = SportsTeamInterface(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def againstTeam(self,_param_name:str = 'againstTeam') -> 'SportsTeamInterface':
        param_list = []
        inst = SportsTeamInterface(self,param_list)
        self._add_to_query("againstTeam",_param_name,inst)
        self.value_againstTeam = inst
        return inst


class PlayerInFixtureStatusInterface(GraphQLObject):
    value_gameStats:'list[PlayerGameStatsInterface]' = None
    value_upcomingGames:'list[GameInterface]' = None
    value_inGame = None
    value_isScoreFinal = None
    value_statusIconType = None
    value_hasTBDGames = None
    def gameStats(self,_param_name:str = 'gameStats') -> 'PlayerGameStatsInterface':
        param_list = []
        inst = PlayerGameStatsInterface(self,param_list)
        self._add_to_query("gameStats",_param_name,inst)
        self.value_gameStats = inst
        return inst

    def upcomingGames(self,_param_name:str = 'upcomingGames') -> 'GameInterface':
        param_list = []
        inst = GameInterface(self,param_list)
        self._add_to_query("upcomingGames",_param_name,inst)
        self.value_upcomingGames = inst
        return inst

    def inGame(self,_param_name:str = 'inGame'):
        inst = None
        self._add_to_query("inGame",_param_name)
        pass

    def isScoreFinal(self,_param_name:str = 'isScoreFinal'):
        inst = None
        self._add_to_query("isScoreFinal",_param_name)
        pass

    def statusIconType(self,_param_name:str = 'statusIconType'):
        inst = None
        self._add_to_query("statusIconType",_param_name)
        pass

    def hasTBDGames(self,_param_name:str = 'hasTBDGames'):
        inst = None
        self._add_to_query("hasTBDGames",_param_name)
        pass


class PlayerInFixtureInterface(GraphQLObject):
    value_fixture:'FixtureInterface' = None
    value_player:'PlayerInterface' = None
    value_status:'PlayerInFixtureStatusInterface' = None
    def fixture(self,_param_name:str = 'fixture') -> 'FixtureInterface':
        param_list = []
        inst = FixtureInterface(self,param_list)
        self._add_to_query("fixture",_param_name,inst)
        self.value_fixture = inst
        return inst

    def player(self,_param_name:str = 'player') -> 'PlayerInterface':
        param_list = []
        inst = PlayerInterface(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def status(self,_param_name:str = 'status') -> 'PlayerInFixtureStatusInterface':
        param_list = []
        inst = PlayerInFixtureStatusInterface(self,param_list)
        self._add_to_query("status",_param_name,inst)
        self.value_status = inst
        return inst


class CardInLineupGameScoreInterface(GraphQLObject):
    value_gameStats:'PlayerGameStatsInterface' = None
    def gameStats(self,_param_name:str = 'gameStats') -> 'PlayerGameStatsInterface':
        param_list = []
        inst = PlayerGameStatsInterface(self,param_list)
        self._add_to_query("gameStats",_param_name,inst)
        self.value_gameStats = inst
        return inst


class CardInLineupInterface(GraphQLObject):
    value_lineup:'LineupInterface' = None
    value_card:'CardInterface' = None
    value_playerInFixture:'PlayerInFixtureInterface' = None
    value_score = None
    value_totalBonus = None
    value_gameScores:'list[CardInLineupGameScoreInterface]' = None
    def lineup(self,_param_name:str = 'lineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'CardInterface':
        param_list = []
        inst = CardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def playerInFixture(self,_param_name:str = 'playerInFixture') -> 'PlayerInFixtureInterface':
        param_list = []
        inst = PlayerInFixtureInterface(self,param_list)
        self._add_to_query("playerInFixture",_param_name,inst)
        self.value_playerInFixture = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def totalBonus(self,_param_name:str = 'totalBonus'):
        inst = None
        self._add_to_query("totalBonus",_param_name)
        pass

    def gameScores(self,_param_name:str = 'gameScores') -> 'CardInLineupGameScoreInterface':
        param_list = []
        inst = CardInLineupGameScoreInterface(self,param_list)
        self._add_to_query("gameScores",_param_name,inst)
        self.value_gameScores = inst
        return inst


class GameWithCardInLineupInterface(GraphQLObject):
    value_game:'GameInterface' = None
    value_homeCardsInLineups:'list[CardInLineupInterface]' = None
    value_awayCardsInLineups:'list[CardInLineupInterface]' = None
    def game(self,_param_name:str = 'game') -> 'GameInterface':
        param_list = []
        inst = GameInterface(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def homeCardsInLineups(self,_param_name:str = 'homeCardsInLineups') -> 'CardInLineupInterface':
        param_list = []
        inst = CardInLineupInterface(self,param_list)
        self._add_to_query("homeCardsInLineups",_param_name,inst)
        self.value_homeCardsInLineups = inst
        return inst

    def awayCardsInLineups(self,_param_name:str = 'awayCardsInLineups') -> 'CardInLineupInterface':
        param_list = []
        inst = CardInLineupInterface(self,param_list)
        self._add_to_query("awayCardsInLineups",_param_name,inst)
        self.value_awayCardsInLineups = inst
        return inst


class FixtureInterface(GraphQLObject):
    value_id = None
    value_slug = None
    value_fixtureState = None
    value_gameWeek = None
    value_startDate = None
    value_endDate = None
    value_games:'list[GameInterface]' = None
    value_leaderboards:'list[LeaderboardInterface]' = None
    value_myEligibleGames:'list[GameInterface]' = None
    value_myLiveLineupGames:'list[GameWithCardInLineupInterface]' = None
    value_myLineups:'list[LineupInterface]' = None
    value_userLineups:'list[LineupInterface]' = None
    value_nextFixture:'FixtureInterface' = None
    value_previousFixture:'FixtureInterface' = None
    value_rewardPool:'list[PlayerInterface]' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def fixtureState(self,_param_name:str = 'fixtureState'):
        inst = None
        self._add_to_query("fixtureState",_param_name)
        pass

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def games(self,_param_name:str = 'games') -> 'GameInterface':
        param_list = []
        inst = GameInterface(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def leaderboards(self,includeTraining,_param_name:str = 'leaderboards') -> 'LeaderboardInterface':
        param_list = []
        param_list.append(("includeTraining",includeTraining))
        inst = LeaderboardInterface(self,param_list)
        self._add_to_query("leaderboards",_param_name,inst)
        self.value_leaderboards = inst
        return inst

    def myEligibleGames(self,_param_name:str = 'myEligibleGames') -> 'GameInterface':
        param_list = []
        inst = GameInterface(self,param_list)
        self._add_to_query("myEligibleGames",_param_name,inst)
        self.value_myEligibleGames = inst
        return inst

    def myLiveLineupGames(self,_param_name:str = 'myLiveLineupGames') -> 'GameWithCardInLineupInterface':
        param_list = []
        inst = GameWithCardInLineupInterface(self,param_list)
        self._add_to_query("myLiveLineupGames",_param_name,inst)
        self.value_myLiveLineupGames = inst
        return inst

    def myLineups(self,_param_name:str = 'myLineups') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("myLineups",_param_name,inst)
        self.value_myLineups = inst
        return inst

    def userLineups(self,userId,_param_name:str = 'userLineups') -> 'LineupInterface':
        param_list = []
        param_list.append(("userId",userId))
        inst = LineupInterface(self,param_list)
        self._add_to_query("userLineups",_param_name,inst)
        self.value_userLineups = inst
        return inst

    def nextFixture(self,_param_name:str = 'nextFixture') -> 'FixtureInterface':
        param_list = []
        inst = FixtureInterface(self,param_list)
        self._add_to_query("nextFixture",_param_name,inst)
        self.value_nextFixture = inst
        return inst

    def previousFixture(self,_param_name:str = 'previousFixture') -> 'FixtureInterface':
        param_list = []
        inst = FixtureInterface(self,param_list)
        self._add_to_query("previousFixture",_param_name,inst)
        self.value_previousFixture = inst
        return inst

    def rewardPool(self,rarity,cardRarity,tier,_param_name:str = 'rewardPool') -> 'PlayerInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        param_list.append(("cardRarity",cardRarity))
        param_list.append(("tier",tier))
        inst = PlayerInterface(self,param_list)
        self._add_to_query("rewardPool",_param_name,inst)
        self.value_rewardPool = inst
        return inst


class LeaderboardRequirementsInterface(GraphQLObject):
    value_allowedRarities = None
    value_minRarity:'LeaderboardRulesMinimumRarityRequirement' = None
    value_minRookieCount = None
    value_playerAgeRequirements:'PlayerAgeRequirements' = None
    value_marketplaceQueryParameters = None
    value_minCurrentSeasonCardCount = None
    def allowedRarities(self,_param_name:str = 'allowedRarities'):
        inst = None
        self._add_to_query("allowedRarities",_param_name)
        pass

    def minRarity(self,_param_name:str = 'minRarity') -> 'LeaderboardRulesMinimumRarityRequirement':
        param_list = []
        inst = LeaderboardRulesMinimumRarityRequirement(self,param_list)
        self._add_to_query("minRarity",_param_name,inst)
        self.value_minRarity = inst
        return inst

    def minRookieCount(self,_param_name:str = 'minRookieCount'):
        inst = None
        self._add_to_query("minRookieCount",_param_name)
        pass

    def playerAgeRequirements(self,_param_name:str = 'playerAgeRequirements') -> 'PlayerAgeRequirements':
        param_list = []
        inst = PlayerAgeRequirements(self,param_list)
        self._add_to_query("playerAgeRequirements",_param_name,inst)
        self.value_playerAgeRequirements = inst
        return inst

    def marketplaceQueryParameters(self,_param_name:str = 'marketplaceQueryParameters'):
        inst = None
        self._add_to_query("marketplaceQueryParameters",_param_name)
        pass

    def minCurrentSeasonCardCount(self,_param_name:str = 'minCurrentSeasonCardCount'):
        inst = None
        self._add_to_query("minCurrentSeasonCardCount",_param_name)
        pass


class LeaderboardInterface(GraphQLObject):
    value_id = None
    value_slug = None
    value_displayName = None
    value_descriptions = None
    value_displayNameWithoutRarity = None
    value_lineupsCount = None
    value_prizePool:'LeaderboardPrizePool' = None
    value_isUserEligible = None
    value_isTraining = None
    value_iconImageUrl = None
    value_monochromeIconImageUrl = None
    value_fixture:'FixtureInterface' = None
    value_games:'list[GameInterface]' = None
    value_requirements:'LeaderboardRequirementsInterface' = None
    value_leaderboardRarity = None
    value_scoringStrategy = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def descriptions(self,_param_name:str = 'descriptions'):
        inst = None
        self._add_to_query("descriptions",_param_name)
        pass

    def displayNameWithoutRarity(self,_param_name:str = 'displayNameWithoutRarity'):
        inst = None
        self._add_to_query("displayNameWithoutRarity",_param_name)
        pass

    def lineupsCount(self,_param_name:str = 'lineupsCount'):
        inst = None
        self._add_to_query("lineupsCount",_param_name)
        pass

    def prizePool(self,_param_name:str = 'prizePool') -> 'LeaderboardPrizePool':
        param_list = []
        inst = LeaderboardPrizePool(self,param_list)
        self._add_to_query("prizePool",_param_name,inst)
        self.value_prizePool = inst
        return inst

    def isUserEligible(self,_param_name:str = 'isUserEligible'):
        inst = None
        self._add_to_query("isUserEligible",_param_name)
        pass

    def isTraining(self,_param_name:str = 'isTraining'):
        inst = None
        self._add_to_query("isTraining",_param_name)
        pass

    def iconImageUrl(self,_param_name:str = 'iconImageUrl'):
        inst = None
        self._add_to_query("iconImageUrl",_param_name)
        pass

    def monochromeIconImageUrl(self,_param_name:str = 'monochromeIconImageUrl'):
        inst = None
        self._add_to_query("monochromeIconImageUrl",_param_name)
        pass

    def fixture(self,_param_name:str = 'fixture') -> 'FixtureInterface':
        param_list = []
        inst = FixtureInterface(self,param_list)
        self._add_to_query("fixture",_param_name,inst)
        self.value_fixture = inst
        return inst

    def games(self,_param_name:str = 'games') -> 'GameInterface':
        param_list = []
        inst = GameInterface(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def requirements(self,_param_name:str = 'requirements') -> 'LeaderboardRequirementsInterface':
        param_list = []
        inst = LeaderboardRequirementsInterface(self,param_list)
        self._add_to_query("requirements",_param_name,inst)
        self.value_requirements = inst
        return inst

    def leaderboardRarity(self,_param_name:str = 'leaderboardRarity'):
        inst = None
        self._add_to_query("leaderboardRarity",_param_name)
        pass

    def scoringStrategy(self,_param_name:str = 'scoringStrategy'):
        inst = None
        self._add_to_query("scoringStrategy",_param_name)
        pass


class RewardInterface(GraphQLObject):
    value_id = None
    value_card:'CardInterface' = None
    value_backImageUrl = None
    value_tier = None
    value_lineup:'LineupInterface' = None
    value_state = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'CardInterface':
        param_list = []
        inst = CardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def backImageUrl(self,_param_name:str = 'backImageUrl'):
        inst = None
        self._add_to_query("backImageUrl",_param_name)
        pass

    def tier(self,_param_name:str = 'tier'):
        inst = None
        self._add_to_query("tier",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass


class LineupInterface(GraphQLObject):
    value_id = None
    value_leaderboard:'LeaderboardInterface' = None
    value_cards:'list[CardInLineupInterface]' = None
    value_games:'list[GameWithCardInLineupInterface]' = None
    value_score = None
    value_rank = None
    value_user:'User' = None
    value_xpScore = None
    value_projectedReward:'ProjectedReward' = None
    value_lineupRewards = None
    value_reward:'RewardInterface' = None
    value_rewards:'list[RewardInterface]' = None
    value_canceledAt = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'LeaderboardInterface':
        param_list = []
        inst = LeaderboardInterface(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def cards(self,_param_name:str = 'cards') -> 'CardInLineupInterface':
        param_list = []
        inst = CardInLineupInterface(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def games(self,_param_name:str = 'games') -> 'GameWithCardInLineupInterface':
        param_list = []
        inst = GameWithCardInLineupInterface(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def xpScore(self,_param_name:str = 'xpScore'):
        inst = None
        self._add_to_query("xpScore",_param_name)
        pass

    def projectedReward(self,_param_name:str = 'projectedReward') -> 'ProjectedReward':
        param_list = []
        inst = ProjectedReward(self,param_list)
        self._add_to_query("projectedReward",_param_name,inst)
        self.value_projectedReward = inst
        return inst

    def lineupRewards(self,_param_name:str = 'lineupRewards'):
        inst = None
        self._add_to_query("lineupRewards",_param_name)
        pass

    def reward(self,_param_name:str = 'reward') -> 'RewardInterface':
        param_list = []
        inst = RewardInterface(self,param_list)
        self._add_to_query("reward",_param_name,inst)
        self.value_reward = inst
        return inst

    def rewards(self,_param_name:str = 'rewards') -> 'RewardInterface':
        param_list = []
        inst = RewardInterface(self,param_list)
        self._add_to_query("rewards",_param_name,inst)
        self.value_rewards = inst
        return inst

    def canceledAt(self,_param_name:str = 'canceledAt'):
        inst = None
        self._add_to_query("canceledAt",_param_name)
        pass


class CashReward(GraphQLObject):
    value_id = None
    value_amountUSDCents = None
    value_amountWei = None
    value_lineup:'LineupInterface' = None
    value_state = None
    value_monetaryAmount:'MonetaryAmount' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountWei(self,_param_name:str = 'amountWei'):
        inst = None
        self._add_to_query("amountWei",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass

    def monetaryAmount(self,_param_name:str = 'monetaryAmount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("monetaryAmount",_param_name,inst)
        self.value_monetaryAmount = inst
        return inst


class ConversionCreditReward(GraphQLObject):
    value_id = None
    value_monetaryAmount:'MonetaryAmount' = None
    value_lineup:'LineupInterface' = None
    value_state = None
    value_maxDiscountApplicablePct = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def monetaryAmount(self,_param_name:str = 'monetaryAmount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("monetaryAmount",_param_name,inst)
        self.value_monetaryAmount = inst
        return inst

    def lineup(self,_param_name:str = 'lineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass

    def maxDiscountApplicablePct(self,_param_name:str = 'maxDiscountApplicablePct'):
        inst = None
        self._add_to_query("maxDiscountApplicablePct",_param_name)
        pass


class CardReward(GraphQLObject):
    value_id = None
    value_card:'CardInterface' = None
    value_backImageUrl = None
    value_tier = None
    value_lineup:'LineupInterface' = None
    value_state = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'CardInterface':
        param_list = []
        inst = CardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def backImageUrl(self,_param_name:str = 'backImageUrl'):
        inst = None
        self._add_to_query("backImageUrl",_param_name)
        pass

    def tier(self,_param_name:str = 'tier'):
        inst = None
        self._add_to_query("tier",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass


class BaseballCardCountsByLineupPosition(GraphQLObject):
    value_startingPitcherCount = None
    value_reliefPitcherCount = None
    value_cornerInfielderCount = None
    value_middleInfielderCount = None
    value_outfielderCount = None
    def startingPitcherCount(self,_param_name:str = 'startingPitcherCount'):
        inst = None
        self._add_to_query("startingPitcherCount",_param_name)
        pass

    def reliefPitcherCount(self,_param_name:str = 'reliefPitcherCount'):
        inst = None
        self._add_to_query("reliefPitcherCount",_param_name)
        pass

    def cornerInfielderCount(self,_param_name:str = 'cornerInfielderCount'):
        inst = None
        self._add_to_query("cornerInfielderCount",_param_name)
        pass

    def middleInfielderCount(self,_param_name:str = 'middleInfielderCount'):
        inst = None
        self._add_to_query("middleInfielderCount",_param_name)
        pass

    def outfielderCount(self,_param_name:str = 'outfielderCount'):
        inst = None
        self._add_to_query("outfielderCount",_param_name)
        pass


class BaseballCoinReward(GraphQLObject):
    value_id = None
    value_amountCoins = None
    value_rewardType = None
    value_state = None
    value_lineup:'LineupInterface' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass

    def rewardType(self,_param_name:str = 'rewardType'):
        inst = None
        self._add_to_query("rewardType",_param_name)
        pass

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst


class BoxReward(GraphQLObject):
    value_id = None
    value_state = None
    value_lineup:'LineupInterface' = None
    value_name = None
    value_pictureUrl = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass


class CurrentUser(GraphQLObject):
    value_accountEntries:'UserAccountEntryConnection' = None
    value_accounts:'list[Account]' = None
    value_active = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_apiKey = None
    value_auctionReminders:'AuctionReminderConnection' = None
    value_authorizations:'AuthorizationRequestConnection' = None
    value_availableBalance = None
    value_availableBalanceForWithdrawal = None
    value_availableConversionCredit:'ConversionCredit' = None
    value_awards:'list[UserAward]' = None
    value_bankBalance = None
    value_bankMappedEthereumAddress = None
    value_bankMappedEthereumAddressApprovedBank = None
    value_baseballProfile:'UserSportProfile' = None
    value_baseballUserProfile:'BaseballUserSportProfile' = None
    value_betaTester = None
    value_blockchainCardsInLineups = None
    value_blockedUntil = None
    value_blockedUsers:'UserConnection' = None
    value_blueprintCards:'AnyCardInterfaceConnection' = None
    value_boughtSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_buyingTokenAuctions:'list[TokenAuction]' = None
    value_cardCollections:'CardCollectionConnection' = None
    value_cardCounts:'CardCount' = None
    value_cardFilters = None
    value_cardShardsChests:'list[CardShardsChest]' = None
    value_cards:'AnyCardInterfaceConnection' = None
    value_cardsCount = None
    value_cardsReferralRewards:'ReferralRewardConnection' = None
    value_coinBalance = None
    value_composedAtLeastOneNonTutorialLineup = None
    value_confirmed = None
    value_confirmedDevice = None
    value_connectedOAuthAccessTokens:'list[OAuthAccessToken]' = None
    value_connectedOAuthApplications:'list[OAuthApplication]' = None
    value_connectedOauths:'list[ConnectedOAuth]' = None
    value_createdAt = None
    value_currentDevice:'UserDevice' = None
    value_currentFootballRivalsManager:'FootballRivalsCurrentManager' = None
    value_customDecks:'CustomDeckConnection' = None
    value_depositedEth = None
    value_devices:'list[UserDevice]' = None
    value_disabled = None
    value_email = None
    value_endedTokenOffersReceived:'TokenOfferConnection' = None
    value_endedTokenOffersSent:'TokenOfferConnection' = None
    value_endedWithNoBuyerSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_ethMigration:'EthMigration' = None
    value_ethVaultId = None
    value_ethereumAddress = None
    value_fastWithdrawals:'list[FastWithdrawal]' = None
    value_fastWithdrawalsWithRates:'list[FastWithdrawalWithRates]' = None
    value_featureFlagCustomAttributes = None
    value_fiatEnabled = None
    value_followed:'EmailSubscription' = None
    value_followers:'UserWithSubscriptionSlugConnection' = None
    value_followersCount = None
    value_following:'UserWithSubscriptionSlugConnection' = None
    value_followingCount = None
    value_footballCardCollections:'CardCollectionConnection' = None
    value_footballCardCounts:'CardCount' = None
    value_footballCards:'CardConnection' = None
    value_footballLast30DaysLineupsCount = None
    value_footballProfile:'UserSportProfile' = None
    value_footballRivalsManager:'FootballRivalsManager' = None
    value_footballUserProfile:'FootballUserSportProfile' = None
    value_forcedIntoOnboarding = None
    value_fromPath = None
    value_headToHeadBetaTester = None
    value_hideTutorials = None
    value_hoursToAnswerTrades = None
    value_id = None
    value_involvedLiveTokenAuctions:'TokenAuctionConnection' = None
    value_involvedLostTokenAuctions:'TokenAuctionConnection' = None
    value_involvedTokenAuctions:'TokenAuctionConnection' = None
    value_last30DaysLineupsCount:'IntegerBySportType' = None
    value_liveSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_lostTokenAuctions:'TokenAuctionConnection' = None
    value_managerProgression:'ManagerProgression' = None
    value_managerProgressionTasksCount = None
    value_managerTeams:'ManagerTeamConnection' = None
    value_mangopayUser:'MangopayUser' = None
    value_matchedContactsAt = None
    value_moonpayParams = None
    value_moonpaySupported = None
    value_mustAcceptTcus = None
    value_myAccounts:'list[PrivateAccount]' = None
    value_myFootballManagerTasks:'list[FootballManagerTask]' = None
    value_myRecentActiveBids:'list[TokenMyBid]' = None
    value_mySorareAlgoliaKey = None
    value_mySubscriptions:'EmailSubscriptionConnection' = None
    value_nbaProfile:'UserSportProfile' = None
    value_nbaUserProfile:'NBAUserSportProfile' = None
    value_nickname = None
    value_noCardRouteEnabled = None
    value_notifications:'NotificationConnection' = None
    value_notificationsDetails:'Notifications' = None
    value_onboardingStatus:'Onboarding' = None
    value_otpBackupCodes = None
    value_otpProvisioningUri = None
    value_otpRequiredForLogin = None
    value_paginatedCards:'CardConnection' = None
    value_paymentMethods:'list[PaymentMethod]' = None
    value_pendingDeposits:'list[PendingDeposit]' = None
    value_pendingDirectWithdrawalCount = None
    value_pendingTokenOffersReceived:'TokenOfferConnection' = None
    value_pendingTokenOffersSent:'TokenOfferConnection' = None
    value_phoneNumber = None
    value_phoneNumberVerificationRequested = None
    value_phoneNumberVerified = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_podiumRankings:'So5RankingConnection' = None
    value_podiums:'list[So5Podium]' = None
    value_potentialReferralConversionCredits:'MonetaryAmount' = None
    value_probabilisticBundles:'ProbabilisticBundleConnection' = None
    value_profile:'UserProfile' = None
    value_pushNotificationsSupported = None
    value_rampSupported = None
    value_recentActiveBids:'list[TokenBid]' = None
    value_recommendedManagers:'UserConnection' = None
    value_recoveryKitBalance = None
    value_referee = None
    value_refereeReward:'ReferralReward' = None
    value_refereeRewards:'list[ReferralReward]' = None
    value_referralAsReferee:'Referral' = None
    value_referralMilestoneRewards:'list[ReferralMilestoneReward]' = None
    value_referralRewardsCount = None
    value_referralSpecialEvents:'list[ReferralSpecialEvent]' = None
    value_referralUrl = None
    value_referrals:'ReferralPaginated' = None
    value_referrer:'User' = None
    value_revealedCardsSummary:'RevealedCardsSummary' = None
    value_rewardedRankings:'So5RankingConnection' = None
    value_rewards:'AnyRewardInterfaceConnection' = None
    value_scopes = None
    value_singleSaleTokenOffers:'TokenOfferConnection' = None
    value_slug = None
    value_so5NoCardRouteOpened = None
    value_so5TrophiesSummary:'TrophiesSummary' = None
    value_soldSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_sorareAddress = None
    value_sorareAddressApprovedBank = None
    value_sorareAddressApprovedBankPending = None
    value_sorareAddressBalance = None
    value_sorarePrivateKey:'SorarePrivateKey' = None
    value_sorarePrivateKeyRecovery = None
    value_spentFiatPaymentIntents:'PaymentConnection' = None
    value_sportConversionCredit:'ConversionCredit' = None
    value_sportConversionCredits:'ConversionCreditConnection' = None
    value_starkKey = None
    value_starkKeyRegistered = None
    value_status = None
    value_suspended = None
    value_timeLeftForConfirmation = None
    value_tokenAuctions:'TokenAuctionConnection' = None
    value_tokenOffers:'TokenOfferConnection' = None
    value_topRecommendations:'list[PlayerRecommendation]' = None
    value_totalBalance = None
    value_totalReferralConversionCreditsEarned:'MonetaryAmount' = None
    value_trophies:'list[So5Trophies]' = None
    value_trophiesSummary:'So5TrophiesSummary' = None
    value_unclaimedActionRewards:'list[ActionReward]' = None
    value_unclaimedDeliverableItemOrders:'list[DeliverableItemOrder]' = None
    value_unclaimedReferralRewardsCount = None
    value_unclaimedSo5Rewards:'list[So5Reward]' = None
    value_unconfirmedEmail = None
    value_unopenedProbabilisticBundles:'ProbabilisticBundleConnection' = None
    value_unreadNotificationsCount = None
    value_unverifiedPhoneNumber = None
    value_userRelations:'UserRelationConnection' = None
    value_userSettings:'UserSettings' = None
    value_userSportProfile = None
    value_wallet:'UserWallet' = None
    value_withdrawals:'list[Withdrawal]' = None
    value_withdrawalsWithRates:'list[WithdrawalWithRates]' = None
    value_wonTokenAuctions:'TokenAuctionConnection' = None
    value_nbaCards:'NBACardConnection' = None
    value_nbaCurrentUserData:'NBACurrentUserData' = None
    value_nbaUnclaimedLineupRewards:'list[NBAReward]' = None
    value_nbaCardCounts:'CardCountsByRarity' = None
    value_nbaLeagues:'list[NBALeague]' = None
    value_nbaCollections:'list[NBACollection]' = None
    value_nbaUnclaimedCashRewards:'list[CashReward]' = None
    value_nbaUnclaimedConversionCreditRewards:'list[ConversionCreditReward]' = None
    value_nbaUnclaimedCardRewards:'list[CardReward]' = None
    value_baseballCards:'BaseballCardConnection' = None
    value_baseballCardCounts:'CardCountsByRarity' = None
    value_baseballCardCountsByLineupPosition:'BaseballCardCountsByLineupPosition' = None
    value_baseballUnclaimedLineupRewards:'list[BaseballReward]' = None
    value_baseballScoutingMissions:'list[BaseballScoutingMission]' = None
    value_baseballCollections:'list[BaseballCollection]' = None
    value_baseballUnclaimedCashRewards:'list[CashReward]' = None
    value_baseballUnclaimedConversionCreditRewards:'list[ConversionCreditReward]' = None
    value_baseballUnclaimedCardRewards:'list[CardReward]' = None
    value_baseballUnclaimedCoinRewards:'list[BaseballCoinReward]' = None
    value_baseballUnclaimedBoxRewards:'list[BoxReward]' = None
    def accountEntries(self,after,before,currencyType,endDate,entryType,first,last,significant,sortType,startDate,_param_name:str = 'accountEntries') -> 'UserAccountEntryConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("currencyType",currencyType))
        param_list.append(("endDate",endDate))
        param_list.append(("entryType",entryType))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("significant",significant))
        param_list.append(("sortType",sortType))
        param_list.append(("startDate",startDate))
        inst = UserAccountEntryConnection(self,param_list)
        self._add_to_query("accountEntries",_param_name,inst)
        self.value_accountEntries = inst
        return inst

    def accounts(self,_param_name:str = 'accounts') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("accounts",_param_name,inst)
        self.value_accounts = inst
        return inst

    def active(self,_param_name:str = 'active'):
        inst = None
        self._add_to_query("active",_param_name)
        pass

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def apiKey(self,_param_name:str = 'apiKey'):
        inst = None
        self._add_to_query("apiKey",_param_name)
        pass

    def auctionReminders(self,after,before,first,last,_param_name:str = 'auctionReminders') -> 'AuctionReminderConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = AuctionReminderConnection(self,param_list)
        self._add_to_query("auctionReminders",_param_name,inst)
        self.value_auctionReminders = inst
        return inst

    def authorizations(self,after,before,endDate,first,last,sortType,startDate,_param_name:str = 'authorizations') -> 'AuthorizationRequestConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("endDate",endDate))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("startDate",startDate))
        inst = AuthorizationRequestConnection(self,param_list)
        self._add_to_query("authorizations",_param_name,inst)
        self.value_authorizations = inst
        return inst

    def availableBalance(self,_param_name:str = 'availableBalance'):
        inst = None
        self._add_to_query("availableBalance",_param_name)
        pass

    def availableBalanceForWithdrawal(self,_param_name:str = 'availableBalanceForWithdrawal'):
        inst = None
        self._add_to_query("availableBalanceForWithdrawal",_param_name)
        pass

    def availableConversionCredit(self,_param_name:str = 'availableConversionCredit') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("availableConversionCredit",_param_name,inst)
        self.value_availableConversionCredit = inst
        return inst

    def awards(self,category,_param_name:str = 'awards') -> 'UserAward':
        param_list = []
        param_list.append(("category",category))
        inst = UserAward(self,param_list)
        self._add_to_query("awards",_param_name,inst)
        self.value_awards = inst
        return inst

    def bankBalance(self,_param_name:str = 'bankBalance'):
        inst = None
        self._add_to_query("bankBalance",_param_name)
        pass

    def bankMappedEthereumAddress(self,_param_name:str = 'bankMappedEthereumAddress'):
        inst = None
        self._add_to_query("bankMappedEthereumAddress",_param_name)
        pass

    def bankMappedEthereumAddressApprovedBank(self,_param_name:str = 'bankMappedEthereumAddressApprovedBank'):
        inst = None
        self._add_to_query("bankMappedEthereumAddressApprovedBank",_param_name)
        pass

    def baseballProfile(self,_param_name:str = 'baseballProfile') -> 'UserSportProfile':
        param_list = []
        inst = UserSportProfile(self,param_list)
        self._add_to_query("baseballProfile",_param_name,inst)
        self.value_baseballProfile = inst
        return inst

    def baseballUserProfile(self,_param_name:str = 'baseballUserProfile') -> 'BaseballUserSportProfile':
        param_list = []
        inst = BaseballUserSportProfile(self,param_list)
        self._add_to_query("baseballUserProfile",_param_name,inst)
        self.value_baseballUserProfile = inst
        return inst

    def betaTester(self,_param_name:str = 'betaTester'):
        inst = None
        self._add_to_query("betaTester",_param_name)
        pass

    def blockchainCardsInLineups(self,sport,_param_name:str = 'blockchainCardsInLineups'):
        inst = None
        self._add_to_query("blockchainCardsInLineups",_param_name)
        pass

    def blockedUntil(self,_param_name:str = 'blockedUntil'):
        inst = None
        self._add_to_query("blockedUntil",_param_name)
        pass

    def blockedUsers(self,after,before,first,last,_param_name:str = 'blockedUsers') -> 'UserConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserConnection(self,param_list)
        self._add_to_query("blockedUsers",_param_name,inst)
        self.value_blockedUsers = inst
        return inst

    def blueprintCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'blueprintCards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("blueprintCards",_param_name,inst)
        self.value_blueprintCards = inst
        return inst

    def boughtSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'boughtSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("boughtSingleSaleTokenOffers",_param_name,inst)
        self.value_boughtSingleSaleTokenOffers = inst
        return inst

    def buyingTokenAuctions(self,newlyListed,sport,_param_name:str = 'buyingTokenAuctions') -> 'TokenAuction':
        param_list = []
        param_list.append(("newlyListed",newlyListed))
        param_list.append(("sport",sport))
        inst = TokenAuction(self,param_list)
        self._add_to_query("buyingTokenAuctions",_param_name,inst)
        self.value_buyingTokenAuctions = inst
        return inst

    def cardCollections(self,after,before,favoriteOnly,first,last,query,rarities,seasonStartYears,sport,startedOnly,teamSlug,_param_name:str = 'cardCollections') -> 'CardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("favoriteOnly",favoriteOnly))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("seasonStartYears",seasonStartYears))
        param_list.append(("sport",sport))
        param_list.append(("startedOnly",startedOnly))
        param_list.append(("teamSlug",teamSlug))
        inst = CardCollectionConnection(self,param_list)
        self._add_to_query("cardCollections",_param_name,inst)
        self.value_cardCollections = inst
        return inst

    def cardCounts(self,_param_name:str = 'cardCounts') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("cardCounts",_param_name,inst)
        self.value_cardCounts = inst
        return inst

    def cardFilters(self,sport,_param_name:str = 'cardFilters'):
        inst = None
        self._add_to_query("cardFilters",_param_name)
        pass

    def cardShardsChests(self,spent,sport,_param_name:str = 'cardShardsChests') -> 'CardShardsChest':
        param_list = []
        param_list.append(("spent",spent))
        param_list.append(("sport",sport))
        inst = CardShardsChest(self,param_list)
        self._add_to_query("cardShardsChests",_param_name,inst)
        self.value_cardShardsChests = inst
        return inst

    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def cardsCount(self,_param_name:str = 'cardsCount'):
        inst = None
        self._add_to_query("cardsCount",_param_name)
        pass

    def cardsReferralRewards(self,after,before,first,last,sport,_param_name:str = 'cardsReferralRewards') -> 'ReferralRewardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = ReferralRewardConnection(self,param_list)
        self._add_to_query("cardsReferralRewards",_param_name,inst)
        self.value_cardsReferralRewards = inst
        return inst

    def coinBalance(self,sport,_param_name:str = 'coinBalance'):
        inst = None
        self._add_to_query("coinBalance",_param_name)
        pass

    def composedAtLeastOneNonTutorialLineup(self,_param_name:str = 'composedAtLeastOneNonTutorialLineup'):
        inst = None
        self._add_to_query("composedAtLeastOneNonTutorialLineup",_param_name)
        pass

    def confirmed(self,_param_name:str = 'confirmed'):
        inst = None
        self._add_to_query("confirmed",_param_name)
        pass

    def confirmedDevice(self,_param_name:str = 'confirmedDevice'):
        inst = None
        self._add_to_query("confirmedDevice",_param_name)
        pass

    def connectedOAuthAccessTokens(self,_param_name:str = 'connectedOAuthAccessTokens') -> 'OAuthAccessToken':
        param_list = []
        inst = OAuthAccessToken(self,param_list)
        self._add_to_query("connectedOAuthAccessTokens",_param_name,inst)
        self.value_connectedOAuthAccessTokens = inst
        return inst

    def connectedOAuthApplications(self,_param_name:str = 'connectedOAuthApplications') -> 'OAuthApplication':
        param_list = []
        inst = OAuthApplication(self,param_list)
        self._add_to_query("connectedOAuthApplications",_param_name,inst)
        self.value_connectedOAuthApplications = inst
        return inst

    def connectedOauths(self,_param_name:str = 'connectedOauths') -> 'ConnectedOAuth':
        param_list = []
        inst = ConnectedOAuth(self,param_list)
        self._add_to_query("connectedOauths",_param_name,inst)
        self.value_connectedOauths = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def currentDevice(self,_param_name:str = 'currentDevice') -> 'UserDevice':
        param_list = []
        inst = UserDevice(self,param_list)
        self._add_to_query("currentDevice",_param_name,inst)
        self.value_currentDevice = inst
        return inst

    def currentFootballRivalsManager(self,_param_name:str = 'currentFootballRivalsManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentFootballRivalsManager",_param_name,inst)
        self.value_currentFootballRivalsManager = inst
        return inst

    def customDecks(self,after,before,first,last,query,_param_name:str = 'customDecks') -> 'CustomDeckConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = CustomDeckConnection(self,param_list)
        self._add_to_query("customDecks",_param_name,inst)
        self.value_customDecks = inst
        return inst

    def depositedEth(self,_param_name:str = 'depositedEth'):
        inst = None
        self._add_to_query("depositedEth",_param_name)
        pass

    def devices(self,_param_name:str = 'devices') -> 'UserDevice':
        param_list = []
        inst = UserDevice(self,param_list)
        self._add_to_query("devices",_param_name,inst)
        self.value_devices = inst
        return inst

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def email(self,_param_name:str = 'email'):
        inst = None
        self._add_to_query("email",_param_name)
        pass

    def endedTokenOffersReceived(self,after,before,first,last,sortType,sport,states,_param_name:str = 'endedTokenOffersReceived') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        param_list.append(("states",states))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("endedTokenOffersReceived",_param_name,inst)
        self.value_endedTokenOffersReceived = inst
        return inst

    def endedTokenOffersSent(self,after,before,first,last,sortType,sport,states,_param_name:str = 'endedTokenOffersSent') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        param_list.append(("states",states))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("endedTokenOffersSent",_param_name,inst)
        self.value_endedTokenOffersSent = inst
        return inst

    def endedWithNoBuyerSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'endedWithNoBuyerSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("endedWithNoBuyerSingleSaleTokenOffers",_param_name,inst)
        self.value_endedWithNoBuyerSingleSaleTokenOffers = inst
        return inst

    def ethMigration(self,_param_name:str = 'ethMigration') -> 'EthMigration':
        param_list = []
        inst = EthMigration(self,param_list)
        self._add_to_query("ethMigration",_param_name,inst)
        self.value_ethMigration = inst
        return inst

    def ethVaultId(self,_param_name:str = 'ethVaultId'):
        inst = None
        self._add_to_query("ethVaultId",_param_name)
        pass

    def ethereumAddress(self,_param_name:str = 'ethereumAddress'):
        inst = None
        self._add_to_query("ethereumAddress",_param_name)
        pass

    def fastWithdrawals(self,_param_name:str = 'fastWithdrawals') -> 'FastWithdrawal':
        param_list = []
        inst = FastWithdrawal(self,param_list)
        self._add_to_query("fastWithdrawals",_param_name,inst)
        self.value_fastWithdrawals = inst
        return inst

    def fastWithdrawalsWithRates(self,_param_name:str = 'fastWithdrawalsWithRates') -> 'FastWithdrawalWithRates':
        param_list = []
        inst = FastWithdrawalWithRates(self,param_list)
        self._add_to_query("fastWithdrawalsWithRates",_param_name,inst)
        self.value_fastWithdrawalsWithRates = inst
        return inst

    def featureFlagCustomAttributes(self,_param_name:str = 'featureFlagCustomAttributes'):
        inst = None
        self._add_to_query("featureFlagCustomAttributes",_param_name)
        pass

    def fiatEnabled(self,_param_name:str = 'fiatEnabled'):
        inst = None
        self._add_to_query("fiatEnabled",_param_name)
        pass

    def followed(self,_param_name:str = 'followed') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("followed",_param_name,inst)
        self.value_followed = inst
        return inst

    def followers(self,after,before,first,last,_param_name:str = 'followers') -> 'UserWithSubscriptionSlugConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserWithSubscriptionSlugConnection(self,param_list)
        self._add_to_query("followers",_param_name,inst)
        self.value_followers = inst
        return inst

    def followersCount(self,_param_name:str = 'followersCount'):
        inst = None
        self._add_to_query("followersCount",_param_name)
        pass

    def following(self,after,before,first,last,_param_name:str = 'following') -> 'UserWithSubscriptionSlugConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserWithSubscriptionSlugConnection(self,param_list)
        self._add_to_query("following",_param_name,inst)
        self.value_following = inst
        return inst

    def followingCount(self,_param_name:str = 'followingCount'):
        inst = None
        self._add_to_query("followingCount",_param_name)
        pass

    def footballCardCollections(self,after,before,favoriteOnly,first,last,query,rarities,seasonStartYears,startedOnly,teamSlug,_param_name:str = 'footballCardCollections') -> 'CardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("favoriteOnly",favoriteOnly))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("seasonStartYears",seasonStartYears))
        param_list.append(("startedOnly",startedOnly))
        param_list.append(("teamSlug",teamSlug))
        inst = CardCollectionConnection(self,param_list)
        self._add_to_query("footballCardCollections",_param_name,inst)
        self.value_footballCardCollections = inst
        return inst

    def footballCardCounts(self,_param_name:str = 'footballCardCounts') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("footballCardCounts",_param_name,inst)
        self.value_footballCardCounts = inst
        return inst

    def footballCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'footballCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("footballCards",_param_name,inst)
        self.value_footballCards = inst
        return inst

    def footballLast30DaysLineupsCount(self,_param_name:str = 'footballLast30DaysLineupsCount'):
        inst = None
        self._add_to_query("footballLast30DaysLineupsCount",_param_name)
        pass

    def footballProfile(self,variant,_param_name:str = 'footballProfile') -> 'UserSportProfile':
        param_list = []
        param_list.append(("variant",variant))
        inst = UserSportProfile(self,param_list)
        self._add_to_query("footballProfile",_param_name,inst)
        self.value_footballProfile = inst
        return inst

    def footballRivalsManager(self,_param_name:str = 'footballRivalsManager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("footballRivalsManager",_param_name,inst)
        self.value_footballRivalsManager = inst
        return inst

    def footballUserProfile(self,variant,_param_name:str = 'footballUserProfile') -> 'FootballUserSportProfile':
        param_list = []
        param_list.append(("variant",variant))
        inst = FootballUserSportProfile(self,param_list)
        self._add_to_query("footballUserProfile",_param_name,inst)
        self.value_footballUserProfile = inst
        return inst

    def forcedIntoOnboarding(self,sport,_param_name:str = 'forcedIntoOnboarding'):
        inst = None
        self._add_to_query("forcedIntoOnboarding",_param_name)
        pass

    def fromPath(self,_param_name:str = 'fromPath'):
        inst = None
        self._add_to_query("fromPath",_param_name)
        pass

    def headToHeadBetaTester(self,_param_name:str = 'headToHeadBetaTester'):
        inst = None
        self._add_to_query("headToHeadBetaTester",_param_name)
        pass

    def hideTutorials(self,_param_name:str = 'hideTutorials'):
        inst = None
        self._add_to_query("hideTutorials",_param_name)
        pass

    def hoursToAnswerTrades(self,_param_name:str = 'hoursToAnswerTrades'):
        inst = None
        self._add_to_query("hoursToAnswerTrades",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def involvedLiveTokenAuctions(self,after,before,first,last,newlyListed,sortByEndDate,sport,_param_name:str = 'involvedLiveTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("newlyListed",newlyListed))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("involvedLiveTokenAuctions",_param_name,inst)
        self.value_involvedLiveTokenAuctions = inst
        return inst

    def involvedLostTokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'involvedLostTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("involvedLostTokenAuctions",_param_name,inst)
        self.value_involvedLostTokenAuctions = inst
        return inst

    def involvedTokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'involvedTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("involvedTokenAuctions",_param_name,inst)
        self.value_involvedTokenAuctions = inst
        return inst

    def last30DaysLineupsCount(self,_param_name:str = 'last30DaysLineupsCount') -> 'IntegerBySportType':
        param_list = []
        inst = IntegerBySportType(self,param_list)
        self._add_to_query("last30DaysLineupsCount",_param_name,inst)
        self.value_last30DaysLineupsCount = inst
        return inst

    def liveSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'liveSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("liveSingleSaleTokenOffers",_param_name,inst)
        self.value_liveSingleSaleTokenOffers = inst
        return inst

    def lostTokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'lostTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("lostTokenAuctions",_param_name,inst)
        self.value_lostTokenAuctions = inst
        return inst

    def managerProgression(self,sport,_param_name:str = 'managerProgression') -> 'ManagerProgression':
        param_list = []
        param_list.append(("sport",sport))
        inst = ManagerProgression(self,param_list)
        self._add_to_query("managerProgression",_param_name,inst)
        self.value_managerProgression = inst
        return inst

    def managerProgressionTasksCount(self,sport,state,type,_param_name:str = 'managerProgressionTasksCount'):
        inst = None
        self._add_to_query("managerProgressionTasksCount",_param_name)
        pass

    def managerTeams(self,after,before,first,last,_param_name:str = 'managerTeams') -> 'ManagerTeamConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = ManagerTeamConnection(self,param_list)
        self._add_to_query("managerTeams",_param_name,inst)
        self.value_managerTeams = inst
        return inst

    def mangopayUser(self,_param_name:str = 'mangopayUser') -> 'MangopayUser':
        param_list = []
        inst = MangopayUser(self,param_list)
        self._add_to_query("mangopayUser",_param_name,inst)
        self.value_mangopayUser = inst
        return inst

    def matchedContactsAt(self,_param_name:str = 'matchedContactsAt'):
        inst = None
        self._add_to_query("matchedContactsAt",_param_name)
        pass

    def moonpayParams(self,_param_name:str = 'moonpayParams'):
        inst = None
        self._add_to_query("moonpayParams",_param_name)
        pass

    def moonpaySupported(self,_param_name:str = 'moonpaySupported'):
        inst = None
        self._add_to_query("moonpaySupported",_param_name)
        pass

    def mustAcceptTcus(self,_param_name:str = 'mustAcceptTcus'):
        inst = None
        self._add_to_query("mustAcceptTcus",_param_name)
        pass

    def myAccounts(self,_param_name:str = 'myAccounts') -> 'PrivateAccount':
        param_list = []
        inst = PrivateAccount(self,param_list)
        self._add_to_query("myAccounts",_param_name,inst)
        self.value_myAccounts = inst
        return inst

    def myFootballManagerTasks(self,_param_name:str = 'myFootballManagerTasks') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("myFootballManagerTasks",_param_name,inst)
        self.value_myFootballManagerTasks = inst
        return inst

    def myRecentActiveBids(self,_param_name:str = 'myRecentActiveBids') -> 'TokenMyBid':
        param_list = []
        inst = TokenMyBid(self,param_list)
        self._add_to_query("myRecentActiveBids",_param_name,inst)
        self.value_myRecentActiveBids = inst
        return inst

    def mySorareAlgoliaKey(self,_param_name:str = 'mySorareAlgoliaKey'):
        inst = None
        self._add_to_query("mySorareAlgoliaKey",_param_name)
        pass

    def mySubscriptions(self,after,before,first,last,sortType,types,_param_name:str = 'mySubscriptions') -> 'EmailSubscriptionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("types",types))
        inst = EmailSubscriptionConnection(self,param_list)
        self._add_to_query("mySubscriptions",_param_name,inst)
        self.value_mySubscriptions = inst
        return inst

    def nbaProfile(self,_param_name:str = 'nbaProfile') -> 'UserSportProfile':
        param_list = []
        inst = UserSportProfile(self,param_list)
        self._add_to_query("nbaProfile",_param_name,inst)
        self.value_nbaProfile = inst
        return inst

    def nbaUserProfile(self,_param_name:str = 'nbaUserProfile') -> 'NBAUserSportProfile':
        param_list = []
        inst = NBAUserSportProfile(self,param_list)
        self._add_to_query("nbaUserProfile",_param_name,inst)
        self.value_nbaUserProfile = inst
        return inst

    def nickname(self,_param_name:str = 'nickname'):
        inst = None
        self._add_to_query("nickname",_param_name)
        pass

    def noCardRouteEnabled(self,_param_name:str = 'noCardRouteEnabled'):
        inst = None
        self._add_to_query("noCardRouteEnabled",_param_name)
        pass

    def notifications(self,after,before,categories:'NotificationCategoryInput',first,last,sports,_param_name:str = 'notifications') -> 'NotificationConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("categories",categories))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sports",sports))
        inst = NotificationConnection(self,param_list)
        self._add_to_query("notifications",_param_name,inst)
        self.value_notifications = inst
        return inst

    def notificationsDetails(self,categories:'NotificationCategoryInput',sports,_param_name:str = 'notificationsDetails') -> 'Notifications':
        param_list = []
        param_list.append(("categories",categories))
        param_list.append(("sports",sports))
        inst = Notifications(self,param_list)
        self._add_to_query("notificationsDetails",_param_name,inst)
        self.value_notificationsDetails = inst
        return inst

    def onboardingStatus(self,_param_name:str = 'onboardingStatus') -> 'Onboarding':
        param_list = []
        inst = Onboarding(self,param_list)
        self._add_to_query("onboardingStatus",_param_name,inst)
        self.value_onboardingStatus = inst
        return inst

    def otpBackupCodes(self,_param_name:str = 'otpBackupCodes'):
        inst = None
        self._add_to_query("otpBackupCodes",_param_name)
        pass

    def otpProvisioningUri(self,_param_name:str = 'otpProvisioningUri'):
        inst = None
        self._add_to_query("otpProvisioningUri",_param_name)
        pass

    def otpRequiredForLogin(self,_param_name:str = 'otpRequiredForLogin'):
        inst = None
        self._add_to_query("otpRequiredForLogin",_param_name)
        pass

    def paginatedCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'paginatedCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("paginatedCards",_param_name,inst)
        self.value_paginatedCards = inst
        return inst

    def paymentMethods(self,provider,_param_name:str = 'paymentMethods') -> 'PaymentMethod':
        param_list = []
        param_list.append(("provider",provider))
        inst = PaymentMethod(self,param_list)
        self._add_to_query("paymentMethods",_param_name,inst)
        self.value_paymentMethods = inst
        return inst

    def pendingDeposits(self,_param_name:str = 'pendingDeposits') -> 'PendingDeposit':
        param_list = []
        inst = PendingDeposit(self,param_list)
        self._add_to_query("pendingDeposits",_param_name,inst)
        self.value_pendingDeposits = inst
        return inst

    def pendingDirectWithdrawalCount(self,_param_name:str = 'pendingDirectWithdrawalCount'):
        inst = None
        self._add_to_query("pendingDirectWithdrawalCount",_param_name)
        pass

    def pendingTokenOffersReceived(self,after,before,first,last,sortType,sport,_param_name:str = 'pendingTokenOffersReceived') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("pendingTokenOffersReceived",_param_name,inst)
        self.value_pendingTokenOffersReceived = inst
        return inst

    def pendingTokenOffersSent(self,after,before,first,last,sortType,sport,_param_name:str = 'pendingTokenOffersSent') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("pendingTokenOffersSent",_param_name,inst)
        self.value_pendingTokenOffersSent = inst
        return inst

    def phoneNumber(self,_param_name:str = 'phoneNumber'):
        inst = None
        self._add_to_query("phoneNumber",_param_name)
        pass

    def phoneNumberVerificationRequested(self,_param_name:str = 'phoneNumberVerificationRequested'):
        inst = None
        self._add_to_query("phoneNumberVerificationRequested",_param_name)
        pass

    def phoneNumberVerified(self,_param_name:str = 'phoneNumberVerified'):
        inst = None
        self._add_to_query("phoneNumberVerified",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def podiumRankings(self,after,before,first,last,ranking,so5LeaderboardType,sport,_param_name:str = 'podiumRankings') -> 'So5RankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("ranking",ranking))
        param_list.append(("so5LeaderboardType",so5LeaderboardType))
        param_list.append(("sport",sport))
        inst = So5RankingConnection(self,param_list)
        self._add_to_query("podiumRankings",_param_name,inst)
        self.value_podiumRankings = inst
        return inst

    def podiums(self,sport,_param_name:str = 'podiums') -> 'So5Podium':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5Podium(self,param_list)
        self._add_to_query("podiums",_param_name,inst)
        self.value_podiums = inst
        return inst

    def potentialReferralConversionCredits(self,sport,_param_name:str = 'potentialReferralConversionCredits') -> 'MonetaryAmount':
        param_list = []
        param_list.append(("sport",sport))
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("potentialReferralConversionCredits",_param_name,inst)
        self.value_potentialReferralConversionCredits = inst
        return inst

    def probabilisticBundles(self,after,before,first,last,sortType,sport,_param_name:str = 'probabilisticBundles') -> 'ProbabilisticBundleConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        inst = ProbabilisticBundleConnection(self,param_list)
        self._add_to_query("probabilisticBundles",_param_name,inst)
        self.value_probabilisticBundles = inst
        return inst

    def profile(self,_param_name:str = 'profile') -> 'UserProfile':
        param_list = []
        inst = UserProfile(self,param_list)
        self._add_to_query("profile",_param_name,inst)
        self.value_profile = inst
        return inst

    def pushNotificationsSupported(self,_param_name:str = 'pushNotificationsSupported'):
        inst = None
        self._add_to_query("pushNotificationsSupported",_param_name)
        pass

    def rampSupported(self,_param_name:str = 'rampSupported'):
        inst = None
        self._add_to_query("rampSupported",_param_name)
        pass

    def recentActiveBids(self,_param_name:str = 'recentActiveBids') -> 'TokenBid':
        param_list = []
        inst = TokenBid(self,param_list)
        self._add_to_query("recentActiveBids",_param_name,inst)
        self.value_recentActiveBids = inst
        return inst

    def recommendedManagers(self,after,before,first,last,sport,_param_name:str = 'recommendedManagers') -> 'UserConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = UserConnection(self,param_list)
        self._add_to_query("recommendedManagers",_param_name,inst)
        self.value_recommendedManagers = inst
        return inst

    def recoveryKitBalance(self,_param_name:str = 'recoveryKitBalance'):
        inst = None
        self._add_to_query("recoveryKitBalance",_param_name)
        pass

    def referee(self,_param_name:str = 'referee'):
        inst = None
        self._add_to_query("referee",_param_name)
        pass

    def refereeReward(self,_param_name:str = 'refereeReward') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("refereeReward",_param_name,inst)
        self.value_refereeReward = inst
        return inst

    def refereeRewards(self,_param_name:str = 'refereeRewards') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("refereeRewards",_param_name,inst)
        self.value_refereeRewards = inst
        return inst

    def referralAsReferee(self,_param_name:str = 'referralAsReferee') -> 'Referral':
        param_list = []
        inst = Referral(self,param_list)
        self._add_to_query("referralAsReferee",_param_name,inst)
        self.value_referralAsReferee = inst
        return inst

    def referralMilestoneRewards(self,sport,_param_name:str = 'referralMilestoneRewards') -> 'ReferralMilestoneReward':
        param_list = []
        param_list.append(("sport",sport))
        inst = ReferralMilestoneReward(self,param_list)
        self._add_to_query("referralMilestoneRewards",_param_name,inst)
        self.value_referralMilestoneRewards = inst
        return inst

    def referralRewardsCount(self,_param_name:str = 'referralRewardsCount'):
        inst = None
        self._add_to_query("referralRewardsCount",_param_name)
        pass

    def referralSpecialEvents(self,sport,_param_name:str = 'referralSpecialEvents') -> 'ReferralSpecialEvent':
        param_list = []
        param_list.append(("sport",sport))
        inst = ReferralSpecialEvent(self,param_list)
        self._add_to_query("referralSpecialEvents",_param_name,inst)
        self.value_referralSpecialEvents = inst
        return inst

    def referralUrl(self,_param_name:str = 'referralUrl'):
        inst = None
        self._add_to_query("referralUrl",_param_name)
        pass

    def referrals(self,page,pageSize,sport,state,_param_name:str = 'referrals') -> 'ReferralPaginated':
        param_list = []
        param_list.append(("page",page))
        param_list.append(("pageSize",pageSize))
        param_list.append(("sport",sport))
        param_list.append(("state",state))
        inst = ReferralPaginated(self,param_list)
        self._add_to_query("referrals",_param_name,inst)
        self.value_referrals = inst
        return inst

    def referrer(self,_param_name:str = 'referrer') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("referrer",_param_name,inst)
        self.value_referrer = inst
        return inst

    def revealedCardsSummary(self,seasonStartYear,sport,_param_name:str = 'revealedCardsSummary') -> 'RevealedCardsSummary':
        param_list = []
        param_list.append(("seasonStartYear",seasonStartYear))
        param_list.append(("sport",sport))
        inst = RevealedCardsSummary(self,param_list)
        self._add_to_query("revealedCardsSummary",_param_name,inst)
        self.value_revealedCardsSummary = inst
        return inst

    def rewardedRankings(self,after,before,first,last,so5LeaderboardType,sport,_param_name:str = 'rewardedRankings') -> 'So5RankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("so5LeaderboardType",so5LeaderboardType))
        param_list.append(("sport",sport))
        inst = So5RankingConnection(self,param_list)
        self._add_to_query("rewardedRankings",_param_name,inst)
        self.value_rewardedRankings = inst
        return inst

    def rewards(self,aasmState,after,before,first,last,sport,_param_name:str = 'rewards') -> 'AnyRewardInterfaceConnection':
        param_list = []
        param_list.append(("aasmState",aasmState))
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = AnyRewardInterfaceConnection(self,param_list)
        self._add_to_query("rewards",_param_name,inst)
        self.value_rewards = inst
        return inst

    def scopes(self,_param_name:str = 'scopes'):
        inst = None
        self._add_to_query("scopes",_param_name)
        pass

    def singleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'singleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("singleSaleTokenOffers",_param_name,inst)
        self.value_singleSaleTokenOffers = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5NoCardRouteOpened(self,sport,_param_name:str = 'so5NoCardRouteOpened'):
        inst = None
        self._add_to_query("so5NoCardRouteOpened",_param_name)
        pass

    def so5TrophiesSummary(self,sport,_param_name:str = 'so5TrophiesSummary') -> 'TrophiesSummary':
        param_list = []
        param_list.append(("sport",sport))
        inst = TrophiesSummary(self,param_list)
        self._add_to_query("so5TrophiesSummary",_param_name,inst)
        self.value_so5TrophiesSummary = inst
        return inst

    def soldSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'soldSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("soldSingleSaleTokenOffers",_param_name,inst)
        self.value_soldSingleSaleTokenOffers = inst
        return inst

    def sorareAddress(self,_param_name:str = 'sorareAddress'):
        inst = None
        self._add_to_query("sorareAddress",_param_name)
        pass

    def sorareAddressApprovedBank(self,_param_name:str = 'sorareAddressApprovedBank'):
        inst = None
        self._add_to_query("sorareAddressApprovedBank",_param_name)
        pass

    def sorareAddressApprovedBankPending(self,_param_name:str = 'sorareAddressApprovedBankPending'):
        inst = None
        self._add_to_query("sorareAddressApprovedBankPending",_param_name)
        pass

    def sorareAddressBalance(self,_param_name:str = 'sorareAddressBalance'):
        inst = None
        self._add_to_query("sorareAddressBalance",_param_name)
        pass

    def sorarePrivateKey(self,_param_name:str = 'sorarePrivateKey') -> 'SorarePrivateKey':
        param_list = []
        inst = SorarePrivateKey(self,param_list)
        self._add_to_query("sorarePrivateKey",_param_name,inst)
        self.value_sorarePrivateKey = inst
        return inst

    def sorarePrivateKeyRecovery(self,_param_name:str = 'sorarePrivateKeyRecovery'):
        inst = None
        self._add_to_query("sorarePrivateKeyRecovery",_param_name)
        pass

    def spentFiatPaymentIntents(self,after,before,endDate,first,last,sortType,startDate,_param_name:str = 'spentFiatPaymentIntents') -> 'PaymentConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("endDate",endDate))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("startDate",startDate))
        inst = PaymentConnection(self,param_list)
        self._add_to_query("spentFiatPaymentIntents",_param_name,inst)
        self.value_spentFiatPaymentIntents = inst
        return inst

    def sportConversionCredit(self,includeGiftCards,sport,_param_name:str = 'sportConversionCredit') -> 'ConversionCredit':
        param_list = []
        param_list.append(("includeGiftCards",includeGiftCards))
        param_list.append(("sport",sport))
        inst = ConversionCredit(self,param_list)
        self._add_to_query("sportConversionCredit",_param_name,inst)
        self.value_sportConversionCredit = inst
        return inst

    def sportConversionCredits(self,after,before,first,includeGiftCards,includeUsing,last,sport,_param_name:str = 'sportConversionCredits') -> 'ConversionCreditConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("includeGiftCards",includeGiftCards))
        param_list.append(("includeUsing",includeUsing))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = ConversionCreditConnection(self,param_list)
        self._add_to_query("sportConversionCredits",_param_name,inst)
        self.value_sportConversionCredits = inst
        return inst

    def starkKey(self,_param_name:str = 'starkKey'):
        inst = None
        self._add_to_query("starkKey",_param_name)
        pass

    def starkKeyRegistered(self,_param_name:str = 'starkKeyRegistered'):
        inst = None
        self._add_to_query("starkKeyRegistered",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def suspended(self,_param_name:str = 'suspended'):
        inst = None
        self._add_to_query("suspended",_param_name)
        pass

    def timeLeftForConfirmation(self,_param_name:str = 'timeLeftForConfirmation'):
        inst = None
        self._add_to_query("timeLeftForConfirmation",_param_name)
        pass

    def tokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'tokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("tokenAuctions",_param_name,inst)
        self.value_tokenAuctions = inst
        return inst

    def tokenOffers(self,after,before,direction,first,last,sortType,sport,states,_param_name:str = 'tokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("direction",direction))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        param_list.append(("states",states))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("tokenOffers",_param_name,inst)
        self.value_tokenOffers = inst
        return inst

    def topRecommendations(self,positions,recommendableSlug,recommendableType,recommendationEngine,sport,_param_name:str = 'topRecommendations') -> 'PlayerRecommendation':
        param_list = []
        param_list.append(("positions",positions))
        param_list.append(("recommendableSlug",recommendableSlug))
        param_list.append(("recommendableType",recommendableType))
        param_list.append(("recommendationEngine",recommendationEngine))
        param_list.append(("sport",sport))
        inst = PlayerRecommendation(self,param_list)
        self._add_to_query("topRecommendations",_param_name,inst)
        self.value_topRecommendations = inst
        return inst

    def totalBalance(self,_param_name:str = 'totalBalance'):
        inst = None
        self._add_to_query("totalBalance",_param_name)
        pass

    def totalReferralConversionCreditsEarned(self,sport,_param_name:str = 'totalReferralConversionCreditsEarned') -> 'MonetaryAmount':
        param_list = []
        param_list.append(("sport",sport))
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("totalReferralConversionCreditsEarned",_param_name,inst)
        self.value_totalReferralConversionCreditsEarned = inst
        return inst

    def trophies(self,_param_name:str = 'trophies') -> 'So5Trophies':
        param_list = []
        inst = So5Trophies(self,param_list)
        self._add_to_query("trophies",_param_name,inst)
        self.value_trophies = inst
        return inst

    def trophiesSummary(self,sport,_param_name:str = 'trophiesSummary') -> 'So5TrophiesSummary':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5TrophiesSummary(self,param_list)
        self._add_to_query("trophiesSummary",_param_name,inst)
        self.value_trophiesSummary = inst
        return inst

    def unclaimedActionRewards(self,_param_name:str = 'unclaimedActionRewards') -> 'ActionReward':
        param_list = []
        inst = ActionReward(self,param_list)
        self._add_to_query("unclaimedActionRewards",_param_name,inst)
        self.value_unclaimedActionRewards = inst
        return inst

    def unclaimedDeliverableItemOrders(self,deliverableItemId,sport,_param_name:str = 'unclaimedDeliverableItemOrders') -> 'DeliverableItemOrder':
        param_list = []
        param_list.append(("deliverableItemId",deliverableItemId))
        param_list.append(("sport",sport))
        inst = DeliverableItemOrder(self,param_list)
        self._add_to_query("unclaimedDeliverableItemOrders",_param_name,inst)
        self.value_unclaimedDeliverableItemOrders = inst
        return inst

    def unclaimedReferralRewardsCount(self,_param_name:str = 'unclaimedReferralRewardsCount'):
        inst = None
        self._add_to_query("unclaimedReferralRewardsCount",_param_name)
        pass

    def unclaimedSo5Rewards(self,sport,_param_name:str = 'unclaimedSo5Rewards') -> 'So5Reward':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5Reward(self,param_list)
        self._add_to_query("unclaimedSo5Rewards",_param_name,inst)
        self.value_unclaimedSo5Rewards = inst
        return inst

    def unconfirmedEmail(self,_param_name:str = 'unconfirmedEmail'):
        inst = None
        self._add_to_query("unconfirmedEmail",_param_name)
        pass

    def unopenedProbabilisticBundles(self,after,before,first,last,sport,_param_name:str = 'unopenedProbabilisticBundles') -> 'ProbabilisticBundleConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = ProbabilisticBundleConnection(self,param_list)
        self._add_to_query("unopenedProbabilisticBundles",_param_name,inst)
        self.value_unopenedProbabilisticBundles = inst
        return inst

    def unreadNotificationsCount(self,categories:'NotificationCategoryInput',sports,_param_name:str = 'unreadNotificationsCount'):
        inst = None
        self._add_to_query("unreadNotificationsCount",_param_name)
        pass

    def unverifiedPhoneNumber(self,_param_name:str = 'unverifiedPhoneNumber'):
        inst = None
        self._add_to_query("unverifiedPhoneNumber",_param_name)
        pass

    def userRelations(self,after,before,first,knownUserOnly,last,_param_name:str = 'userRelations') -> 'UserRelationConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("knownUserOnly",knownUserOnly))
        param_list.append(("last",last))
        inst = UserRelationConnection(self,param_list)
        self._add_to_query("userRelations",_param_name,inst)
        self.value_userRelations = inst
        return inst

    def userSettings(self,_param_name:str = 'userSettings') -> 'UserSettings':
        param_list = []
        inst = UserSettings(self,param_list)
        self._add_to_query("userSettings",_param_name,inst)
        self.value_userSettings = inst
        return inst

    def userSportProfile(self,sport,variant,_param_name:str = 'userSportProfile'):
        inst = None
        self._add_to_query("userSportProfile",_param_name)
        pass

    def wallet(self,_param_name:str = 'wallet') -> 'UserWallet':
        param_list = []
        inst = UserWallet(self,param_list)
        self._add_to_query("wallet",_param_name,inst)
        self.value_wallet = inst
        return inst

    def withdrawals(self,_param_name:str = 'withdrawals') -> 'Withdrawal':
        param_list = []
        inst = Withdrawal(self,param_list)
        self._add_to_query("withdrawals",_param_name,inst)
        self.value_withdrawals = inst
        return inst

    def withdrawalsWithRates(self,_param_name:str = 'withdrawalsWithRates') -> 'WithdrawalWithRates':
        param_list = []
        inst = WithdrawalWithRates(self,param_list)
        self._add_to_query("withdrawalsWithRates",_param_name,inst)
        self.value_withdrawalsWithRates = inst
        return inst

    def wonTokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'wonTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("wonTokenAuctions",_param_name,inst)
        self.value_wonTokenAuctions = inst
        return inst

    def nbaCards(self,first,after,playerSlugs,positions,rarities,_param_name:str = 'nbaCards') -> 'NBACardConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        inst = NBACardConnection(self,param_list)
        self._add_to_query("nbaCards",_param_name,inst)
        self.value_nbaCards = inst
        return inst

    def nbaCurrentUserData(self,_param_name:str = 'nbaCurrentUserData') -> 'NBACurrentUserData':
        param_list = []
        inst = NBACurrentUserData(self,param_list)
        self._add_to_query("nbaCurrentUserData",_param_name,inst)
        self.value_nbaCurrentUserData = inst
        return inst

    def nbaUnclaimedLineupRewards(self,_param_name:str = 'nbaUnclaimedLineupRewards') -> 'NBAReward':
        param_list = []
        inst = NBAReward(self,param_list)
        self._add_to_query("nbaUnclaimedLineupRewards",_param_name,inst)
        self.value_nbaUnclaimedLineupRewards = inst
        return inst

    def nbaCardCounts(self,_param_name:str = 'nbaCardCounts') -> 'CardCountsByRarity':
        param_list = []
        inst = CardCountsByRarity(self,param_list)
        self._add_to_query("nbaCardCounts",_param_name,inst)
        self.value_nbaCardCounts = inst
        return inst

    def nbaLeagues(self,_param_name:str = 'nbaLeagues') -> 'NBALeague':
        param_list = []
        inst = NBALeague(self,param_list)
        self._add_to_query("nbaLeagues",_param_name,inst)
        self.value_nbaLeagues = inst
        return inst

    def nbaCollections(self,slugsFilter,_param_name:str = 'nbaCollections') -> 'NBACollection':
        param_list = []
        param_list.append(("slugsFilter",slugsFilter))
        inst = NBACollection(self,param_list)
        self._add_to_query("nbaCollections",_param_name,inst)
        self.value_nbaCollections = inst
        return inst

    def nbaUnclaimedCashRewards(self,_param_name:str = 'nbaUnclaimedCashRewards') -> 'CashReward':
        param_list = []
        inst = CashReward(self,param_list)
        self._add_to_query("nbaUnclaimedCashRewards",_param_name,inst)
        self.value_nbaUnclaimedCashRewards = inst
        return inst

    def nbaUnclaimedConversionCreditRewards(self,_param_name:str = 'nbaUnclaimedConversionCreditRewards') -> 'ConversionCreditReward':
        param_list = []
        inst = ConversionCreditReward(self,param_list)
        self._add_to_query("nbaUnclaimedConversionCreditRewards",_param_name,inst)
        self.value_nbaUnclaimedConversionCreditRewards = inst
        return inst

    def nbaUnclaimedCardRewards(self,_param_name:str = 'nbaUnclaimedCardRewards') -> 'CardReward':
        param_list = []
        inst = CardReward(self,param_list)
        self._add_to_query("nbaUnclaimedCardRewards",_param_name,inst)
        self.value_nbaUnclaimedCardRewards = inst
        return inst

    def baseballCards(self,first,after,playerSlugs,positions,rarities,_param_name:str = 'baseballCards') -> 'BaseballCardConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        inst = BaseballCardConnection(self,param_list)
        self._add_to_query("baseballCards",_param_name,inst)
        self.value_baseballCards = inst
        return inst

    def baseballCardCounts(self,_param_name:str = 'baseballCardCounts') -> 'CardCountsByRarity':
        param_list = []
        inst = CardCountsByRarity(self,param_list)
        self._add_to_query("baseballCardCounts",_param_name,inst)
        self.value_baseballCardCounts = inst
        return inst

    def baseballCardCountsByLineupPosition(self,rarities,_param_name:str = 'baseballCardCountsByLineupPosition') -> 'BaseballCardCountsByLineupPosition':
        param_list = []
        param_list.append(("rarities",rarities))
        inst = BaseballCardCountsByLineupPosition(self,param_list)
        self._add_to_query("baseballCardCountsByLineupPosition",_param_name,inst)
        self.value_baseballCardCountsByLineupPosition = inst
        return inst

    def baseballUnclaimedLineupRewards(self,_param_name:str = 'baseballUnclaimedLineupRewards') -> 'BaseballReward':
        param_list = []
        inst = BaseballReward(self,param_list)
        self._add_to_query("baseballUnclaimedLineupRewards",_param_name,inst)
        self.value_baseballUnclaimedLineupRewards = inst
        return inst

    def baseballScoutingMissions(self,_param_name:str = 'baseballScoutingMissions') -> 'BaseballScoutingMission':
        param_list = []
        inst = BaseballScoutingMission(self,param_list)
        self._add_to_query("baseballScoutingMissions",_param_name,inst)
        self.value_baseballScoutingMissions = inst
        return inst

    def baseballCollections(self,slugsFilter,_param_name:str = 'baseballCollections') -> 'BaseballCollection':
        param_list = []
        param_list.append(("slugsFilter",slugsFilter))
        inst = BaseballCollection(self,param_list)
        self._add_to_query("baseballCollections",_param_name,inst)
        self.value_baseballCollections = inst
        return inst

    def baseballUnclaimedCashRewards(self,_param_name:str = 'baseballUnclaimedCashRewards') -> 'CashReward':
        param_list = []
        inst = CashReward(self,param_list)
        self._add_to_query("baseballUnclaimedCashRewards",_param_name,inst)
        self.value_baseballUnclaimedCashRewards = inst
        return inst

    def baseballUnclaimedConversionCreditRewards(self,_param_name:str = 'baseballUnclaimedConversionCreditRewards') -> 'ConversionCreditReward':
        param_list = []
        inst = ConversionCreditReward(self,param_list)
        self._add_to_query("baseballUnclaimedConversionCreditRewards",_param_name,inst)
        self.value_baseballUnclaimedConversionCreditRewards = inst
        return inst

    def baseballUnclaimedCardRewards(self,_param_name:str = 'baseballUnclaimedCardRewards') -> 'CardReward':
        param_list = []
        inst = CardReward(self,param_list)
        self._add_to_query("baseballUnclaimedCardRewards",_param_name,inst)
        self.value_baseballUnclaimedCardRewards = inst
        return inst

    def baseballUnclaimedCoinRewards(self,types,_param_name:str = 'baseballUnclaimedCoinRewards') -> 'BaseballCoinReward':
        param_list = []
        param_list.append(("types",types))
        inst = BaseballCoinReward(self,param_list)
        self._add_to_query("baseballUnclaimedCoinRewards",_param_name,inst)
        self.value_baseballUnclaimedCoinRewards = inst
        return inst

    def baseballUnclaimedBoxRewards(self,_param_name:str = 'baseballUnclaimedBoxRewards') -> 'BoxReward':
        param_list = []
        inst = BoxReward(self,param_list)
        self._add_to_query("baseballUnclaimedBoxRewards",_param_name,inst)
        self.value_baseballUnclaimedBoxRewards = inst
        return inst


class acceptOfferPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_deal = None
    value_errors:'list[UserError]' = None
    value_rewards:'list[AnyRewardInterface]' = None
    value_tokenOffer:'TokenOffer' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def deal(self,_param_name:str = 'deal'):
        inst = None
        self._add_to_query("deal",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def rewards(self,_param_name:str = 'rewards') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("rewards",_param_name,inst)
        self.value_rewards = inst
        return inst

    def tokenOffer(self,_param_name:str = 'tokenOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("tokenOffer",_param_name,inst)
        self.value_tokenOffer = inst
        return inst


class acceptSo5NoCardDraftableAppearanceInput(GraphQLInputObject):
    def __init__(self,accessToken = None,clientMutationId = None,so5FixtureId = None):
        self._add_parameter('accessToken',accessToken)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5FixtureId',so5FixtureId)

class So5NoCardDraftableAppearance(GraphQLObject):
    value_bonus = None
    value_id = None
    value_player = None
    value_position = None
    value_positions = None
    value_season:'Season' = None
    value_team = None
    def bonus(self,_param_name:str = 'bonus'):
        inst = None
        self._add_to_query("bonus",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def player(self,_param_name:str = 'player'):
        inst = None
        self._add_to_query("player",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass


class acceptSo5NoCardDraftableAppearancePayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_draftableAppearance:'So5NoCardDraftableAppearance' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def draftableAppearance(self,_param_name:str = 'draftableAppearance') -> 'So5NoCardDraftableAppearance':
        param_list = []
        inst = So5NoCardDraftableAppearance(self,param_list)
        self._add_to_query("draftableAppearance",_param_name,inst)
        self.value_draftableAppearance = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class acceptSo5NoCardLineupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5NoCardLineupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5NoCardLineupId',so5NoCardLineupId)

class So5NoCardAppearance(GraphQLObject):
    value_player:'Player' = None
    value_position = None
    value_positions = None
    value_so5Score:'So5Score' = None
    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def so5Score(self,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst


class So5NoCardLineup(GraphQLObject):
    value_appearances:'list[So5NoCardAppearance]' = None
    value_id = None
    value_ranking = None
    value_score = None
    value_so5Fixture:'So5Fixture' = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_user:'User' = None
    def appearances(self,_param_name:str = 'appearances') -> 'So5NoCardAppearance':
        param_list = []
        inst = So5NoCardAppearance(self,param_list)
        self._add_to_query("appearances",_param_name,inst)
        self.value_appearances = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5Leaderboard(self,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class acceptSo5NoCardLineupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5NoCardLineup:'So5NoCardLineup' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5NoCardLineup(self,_param_name:str = 'so5NoCardLineup') -> 'So5NoCardLineup':
        param_list = []
        inst = So5NoCardLineup(self,param_list)
        self._add_to_query("so5NoCardLineup",_param_name,inst)
        self.value_so5NoCardLineup = inst
        return inst


class acceptTermsInput(GraphQLInputObject):
    def __init__(self,acceptAgeLimit = None,acceptGameRules = None,acceptPrivacyPolicy = None,acceptTerms = None,agreedToReceiveOffersFromPartners = None,agreedToReceiveOffersFromPartnersSpecific = None,clientMutationId = None,tcuToken = None):
        self._add_parameter('acceptAgeLimit',acceptAgeLimit)
        self._add_parameter('acceptGameRules',acceptGameRules)
        self._add_parameter('acceptPrivacyPolicy',acceptPrivacyPolicy)
        self._add_parameter('acceptTerms',acceptTerms)
        self._add_parameter('agreedToReceiveOffersFromPartners',agreedToReceiveOffersFromPartners)
        self._add_parameter('agreedToReceiveOffersFromPartnersSpecific',agreedToReceiveOffersFromPartnersSpecific)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('tcuToken',tcuToken)

class JwtToken(GraphQLObject):
    value_expiredAt = None
    value_token = None
    def expiredAt(self,_param_name:str = 'expiredAt'):
        inst = None
        self._add_to_query("expiredAt",_param_name)
        pass

    def token(self,_param_name:str = 'token'):
        inst = None
        self._add_to_query("token",_param_name)
        pass


class AcceptTermsMutationPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_jwtToken:'JwtToken' = None
    value_result = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def jwtToken(self,aud,_param_name:str = 'jwtToken') -> 'JwtToken':
        param_list = []
        param_list.append(("aud",aud))
        inst = JwtToken(self,param_list)
        self._add_to_query("jwtToken",_param_name,inst)
        self.value_jwtToken = inst
        return inst

    def result(self,_param_name:str = 'result'):
        inst = None
        self._add_to_query("result",_param_name)
        pass


class activateWalletRecoveryInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,destination = None,method = None,verificationCode = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('destination',destination)
        self._add_parameter('method',method)
        self._add_parameter('verificationCode',verificationCode)

class activateWalletRecoveryPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class addAuctionReminderInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,tokenAuctionId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('tokenAuctionId',tokenAuctionId)

class addAuctionReminderPayload(GraphQLObject):
    value_auction:'TokenAuction' = None
    value_auctionReminder:'AuctionReminder' = None
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def auction(self,_param_name:str = 'auction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("auction",_param_name,inst)
        self.value_auction = inst
        return inst

    def auctionReminder(self,_param_name:str = 'auctionReminder') -> 'AuctionReminder':
        param_list = []
        inst = AuctionReminder(self,param_list)
        self._add_to_query("auctionReminder",_param_name,inst)
        self.value_auctionReminder = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class addDeviceInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class addDevicePayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_deliveryType = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def deliveryType(self,_param_name:str = 'deliveryType'):
        inst = None
        self._add_to_query("deliveryType",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class UtmInput(GraphQLInputObject):
    def __init__(self,partner = None,trafficCategory = None,user = None,utmCampaign = None,utmContent = None,utmMedium = None,utmSource = None,utmTerm = None):
        self._add_parameter('partner',partner)
        self._add_parameter('trafficCategory',trafficCategory)
        self._add_parameter('user',user)
        self._add_parameter('utmCampaign',utmCampaign)
        self._add_parameter('utmContent',utmContent)
        self._add_parameter('utmMedium',utmMedium)
        self._add_parameter('utmSource',utmSource)
        self._add_parameter('utmTerm',utmTerm)

class addEmailToListInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,email = None,name = None,recaptchaToken = None,recaptchaTokenIos = None,recaptchaTokenV2 = None,utmParams:'UtmInput' = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('email',email)
        self._add_parameter('name',name)
        self._add_parameter('recaptchaToken',recaptchaToken)
        self._add_parameter('recaptchaTokenIos',recaptchaTokenIos)
        self._add_parameter('recaptchaTokenV2',recaptchaTokenV2)
        self._add_parameter('utmParams',utmParams)

class addEmailToListPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class SubscribableInput(GraphQLInputObject):
    def __init__(self,slug = None,type = None):
        self._add_parameter('slug',slug)
        self._add_parameter('type',type)

class addFavouriteClubsInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,subscribables:'SubscribableInput' = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('subscribables',subscribables)

class addFavouriteClubsPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class addTokensToDeckInput(GraphQLInputObject):
    def __init__(self,assetIds = None,clientMutationId = None,deckSlug = None,slugs = None):
        self._add_parameter('assetIds',assetIds)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('deckSlug',deckSlug)
        self._add_parameter('slugs',slugs)

class addTokensToDeckPayload(GraphQLObject):
    value_cards:'list[AnyCardInterface]' = None
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_deck:'Deck' = None
    value_errors:'list[UserError]' = None
    value_tokens:'list[Token]' = None
    def cards(self,_param_name:str = 'cards') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def deck(self,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def tokens(self,_param_name:str = 'tokens') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("tokens",_param_name,inst)
        self.value_tokens = inst
        return inst


class PrivateKeyRecoveryInput(GraphQLInputObject):
    def __init__(self,appId = None,email = None,encryptionKey = None,iv = None,payload = None,phone = None,teamId = None):
        self._add_parameter('appId',appId)
        self._add_parameter('email',email)
        self._add_parameter('encryptionKey',encryptionKey)
        self._add_parameter('iv',iv)
        self._add_parameter('payload',payload)
        self._add_parameter('phone',phone)
        self._add_parameter('teamId',teamId)

class addWalletRecoveryInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,otpAttempt = None,privateKeyRecovery:'PrivateKeyRecoveryInput' = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('otpAttempt',otpAttempt)
        self._add_parameter('privateKeyRecovery',privateKeyRecovery)

class addWalletRecoveryPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class AmountInput(GraphQLInputObject):
    def __init__(self,amount = None,currency = None):
        self._add_parameter('amount',amount)
        self._add_parameter('currency',currency)

class Announcement(GraphQLObject):
    value_content = None
    value_createdAt = None
    value_id = None
    value_pictureUrl = None
    value_sport = None
    value_title = None
    value_url = None
    def content(self,_param_name:str = 'content'):
        inst = None
        self._add_to_query("content",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def url(self,_param_name:str = 'url'):
        inst = None
        self._add_to_query("url",_param_name)
        pass


class AnnouncementEdge(GraphQLObject):
    value_cursor = None
    value_node:'Announcement' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'Announcement':
        param_list = []
        inst = Announcement(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class AnnouncementConnection(GraphQLObject):
    value_edges:'list[AnnouncementEdge]' = None
    value_nodes:'list[Announcement]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'AnnouncementEdge':
        param_list = []
        inst = AnnouncementEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'Announcement':
        param_list = []
        inst = Announcement(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class AnnouncementNotification(GraphQLObject):
    value_announcement:'Announcement' = None
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_sport = None
    value_user:'CurrentUser' = None
    def announcement(self,_param_name:str = 'announcement') -> 'Announcement':
        param_list = []
        inst = Announcement(self,param_list)
        self._add_to_query("announcement",_param_name,inst)
        self.value_announcement = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class AnonymousUser(GraphQLObject):
    value_accounts:'list[Account]' = None
    value_cardsCount = None
    value_ethVaultId = None
    value_ethereumAddress = None
    value_id = None
    value_sorareAddress = None
    value_starkKey = None
    value_starkKeyRegistered = None
    def accounts(self,_param_name:str = 'accounts') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("accounts",_param_name,inst)
        self.value_accounts = inst
        return inst

    def cardsCount(self,_param_name:str = 'cardsCount'):
        inst = None
        self._add_to_query("cardsCount",_param_name)
        pass

    def ethVaultId(self,_param_name:str = 'ethVaultId'):
        inst = None
        self._add_to_query("ethVaultId",_param_name)
        pass

    def ethereumAddress(self,_param_name:str = 'ethereumAddress'):
        inst = None
        self._add_to_query("ethereumAddress",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def sorareAddress(self,_param_name:str = 'sorareAddress'):
        inst = None
        self._add_to_query("sorareAddress",_param_name)
        pass

    def starkKey(self,_param_name:str = 'starkKey'):
        inst = None
        self._add_to_query("starkKey",_param_name)
        pass

    def starkKeyRegistered(self,_param_name:str = 'starkKeyRegistered'):
        inst = None
        self._add_to_query("starkKeyRegistered",_param_name)
        pass


class AnyCardReward(GraphQLObject):
    value_aasmState = None
    value_achievement = None
    value_backPictureUrl = None
    value_card:'AnyCardInterface' = None
    value_id = None
    value_pictureUrl = None
    value_quality = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def achievement(self,_param_name:str = 'achievement'):
        inst = None
        self._add_to_query("achievement",_param_name)
        pass

    def backPictureUrl(self,_param_name:str = 'backPictureUrl'):
        inst = None
        self._add_to_query("backPictureUrl",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def quality(self,_param_name:str = 'quality'):
        inst = None
        self._add_to_query("quality",_param_name)
        pass


class AnyConversionCreditReward(GraphQLObject):
    value_aasmState = None
    value_achievement = None
    value_conversionCredit:'ConversionCredit' = None
    value_id = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def achievement(self,_param_name:str = 'achievement'):
        inst = None
        self._add_to_query("achievement",_param_name)
        pass

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class AppearanceBoostShopItem(GraphQLObject):
    value_boostBasisPoints = None
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_createdAt = None
    value_description = None
    value_disabled = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_rarity = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    def boostBasisPoints(self,_param_name:str = 'boostBasisPoints'):
        inst = None
        self._add_to_query("boostBasisPoints",_param_name)
        pass

    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass


class ApplePayPaymentDataInput(GraphQLInputObject):
    def __init__(self,network = None,tokenData = None,transactionId = None):
        self._add_parameter('network',network)
        self._add_parameter('tokenData',tokenData)
        self._add_parameter('transactionId',transactionId)

class approveMigratorInput(GraphQLInputObject):
    def __init__(self,address = None,clientMutationId = None,nonce = None,signature = None):
        self._add_parameter('address',address)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('nonce',nonce)
        self._add_parameter('signature',signature)

class approveMigratorPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class ArenaTicketReward(GraphQLObject):
    value_count = None
    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass


class AuctionDrop(GraphQLObject):
    value_endDate = None
    value_id = None
    value_label = None
    value_livePrimaryButtonHref = None
    value_livePrimaryButtonLabel = None
    value_modalText = None
    value_so5TournamentTypes:'list[So5Tournament]' = None
    value_startDate = None
    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def label(self,_param_name:str = 'label'):
        inst = None
        self._add_to_query("label",_param_name)
        pass

    def livePrimaryButtonHref(self,_param_name:str = 'livePrimaryButtonHref'):
        inst = None
        self._add_to_query("livePrimaryButtonHref",_param_name)
        pass

    def livePrimaryButtonLabel(self,_param_name:str = 'livePrimaryButtonLabel'):
        inst = None
        self._add_to_query("livePrimaryButtonLabel",_param_name)
        pass

    def modalText(self,_param_name:str = 'modalText'):
        inst = None
        self._add_to_query("modalText",_param_name)
        pass

    def so5TournamentTypes(self,_param_name:str = 'so5TournamentTypes') -> 'So5Tournament':
        param_list = []
        inst = So5Tournament(self,param_list)
        self._add_to_query("so5TournamentTypes",_param_name,inst)
        self.value_so5TournamentTypes = inst
        return inst

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass


class AuctionNotification(GraphQLObject):
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_rewards:'list[AnyRewardInterface]' = None
    value_sport = None
    value_tokenAuction:'TokenAuction' = None
    value_tokenBid:'TokenBid' = None
    value_user:'CurrentUser' = None
    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def rewards(self,_param_name:str = 'rewards') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("rewards",_param_name,inst)
        self.value_rewards = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def tokenAuction(self,_param_name:str = 'tokenAuction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("tokenAuction",_param_name,inst)
        self.value_tokenAuction = inst
        return inst

    def tokenBid(self,_param_name:str = 'tokenBid') -> 'TokenBid':
        param_list = []
        inst = TokenBid(self,param_list)
        self._add_to_query("tokenBid",_param_name,inst)
        self.value_tokenBid = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class autoPickDraftInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,commonDraftCampaignSlug = None,selectedPrintablePlayerIds = None,so5LeaderboardSlug = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('commonDraftCampaignSlug',commonDraftCampaignSlug)
        self._add_parameter('selectedPrintablePlayerIds',selectedPrintablePlayerIds)
        self._add_parameter('so5LeaderboardSlug',so5LeaderboardSlug)

class autoPickDraftPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_newSelectedPlayers:'list[DraftablePlayer]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def newSelectedPlayers(self,_param_name:str = 'newSelectedPlayers') -> 'DraftablePlayer':
        param_list = []
        inst = DraftablePlayer(self,param_list)
        self._add_to_query("newSelectedPlayers",_param_name,inst)
        self.value_newSelectedPlayers = inst
        return inst


class AvailableDraftPlayersSortInput(GraphQLInputObject):
    def __init__(self,direction = None,type = None):
        self._add_parameter('direction',direction)
        self._add_parameter('type',type)

class BackupPrivateKeyRecoveryInput(GraphQLInputObject):
    def __init__(self,encryptedSymmetricKey = None,iv = None,payload = None,rsaEncryptionKey = None,rsaPublicKey = None):
        self._add_parameter('encryptedSymmetricKey',encryptedSymmetricKey)
        self._add_parameter('iv',iv)
        self._add_parameter('payload',payload)
        self._add_parameter('rsaEncryptionKey',rsaEncryptionKey)
        self._add_parameter('rsaPublicKey',rsaPublicKey)

class BankAccountEdge(GraphQLObject):
    value_cursor = None
    value_node = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node'):
        inst = None
        self._add_to_query("node",_param_name)
        pass


class BankAccountConnection(GraphQLObject):
    value_edges:'list[BankAccountEdge]' = None
    value_nodes = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'BankAccountEdge':
        param_list = []
        inst = BankAccountEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes'):
        inst = None
        self._add_to_query("nodes",_param_name)
        pass

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class MangopayBankAccountOwnerAddress(GraphQLObject):
    value_addressLine1 = None
    value_addressLine2 = None
    value_city = None
    value_country = None
    value_postalCode = None
    value_region = None
    def addressLine1(self,_param_name:str = 'addressLine1'):
        inst = None
        self._add_to_query("addressLine1",_param_name)
        pass

    def addressLine2(self,_param_name:str = 'addressLine2'):
        inst = None
        self._add_to_query("addressLine2",_param_name)
        pass

    def city(self,_param_name:str = 'city'):
        inst = None
        self._add_to_query("city",_param_name)
        pass

    def country(self,_param_name:str = 'country'):
        inst = None
        self._add_to_query("country",_param_name)
        pass

    def postalCode(self,_param_name:str = 'postalCode'):
        inst = None
        self._add_to_query("postalCode",_param_name)
        pass

    def region(self,_param_name:str = 'region'):
        inst = None
        self._add_to_query("region",_param_name)
        pass


class BankAccountInterface(GraphQLObject):
    value_country:'Country' = None
    value_id = None
    value_ownerAddress:'MangopayBankAccountOwnerAddress' = None
    value_ownerName = None
    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def ownerAddress(self,_param_name:str = 'ownerAddress') -> 'MangopayBankAccountOwnerAddress':
        param_list = []
        inst = MangopayBankAccountOwnerAddress(self,param_list)
        self._add_to_query("ownerAddress",_param_name,inst)
        self.value_ownerAddress = inst
        return inst

    def ownerName(self,_param_name:str = 'ownerName'):
        inst = None
        self._add_to_query("ownerName",_param_name)
        pass


class BankAccountOwnerAddressInput(GraphQLInputObject):
    def __init__(self,addressLine1 = None,addressLine2 = None,city = None,country = None,postalCode = None,region = None):
        self._add_parameter('addressLine1',addressLine1)
        self._add_parameter('addressLine2',addressLine2)
        self._add_parameter('city',city)
        self._add_parameter('country',country)
        self._add_parameter('postalCode',postalCode)
        self._add_parameter('region',region)

class Banner(GraphQLObject):
    value_description = None
    value_desktopPictureUrl = None
    value_id = None
    value_mobilePictureUrl = None
    value_title = None
    value_url = None
    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def desktopPictureUrl(self,_param_name:str = 'desktopPictureUrl'):
        inst = None
        self._add_to_query("desktopPictureUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mobilePictureUrl(self,_param_name:str = 'mobilePictureUrl'):
        inst = None
        self._add_to_query("mobilePictureUrl",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def url(self,_param_name:str = 'url'):
        inst = None
        self._add_to_query("url",_param_name)
        pass


class BannersSet(GraphQLObject):
    value_banners:'list[Banner]' = None
    value_id = None
    value_title = None
    def banners(self,_param_name:str = 'banners') -> 'Banner':
        param_list = []
        inst = Banner(self,param_list)
        self._add_to_query("banners",_param_name,inst)
        self.value_banners = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class BaseballCardsInput(GraphQLInputObject):
    def __init__(self,ids = None,assetIds = None):
        self._add_parameter('ids',ids)
        self._add_parameter('assetIds',assetIds)

class BaseballCardsPaginated(GraphQLObject):
    value_currentPage = None
    value_pages = None
    value_cards:'list[BaseballCard]' = None
    def currentPage(self,_param_name:str = 'currentPage'):
        inst = None
        self._add_to_query("currentPage",_param_name)
        pass

    def pages(self,_param_name:str = 'pages'):
        inst = None
        self._add_to_query("pages",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'BaseballCard':
        param_list = []
        inst = BaseballCard(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst


class BaseballContestantType(GraphQLObject):
    value_gamesDrawn = None
    value_gamesLost = None
    value_gamesPlayed = None
    value_gamesWon = None
    value_id = None
    value_rank = None
    value_rankStatus = None
    value_rankType = None
    value_team:'TeamInterface' = None
    def gamesDrawn(self,_param_name:str = 'gamesDrawn'):
        inst = None
        self._add_to_query("gamesDrawn",_param_name)
        pass

    def gamesLost(self,_param_name:str = 'gamesLost'):
        inst = None
        self._add_to_query("gamesLost",_param_name)
        pass

    def gamesPlayed(self,_param_name:str = 'gamesPlayed'):
        inst = None
        self._add_to_query("gamesPlayed",_param_name)
        pass

    def gamesWon(self,_param_name:str = 'gamesWon'):
        inst = None
        self._add_to_query("gamesWon",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def rankStatus(self,_param_name:str = 'rankStatus'):
        inst = None
        self._add_to_query("rankStatus",_param_name)
        pass

    def rankType(self,_param_name:str = 'rankType'):
        inst = None
        self._add_to_query("rankType",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst


class BaseballCreateOrUpdateLineupInput(GraphQLInputObject):
    def __init__(self,lineupId = None,leaderboardSlug = None,cardSlugs = None):
        self._add_parameter('lineupId',lineupId)
        self._add_parameter('leaderboardSlug',leaderboardSlug)
        self._add_parameter('cardSlugs',cardSlugs)

class BaseballCreateOrUpdateLineupResponse(GraphQLObject):
    value_createdLineup:'BaseballLineup' = None
    value_lineupValidationErrors = None
    def createdLineup(self,_param_name:str = 'createdLineup') -> 'BaseballLineup':
        param_list = []
        inst = BaseballLineup(self,param_list)
        self._add_to_query("createdLineup",_param_name,inst)
        self.value_createdLineup = inst
        return inst

    def lineupValidationErrors(self,_param_name:str = 'lineupValidationErrors'):
        inst = None
        self._add_to_query("lineupValidationErrors",_param_name)
        pass


class BaseballDeleteLineupInput(GraphQLInputObject):
    def __init__(self,lineupId = None):
        self._add_parameter('lineupId',lineupId)

class BaseballFixtureConnection(GraphQLObject):
    value_nodes:'list[BaseballFixture]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'BaseballFixture':
        param_list = []
        inst = BaseballFixture(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class PlayerOwnershipFilter(GraphQLInputObject):
    def __init__(self,rarity = None,filterType = None):
        self._add_parameter('rarity',rarity)
        self._add_parameter('filterType',filterType)

class BaseballPlayerFixtureStatsInput(GraphQLInputObject):
    def __init__(self,position = None,first = None,after = None,playerOwnershipFilter:'PlayerOwnershipFilter' = None):
        self._add_parameter('position',position)
        self._add_parameter('first',first)
        self._add_parameter('after',after)
        self._add_parameter('playerOwnershipFilter',playerOwnershipFilter)

class BaseballReferralReward(GraphQLObject):
    value_id = None
    value_card:'BaseballCard' = None
    value_state = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'BaseballCard':
        param_list = []
        inst = BaseballCard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass


class BasketballContestantType(GraphQLObject):
    value_gamesDrawn = None
    value_gamesLost = None
    value_gamesPlayed = None
    value_gamesWon = None
    value_id = None
    value_rank = None
    value_rankStatus = None
    value_rankType = None
    value_team:'TeamInterface' = None
    def gamesDrawn(self,_param_name:str = 'gamesDrawn'):
        inst = None
        self._add_to_query("gamesDrawn",_param_name)
        pass

    def gamesLost(self,_param_name:str = 'gamesLost'):
        inst = None
        self._add_to_query("gamesLost",_param_name)
        pass

    def gamesPlayed(self,_param_name:str = 'gamesPlayed'):
        inst = None
        self._add_to_query("gamesPlayed",_param_name)
        pass

    def gamesWon(self,_param_name:str = 'gamesWon'):
        inst = None
        self._add_to_query("gamesWon",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def rankStatus(self,_param_name:str = 'rankStatus'):
        inst = None
        self._add_to_query("rankStatus",_param_name)
        pass

    def rankType(self,_param_name:str = 'rankType'):
        inst = None
        self._add_to_query("rankType",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst


class GameOfBasketball(GraphQLObject):
    value_anyPlayers:'list[AnyPlayerInterface]' = None
    value_awayScore = None
    value_awayTeam:'TeamInterface' = None
    value_competition:'Competition' = None
    value_date = None
    value_homeScore = None
    value_homeTeam:'TeamInterface' = None
    value_id = None
    value_lowCoverage = None
    value_mySo5Appearances:'list[So5Appearance]' = None
    value_mySo5Lineups:'list[So5Lineup]' = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_scored = None
    value_so5Fixture:'So5Fixture' = None
    value_statusTyped = None
    value_venue = None
    value_winner:'TeamInterface' = None
    def anyPlayers(self,_param_name:str = 'anyPlayers') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayers",_param_name,inst)
        self.value_anyPlayers = inst
        return inst

    def awayScore(self,_param_name:str = 'awayScore'):
        inst = None
        self._add_to_query("awayScore",_param_name)
        pass

    def awayTeam(self,_param_name:str = 'awayTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("awayTeam",_param_name,inst)
        self.value_awayTeam = inst
        return inst

    def competition(self,_param_name:str = 'competition') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competition",_param_name,inst)
        self.value_competition = inst
        return inst

    def date(self,_param_name:str = 'date'):
        inst = None
        self._add_to_query("date",_param_name)
        pass

    def homeScore(self,_param_name:str = 'homeScore'):
        inst = None
        self._add_to_query("homeScore",_param_name)
        pass

    def homeTeam(self,_param_name:str = 'homeTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("homeTeam",_param_name,inst)
        self.value_homeTeam = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lowCoverage(self,_param_name:str = 'lowCoverage'):
        inst = None
        self._add_to_query("lowCoverage",_param_name)
        pass

    def mySo5Appearances(self,_param_name:str = 'mySo5Appearances') -> 'So5Appearance':
        param_list = []
        inst = So5Appearance(self,param_list)
        self._add_to_query("mySo5Appearances",_param_name,inst)
        self.value_mySo5Appearances = inst
        return inst

    def mySo5Lineups(self,_param_name:str = 'mySo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("mySo5Lineups",_param_name,inst)
        self.value_mySo5Lineups = inst
        return inst

    def playerGameScore(self,playerSlug,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def scored(self,_param_name:str = 'scored'):
        inst = None
        self._add_to_query("scored",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def statusTyped(self,_param_name:str = 'statusTyped'):
        inst = None
        self._add_to_query("statusTyped",_param_name)
        pass

    def venue(self,_param_name:str = 'venue'):
        inst = None
        self._add_to_query("venue",_param_name)
        pass

    def winner(self,_param_name:str = 'winner') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("winner",_param_name,inst)
        self.value_winner = inst
        return inst


class PlayerGameStatsBasketball(GraphQLObject):
    value_anyGame:'AnyGameInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyTeam:'TeamInterface' = None
    value_assists = None
    value_basketballGame:'GameOfBasketball' = None
    value_basketballPlayer:'NBAPlayer' = None
    value_basketballPlayerGameScore:'BasketballPlayerGameScore' = None
    value_blocks = None
    value_doubleDouble = None
    value_id = None
    value_live = None
    value_onGameSheet = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_points = None
    value_rebounds = None
    value_reviewed = None
    value_steals = None
    value_threePointsMade = None
    value_tripleDouble = None
    value_turnovers = None
    def anyGame(self,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyTeam(self,_param_name:str = 'anyTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("anyTeam",_param_name,inst)
        self.value_anyTeam = inst
        return inst

    def assists(self,_param_name:str = 'assists'):
        inst = None
        self._add_to_query("assists",_param_name)
        pass

    def basketballGame(self,_param_name:str = 'basketballGame') -> 'GameOfBasketball':
        param_list = []
        inst = GameOfBasketball(self,param_list)
        self._add_to_query("basketballGame",_param_name,inst)
        self.value_basketballGame = inst
        return inst

    def basketballPlayer(self,_param_name:str = 'basketballPlayer') -> 'NBAPlayer':
        param_list = []
        inst = NBAPlayer(self,param_list)
        self._add_to_query("basketballPlayer",_param_name,inst)
        self.value_basketballPlayer = inst
        return inst

    def basketballPlayerGameScore(self,position,_param_name:str = 'basketballPlayerGameScore') -> 'BasketballPlayerGameScore':
        param_list = []
        param_list.append(("position",position))
        inst = BasketballPlayerGameScore(self,param_list)
        self._add_to_query("basketballPlayerGameScore",_param_name,inst)
        self.value_basketballPlayerGameScore = inst
        return inst

    def blocks(self,_param_name:str = 'blocks'):
        inst = None
        self._add_to_query("blocks",_param_name)
        pass

    def doubleDouble(self,_param_name:str = 'doubleDouble'):
        inst = None
        self._add_to_query("doubleDouble",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def live(self,_param_name:str = 'live'):
        inst = None
        self._add_to_query("live",_param_name)
        pass

    def onGameSheet(self,_param_name:str = 'onGameSheet'):
        inst = None
        self._add_to_query("onGameSheet",_param_name)
        pass

    def playerGameScore(self,position,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("position",position))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def rebounds(self,_param_name:str = 'rebounds'):
        inst = None
        self._add_to_query("rebounds",_param_name)
        pass

    def reviewed(self,_param_name:str = 'reviewed'):
        inst = None
        self._add_to_query("reviewed",_param_name)
        pass

    def steals(self,_param_name:str = 'steals'):
        inst = None
        self._add_to_query("steals",_param_name)
        pass

    def threePointsMade(self,_param_name:str = 'threePointsMade'):
        inst = None
        self._add_to_query("threePointsMade",_param_name)
        pass

    def tripleDouble(self,_param_name:str = 'tripleDouble'):
        inst = None
        self._add_to_query("tripleDouble",_param_name)
        pass

    def turnovers(self,_param_name:str = 'turnovers'):
        inst = None
        self._add_to_query("turnovers",_param_name)
        pass


class BasketballPlayerGameScore(GraphQLObject):
    value_anyGame:'AnyGameInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPlayerGameStats:'AnyPlayerGameStatsInterface' = None
    value_basketballGame:'GameOfBasketball' = None
    value_basketballPlayer:'NBAPlayer' = None
    value_basketballPlayerGameStats:'PlayerGameStatsBasketball' = None
    value_detailedScore:'list[StatScore]' = None
    value_id = None
    value_position = None
    value_positionTyped = None
    value_score = None
    value_scoreStatus = None
    value_scoringVersion = None
    def anyGame(self,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPlayerGameStats(self,_param_name:str = 'anyPlayerGameStats') -> 'AnyPlayerGameStatsInterface':
        param_list = []
        inst = AnyPlayerGameStatsInterface(self,param_list)
        self._add_to_query("anyPlayerGameStats",_param_name,inst)
        self.value_anyPlayerGameStats = inst
        return inst

    def basketballGame(self,_param_name:str = 'basketballGame') -> 'GameOfBasketball':
        param_list = []
        inst = GameOfBasketball(self,param_list)
        self._add_to_query("basketballGame",_param_name,inst)
        self.value_basketballGame = inst
        return inst

    def basketballPlayer(self,_param_name:str = 'basketballPlayer') -> 'NBAPlayer':
        param_list = []
        inst = NBAPlayer(self,param_list)
        self._add_to_query("basketballPlayer",_param_name,inst)
        self.value_basketballPlayer = inst
        return inst

    def basketballPlayerGameStats(self,_param_name:str = 'basketballPlayerGameStats') -> 'PlayerGameStatsBasketball':
        param_list = []
        inst = PlayerGameStatsBasketball(self,param_list)
        self._add_to_query("basketballPlayerGameStats",_param_name,inst)
        self.value_basketballPlayerGameStats = inst
        return inst

    def detailedScore(self,_param_name:str = 'detailedScore') -> 'StatScore':
        param_list = []
        inst = StatScore(self,param_list)
        self._add_to_query("detailedScore",_param_name,inst)
        self.value_detailedScore = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positionTyped(self,_param_name:str = 'positionTyped'):
        inst = None
        self._add_to_query("positionTyped",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def scoreStatus(self,_param_name:str = 'scoreStatus'):
        inst = None
        self._add_to_query("scoreStatus",_param_name)
        pass

    def scoringVersion(self,_param_name:str = 'scoringVersion'):
        inst = None
        self._add_to_query("scoringVersion",_param_name)
        pass


class BeginnerLeaderboardDetails(GraphQLObject):
    value_progressionRankPercentageThreshold = None
    value_progressOnReward = None
    value_isCompleted = None
    value_isVisible = None
    def progressionRankPercentageThreshold(self,_param_name:str = 'progressionRankPercentageThreshold'):
        inst = None
        self._add_to_query("progressionRankPercentageThreshold",_param_name)
        pass

    def progressOnReward(self,_param_name:str = 'progressOnReward'):
        inst = None
        self._add_to_query("progressOnReward",_param_name)
        pass

    def isCompleted(self,_param_name:str = 'isCompleted'):
        inst = None
        self._add_to_query("isCompleted",_param_name)
        pass

    def isVisible(self,_param_name:str = 'isVisible'):
        inst = None
        self._add_to_query("isVisible",_param_name)
        pass


class Bid(GraphQLObject):
    value_amount = None
    value_amounts:'MonetaryAmount' = None
    value_bidder = None
    value_createdAt = None
    value_fiatPayment = None
    value_id = None
    value_tokenAuction:'TokenAuction' = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def bidder(self,_param_name:str = 'bidder'):
        inst = None
        self._add_to_query("bidder",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def fiatPayment(self,_param_name:str = 'fiatPayment'):
        inst = None
        self._add_to_query("fiatPayment",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def tokenAuction(self,_param_name:str = 'tokenAuction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("tokenAuction",_param_name,inst)
        self.value_tokenAuction = inst
        return inst


class bidInput(GraphQLInputObject):
    def __init__(self,amount = None,approvals:'AuthorizationApprovalInput' = None,auctionId = None,clientMutationId = None,settlementInfo:'AcceptorSettlementInfoInput' = None):
        self._add_parameter('amount',amount)
        self._add_parameter('approvals',approvals)
        self._add_parameter('auctionId',auctionId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('settlementInfo',settlementInfo)

class bidPayload(GraphQLObject):
    value_bid:'Bid' = None
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_tokenBid:'TokenBid' = None
    def bid(self,_param_name:str = 'bid') -> 'Bid':
        param_list = []
        inst = Bid(self,param_list)
        self._add_to_query("bid",_param_name,inst)
        self.value_bid = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def tokenBid(self,_param_name:str = 'tokenBid') -> 'TokenBid':
        param_list = []
        inst = TokenBid(self,param_list)
        self._add_to_query("tokenBid",_param_name,inst)
        self.value_tokenBid = inst
        return inst


class BlockchainUserInterface(GraphQLObject):
    value_accounts:'list[Account]' = None
    value_cardsCount = None
    value_ethVaultId = None
    value_ethereumAddress = None
    value_sorareAddress = None
    value_starkKey = None
    value_starkKeyRegistered = None
    def accounts(self,_param_name:str = 'accounts') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("accounts",_param_name,inst)
        self.value_accounts = inst
        return inst

    def cardsCount(self,_param_name:str = 'cardsCount'):
        inst = None
        self._add_to_query("cardsCount",_param_name)
        pass

    def ethVaultId(self,_param_name:str = 'ethVaultId'):
        inst = None
        self._add_to_query("ethVaultId",_param_name)
        pass

    def ethereumAddress(self,_param_name:str = 'ethereumAddress'):
        inst = None
        self._add_to_query("ethereumAddress",_param_name)
        pass

    def sorareAddress(self,_param_name:str = 'sorareAddress'):
        inst = None
        self._add_to_query("sorareAddress",_param_name)
        pass

    def starkKey(self,_param_name:str = 'starkKey'):
        inst = None
        self._add_to_query("starkKey",_param_name)
        pass

    def starkKeyRegistered(self,_param_name:str = 'starkKeyRegistered'):
        inst = None
        self._add_to_query("starkKeyRegistered",_param_name)
        pass


class blockUserOffersInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,userSlug = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('userSlug',userSlug)

class blockUserOffersPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class BrowserInfoInput(GraphQLInputObject):
    def __init__(self,colorDepth = None,language = None,screenHeight = None,screenWidth = None,timeZoneOffset = None):
        self._add_parameter('colorDepth',colorDepth)
        self._add_parameter('language',language)
        self._add_parameter('screenHeight',screenHeight)
        self._add_parameter('screenWidth',screenWidth)
        self._add_parameter('timeZoneOffset',timeZoneOffset)

class PostalAddressInput(GraphQLInputObject):
    def __init__(self,additionalAddress = None,city = None,company = None,countryCode = None,firstName = None,lastName = None,streetAddress = None,zipcode = None):
        self._add_parameter('additionalAddress',additionalAddress)
        self._add_parameter('city',city)
        self._add_parameter('company',company)
        self._add_parameter('countryCode',countryCode)
        self._add_parameter('firstName',firstName)
        self._add_parameter('lastName',lastName)
        self._add_parameter('streetAddress',streetAddress)
        self._add_parameter('zipcode',zipcode)

class buyDeliverableShopItemInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,postalAddress:'PostalAddressInput' = None,recaptchaToken = None,recaptchaTokenIos = None,recaptchaTokenV2 = None,shirtSize = None,shopItemId = None,variant = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('postalAddress',postalAddress)
        self._add_parameter('recaptchaToken',recaptchaToken)
        self._add_parameter('recaptchaTokenIos',recaptchaTokenIos)
        self._add_parameter('recaptchaTokenV2',recaptchaTokenV2)
        self._add_parameter('shirtSize',shirtSize)
        self._add_parameter('shopItemId',shopItemId)
        self._add_parameter('variant',variant)

class buyDeliverableShopItemPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_shopItem = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def shopItem(self,_param_name:str = 'shopItem'):
        inst = None
        self._add_to_query("shopItem",_param_name)
        pass


class buyShopItemInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,shopItemId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('shopItemId',shopItemId)

class buyShopItemPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_shopItem = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def shopItem(self,_param_name:str = 'shopItem'):
        inst = None
        self._add_to_query("shopItem",_param_name)
        pass


class CaBankAccount(GraphQLObject):
    value_accountNumber = None
    value_bankName = None
    value_branchCode = None
    value_country:'Country' = None
    value_id = None
    value_institutionNumber = None
    value_ownerAddress:'MangopayBankAccountOwnerAddress' = None
    value_ownerName = None
    def accountNumber(self,_param_name:str = 'accountNumber'):
        inst = None
        self._add_to_query("accountNumber",_param_name)
        pass

    def bankName(self,_param_name:str = 'bankName'):
        inst = None
        self._add_to_query("bankName",_param_name)
        pass

    def branchCode(self,_param_name:str = 'branchCode'):
        inst = None
        self._add_to_query("branchCode",_param_name)
        pass

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def institutionNumber(self,_param_name:str = 'institutionNumber'):
        inst = None
        self._add_to_query("institutionNumber",_param_name)
        pass

    def ownerAddress(self,_param_name:str = 'ownerAddress') -> 'MangopayBankAccountOwnerAddress':
        param_list = []
        inst = MangopayBankAccountOwnerAddress(self,param_list)
        self._add_to_query("ownerAddress",_param_name,inst)
        self.value_ownerAddress = inst
        return inst

    def ownerName(self,_param_name:str = 'ownerName'):
        inst = None
        self._add_to_query("ownerName",_param_name)
        pass


class cancelEthBankWithdrawalsInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class cancelEthBankWithdrawalsPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class cancelFastWithdrawalInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,fastWithdrawalId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('fastWithdrawalId',fastWithdrawalId)

class cancelFastWithdrawalPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_fastWithdrawal:'FastWithdrawal' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def fastWithdrawal(self,_param_name:str = 'fastWithdrawal') -> 'FastWithdrawal':
        param_list = []
        inst = FastWithdrawal(self,param_list)
        self._add_to_query("fastWithdrawal",_param_name,inst)
        self.value_fastWithdrawal = inst
        return inst


class cancelMobilePurchaseInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,offerId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('offerId',offerId)

class cancelMobilePurchasePayload(GraphQLObject):
    value_clientMutationId = None
    value_deal:'TokenPrimaryOffer' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def deal(self,_param_name:str = 'deal') -> 'TokenPrimaryOffer':
        param_list = []
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("deal",_param_name,inst)
        self.value_deal = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class cancelOfferInput(GraphQLInputObject):
    def __init__(self,blockchainId = None,clientMutationId = None):
        self._add_parameter('blockchainId',blockchainId)
        self._add_parameter('clientMutationId',clientMutationId)

class cancelOfferPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_tokenOffer:'TokenOffer' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def tokenOffer(self,_param_name:str = 'tokenOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("tokenOffer",_param_name,inst)
        self.value_tokenOffer = inst
        return inst


class cancelWithdrawalInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,withdrawalId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('withdrawalId',withdrawalId)

class cancelWithdrawalPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_withdrawal:'Withdrawal' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def withdrawal(self,_param_name:str = 'withdrawal') -> 'Withdrawal':
        param_list = []
        inst = Withdrawal(self,param_list)
        self._add_to_query("withdrawal",_param_name,inst)
        self.value_withdrawal = inst
        return inst


class CardBundleOffer(GraphQLObject):
    value_id = None
    value_priceUSDCents = None
    value_cards:'list[CardInterface]' = None
    value_expiresAt = None
    value_leaderboard:'LeaderboardInterface' = None
    value_rewardPlayerName = None
    value_rank = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def priceUSDCents(self,_param_name:str = 'priceUSDCents'):
        inst = None
        self._add_to_query("priceUSDCents",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'CardInterface':
        param_list = []
        inst = CardInterface(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def expiresAt(self,_param_name:str = 'expiresAt'):
        inst = None
        self._add_to_query("expiresAt",_param_name)
        pass

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'LeaderboardInterface':
        param_list = []
        inst = LeaderboardInterface(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def rewardPlayerName(self,_param_name:str = 'rewardPlayerName'):
        inst = None
        self._add_to_query("rewardPlayerName",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass


class CardCollectionNotification(GraphQLObject):
    value_anyCard:'Card' = None
    value_card:'Card' = None
    value_cardCollection:'CardCollection' = None
    value_cardCollectionSlot:'CardCollectionSlot' = None
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_shieldShopItem:'SkinShopItem' = None
    value_sport = None
    value_user:'CurrentUser' = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def cardCollection(self,_param_name:str = 'cardCollection') -> 'CardCollection':
        param_list = []
        inst = CardCollection(self,param_list)
        self._add_to_query("cardCollection",_param_name,inst)
        self.value_cardCollection = inst
        return inst

    def cardCollectionSlot(self,_param_name:str = 'cardCollectionSlot') -> 'CardCollectionSlot':
        param_list = []
        inst = CardCollectionSlot(self,param_list)
        self._add_to_query("cardCollectionSlot",_param_name,inst)
        self.value_cardCollectionSlot = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def shieldShopItem(self,_param_name:str = 'shieldShopItem') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("shieldShopItem",_param_name,inst)
        self.value_shieldShopItem = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class CardGameInterface(GraphQLObject):
    value_cardCollectionCards:'list[CardCollectionCard]' = None
    value_coverageStatus = None
    value_gameForLeague:'Game' = None
    value_u23Eligible = None
    def cardCollectionCards(self,_param_name:str = 'cardCollectionCards') -> 'CardCollectionCard':
        param_list = []
        inst = CardCollectionCard(self,param_list)
        self._add_to_query("cardCollectionCards",_param_name,inst)
        self.value_cardCollectionCards = inst
        return inst

    def coverageStatus(self,_param_name:str = 'coverageStatus'):
        inst = None
        self._add_to_query("coverageStatus",_param_name)
        pass

    def gameForLeague(self,so5LeaderboardSlug,so5LeagueSlug,_param_name:str = 'gameForLeague') -> 'Game':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = Game(self,param_list)
        self._add_to_query("gameForLeague",_param_name,inst)
        self.value_gameForLeague = inst
        return inst

    def u23Eligible(self,_param_name:str = 'u23Eligible'):
        inst = None
        self._add_to_query("u23Eligible",_param_name)
        pass


class CardLayout(GraphQLObject):
    value_backgroundLayers = None
    value_backgroundMaskUrl = None
    value_backgroundUrl = None
    value_cardDesign = None
    value_layerUrl = None
    value_layers = None
    value_licensorUrl = None
    value_playerMaskUrl = None
    value_teamLogoUrl = None
    value_videoBackgroundUrl = None
    def backgroundLayers(self,_param_name:str = 'backgroundLayers'):
        inst = None
        self._add_to_query("backgroundLayers",_param_name)
        pass

    def backgroundMaskUrl(self,_param_name:str = 'backgroundMaskUrl'):
        inst = None
        self._add_to_query("backgroundMaskUrl",_param_name)
        pass

    def backgroundUrl(self,_param_name:str = 'backgroundUrl'):
        inst = None
        self._add_to_query("backgroundUrl",_param_name)
        pass

    def cardDesign(self,_param_name:str = 'cardDesign'):
        inst = None
        self._add_to_query("cardDesign",_param_name)
        pass

    def layerUrl(self,_param_name:str = 'layerUrl'):
        inst = None
        self._add_to_query("layerUrl",_param_name)
        pass

    def layers(self,_param_name:str = 'layers'):
        inst = None
        self._add_to_query("layers",_param_name)
        pass

    def licensorUrl(self,_param_name:str = 'licensorUrl'):
        inst = None
        self._add_to_query("licensorUrl",_param_name)
        pass

    def playerMaskUrl(self,_param_name:str = 'playerMaskUrl'):
        inst = None
        self._add_to_query("playerMaskUrl",_param_name)
        pass

    def teamLogoUrl(self,_param_name:str = 'teamLogoUrl'):
        inst = None
        self._add_to_query("teamLogoUrl",_param_name)
        pass

    def videoBackgroundUrl(self,_param_name:str = 'videoBackgroundUrl'):
        inst = None
        self._add_to_query("videoBackgroundUrl",_param_name)
        pass


class EthereumTransaction(GraphQLObject):
    value_confirmedAt = None
    value_id = None
    value_status = None
    value_transactionHash = None
    def confirmedAt(self,_param_name:str = 'confirmedAt'):
        inst = None
        self._add_to_query("confirmedAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def transactionHash(self,_param_name:str = 'transactionHash'):
        inst = None
        self._add_to_query("transactionHash",_param_name)
        pass


class StarkwareWithdrawal(GraphQLObject):
    value_aasmState = None
    value_anyCard:'AnyCardInterface' = None
    value_card:'Card' = None
    value_destination = None
    value_ethereumTransaction:'EthereumTransaction' = None
    value_id = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def destination(self,_param_name:str = 'destination'):
        inst = None
        self._add_to_query("destination",_param_name)
        pass

    def ethereumTransaction(self,_param_name:str = 'ethereumTransaction') -> 'EthereumTransaction':
        param_list = []
        inst = EthereumTransaction(self,param_list)
        self._add_to_query("ethereumTransaction",_param_name,inst)
        self.value_ethereumTransaction = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class CardNotification(GraphQLObject):
    value_anyCard:'AnyCardInterface' = None
    value_card:'Card' = None
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_sport = None
    value_token:'Token' = None
    value_tokenWithdrawal:'TokenWithdrawal' = None
    value_user:'CurrentUser' = None
    value_withdrawal:'StarkwareWithdrawal' = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst

    def tokenWithdrawal(self,_param_name:str = 'tokenWithdrawal') -> 'TokenWithdrawal':
        param_list = []
        inst = TokenWithdrawal(self,param_list)
        self._add_to_query("tokenWithdrawal",_param_name,inst)
        self.value_tokenWithdrawal = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def withdrawal(self,_param_name:str = 'withdrawal') -> 'StarkwareWithdrawal':
        param_list = []
        inst = StarkwareWithdrawal(self,param_list)
        self._add_to_query("withdrawal",_param_name,inst)
        self.value_withdrawal = inst
        return inst


class CardSample(GraphQLObject):
    value_id = None
    value_offsetX = None
    value_offsetY = None
    value_positioning = None
    value_zoom = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def offsetX(self,_param_name:str = 'offsetX'):
        inst = None
        self._add_to_query("offsetX",_param_name)
        pass

    def offsetY(self,_param_name:str = 'offsetY'):
        inst = None
        self._add_to_query("offsetY",_param_name)
        pass

    def positioning(self,_param_name:str = 'positioning'):
        inst = None
        self._add_to_query("positioning",_param_name)
        pass

    def zoom(self,_param_name:str = 'zoom'):
        inst = None
        self._add_to_query("zoom",_param_name)
        pass


class CardShardsReward(GraphQLObject):
    value_aasmState = None
    value_achievement = None
    value_id = None
    value_quantity = None
    value_rarity = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def achievement(self,_param_name:str = 'achievement'):
        inst = None
        self._add_to_query("achievement",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def quantity(self,_param_name:str = 'quantity'):
        inst = None
        self._add_to_query("quantity",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass


class CardSubscription(GraphQLObject):
    value_age = None
    value_allSo5Scores:'So5ScoreConnection' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPositions = None
    value_anyTeam:'TeamInterface' = None
    value_assetId = None
    value_availableCardBoosters = None
    value_availableCardBoosts:'list[CardBoost]' = None
    value_availableUserShopItems:'list[UserShopItem]' = None
    value_averageScore = None
    value_backPictureUrl = None
    value_birthTxHash = None
    value_blockchain = None
    value_blockchainId = None
    value_blueprint:'Blueprint' = None
    value_cardCollectionCards:'list[CardCollectionCard]' = None
    value_cardEditionName = None
    value_cardStats:'CardStats' = None
    value_collection = None
    value_contractAddress = None
    value_coverageStatus = None
    value_createdAt = None
    value_currentUserSubscription:'EmailSubscription' = None
    value_customCardEditionName = None
    value_decks:'list[Deck]' = None
    value_displayRarity = None
    value_eligiblePlayerGameScores:'list[PlayerGameScoreInterface]' = None
    value_eligibleUpcomingLeagueTracks:'list[So5LeagueTrack]' = None
    value_ethereumId = None
    value_ethereumOwner:'TokenOwner' = None
    value_eventType = None
    value_footballPlayer:'Player' = None
    value_gameForLeague:'Game' = None
    value_grade = None
    value_gradeAfterTransfer = None
    value_id = None
    value_inRollup = None
    value_inSeasonEligible = None
    value_inSeasonUntil = None
    value_ipfsPictureUrl = None
    value_ipfsUrl = None
    value_latestEnglishAuction:'TokenAuction' = None
    value_latestPrimaryOffer:'TokenPrimaryOffer' = None
    value_levelUpAppliedCount = None
    value_liveSingleBuyOffers:'list[TokenOffer]' = None
    value_liveSingleSaleOffer:'TokenOffer' = None
    value_liveSo5Lineup:'So5Lineup' = None
    value_maxLevelUpAppliedCount = None
    value_myMintedSingleSaleOffer:'TokenOffer' = None
    value_name = None
    value_notContractOwners:'list[OwnerWithRates]' = None
    value_openForDomesticStats = None
    value_openForGameStats = None
    value_openForGameStatsCompetitions:'list[Competition]' = None
    value_openedSo5Lineup:'So5Lineup' = None
    value_openedSo5Lineups:'list[So5Lineup]' = None
    value_owner:'Owner' = None
    value_ownerSince = None
    value_ownerWithRates:'OwnerWithRates' = None
    value_ownershipHistory:'list[TokenOwner]' = None
    value_pendingWithdrawal:'TokenWithdrawal' = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_positionTyped = None
    value_power = None
    value_powerBreakdown:'PowerBreakdown' = None
    value_powerMalusAfterTransfer = None
    value_priceRange:'Range' = None
    value_privateMinPrices:'MonetaryAmount' = None
    value_publicMinPrices:'MonetaryAmount' = None
    value_rarity = None
    value_rarityTyped = None
    value_rawSo5Scores = None
    value_rivalsPower = None
    value_season:'Season' = None
    value_seasonYear = None
    value_secondaryMarketFeeEnabled = None
    value_sentInLiveOffers:'list[TokenOffer]' = None
    value_serialNumber = None
    value_shirtNumber = None
    value_singleCivilYear = None
    value_slug = None
    value_so5Scores:'list[So5Score]' = None
    value_sport = None
    value_starkwareTokenId = None
    value_subscriptionsCount = None
    value_supply = None
    value_team = None
    value_threeDimensional = None
    value_threeDimensionalAsset:'ThreeDimensionalAsset' = None
    value_token:'Token' = None
    value_tokenOwner:'TokenOwner' = None
    value_tradeableStatus = None
    value_u23Eligible = None
    value_user:'User' = None
    value_userOwner:'UserOwner' = None
    value_videoUrl = None
    value_visible = None
    value_walletStatus = None
    value_xp = None
    value_xpAfterTransfer = None
    value_xpNeededForCurrentGrade = None
    value_xpNeededForNextGrade = None
    def age(self,_param_name:str = 'age'):
        inst = None
        self._add_to_query("age",_param_name)
        pass

    def allSo5Scores(self,after,before,first,last,_param_name:str = 'allSo5Scores') -> 'So5ScoreConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = So5ScoreConnection(self,param_list)
        self._add_to_query("allSo5Scores",_param_name,inst)
        self.value_allSo5Scores = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPositions(self,_param_name:str = 'anyPositions'):
        inst = None
        self._add_to_query("anyPositions",_param_name)
        pass

    def anyTeam(self,_param_name:str = 'anyTeam') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("anyTeam",_param_name,inst)
        self.value_anyTeam = inst
        return inst

    def assetId(self,_param_name:str = 'assetId'):
        inst = None
        self._add_to_query("assetId",_param_name)
        pass

    def availableCardBoosters(self,_param_name:str = 'availableCardBoosters'):
        inst = None
        self._add_to_query("availableCardBoosters",_param_name)
        pass

    def availableCardBoosts(self,_param_name:str = 'availableCardBoosts') -> 'CardBoost':
        param_list = []
        inst = CardBoost(self,param_list)
        self._add_to_query("availableCardBoosts",_param_name,inst)
        self.value_availableCardBoosts = inst
        return inst

    def availableUserShopItems(self,_param_name:str = 'availableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("availableUserShopItems",_param_name,inst)
        self.value_availableUserShopItems = inst
        return inst

    def averageScore(self,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def backPictureUrl(self,_param_name:str = 'backPictureUrl'):
        inst = None
        self._add_to_query("backPictureUrl",_param_name)
        pass

    def birthTxHash(self,_param_name:str = 'birthTxHash'):
        inst = None
        self._add_to_query("birthTxHash",_param_name)
        pass

    def blockchain(self,_param_name:str = 'blockchain'):
        inst = None
        self._add_to_query("blockchain",_param_name)
        pass

    def blockchainId(self,_param_name:str = 'blockchainId'):
        inst = None
        self._add_to_query("blockchainId",_param_name)
        pass

    def blueprint(self,_param_name:str = 'blueprint') -> 'Blueprint':
        param_list = []
        inst = Blueprint(self,param_list)
        self._add_to_query("blueprint",_param_name,inst)
        self.value_blueprint = inst
        return inst

    def cardCollectionCards(self,_param_name:str = 'cardCollectionCards') -> 'CardCollectionCard':
        param_list = []
        inst = CardCollectionCard(self,param_list)
        self._add_to_query("cardCollectionCards",_param_name,inst)
        self.value_cardCollectionCards = inst
        return inst

    def cardEditionName(self,_param_name:str = 'cardEditionName'):
        inst = None
        self._add_to_query("cardEditionName",_param_name)
        pass

    def cardStats(self,_param_name:str = 'cardStats') -> 'CardStats':
        param_list = []
        inst = CardStats(self,param_list)
        self._add_to_query("cardStats",_param_name,inst)
        self.value_cardStats = inst
        return inst

    def collection(self,_param_name:str = 'collection'):
        inst = None
        self._add_to_query("collection",_param_name)
        pass

    def contractAddress(self,_param_name:str = 'contractAddress'):
        inst = None
        self._add_to_query("contractAddress",_param_name)
        pass

    def coverageStatus(self,_param_name:str = 'coverageStatus'):
        inst = None
        self._add_to_query("coverageStatus",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def customCardEditionName(self,_param_name:str = 'customCardEditionName'):
        inst = None
        self._add_to_query("customCardEditionName",_param_name)
        pass

    def decks(self,_param_name:str = 'decks') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def displayRarity(self,_param_name:str = 'displayRarity'):
        inst = None
        self._add_to_query("displayRarity",_param_name)
        pass

    def eligiblePlayerGameScores(self,so5LeaderboardSlug,_param_name:str = 'eligiblePlayerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("eligiblePlayerGameScores",_param_name,inst)
        self.value_eligiblePlayerGameScores = inst
        return inst

    def eligibleUpcomingLeagueTracks(self,_param_name:str = 'eligibleUpcomingLeagueTracks') -> 'So5LeagueTrack':
        param_list = []
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("eligibleUpcomingLeagueTracks",_param_name,inst)
        self.value_eligibleUpcomingLeagueTracks = inst
        return inst

    def ethereumId(self,_param_name:str = 'ethereumId'):
        inst = None
        self._add_to_query("ethereumId",_param_name)
        pass

    def ethereumOwner(self,_param_name:str = 'ethereumOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ethereumOwner",_param_name,inst)
        self.value_ethereumOwner = inst
        return inst

    def eventType(self,_param_name:str = 'eventType'):
        inst = None
        self._add_to_query("eventType",_param_name)
        pass

    def footballPlayer(self,_param_name:str = 'footballPlayer') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("footballPlayer",_param_name,inst)
        self.value_footballPlayer = inst
        return inst

    def gameForLeague(self,so5LeaderboardSlug,so5LeagueSlug,_param_name:str = 'gameForLeague') -> 'Game':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = Game(self,param_list)
        self._add_to_query("gameForLeague",_param_name,inst)
        self.value_gameForLeague = inst
        return inst

    def grade(self,_param_name:str = 'grade'):
        inst = None
        self._add_to_query("grade",_param_name)
        pass

    def gradeAfterTransfer(self,_param_name:str = 'gradeAfterTransfer'):
        inst = None
        self._add_to_query("gradeAfterTransfer",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def inRollup(self,_param_name:str = 'inRollup'):
        inst = None
        self._add_to_query("inRollup",_param_name)
        pass

    def inSeasonEligible(self,_param_name:str = 'inSeasonEligible'):
        inst = None
        self._add_to_query("inSeasonEligible",_param_name)
        pass

    def inSeasonUntil(self,_param_name:str = 'inSeasonUntil'):
        inst = None
        self._add_to_query("inSeasonUntil",_param_name)
        pass

    def ipfsPictureUrl(self,_param_name:str = 'ipfsPictureUrl'):
        inst = None
        self._add_to_query("ipfsPictureUrl",_param_name)
        pass

    def ipfsUrl(self,_param_name:str = 'ipfsUrl'):
        inst = None
        self._add_to_query("ipfsUrl",_param_name)
        pass

    def latestEnglishAuction(self,_param_name:str = 'latestEnglishAuction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("latestEnglishAuction",_param_name,inst)
        self.value_latestEnglishAuction = inst
        return inst

    def latestPrimaryOffer(self,_param_name:str = 'latestPrimaryOffer') -> 'TokenPrimaryOffer':
        param_list = []
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("latestPrimaryOffer",_param_name,inst)
        self.value_latestPrimaryOffer = inst
        return inst

    def levelUpAppliedCount(self,_param_name:str = 'levelUpAppliedCount'):
        inst = None
        self._add_to_query("levelUpAppliedCount",_param_name)
        pass

    def liveSingleBuyOffers(self,_param_name:str = 'liveSingleBuyOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleBuyOffers",_param_name,inst)
        self.value_liveSingleBuyOffers = inst
        return inst

    def liveSingleSaleOffer(self,_param_name:str = 'liveSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("liveSingleSaleOffer",_param_name,inst)
        self.value_liveSingleSaleOffer = inst
        return inst

    def liveSo5Lineup(self,_param_name:str = 'liveSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("liveSo5Lineup",_param_name,inst)
        self.value_liveSo5Lineup = inst
        return inst

    def maxLevelUpAppliedCount(self,_param_name:str = 'maxLevelUpAppliedCount'):
        inst = None
        self._add_to_query("maxLevelUpAppliedCount",_param_name)
        pass

    def myMintedSingleSaleOffer(self,_param_name:str = 'myMintedSingleSaleOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("myMintedSingleSaleOffer",_param_name,inst)
        self.value_myMintedSingleSaleOffer = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def notContractOwners(self,_param_name:str = 'notContractOwners') -> 'OwnerWithRates':
        param_list = []
        inst = OwnerWithRates(self,param_list)
        self._add_to_query("notContractOwners",_param_name,inst)
        self.value_notContractOwners = inst
        return inst

    def openForDomesticStats(self,_param_name:str = 'openForDomesticStats'):
        inst = None
        self._add_to_query("openForDomesticStats",_param_name)
        pass

    def openForGameStats(self,_param_name:str = 'openForGameStats'):
        inst = None
        self._add_to_query("openForGameStats",_param_name)
        pass

    def openForGameStatsCompetitions(self,_param_name:str = 'openForGameStatsCompetitions') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("openForGameStatsCompetitions",_param_name,inst)
        self.value_openForGameStatsCompetitions = inst
        return inst

    def openedSo5Lineup(self,_param_name:str = 'openedSo5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("openedSo5Lineup",_param_name,inst)
        self.value_openedSo5Lineup = inst
        return inst

    def openedSo5Lineups(self,_param_name:str = 'openedSo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("openedSo5Lineups",_param_name,inst)
        self.value_openedSo5Lineups = inst
        return inst

    def owner(self,_param_name:str = 'owner') -> 'Owner':
        param_list = []
        inst = Owner(self,param_list)
        self._add_to_query("owner",_param_name,inst)
        self.value_owner = inst
        return inst

    def ownerSince(self,_param_name:str = 'ownerSince'):
        inst = None
        self._add_to_query("ownerSince",_param_name)
        pass

    def ownerWithRates(self,_param_name:str = 'ownerWithRates') -> 'OwnerWithRates':
        param_list = []
        inst = OwnerWithRates(self,param_list)
        self._add_to_query("ownerWithRates",_param_name,inst)
        self.value_ownerWithRates = inst
        return inst

    def ownershipHistory(self,_param_name:str = 'ownershipHistory') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("ownershipHistory",_param_name,inst)
        self.value_ownershipHistory = inst
        return inst

    def pendingWithdrawal(self,_param_name:str = 'pendingWithdrawal') -> 'TokenWithdrawal':
        param_list = []
        inst = TokenWithdrawal(self,param_list)
        self._add_to_query("pendingWithdrawal",_param_name,inst)
        self.value_pendingWithdrawal = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positionTyped(self,_param_name:str = 'positionTyped'):
        inst = None
        self._add_to_query("positionTyped",_param_name)
        pass

    def power(self,so5LeaderboardSlug,_param_name:str = 'power'):
        inst = None
        self._add_to_query("power",_param_name)
        pass

    def powerBreakdown(self,so5LeaderboardSlug,_param_name:str = 'powerBreakdown') -> 'PowerBreakdown':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PowerBreakdown(self,param_list)
        self._add_to_query("powerBreakdown",_param_name,inst)
        self.value_powerBreakdown = inst
        return inst

    def powerMalusAfterTransfer(self,_param_name:str = 'powerMalusAfterTransfer'):
        inst = None
        self._add_to_query("powerMalusAfterTransfer",_param_name)
        pass

    def priceRange(self,_param_name:str = 'priceRange') -> 'Range':
        param_list = []
        inst = Range(self,param_list)
        self._add_to_query("priceRange",_param_name,inst)
        self.value_priceRange = inst
        return inst

    def privateMinPrices(self,_param_name:str = 'privateMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("privateMinPrices",_param_name,inst)
        self.value_privateMinPrices = inst
        return inst

    def publicMinPrices(self,_param_name:str = 'publicMinPrices') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("publicMinPrices",_param_name,inst)
        self.value_publicMinPrices = inst
        return inst

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def rarityTyped(self,_param_name:str = 'rarityTyped'):
        inst = None
        self._add_to_query("rarityTyped",_param_name)
        pass

    def rawSo5Scores(self,last,lowCoverage,_param_name:str = 'rawSo5Scores'):
        inst = None
        self._add_to_query("rawSo5Scores",_param_name)
        pass

    def rivalsPower(self,_param_name:str = 'rivalsPower'):
        inst = None
        self._add_to_query("rivalsPower",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'Season':
        param_list = []
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def seasonYear(self,_param_name:str = 'seasonYear'):
        inst = None
        self._add_to_query("seasonYear",_param_name)
        pass

    def secondaryMarketFeeEnabled(self,_param_name:str = 'secondaryMarketFeeEnabled'):
        inst = None
        self._add_to_query("secondaryMarketFeeEnabled",_param_name)
        pass

    def sentInLiveOffers(self,_param_name:str = 'sentInLiveOffers') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("sentInLiveOffers",_param_name,inst)
        self.value_sentInLiveOffers = inst
        return inst

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def shirtNumber(self,_param_name:str = 'shirtNumber'):
        inst = None
        self._add_to_query("shirtNumber",_param_name)
        pass

    def singleCivilYear(self,_param_name:str = 'singleCivilYear'):
        inst = None
        self._add_to_query("singleCivilYear",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Scores(self,last,lowCoverage,_param_name:str = 'so5Scores') -> 'So5Score':
        param_list = []
        param_list.append(("last",last))
        param_list.append(("lowCoverage",lowCoverage))
        inst = So5Score(self,param_list)
        self._add_to_query("so5Scores",_param_name,inst)
        self.value_so5Scores = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def starkwareTokenId(self,_param_name:str = 'starkwareTokenId'):
        inst = None
        self._add_to_query("starkwareTokenId",_param_name)
        pass

    def subscriptionsCount(self,_param_name:str = 'subscriptionsCount'):
        inst = None
        self._add_to_query("subscriptionsCount",_param_name)
        pass

    def supply(self,_param_name:str = 'supply'):
        inst = None
        self._add_to_query("supply",_param_name)
        pass

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass

    def threeDimensional(self,_param_name:str = 'threeDimensional'):
        inst = None
        self._add_to_query("threeDimensional",_param_name)
        pass

    def threeDimensionalAsset(self,_param_name:str = 'threeDimensionalAsset') -> 'ThreeDimensionalAsset':
        param_list = []
        inst = ThreeDimensionalAsset(self,param_list)
        self._add_to_query("threeDimensionalAsset",_param_name,inst)
        self.value_threeDimensionalAsset = inst
        return inst

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst

    def tokenOwner(self,_param_name:str = 'tokenOwner') -> 'TokenOwner':
        param_list = []
        inst = TokenOwner(self,param_list)
        self._add_to_query("tokenOwner",_param_name,inst)
        self.value_tokenOwner = inst
        return inst

    def tradeableStatus(self,_param_name:str = 'tradeableStatus'):
        inst = None
        self._add_to_query("tradeableStatus",_param_name)
        pass

    def u23Eligible(self,_param_name:str = 'u23Eligible'):
        inst = None
        self._add_to_query("u23Eligible",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def userOwner(self,_param_name:str = 'userOwner') -> 'UserOwner':
        param_list = []
        inst = UserOwner(self,param_list)
        self._add_to_query("userOwner",_param_name,inst)
        self.value_userOwner = inst
        return inst

    def videoUrl(self,derivative,_param_name:str = 'videoUrl'):
        inst = None
        self._add_to_query("videoUrl",_param_name)
        pass

    def visible(self,_param_name:str = 'visible'):
        inst = None
        self._add_to_query("visible",_param_name)
        pass

    def walletStatus(self,_param_name:str = 'walletStatus'):
        inst = None
        self._add_to_query("walletStatus",_param_name)
        pass

    def xp(self,_param_name:str = 'xp'):
        inst = None
        self._add_to_query("xp",_param_name)
        pass

    def xpAfterTransfer(self,_param_name:str = 'xpAfterTransfer'):
        inst = None
        self._add_to_query("xpAfterTransfer",_param_name)
        pass

    def xpNeededForCurrentGrade(self,_param_name:str = 'xpNeededForCurrentGrade'):
        inst = None
        self._add_to_query("xpNeededForCurrentGrade",_param_name)
        pass

    def xpNeededForNextGrade(self,_param_name:str = 'xpNeededForNextGrade'):
        inst = None
        self._add_to_query("xpNeededForNextGrade",_param_name)
        pass


class CommonCardSampleInterface(GraphQLObject):
    value_id = None
    value_player:'PlayerInterface' = None
    value_commonCardImageUrl = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'PlayerInterface':
        param_list = []
        inst = PlayerInterface(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def commonCardImageUrl(self,_param_name:str = 'commonCardImageUrl'):
        inst = None
        self._add_to_query("commonCardImageUrl",_param_name)
        pass


class CardTradeInterface(GraphQLObject):
    value_id = None
    value_expiresAfter = None
    value_userGiveCard:'CardInterface' = None
    value_userGiveCardUsedInLineup:'LineupInterface' = None
    value_userReceiveCardChoices:'list[CommonCardSampleInterface]' = None
    value_userReceiveCard:'CardInterface' = None
    value_isComplete = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def expiresAfter(self,_param_name:str = 'expiresAfter'):
        inst = None
        self._add_to_query("expiresAfter",_param_name)
        pass

    def userGiveCard(self,_param_name:str = 'userGiveCard') -> 'CardInterface':
        param_list = []
        inst = CardInterface(self,param_list)
        self._add_to_query("userGiveCard",_param_name,inst)
        self.value_userGiveCard = inst
        return inst

    def userGiveCardUsedInLineup(self,_param_name:str = 'userGiveCardUsedInLineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("userGiveCardUsedInLineup",_param_name,inst)
        self.value_userGiveCardUsedInLineup = inst
        return inst

    def userReceiveCardChoices(self,_param_name:str = 'userReceiveCardChoices') -> 'CommonCardSampleInterface':
        param_list = []
        inst = CommonCardSampleInterface(self,param_list)
        self._add_to_query("userReceiveCardChoices",_param_name,inst)
        self.value_userReceiveCardChoices = inst
        return inst

    def userReceiveCard(self,_param_name:str = 'userReceiveCard') -> 'CardInterface':
        param_list = []
        inst = CardInterface(self,param_list)
        self._add_to_query("userReceiveCard",_param_name,inst)
        self.value_userReceiveCard = inst
        return inst

    def isComplete(self,_param_name:str = 'isComplete'):
        inst = None
        self._add_to_query("isComplete",_param_name)
        pass


class celebrateActivityInput(GraphQLInputObject):
    def __init__(self,activityId = None,clientMutationId = None,emote = None,giphySlug = None):
        self._add_parameter('activityId',activityId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('emote',emote)
        self._add_parameter('giphySlug',giphySlug)

class celebrateActivityPayload(GraphQLObject):
    value_activity:'ActivitiesInterface' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def activity(self,_param_name:str = 'activity') -> 'ActivitiesInterface':
        param_list = []
        inst = ActivitiesInterface(self,param_list)
        self._add_to_query("activity",_param_name,inst)
        self.value_activity = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class PasswordEncryptedPrivateKeyInput(GraphQLInputObject):
    def __init__(self,iv = None,payload = None,salt = None):
        self._add_parameter('iv',iv)
        self._add_parameter('payload',payload)
        self._add_parameter('salt',salt)

class changePasswordInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,newPasswordHash = None,passwordEncryptedPrivateKey:'PasswordEncryptedPrivateKeyInput' = None,passwordHash = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('newPasswordHash',newPasswordHash)
        self._add_parameter('passwordEncryptedPrivateKey',passwordEncryptedPrivateKey)
        self._add_parameter('passwordHash',passwordHash)

class changePasswordPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class CheckoutCreditCardAuthorizationRequest(GraphQLObject):
    value_amount = None
    value_currency = None
    value_id = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def currency(self,_param_name:str = 'currency'):
        inst = None
        self._add_to_query("currency",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class checkPhoneNumberVerificationCodeInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,code = None,privateKeyRecovery:'PrivateKeyRecoveryInput' = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('code',code)
        self._add_parameter('privateKeyRecovery',privateKeyRecovery)

class checkPhoneNumberVerificationCodePayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class claimAnyRewardInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,rewardId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('rewardId',rewardId)

class claimAnyRewardPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_reward:'AnyRewardInterface' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def reward(self,_param_name:str = 'reward') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("reward",_param_name,inst)
        self.value_reward = inst
        return inst


class claimAwardInput(GraphQLInputObject):
    def __init__(self,award = None,clientMutationId = None):
        self._add_parameter('award',award)
        self._add_parameter('clientMutationId',clientMutationId)

class claimAwardPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class claimCardDropInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,task = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('task',task)

class claimCardDropPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class claimConversionCreditInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,conversionCreditId = None,promoCode = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('conversionCreditId',conversionCreditId)
        self._add_parameter('promoCode',promoCode)

class claimConversionCreditPayload(GraphQLObject):
    value_clientMutationId = None
    value_conversionCredit:'ConversionCredit' = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def conversionCredit(self,_param_name:str = 'conversionCredit') -> 'ConversionCredit':
        param_list = []
        inst = ConversionCredit(self,param_list)
        self._add_to_query("conversionCredit",_param_name,inst)
        self.value_conversionCredit = inst
        return inst

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class UserSelectionInput(GraphQLInputObject):
    def __init__(self,size = None):
        self._add_parameter('size',size)

class claimDeliverableItemOrderInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,deliverableItemOrderId = None,postalAddress:'PostalAddressInput' = None,userSelection:'UserSelectionInput' = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('deliverableItemOrderId',deliverableItemOrderId)
        self._add_parameter('postalAddress',postalAddress)
        self._add_parameter('userSelection',userSelection)

class claimDeliverableItemOrderPayload(GraphQLObject):
    value_clientMutationId = None
    value_deliverableItemOrder:'DeliverableItemOrder' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def deliverableItemOrder(self,_param_name:str = 'deliverableItemOrder') -> 'DeliverableItemOrder':
        param_list = []
        inst = DeliverableItemOrder(self,param_list)
        self._add_to_query("deliverableItemOrder",_param_name,inst)
        self.value_deliverableItemOrder = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class claimFootballManagerTaskInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,footballManagerTaskId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('footballManagerTaskId',footballManagerTaskId)

class claimFootballManagerTaskPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_footballManagerTask:'FootballManagerTask' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def footballManagerTask(self,_param_name:str = 'footballManagerTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("footballManagerTask",_param_name,inst)
        self.value_footballManagerTask = inst
        return inst


class claimManagerProgressionTaskInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,name = None,sport = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('name',name)
        self._add_parameter('sport',sport)

class ManagerTaskInterface(GraphQLObject):
    value_aasmState = None
    value_category:'ManagerProgressionCategory' = None
    value_claimedAt = None
    value_completedAt = None
    value_configRewards:'list[ManagerTaskRewardInterface]' = None
    value_declarative = None
    value_description = None
    value_id = None
    value_name = None
    value_probabilisticBundles:'list[ProbabilisticBundle]' = None
    value_progress = None
    value_target = None
    value_title = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def category(self,_param_name:str = 'category') -> 'ManagerProgressionCategory':
        param_list = []
        inst = ManagerProgressionCategory(self,param_list)
        self._add_to_query("category",_param_name,inst)
        self.value_category = inst
        return inst

    def claimedAt(self,_param_name:str = 'claimedAt'):
        inst = None
        self._add_to_query("claimedAt",_param_name)
        pass

    def completedAt(self,_param_name:str = 'completedAt'):
        inst = None
        self._add_to_query("completedAt",_param_name)
        pass

    def configRewards(self,_param_name:str = 'configRewards') -> 'ManagerTaskRewardInterface':
        param_list = []
        inst = ManagerTaskRewardInterface(self,param_list)
        self._add_to_query("configRewards",_param_name,inst)
        self.value_configRewards = inst
        return inst

    def declarative(self,_param_name:str = 'declarative'):
        inst = None
        self._add_to_query("declarative",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def probabilisticBundles(self,_param_name:str = 'probabilisticBundles') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundles",_param_name,inst)
        self.value_probabilisticBundles = inst
        return inst

    def progress(self,_param_name:str = 'progress'):
        inst = None
        self._add_to_query("progress",_param_name)
        pass

    def target(self,_param_name:str = 'target'):
        inst = None
        self._add_to_query("target",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class claimManagerProgressionTaskPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_managerProgressionTask:'ManagerProgressionTask' = None
    value_managerProgressionTaskOrMission:'ManagerTaskInterface' = None
    value_rewards:'list[SkinShopItem]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def managerProgressionTask(self,_param_name:str = 'managerProgressionTask') -> 'ManagerProgressionTask':
        param_list = []
        inst = ManagerProgressionTask(self,param_list)
        self._add_to_query("managerProgressionTask",_param_name,inst)
        self.value_managerProgressionTask = inst
        return inst

    def managerProgressionTaskOrMission(self,_param_name:str = 'managerProgressionTaskOrMission') -> 'ManagerTaskInterface':
        param_list = []
        inst = ManagerTaskInterface(self,param_list)
        self._add_to_query("managerProgressionTaskOrMission",_param_name,inst)
        self.value_managerProgressionTaskOrMission = inst
        return inst

    def rewards(self,_param_name:str = 'rewards') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("rewards",_param_name,inst)
        self.value_rewards = inst
        return inst


class claimReferralRewardInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,referralRewardId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('referralRewardId',referralRewardId)

class claimReferralRewardPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_referralReward:'ReferralReward' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def referralReward(self,_param_name:str = 'referralReward') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("referralReward",_param_name,inst)
        self.value_referralReward = inst
        return inst


class claimRewardInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5RewardId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5RewardId',so5RewardId)

class claimRewardPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5Reward:'So5Reward' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5Reward(self,_param_name:str = 'so5Reward') -> 'So5Reward':
        param_list = []
        inst = So5Reward(self,param_list)
        self._add_to_query("so5Reward",_param_name,inst)
        self.value_so5Reward = inst
        return inst


class claimRewardsInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5RewardIds = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5RewardIds',so5RewardIds)

class claimRewardsPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5Rewards:'list[So5Reward]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5Rewards(self,_param_name:str = 'so5Rewards') -> 'So5Reward':
        param_list = []
        inst = So5Reward(self,param_list)
        self._add_to_query("so5Rewards",_param_name,inst)
        self.value_so5Rewards = inst
        return inst


class claimStarterPackInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,favoriteTeamSlug = None,sport = None,starPlayerSlug = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('favoriteTeamSlug',favoriteTeamSlug)
        self._add_parameter('sport',sport)
        self._add_parameter('starPlayerSlug',starPlayerSlug)

class claimStarterPackPayload(GraphQLObject):
    value_cards:'list[AnyCardInterface]' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def cards(self,_param_name:str = 'cards') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class ClubShopItemEdge(GraphQLObject):
    value_cursor = None
    value_node = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node'):
        inst = None
        self._add_to_query("node",_param_name)
        pass


class ClubShopItemConnection(GraphQLObject):
    value_edges:'list[ClubShopItemEdge]' = None
    value_nodes = None
    value_pageInfo:'PageInfo' = None
    value_totalCount = None
    def edges(self,_param_name:str = 'edges') -> 'ClubShopItemEdge':
        param_list = []
        inst = ClubShopItemEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes'):
        inst = None
        self._add_to_query("nodes",_param_name)
        pass

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class CoinReward(GraphQLObject):
    value_aasmState = None
    value_achievement = None
    value_coinAmount = None
    value_id = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def achievement(self,_param_name:str = 'achievement'):
        inst = None
        self._add_to_query("achievement",_param_name)
        pass

    def coinAmount(self,_param_name:str = 'coinAmount'):
        inst = None
        self._add_to_query("coinAmount",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class CollectionCardScoreBreakdownInterface(GraphQLObject):
    value_owner = None
    value_ownedFor90Days = None
    value_newCard = None
    value_firstSerialNumber = None
    value_shirtMatchingSerialNumber = None
    value_specialEditionCard = None
    value_total = None
    def owner(self,_param_name:str = 'owner'):
        inst = None
        self._add_to_query("owner",_param_name)
        pass

    def ownedFor90Days(self,_param_name:str = 'ownedFor90Days'):
        inst = None
        self._add_to_query("ownedFor90Days",_param_name)
        pass

    def newCard(self,_param_name:str = 'newCard'):
        inst = None
        self._add_to_query("newCard",_param_name)
        pass

    def firstSerialNumber(self,_param_name:str = 'firstSerialNumber'):
        inst = None
        self._add_to_query("firstSerialNumber",_param_name)
        pass

    def shirtMatchingSerialNumber(self,_param_name:str = 'shirtMatchingSerialNumber'):
        inst = None
        self._add_to_query("shirtMatchingSerialNumber",_param_name)
        pass

    def specialEditionCard(self,_param_name:str = 'specialEditionCard'):
        inst = None
        self._add_to_query("specialEditionCard",_param_name)
        pass

    def total(self,_param_name:str = 'total'):
        inst = None
        self._add_to_query("total",_param_name)
        pass


class CollectionCardInterface(GraphQLObject):
    value_card:'CardInterface' = None
    value_heldSince = None
    value_scoreBreakdown:'CollectionCardScoreBreakdownInterface' = None
    value_isDisplayCard = None
    def card(self,_param_name:str = 'card') -> 'CardInterface':
        param_list = []
        inst = CardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def heldSince(self,_param_name:str = 'heldSince'):
        inst = None
        self._add_to_query("heldSince",_param_name)
        pass

    def scoreBreakdown(self,_param_name:str = 'scoreBreakdown') -> 'CollectionCardScoreBreakdownInterface':
        param_list = []
        inst = CollectionCardScoreBreakdownInterface(self,param_list)
        self._add_to_query("scoreBreakdown",_param_name,inst)
        self.value_scoreBreakdown = inst
        return inst

    def isDisplayCard(self,_param_name:str = 'isDisplayCard'):
        inst = None
        self._add_to_query("isDisplayCard",_param_name)
        pass


class CollectionSlotInterface(GraphQLObject):
    value_requiredPlayer:'PlayerInterface' = None
    value_collectionCard:'CollectionCardInterface' = None
    value_displayCard:'CardInterface' = None
    value_ownedCards:'list[CardInterface]' = None
    def requiredPlayer(self,_param_name:str = 'requiredPlayer') -> 'PlayerInterface':
        param_list = []
        inst = PlayerInterface(self,param_list)
        self._add_to_query("requiredPlayer",_param_name,inst)
        self.value_requiredPlayer = inst
        return inst

    def collectionCard(self,_param_name:str = 'collectionCard') -> 'CollectionCardInterface':
        param_list = []
        inst = CollectionCardInterface(self,param_list)
        self._add_to_query("collectionCard",_param_name,inst)
        self.value_collectionCard = inst
        return inst

    def displayCard(self,_param_name:str = 'displayCard') -> 'CardInterface':
        param_list = []
        inst = CardInterface(self,param_list)
        self._add_to_query("displayCard",_param_name,inst)
        self.value_displayCard = inst
        return inst

    def ownedCards(self,_param_name:str = 'ownedCards') -> 'CardInterface':
        param_list = []
        inst = CardInterface(self,param_list)
        self._add_to_query("ownedCards",_param_name,inst)
        self.value_ownedCards = inst
        return inst


class CollectionInterface(GraphQLObject):
    value_slug = None
    value_isComplete = None
    value_slots:'list[CollectionSlotInterface]' = None
    value_slotsCount = None
    value_filledSlots = None
    value_collectionScore = None
    value_collectionBonus = None
    value_team:'SportsTeamInterface' = None
    value_season = None
    value_rarity = None
    value_liveRank = None
    value_scoreRankingSize = None
    value_user:'User' = None
    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def isComplete(self,_param_name:str = 'isComplete'):
        inst = None
        self._add_to_query("isComplete",_param_name)
        pass

    def slots(self,_param_name:str = 'slots') -> 'CollectionSlotInterface':
        param_list = []
        inst = CollectionSlotInterface(self,param_list)
        self._add_to_query("slots",_param_name,inst)
        self.value_slots = inst
        return inst

    def slotsCount(self,_param_name:str = 'slotsCount'):
        inst = None
        self._add_to_query("slotsCount",_param_name)
        pass

    def filledSlots(self,_param_name:str = 'filledSlots'):
        inst = None
        self._add_to_query("filledSlots",_param_name)
        pass

    def collectionScore(self,_param_name:str = 'collectionScore'):
        inst = None
        self._add_to_query("collectionScore",_param_name)
        pass

    def collectionBonus(self,_param_name:str = 'collectionBonus'):
        inst = None
        self._add_to_query("collectionBonus",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'SportsTeamInterface':
        param_list = []
        inst = SportsTeamInterface(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def season(self,_param_name:str = 'season'):
        inst = None
        self._add_to_query("season",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def liveRank(self,_param_name:str = 'liveRank'):
        inst = None
        self._add_to_query("liveRank",_param_name)
        pass

    def scoreRankingSize(self,_param_name:str = 'scoreRankingSize'):
        inst = None
        self._add_to_query("scoreRankingSize",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class CommonAccount(GraphQLObject):
    value_id = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class CommonCardSwapShopItem(GraphQLObject):
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_createdAt = None
    value_description = None
    value_disabled = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass


class CommonPlayer(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_id = None
    value_pictureUrl = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass


class CommonPlayerEdge(GraphQLObject):
    value_cursor = None
    value_node:'CommonPlayer' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'CommonPlayer':
        param_list = []
        inst = CommonPlayer(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class CommonPlayerConnection(GraphQLObject):
    value_edges:'list[CommonPlayerEdge]' = None
    value_nodes:'list[CommonPlayer]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'CommonPlayerEdge':
        param_list = []
        inst = CommonPlayerEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'CommonPlayer':
        param_list = []
        inst = CommonPlayer(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class CompetitionGraphicalIdentityInterface(GraphQLObject):
    value_backgroundColor = None
    value_backgroundPictureUrl = None
    value_featuredCardPictureUrls = None
    value_featuredPlayer:'PickablePlayer' = None
    value_logoUrl = None
    def backgroundColor(self,_param_name:str = 'backgroundColor'):
        inst = None
        self._add_to_query("backgroundColor",_param_name)
        pass

    def backgroundPictureUrl(self,_param_name:str = 'backgroundPictureUrl'):
        inst = None
        self._add_to_query("backgroundPictureUrl",_param_name)
        pass

    def featuredCardPictureUrls(self,_param_name:str = 'featuredCardPictureUrls'):
        inst = None
        self._add_to_query("featuredCardPictureUrls",_param_name)
        pass

    def featuredPlayer(self,_param_name:str = 'featuredPlayer') -> 'PickablePlayer':
        param_list = []
        inst = PickablePlayer(self,param_list)
        self._add_to_query("featuredPlayer",_param_name,inst)
        self.value_featuredPlayer = inst
        return inst

    def logoUrl(self,_param_name:str = 'logoUrl'):
        inst = None
        self._add_to_query("logoUrl",_param_name)
        pass


class completeOnboardingTaskInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,task = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('task',task)

class completeOnboardingTaskPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class ComposeTeamBenchCard(GraphQLObject):
    value_anyCard:'AnyCardInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_averageScore = None
    value_bonus = None
    value_card:'Card' = None
    value_eligiblePlayerGameScores:'list[PlayerGameScoreInterface]' = None
    value_id = None
    value_licensed = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_positions = None
    value_rarity = None
    value_videoUrl = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def averageScore(self,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def bonus(self,_param_name:str = 'bonus'):
        inst = None
        self._add_to_query("bonus",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def eligiblePlayerGameScores(self,so5LeaderboardSlug,_param_name:str = 'eligiblePlayerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("eligiblePlayerGameScores",_param_name,inst)
        self.value_eligiblePlayerGameScores = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def licensed(self,_param_name:str = 'licensed'):
        inst = None
        self._add_to_query("licensed",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def videoUrl(self,derivative,_param_name:str = 'videoUrl'):
        inst = None
        self._add_to_query("videoUrl",_param_name)
        pass


class ComposeTeamBenchCommonPlayer(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_averageScore = None
    value_bonus = None
    value_eligiblePlayerGameScores:'list[PlayerGameScoreInterface]' = None
    value_id = None
    value_licensed = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_positions = None
    value_rarity = None
    value_videoUrl = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def averageScore(self,type,_param_name:str = 'averageScore'):
        inst = None
        self._add_to_query("averageScore",_param_name)
        pass

    def bonus(self,_param_name:str = 'bonus'):
        inst = None
        self._add_to_query("bonus",_param_name)
        pass

    def eligiblePlayerGameScores(self,so5LeaderboardSlug,_param_name:str = 'eligiblePlayerGameScores') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("eligiblePlayerGameScores",_param_name,inst)
        self.value_eligiblePlayerGameScores = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def licensed(self,_param_name:str = 'licensed'):
        inst = None
        self._add_to_query("licensed",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def videoUrl(self,derivative,_param_name:str = 'videoUrl'):
        inst = None
        self._add_to_query("videoUrl",_param_name)
        pass


class TokenCounts(GraphQLObject):
    value_auctionsCount = None
    value_managerSalesCount = None
    value_starterPacksCount = None
    def auctionsCount(self,_param_name:str = 'auctionsCount'):
        inst = None
        self._add_to_query("auctionsCount",_param_name)
        pass

    def managerSalesCount(self,_param_name:str = 'managerSalesCount'):
        inst = None
        self._add_to_query("managerSalesCount",_param_name)
        pass

    def starterPacksCount(self,_param_name:str = 'starterPacksCount'):
        inst = None
        self._add_to_query("starterPacksCount",_param_name)
        pass


class FootballCounts(GraphQLObject):
    value_auctionsCount = None
    value_managerSalesCount = None
    value_starterPacksCount = None
    def auctionsCount(self,_param_name:str = 'auctionsCount'):
        inst = None
        self._add_to_query("auctionsCount",_param_name)
        pass

    def managerSalesCount(self,_param_name:str = 'managerSalesCount'):
        inst = None
        self._add_to_query("managerSalesCount",_param_name)
        pass

    def starterPacksCount(self,_param_name:str = 'starterPacksCount'):
        inst = None
        self._add_to_query("starterPacksCount",_param_name)
        pass


class Counts(GraphQLObject):
    value_baseball:'TokenCounts' = None
    value_football:'FootballCounts' = None
    value_nba:'TokenCounts' = None
    value_tokenFootball:'TokenCounts' = None
    value_usersCount = None
    def baseball(self,_param_name:str = 'baseball') -> 'TokenCounts':
        param_list = []
        inst = TokenCounts(self,param_list)
        self._add_to_query("baseball",_param_name,inst)
        self.value_baseball = inst
        return inst

    def football(self,_param_name:str = 'football') -> 'FootballCounts':
        param_list = []
        inst = FootballCounts(self,param_list)
        self._add_to_query("football",_param_name,inst)
        self.value_football = inst
        return inst

    def nba(self,_param_name:str = 'nba') -> 'TokenCounts':
        param_list = []
        inst = TokenCounts(self,param_list)
        self._add_to_query("nba",_param_name,inst)
        self.value_nba = inst
        return inst

    def tokenFootball(self,_param_name:str = 'tokenFootball') -> 'TokenCounts':
        param_list = []
        inst = TokenCounts(self,param_list)
        self._add_to_query("tokenFootball",_param_name,inst)
        self.value_tokenFootball = inst
        return inst

    def usersCount(self,_param_name:str = 'usersCount'):
        inst = None
        self._add_to_query("usersCount",_param_name)
        pass


class Location(GraphQLObject):
    value_countryCode = None
    value_regionCode = None
    def countryCode(self,_param_name:str = 'countryCode'):
        inst = None
        self._add_to_query("countryCode",_param_name)
        pass

    def regionCode(self,_param_name:str = 'regionCode'):
        inst = None
        self._add_to_query("regionCode",_param_name)
        pass


class Rates(GraphQLObject):
    value_eurMinor = None
    value_gbpMinor = None
    value_usdMinor = None
    def eurMinor(self,_param_name:str = 'eurMinor'):
        inst = None
        self._add_to_query("eurMinor",_param_name)
        pass

    def gbpMinor(self,_param_name:str = 'gbpMinor'):
        inst = None
        self._add_to_query("gbpMinor",_param_name)
        pass

    def usdMinor(self,_param_name:str = 'usdMinor'):
        inst = None
        self._add_to_query("usdMinor",_param_name)
        pass


class ExchangeRate(GraphQLObject):
    value_ethRates:'Rates' = None
    value_id = None
    value_rates = None
    value_time = None
    def ethRates(self,_param_name:str = 'ethRates') -> 'Rates':
        param_list = []
        inst = Rates(self,param_list)
        self._add_to_query("ethRates",_param_name,inst)
        self.value_ethRates = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def rates(self,_param_name:str = 'rates'):
        inst = None
        self._add_to_query("rates",_param_name)
        pass

    def time(self,_param_name:str = 'time'):
        inst = None
        self._add_to_query("time",_param_name)
        pass


class HeroBanner(GraphQLObject):
    value_background = None
    value_colorLeft = None
    value_colorRight = None
    value_href = None
    value_hrefColor = None
    value_hrefLabel = None
    value_id = None
    value_pictureDesktopUrl = None
    value_secondaryHref = None
    value_secondaryHrefColor = None
    value_secondaryHrefLabel = None
    value_subtitle = None
    value_title = None
    value_videoDesktopUrl = None
    def background(self,_param_name:str = 'background'):
        inst = None
        self._add_to_query("background",_param_name)
        pass

    def colorLeft(self,_param_name:str = 'colorLeft'):
        inst = None
        self._add_to_query("colorLeft",_param_name)
        pass

    def colorRight(self,_param_name:str = 'colorRight'):
        inst = None
        self._add_to_query("colorRight",_param_name)
        pass

    def href(self,_param_name:str = 'href'):
        inst = None
        self._add_to_query("href",_param_name)
        pass

    def hrefColor(self,_param_name:str = 'hrefColor'):
        inst = None
        self._add_to_query("hrefColor",_param_name)
        pass

    def hrefLabel(self,_param_name:str = 'hrefLabel'):
        inst = None
        self._add_to_query("hrefLabel",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pictureDesktopUrl(self,_param_name:str = 'pictureDesktopUrl'):
        inst = None
        self._add_to_query("pictureDesktopUrl",_param_name)
        pass

    def secondaryHref(self,_param_name:str = 'secondaryHref'):
        inst = None
        self._add_to_query("secondaryHref",_param_name)
        pass

    def secondaryHrefColor(self,_param_name:str = 'secondaryHrefColor'):
        inst = None
        self._add_to_query("secondaryHrefColor",_param_name)
        pass

    def secondaryHrefLabel(self,_param_name:str = 'secondaryHrefLabel'):
        inst = None
        self._add_to_query("secondaryHrefLabel",_param_name)
        pass

    def subtitle(self,_param_name:str = 'subtitle'):
        inst = None
        self._add_to_query("subtitle",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def videoDesktopUrl(self,_param_name:str = 'videoDesktopUrl'):
        inst = None
        self._add_to_query("videoDesktopUrl",_param_name)
        pass


class HeroBannersSet(GraphQLObject):
    value_heroBanners:'list[HeroBanner]' = None
    value_id = None
    value_title = None
    def heroBanners(self,_param_name:str = 'heroBanners') -> 'HeroBanner':
        param_list = []
        inst = HeroBanner(self,param_list)
        self._add_to_query("heroBanners",_param_name,inst)
        self.value_heroBanners = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class LandingClub(GraphQLObject):
    value_league = None
    value_logo = None
    value_name = None
    def league(self,_param_name:str = 'league'):
        inst = None
        self._add_to_query("league",_param_name)
        pass

    def logo(self,_param_name:str = 'logo'):
        inst = None
        self._add_to_query("logo",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass


class UserSource(GraphQLObject):
    value_id = None
    value_name = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass


class LandingTheme(GraphQLObject):
    value_cards = None
    value_id = None
    value_slug = None
    value_sport = None
    value_subtitle = None
    value_userSource:'UserSource' = None
    def cards(self,_param_name:str = 'cards'):
        inst = None
        self._add_to_query("cards",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def subtitle(self,_param_name:str = 'subtitle'):
        inst = None
        self._add_to_query("subtitle",_param_name)
        pass

    def userSource(self,_param_name:str = 'userSource') -> 'UserSource':
        param_list = []
        inst = UserSource(self,param_list)
        self._add_to_query("userSource",_param_name,inst)
        self.value_userSource = inst
        return inst


class LobbyTile(GraphQLObject):
    value_autoplayTimeout = None
    value_borderColor = None
    value_category = None
    value_ctaDeeplink = None
    value_ctaHref = None
    value_ctaLabel = None
    value_description = None
    value_desktopBgImageUrl = None
    value_desktopVariationBgImageUrl = None
    value_endDate = None
    value_id = None
    value_mobileBgImageUrl = None
    value_mobileVariationBgImageUrl = None
    value_order = None
    value_position = None
    value_sport = None
    value_startDate = None
    value_title = None
    value_titleImageUrl = None
    def autoplayTimeout(self,_param_name:str = 'autoplayTimeout'):
        inst = None
        self._add_to_query("autoplayTimeout",_param_name)
        pass

    def borderColor(self,_param_name:str = 'borderColor'):
        inst = None
        self._add_to_query("borderColor",_param_name)
        pass

    def category(self,_param_name:str = 'category'):
        inst = None
        self._add_to_query("category",_param_name)
        pass

    def ctaDeeplink(self,_param_name:str = 'ctaDeeplink'):
        inst = None
        self._add_to_query("ctaDeeplink",_param_name)
        pass

    def ctaHref(self,_param_name:str = 'ctaHref'):
        inst = None
        self._add_to_query("ctaHref",_param_name)
        pass

    def ctaLabel(self,_param_name:str = 'ctaLabel'):
        inst = None
        self._add_to_query("ctaLabel",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def desktopBgImageUrl(self,_param_name:str = 'desktopBgImageUrl'):
        inst = None
        self._add_to_query("desktopBgImageUrl",_param_name)
        pass

    def desktopVariationBgImageUrl(self,_param_name:str = 'desktopVariationBgImageUrl'):
        inst = None
        self._add_to_query("desktopVariationBgImageUrl",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mobileBgImageUrl(self,_param_name:str = 'mobileBgImageUrl'):
        inst = None
        self._add_to_query("mobileBgImageUrl",_param_name)
        pass

    def mobileVariationBgImageUrl(self,_param_name:str = 'mobileVariationBgImageUrl'):
        inst = None
        self._add_to_query("mobileVariationBgImageUrl",_param_name)
        pass

    def order(self,_param_name:str = 'order'):
        inst = None
        self._add_to_query("order",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def titleImageUrl(self,_param_name:str = 'titleImageUrl'):
        inst = None
        self._add_to_query("titleImageUrl",_param_name)
        pass


class MarketplacePromotionalEvent(GraphQLObject):
    value_id = None
    value_name = None
    value_objectIds = None
    value_rewardDetailsHref = None
    value_slugs = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def objectIds(self,_param_name:str = 'objectIds'):
        inst = None
        self._add_to_query("objectIds",_param_name)
        pass

    def rewardDetailsHref(self,_param_name:str = 'rewardDetailsHref'):
        inst = None
        self._add_to_query("rewardDetailsHref",_param_name)
        pass

    def slugs(self,_param_name:str = 'slugs'):
        inst = None
        self._add_to_query("slugs",_param_name)
        pass


class MarketplacePromotionalEvents(GraphQLObject):
    value_events:'list[MarketplacePromotionalEvent]' = None
    value_id = None
    value_sport = None
    def events(self,_param_name:str = 'events') -> 'MarketplacePromotionalEvent':
        param_list = []
        inst = MarketplacePromotionalEvent(self,param_list)
        self._add_to_query("events",_param_name,inst)
        self.value_events = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class MarketplaceSpecialEvent(GraphQLObject):
    value_assetIds = None
    value_backgroundImageUrl = None
    value_ctaHref = None
    value_endDate = None
    value_headerImageUrl = None
    value_id = None
    value_name = None
    value_slugs = None
    value_startDate = None
    value_type = None
    def assetIds(self,_param_name:str = 'assetIds'):
        inst = None
        self._add_to_query("assetIds",_param_name)
        pass

    def backgroundImageUrl(self,_param_name:str = 'backgroundImageUrl'):
        inst = None
        self._add_to_query("backgroundImageUrl",_param_name)
        pass

    def ctaHref(self,_param_name:str = 'ctaHref'):
        inst = None
        self._add_to_query("ctaHref",_param_name)
        pass

    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def headerImageUrl(self,_param_name:str = 'headerImageUrl'):
        inst = None
        self._add_to_query("headerImageUrl",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def slugs(self,_param_name:str = 'slugs'):
        inst = None
        self._add_to_query("slugs",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class MarketplaceSpecialEvents(GraphQLObject):
    value_events:'list[MarketplaceSpecialEvent]' = None
    value_id = None
    value_sport = None
    def events(self,_param_name:str = 'events') -> 'MarketplaceSpecialEvent':
        param_list = []
        inst = MarketplaceSpecialEvent(self,param_list)
        self._add_to_query("events",_param_name,inst)
        self.value_events = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class ReferralProgramConfig(GraphQLObject):
    value_arenaTickets = None
    value_id = None
    value_maxDiscount:'MonetaryAmount' = None
    value_nature = None
    value_numberCardsToBuy = None
    value_percentageDiscountBasisPoints = None
    def arenaTickets(self,_param_name:str = 'arenaTickets'):
        inst = None
        self._add_to_query("arenaTickets",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def maxDiscount(self,_param_name:str = 'maxDiscount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("maxDiscount",_param_name,inst)
        self.value_maxDiscount = inst
        return inst

    def nature(self,_param_name:str = 'nature'):
        inst = None
        self._add_to_query("nature",_param_name)
        pass

    def numberCardsToBuy(self,_param_name:str = 'numberCardsToBuy'):
        inst = None
        self._add_to_query("numberCardsToBuy",_param_name)
        pass

    def percentageDiscountBasisPoints(self,_param_name:str = 'percentageDiscountBasisPoints'):
        inst = None
        self._add_to_query("percentageDiscountBasisPoints",_param_name)
        pass


class ResponsiveBanner(GraphQLObject):
    value_auctionDrop:'AuctionDrop' = None
    value_backgroundImageUrl = None
    value_dark = None
    value_description = None
    value_id = None
    value_mobileBackgroundImageUrl = None
    value_primaryButton = None
    value_primaryButtonLabel = None
    value_secondaryButton = None
    value_secondaryButtonLabel = None
    value_title = None
    def auctionDrop(self,_param_name:str = 'auctionDrop') -> 'AuctionDrop':
        param_list = []
        inst = AuctionDrop(self,param_list)
        self._add_to_query("auctionDrop",_param_name,inst)
        self.value_auctionDrop = inst
        return inst

    def backgroundImageUrl(self,_param_name:str = 'backgroundImageUrl'):
        inst = None
        self._add_to_query("backgroundImageUrl",_param_name)
        pass

    def dark(self,_param_name:str = 'dark'):
        inst = None
        self._add_to_query("dark",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mobileBackgroundImageUrl(self,_param_name:str = 'mobileBackgroundImageUrl'):
        inst = None
        self._add_to_query("mobileBackgroundImageUrl",_param_name)
        pass

    def primaryButton(self,_param_name:str = 'primaryButton'):
        inst = None
        self._add_to_query("primaryButton",_param_name)
        pass

    def primaryButtonLabel(self,_param_name:str = 'primaryButtonLabel'):
        inst = None
        self._add_to_query("primaryButtonLabel",_param_name)
        pass

    def secondaryButton(self,_param_name:str = 'secondaryButton'):
        inst = None
        self._add_to_query("secondaryButton",_param_name)
        pass

    def secondaryButtonLabel(self,_param_name:str = 'secondaryButtonLabel'):
        inst = None
        self._add_to_query("secondaryButtonLabel",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class ResponsiveBannersSet(GraphQLObject):
    value_id = None
    value_responsiveBanners:'list[ResponsiveBanner]' = None
    value_title = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def responsiveBanners(self,_param_name:str = 'responsiveBanners') -> 'ResponsiveBanner':
        param_list = []
        inst = ResponsiveBanner(self,param_list)
        self._add_to_query("responsiveBanners",_param_name,inst)
        self.value_responsiveBanners = inst
        return inst

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class TeamsPlayingNextGameWeek(GraphQLObject):
    value_endDate = None
    value_gameWeek = None
    value_shortDisplayName = None
    value_slug = None
    value_startDate = None
    value_teamSlugs = None
    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass

    def shortDisplayName(self,_param_name:str = 'shortDisplayName'):
        inst = None
        self._add_to_query("shortDisplayName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass

    def teamSlugs(self,_param_name:str = 'teamSlugs'):
        inst = None
        self._add_to_query("teamSlugs",_param_name)
        pass


class ContentUnit(GraphQLObject):
    value_displayOptions = None
    value_id = None
    value_illustrationUrl = None
    value_primaryButtonLabel = None
    value_primaryButtonUrl = None
    value_secondaryButtonLabel = None
    value_secondaryButtonUrl = None
    value_subtitle = None
    value_title = None
    value_videoUrl = None
    def displayOptions(self,_param_name:str = 'displayOptions'):
        inst = None
        self._add_to_query("displayOptions",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def illustrationUrl(self,_param_name:str = 'illustrationUrl'):
        inst = None
        self._add_to_query("illustrationUrl",_param_name)
        pass

    def primaryButtonLabel(self,_param_name:str = 'primaryButtonLabel'):
        inst = None
        self._add_to_query("primaryButtonLabel",_param_name)
        pass

    def primaryButtonUrl(self,_param_name:str = 'primaryButtonUrl'):
        inst = None
        self._add_to_query("primaryButtonUrl",_param_name)
        pass

    def secondaryButtonLabel(self,_param_name:str = 'secondaryButtonLabel'):
        inst = None
        self._add_to_query("secondaryButtonLabel",_param_name)
        pass

    def secondaryButtonUrl(self,_param_name:str = 'secondaryButtonUrl'):
        inst = None
        self._add_to_query("secondaryButtonUrl",_param_name)
        pass

    def subtitle(self,_param_name:str = 'subtitle'):
        inst = None
        self._add_to_query("subtitle",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def videoUrl(self,_param_name:str = 'videoUrl'):
        inst = None
        self._add_to_query("videoUrl",_param_name)
        pass


class ContentUnitsSet(GraphQLObject):
    value_contentUnits:'list[ContentUnit]' = None
    value_id = None
    def contentUnits(self,_param_name:str = 'contentUnits') -> 'ContentUnit':
        param_list = []
        inst = ContentUnit(self,param_list)
        self._add_to_query("contentUnits",_param_name,inst)
        self.value_contentUnits = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class NoCardRoute(GraphQLObject):
    value_cardCountsByRarity:'CardCount' = None
    value_emailAddress = None
    value_id = None
    value_maxLineupsPerUser = None
    value_nextCloseDate = None
    value_nextOpenDate = None
    value_version = None
    def cardCountsByRarity(self,_param_name:str = 'cardCountsByRarity') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("cardCountsByRarity",_param_name,inst)
        self.value_cardCountsByRarity = inst
        return inst

    def emailAddress(self,_param_name:str = 'emailAddress'):
        inst = None
        self._add_to_query("emailAddress",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def maxLineupsPerUser(self,_param_name:str = 'maxLineupsPerUser'):
        inst = None
        self._add_to_query("maxLineupsPerUser",_param_name)
        pass

    def nextCloseDate(self,_param_name:str = 'nextCloseDate'):
        inst = None
        self._add_to_query("nextCloseDate",_param_name)
        pass

    def nextOpenDate(self,_param_name:str = 'nextOpenDate'):
        inst = None
        self._add_to_query("nextOpenDate",_param_name)
        pass

    def version(self,_param_name:str = 'version'):
        inst = None
        self._add_to_query("version",_param_name)
        pass


class ProbablePitchersForGameWeek(GraphQLObject):
    value_endDate = None
    value_gameWeek = None
    value_playerSlugs = None
    value_shortDisplayName = None
    value_slug = None
    value_startDate = None
    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass

    def playerSlugs(self,_param_name:str = 'playerSlugs'):
        inst = None
        self._add_to_query("playerSlugs",_param_name)
        pass

    def shortDisplayName(self,_param_name:str = 'shortDisplayName'):
        inst = None
        self._add_to_query("shortDisplayName",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def startDate(self,_param_name:str = 'startDate'):
        inst = None
        self._add_to_query("startDate",_param_name)
        pass


class So5Config(GraphQLObject):
    value_baseballTeamsPlayingNextGameWeeks:'list[TeamsPlayingNextGameWeek]' = None
    value_basketballTeamsPlayingNextGameWeeks:'list[TeamsPlayingNextGameWeek]' = None
    value_cardCollections:'list[CardCollection]' = None
    value_footballTeamsPlayingNextGameWeeks:'list[TeamsPlayingNextGameWeek]' = None
    value_id = None
    value_leaguesAlgoliaFilters = None
    value_managerHomeContentUnitsSets:'list[ContentUnitsSet]' = None
    value_nextSo5FixtureTeamSlugs = None
    value_noCardRoute:'NoCardRoute' = None
    value_noCardRouteEmail = None
    value_probablePitchersForNextGameWeeks:'list[ProbablePitchersForGameWeek]' = None
    value_so5LeaguesAlgoliaFilters = None
    value_teamsPlayingNextGameWeeks:'list[TeamsPlayingNextGameWeek]' = None
    value_tournamentRarityTypes = None
    value_tournamentTypes = None
    def baseballTeamsPlayingNextGameWeeks(self,_param_name:str = 'baseballTeamsPlayingNextGameWeeks') -> 'TeamsPlayingNextGameWeek':
        param_list = []
        inst = TeamsPlayingNextGameWeek(self,param_list)
        self._add_to_query("baseballTeamsPlayingNextGameWeeks",_param_name,inst)
        self.value_baseballTeamsPlayingNextGameWeeks = inst
        return inst

    def basketballTeamsPlayingNextGameWeeks(self,_param_name:str = 'basketballTeamsPlayingNextGameWeeks') -> 'TeamsPlayingNextGameWeek':
        param_list = []
        inst = TeamsPlayingNextGameWeek(self,param_list)
        self._add_to_query("basketballTeamsPlayingNextGameWeeks",_param_name,inst)
        self.value_basketballTeamsPlayingNextGameWeeks = inst
        return inst

    def cardCollections(self,_param_name:str = 'cardCollections') -> 'CardCollection':
        param_list = []
        inst = CardCollection(self,param_list)
        self._add_to_query("cardCollections",_param_name,inst)
        self.value_cardCollections = inst
        return inst

    def footballTeamsPlayingNextGameWeeks(self,_param_name:str = 'footballTeamsPlayingNextGameWeeks') -> 'TeamsPlayingNextGameWeek':
        param_list = []
        inst = TeamsPlayingNextGameWeek(self,param_list)
        self._add_to_query("footballTeamsPlayingNextGameWeeks",_param_name,inst)
        self.value_footballTeamsPlayingNextGameWeeks = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaguesAlgoliaFilters(self,sport,_param_name:str = 'leaguesAlgoliaFilters'):
        inst = None
        self._add_to_query("leaguesAlgoliaFilters",_param_name)
        pass

    def managerHomeContentUnitsSets(self,_param_name:str = 'managerHomeContentUnitsSets') -> 'ContentUnitsSet':
        param_list = []
        inst = ContentUnitsSet(self,param_list)
        self._add_to_query("managerHomeContentUnitsSets",_param_name,inst)
        self.value_managerHomeContentUnitsSets = inst
        return inst

    def nextSo5FixtureTeamSlugs(self,_param_name:str = 'nextSo5FixtureTeamSlugs'):
        inst = None
        self._add_to_query("nextSo5FixtureTeamSlugs",_param_name)
        pass

    def noCardRoute(self,sport,_param_name:str = 'noCardRoute') -> 'NoCardRoute':
        param_list = []
        param_list.append(("sport",sport))
        inst = NoCardRoute(self,param_list)
        self._add_to_query("noCardRoute",_param_name,inst)
        self.value_noCardRoute = inst
        return inst

    def noCardRouteEmail(self,_param_name:str = 'noCardRouteEmail'):
        inst = None
        self._add_to_query("noCardRouteEmail",_param_name)
        pass

    def probablePitchersForNextGameWeeks(self,_param_name:str = 'probablePitchersForNextGameWeeks') -> 'ProbablePitchersForGameWeek':
        param_list = []
        inst = ProbablePitchersForGameWeek(self,param_list)
        self._add_to_query("probablePitchersForNextGameWeeks",_param_name,inst)
        self.value_probablePitchersForNextGameWeeks = inst
        return inst

    def so5LeaguesAlgoliaFilters(self,_param_name:str = 'so5LeaguesAlgoliaFilters'):
        inst = None
        self._add_to_query("so5LeaguesAlgoliaFilters",_param_name)
        pass

    def teamsPlayingNextGameWeeks(self,sport,_param_name:str = 'teamsPlayingNextGameWeeks') -> 'TeamsPlayingNextGameWeek':
        param_list = []
        param_list.append(("sport",sport))
        inst = TeamsPlayingNextGameWeek(self,param_list)
        self._add_to_query("teamsPlayingNextGameWeeks",_param_name,inst)
        self.value_teamsPlayingNextGameWeeks = inst
        return inst

    def tournamentRarityTypes(self,_param_name:str = 'tournamentRarityTypes'):
        inst = None
        self._add_to_query("tournamentRarityTypes",_param_name)
        pass

    def tournamentTypes(self,_param_name:str = 'tournamentTypes'):
        inst = None
        self._add_to_query("tournamentTypes",_param_name)
        pass


class Config(GraphQLObject):
    value_algoliaApplicationId = None
    value_algoliaIndexSuffix = None
    value_algoliaSearchApiKey = None
    value_bankAddress = None
    value_banners:'list[BannersSet]' = None
    value_baseballTokensAddress = None
    value_counts:'Counts' = None
    value_creditCardFeesBasisPoints = None
    value_currentLocation:'Location' = None
    value_defaultFiatCurrency = None
    value_deliverableCountries:'list[Country]' = None
    value_ethAssetType = None
    value_ethQuantum = None
    value_ethereumEndpoint = None
    value_ethereumNetworkId = None
    value_exchangeRate:'ExchangeRate' = None
    value_fiatWalletCountries:'list[Country]' = None
    value_footballNationalSeriesTokensAddress = None
    value_giphyApiKey = None
    value_heroBanners:'list[HeroBannersSet]' = None
    value_id = None
    value_idealDepositFeesAmountMinor = None
    value_landingClubCount = None
    value_landingClubs:'list[LandingClub]' = None
    value_landingTheme:'LandingTheme' = None
    value_liveLobbyTiles:'list[LobbyTile]' = None
    value_lobbyTile:'LobbyTile' = None
    value_mangopayApplePayDepositFeesBasisPoints = None
    value_marketFeeRateBasisPoints = None
    value_marketplacePromotionalEvents:'list[MarketplacePromotionalEvents]' = None
    value_marketplaceSpecialEvents:'list[MarketplaceSpecialEvents]' = None
    value_migratorAddress = None
    value_minimumReceiveWeiAmount = None
    value_nbaTokensAddress = None
    value_paypalDepositFeesBasisPoints = None
    value_referralProgramConfig:'ReferralProgramConfig' = None
    value_relayAddress = None
    value_responsiveBanners:'list[ResponsiveBannersSet]' = None
    value_so5:'So5Config' = None
    value_sorareCardsAddress = None
    value_sorareEncryptionKey = None
    value_sorareTokensAddress = None
    value_sponsorAccountAddress = None
    value_starkExchangeAddress = None
    value_stripePublicKey = None
    value_walletChallenge = None
    def algoliaApplicationId(self,_param_name:str = 'algoliaApplicationId'):
        inst = None
        self._add_to_query("algoliaApplicationId",_param_name)
        pass

    def algoliaIndexSuffix(self,_param_name:str = 'algoliaIndexSuffix'):
        inst = None
        self._add_to_query("algoliaIndexSuffix",_param_name)
        pass

    def algoliaSearchApiKey(self,_param_name:str = 'algoliaSearchApiKey'):
        inst = None
        self._add_to_query("algoliaSearchApiKey",_param_name)
        pass

    def bankAddress(self,_param_name:str = 'bankAddress'):
        inst = None
        self._add_to_query("bankAddress",_param_name)
        pass

    def banners(self,_param_name:str = 'banners') -> 'BannersSet':
        param_list = []
        inst = BannersSet(self,param_list)
        self._add_to_query("banners",_param_name,inst)
        self.value_banners = inst
        return inst

    def baseballTokensAddress(self,_param_name:str = 'baseballTokensAddress'):
        inst = None
        self._add_to_query("baseballTokensAddress",_param_name)
        pass

    def counts(self,_param_name:str = 'counts') -> 'Counts':
        param_list = []
        inst = Counts(self,param_list)
        self._add_to_query("counts",_param_name,inst)
        self.value_counts = inst
        return inst

    def creditCardFeesBasisPoints(self,creditCardType,provider,_param_name:str = 'creditCardFeesBasisPoints'):
        inst = None
        self._add_to_query("creditCardFeesBasisPoints",_param_name)
        pass

    def currentLocation(self,_param_name:str = 'currentLocation') -> 'Location':
        param_list = []
        inst = Location(self,param_list)
        self._add_to_query("currentLocation",_param_name,inst)
        self.value_currentLocation = inst
        return inst

    def defaultFiatCurrency(self,_param_name:str = 'defaultFiatCurrency'):
        inst = None
        self._add_to_query("defaultFiatCurrency",_param_name)
        pass

    def deliverableCountries(self,_param_name:str = 'deliverableCountries') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("deliverableCountries",_param_name,inst)
        self.value_deliverableCountries = inst
        return inst

    def ethAssetType(self,_param_name:str = 'ethAssetType'):
        inst = None
        self._add_to_query("ethAssetType",_param_name)
        pass

    def ethQuantum(self,_param_name:str = 'ethQuantum'):
        inst = None
        self._add_to_query("ethQuantum",_param_name)
        pass

    def ethereumEndpoint(self,_param_name:str = 'ethereumEndpoint'):
        inst = None
        self._add_to_query("ethereumEndpoint",_param_name)
        pass

    def ethereumNetworkId(self,_param_name:str = 'ethereumNetworkId'):
        inst = None
        self._add_to_query("ethereumNetworkId",_param_name)
        pass

    def exchangeRate(self,_param_name:str = 'exchangeRate') -> 'ExchangeRate':
        param_list = []
        inst = ExchangeRate(self,param_list)
        self._add_to_query("exchangeRate",_param_name,inst)
        self.value_exchangeRate = inst
        return inst

    def fiatWalletCountries(self,_param_name:str = 'fiatWalletCountries') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("fiatWalletCountries",_param_name,inst)
        self.value_fiatWalletCountries = inst
        return inst

    def footballNationalSeriesTokensAddress(self,_param_name:str = 'footballNationalSeriesTokensAddress'):
        inst = None
        self._add_to_query("footballNationalSeriesTokensAddress",_param_name)
        pass

    def giphyApiKey(self,_param_name:str = 'giphyApiKey'):
        inst = None
        self._add_to_query("giphyApiKey",_param_name)
        pass

    def heroBanners(self,_param_name:str = 'heroBanners') -> 'HeroBannersSet':
        param_list = []
        inst = HeroBannersSet(self,param_list)
        self._add_to_query("heroBanners",_param_name,inst)
        self.value_heroBanners = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def idealDepositFeesAmountMinor(self,_param_name:str = 'idealDepositFeesAmountMinor'):
        inst = None
        self._add_to_query("idealDepositFeesAmountMinor",_param_name)
        pass

    def landingClubCount(self,_param_name:str = 'landingClubCount'):
        inst = None
        self._add_to_query("landingClubCount",_param_name)
        pass

    def landingClubs(self,_param_name:str = 'landingClubs') -> 'LandingClub':
        param_list = []
        inst = LandingClub(self,param_list)
        self._add_to_query("landingClubs",_param_name,inst)
        self.value_landingClubs = inst
        return inst

    def landingTheme(self,_param_name:str = 'landingTheme') -> 'LandingTheme':
        param_list = []
        inst = LandingTheme(self,param_list)
        self._add_to_query("landingTheme",_param_name,inst)
        self.value_landingTheme = inst
        return inst

    def liveLobbyTiles(self,positions,sport,_param_name:str = 'liveLobbyTiles') -> 'LobbyTile':
        param_list = []
        param_list.append(("positions",positions))
        param_list.append(("sport",sport))
        inst = LobbyTile(self,param_list)
        self._add_to_query("liveLobbyTiles",_param_name,inst)
        self.value_liveLobbyTiles = inst
        return inst

    def lobbyTile(self,position,sport,_param_name:str = 'lobbyTile') -> 'LobbyTile':
        param_list = []
        param_list.append(("position",position))
        param_list.append(("sport",sport))
        inst = LobbyTile(self,param_list)
        self._add_to_query("lobbyTile",_param_name,inst)
        self.value_lobbyTile = inst
        return inst

    def mangopayApplePayDepositFeesBasisPoints(self,_param_name:str = 'mangopayApplePayDepositFeesBasisPoints'):
        inst = None
        self._add_to_query("mangopayApplePayDepositFeesBasisPoints",_param_name)
        pass

    def marketFeeRateBasisPoints(self,_param_name:str = 'marketFeeRateBasisPoints'):
        inst = None
        self._add_to_query("marketFeeRateBasisPoints",_param_name)
        pass

    def marketplacePromotionalEvents(self,_param_name:str = 'marketplacePromotionalEvents') -> 'MarketplacePromotionalEvents':
        param_list = []
        inst = MarketplacePromotionalEvents(self,param_list)
        self._add_to_query("marketplacePromotionalEvents",_param_name,inst)
        self.value_marketplacePromotionalEvents = inst
        return inst

    def marketplaceSpecialEvents(self,_param_name:str = 'marketplaceSpecialEvents') -> 'MarketplaceSpecialEvents':
        param_list = []
        inst = MarketplaceSpecialEvents(self,param_list)
        self._add_to_query("marketplaceSpecialEvents",_param_name,inst)
        self.value_marketplaceSpecialEvents = inst
        return inst

    def migratorAddress(self,_param_name:str = 'migratorAddress'):
        inst = None
        self._add_to_query("migratorAddress",_param_name)
        pass

    def minimumReceiveWeiAmount(self,_param_name:str = 'minimumReceiveWeiAmount'):
        inst = None
        self._add_to_query("minimumReceiveWeiAmount",_param_name)
        pass

    def nbaTokensAddress(self,_param_name:str = 'nbaTokensAddress'):
        inst = None
        self._add_to_query("nbaTokensAddress",_param_name)
        pass

    def paypalDepositFeesBasisPoints(self,_param_name:str = 'paypalDepositFeesBasisPoints'):
        inst = None
        self._add_to_query("paypalDepositFeesBasisPoints",_param_name)
        pass

    def referralProgramConfig(self,sport,_param_name:str = 'referralProgramConfig') -> 'ReferralProgramConfig':
        param_list = []
        param_list.append(("sport",sport))
        inst = ReferralProgramConfig(self,param_list)
        self._add_to_query("referralProgramConfig",_param_name,inst)
        self.value_referralProgramConfig = inst
        return inst

    def relayAddress(self,_param_name:str = 'relayAddress'):
        inst = None
        self._add_to_query("relayAddress",_param_name)
        pass

    def responsiveBanners(self,_param_name:str = 'responsiveBanners') -> 'ResponsiveBannersSet':
        param_list = []
        inst = ResponsiveBannersSet(self,param_list)
        self._add_to_query("responsiveBanners",_param_name,inst)
        self.value_responsiveBanners = inst
        return inst

    def so5(self,_param_name:str = 'so5') -> 'So5Config':
        param_list = []
        inst = So5Config(self,param_list)
        self._add_to_query("so5",_param_name,inst)
        self.value_so5 = inst
        return inst

    def sorareCardsAddress(self,_param_name:str = 'sorareCardsAddress'):
        inst = None
        self._add_to_query("sorareCardsAddress",_param_name)
        pass

    def sorareEncryptionKey(self,_param_name:str = 'sorareEncryptionKey'):
        inst = None
        self._add_to_query("sorareEncryptionKey",_param_name)
        pass

    def sorareTokensAddress(self,_param_name:str = 'sorareTokensAddress'):
        inst = None
        self._add_to_query("sorareTokensAddress",_param_name)
        pass

    def sponsorAccountAddress(self,_param_name:str = 'sponsorAccountAddress'):
        inst = None
        self._add_to_query("sponsorAccountAddress",_param_name)
        pass

    def starkExchangeAddress(self,_param_name:str = 'starkExchangeAddress'):
        inst = None
        self._add_to_query("starkExchangeAddress",_param_name)
        pass

    def stripePublicKey(self,_param_name:str = 'stripePublicKey'):
        inst = None
        self._add_to_query("stripePublicKey",_param_name)
        pass

    def walletChallenge(self,_param_name:str = 'walletChallenge'):
        inst = None
        self._add_to_query("walletChallenge",_param_name)
        pass


class confirmDeviceInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,token = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('token',token)

class ConfirmDeviceMutationPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_jwtToken:'JwtToken' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def jwtToken(self,aud,_param_name:str = 'jwtToken') -> 'JwtToken':
        param_list = []
        param_list.append(("aud",aud))
        inst = JwtToken(self,param_list)
        self._add_to_query("jwtToken",_param_name,inst)
        self.value_jwtToken = inst
        return inst


class confirmEmailInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,token = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('token',token)

class ConfirmEmailMutationPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_jwtToken:'JwtToken' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def jwtToken(self,aud,_param_name:str = 'jwtToken') -> 'JwtToken':
        param_list = []
        param_list.append(("aud",aud))
        inst = JwtToken(self,param_list)
        self._add_to_query("jwtToken",_param_name,inst)
        self.value_jwtToken = inst
        return inst


class confirmSo5LineupImportsBatchInput(GraphQLInputObject):
    def __init__(self,batchId = None,clientMutationId = None):
        self._add_parameter('batchId',batchId)
        self._add_parameter('clientMutationId',clientMutationId)

class confirmSo5LineupImportsBatchPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class confirmSo5LineupsInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5LeagueIds = None,so5LineupIds = None,targetedRewardSlug = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5LeagueIds',so5LeagueIds)
        self._add_parameter('so5LineupIds',so5LineupIds)
        self._add_parameter('targetedRewardSlug',targetedRewardSlug)

class confirmSo5LineupsPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5Lineups:'list[So5Lineup]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5Lineups(self,_param_name:str = 'so5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineups",_param_name,inst)
        self.value_so5Lineups = inst
        return inst


class confirmSo5NoCardLineupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5LeaderboardId = None,so5NoCardLineupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5LeaderboardId',so5LeaderboardId)
        self._add_parameter('so5NoCardLineupId',so5NoCardLineupId)

class confirmSo5NoCardLineupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5NoCardLineup:'So5NoCardLineup' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5NoCardLineup(self,_param_name:str = 'so5NoCardLineup') -> 'So5NoCardLineup':
        param_list = []
        inst = So5NoCardLineup(self,param_list)
        self._add_to_query("so5NoCardLineup",_param_name,inst)
        self.value_so5NoCardLineup = inst
        return inst


class consumeCardBoosterInput(GraphQLInputObject):
    def __init__(self,cardId = None,clientMutationId = None,userShopItemId = None):
        self._add_parameter('cardId',cardId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('userShopItemId',userShopItemId)

class consumeCardBoosterPayload(GraphQLObject):
    value_card:'Card' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class consumeEphemeralTokenInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,token = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('token',token)

class ConsumeEphemeralTokenMutationPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_jwtToken:'JwtToken' = None
    value_redirectUrl = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def jwtToken(self,aud,_param_name:str = 'jwtToken') -> 'JwtToken':
        param_list = []
        param_list.append(("aud",aud))
        inst = JwtToken(self,param_list)
        self._add_to_query("jwtToken",_param_name,inst)
        self.value_jwtToken = inst
        return inst

    def redirectUrl(self,_param_name:str = 'redirectUrl'):
        inst = None
        self._add_to_query("redirectUrl",_param_name)
        pass


class ContactInput(GraphQLInputObject):
    def __init__(self,displayName = None,firstName = None,lastName = None,phoneNumber = None):
        self._add_parameter('displayName',displayName)
        self._add_parameter('firstName',firstName)
        self._add_parameter('lastName',lastName)
        self._add_parameter('phoneNumber',phoneNumber)

class ContentTileInterface(GraphQLObject):
    value_color = None
    value_headline = None
    value_id = None
    value_title = None
    value_type = None
    def color(self,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def headline(self,_param_name:str = 'headline'):
        inst = None
        self._add_to_query("headline",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class Contract(GraphQLObject):
    value_addressHex = None
    value_blockchain = None
    value_id = None
    value_name = None
    def addressHex(self,_param_name:str = 'addressHex'):
        inst = None
        self._add_to_query("addressHex",_param_name)
        pass

    def blockchain(self,_param_name:str = 'blockchain'):
        inst = None
        self._add_to_query("blockchain",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass


class createCardAuthorizationInput(GraphQLInputObject):
    def __init__(self,authorizationId = None,browserInfo:'BrowserInfoInput' = None,cardId = None,clientMutationId = None):
        self._add_parameter('authorizationId',authorizationId)
        self._add_parameter('browserInfo',browserInfo)
        self._add_parameter('cardId',cardId)
        self._add_parameter('clientMutationId',clientMutationId)

class createCardAuthorizationPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_secureModeRedirectUrl = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def secureModeRedirectUrl(self,_param_name:str = 'secureModeRedirectUrl'):
        inst = None
        self._add_to_query("secureModeRedirectUrl",_param_name)
        pass


class createCardRegistrationInput(GraphQLInputObject):
    def __init__(self,cardType = None,clientMutationId = None):
        self._add_parameter('cardType',cardType)
        self._add_parameter('clientMutationId',clientMutationId)

class PreRegistrationData(GraphQLObject):
    value_accessKey = None
    value_cardRegistrationUrl = None
    value_data = None
    value_id = None
    def accessKey(self,_param_name:str = 'accessKey'):
        inst = None
        self._add_to_query("accessKey",_param_name)
        pass

    def cardRegistrationUrl(self,_param_name:str = 'cardRegistrationUrl'):
        inst = None
        self._add_to_query("cardRegistrationUrl",_param_name)
        pass

    def data(self,_param_name:str = 'data'):
        inst = None
        self._add_to_query("data",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class createCardRegistrationPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_preRegistrationData:'PreRegistrationData' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def preRegistrationData(self,_param_name:str = 'preRegistrationData') -> 'PreRegistrationData':
        param_list = []
        inst = PreRegistrationData(self,param_list)
        self._add_to_query("preRegistrationData",_param_name,inst)
        self.value_preRegistrationData = inst
        return inst


class StarkSignatureInput(GraphQLInputObject):
    def __init__(self,data = None,expiration = None,expirationTimestamp = None,nonce = None,starkKey = None):
        self._add_parameter('data',data)
        self._add_parameter('expiration',expiration)
        self._add_parameter('expirationTimestamp',expirationTimestamp)
        self._add_parameter('nonce',nonce)
        self._add_parameter('starkKey',starkKey)

class createCardWithdrawalInput(GraphQLInputObject):
    def __init__(self,assetId = None,cardSlug = None,clientMutationId = None,destination = None,starkSignatures:'StarkSignatureInput' = None):
        self._add_parameter('assetId',assetId)
        self._add_parameter('cardSlug',cardSlug)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('destination',destination)
        self._add_parameter('starkSignatures',starkSignatures)

class createCardWithdrawalPayload(GraphQLObject):
    value_anyCard:'AnyCardInterface' = None
    value_card:'Card' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_token:'Token' = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst


class createCheckoutCardAuthorizationInput(GraphQLInputObject):
    def __init__(self,authorizationId = None,browserInfo:'BrowserInfoInput' = None,clientMutationId = None,cvv = None,deviceSessionId = None,sourceId = None,token = None):
        self._add_parameter('authorizationId',authorizationId)
        self._add_parameter('browserInfo',browserInfo)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('cvv',cvv)
        self._add_parameter('deviceSessionId',deviceSessionId)
        self._add_parameter('sourceId',sourceId)
        self._add_parameter('token',token)

class createCheckoutCardAuthorizationPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_secureModeRedirectUrl = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def secureModeRedirectUrl(self,_param_name:str = 'secureModeRedirectUrl'):
        inst = None
        self._add_to_query("secureModeRedirectUrl",_param_name)
        pass


class createCommonDraftSwapInput(GraphQLInputObject):
    def __init__(self,cardOutSlugs = None,clientMutationId = None,commonDraftCampaignSlug = None,printablePlayerInIds = None,so5LeaderboardSlug = None):
        self._add_parameter('cardOutSlugs',cardOutSlugs)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('commonDraftCampaignSlug',commonDraftCampaignSlug)
        self._add_parameter('printablePlayerInIds',printablePlayerInIds)
        self._add_parameter('so5LeaderboardSlug',so5LeaderboardSlug)

class So5CommonDraftSwapError(GraphQLObject):
    value_code = None
    value_error = None
    value_message = None
    def code(self,_param_name:str = 'code'):
        inst = None
        self._add_to_query("code",_param_name)
        pass

    def error(self,_param_name:str = 'error'):
        inst = None
        self._add_to_query("error",_param_name)
        pass

    def message(self,_param_name:str = 'message'):
        inst = None
        self._add_to_query("message",_param_name)
        pass


class createCommonDraftSwapPayload(GraphQLObject):
    value_clientMutationId = None
    value_commonDraftCampaign:'CommonDraftCampaign' = None
    value_errors:'list[UserError]' = None
    value_swapError:'So5CommonDraftSwapError' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def commonDraftCampaign(self,_param_name:str = 'commonDraftCampaign') -> 'CommonDraftCampaign':
        param_list = []
        inst = CommonDraftCampaign(self,param_list)
        self._add_to_query("commonDraftCampaign",_param_name,inst)
        self.value_commonDraftCampaign = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def swapError(self,_param_name:str = 'swapError') -> 'So5CommonDraftSwapError':
        param_list = []
        inst = So5CommonDraftSwapError(self,param_list)
        self._add_to_query("swapError",_param_name,inst)
        self.value_swapError = inst
        return inst


class createDeckInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,name = None,sport = None,visible = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('name',name)
        self._add_parameter('sport',sport)
        self._add_parameter('visible',visible)

class createDeckPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_deck:'Deck' = None
    value_errors:'list[UserError]' = None
    value_userSportProfile = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def deck(self,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def userSportProfile(self,_param_name:str = 'userSportProfile'):
        inst = None
        self._add_to_query("userSportProfile",_param_name)
        pass


class createDepositBankAccountMutationInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class createDepositBankAccountMutationPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class createDirectOfferInput(GraphQLInputObject):
    def __init__(self,approvals:'AuthorizationApprovalInput' = None,clientMutationId = None,counteredOfferId = None,dealId = None,duration = None,migrationData:'OfferMigrationInput' = None,receiveAmount:'AmountInput' = None,receiveAssetIds = None,receiverSlug = None,sendAmount:'AmountInput' = None,sendAssetIds = None):
        self._add_parameter('approvals',approvals)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('counteredOfferId',counteredOfferId)
        self._add_parameter('dealId',dealId)
        self._add_parameter('duration',duration)
        self._add_parameter('migrationData',migrationData)
        self._add_parameter('receiveAmount',receiveAmount)
        self._add_parameter('receiveAssetIds',receiveAssetIds)
        self._add_parameter('receiverSlug',receiverSlug)
        self._add_parameter('sendAmount',sendAmount)
        self._add_parameter('sendAssetIds',sendAssetIds)

class createDirectOfferPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_tokenOffer:'TokenOffer' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def tokenOffer(self,_param_name:str = 'tokenOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("tokenOffer",_param_name,inst)
        self.value_tokenOffer = inst
        return inst


class So5DraftablePlayerAppearanceInput(GraphQLInputObject):
    def __init__(self,captain = None,draftablePlayerId = None):
        self._add_parameter('captain',captain)
        self._add_parameter('draftablePlayerId',draftablePlayerId)

class createDraftAndSo5LineupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,commonDraftCampaignSlug = None,printablePlayerIds = None,so5DraftablePlayerAppearances:'So5DraftablePlayerAppearanceInput' = None,so5LeaderboardId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('commonDraftCampaignSlug',commonDraftCampaignSlug)
        self._add_parameter('printablePlayerIds',printablePlayerIds)
        self._add_parameter('so5DraftablePlayerAppearances',so5DraftablePlayerAppearances)
        self._add_parameter('so5LeaderboardId',so5LeaderboardId)

class createDraftAndSo5LineupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5Lineup:'So5Lineup' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5Lineup(self,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst


class createEphemeralLinkInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,tokenAsQueryParam = None,url = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('tokenAsQueryParam',tokenAsQueryParam)
        self._add_parameter('url',url)

class createEphemeralLinkPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_url = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def url(self,_param_name:str = 'url'):
        inst = None
        self._add_to_query("url",_param_name)
        pass


class createEthBankWithdrawalIntentInput(GraphQLInputObject):
    def __init__(self,amount = None,clientMutationId = None):
        self._add_parameter('amount',amount)
        self._add_parameter('clientMutationId',clientMutationId)

class EthBankWithdrawalIntent(GraphQLObject):
    value_amount = None
    value_nonce = None
    value_signature = None
    value_user:'CurrentUser' = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def nonce(self,_param_name:str = 'nonce'):
        inst = None
        self._add_to_query("nonce",_param_name)
        pass

    def signature(self,_param_name:str = 'signature'):
        inst = None
        self._add_to_query("signature",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class createEthBankWithdrawalIntentPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_ethBankWithdrawalIntent:'EthBankWithdrawalIntent' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def ethBankWithdrawalIntent(self,_param_name:str = 'ethBankWithdrawalIntent') -> 'EthBankWithdrawalIntent':
        param_list = []
        inst = EthBankWithdrawalIntent(self,param_list)
        self._add_to_query("ethBankWithdrawalIntent",_param_name,inst)
        self.value_ethBankWithdrawalIntent = inst
        return inst


class createEthDepositInput(GraphQLInputObject):
    def __init__(self,amount = None,clientMutationId = None,transactionHash = None):
        self._add_parameter('amount',amount)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('transactionHash',transactionHash)

class createEthDepositPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class createEthMigrationInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,nonce = None,signature = None,weiAmount = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('nonce',nonce)
        self._add_parameter('signature',signature)
        self._add_parameter('weiAmount',weiAmount)

class createEthMigrationPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class createEthVaultInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class createEthVaultPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class createFastWithdrawalInput(GraphQLInputObject):
    def __init__(self,amount = None,clientMutationId = None,salt = None,starkSignatures:'StarkSignatureInput' = None,to = None):
        self._add_parameter('amount',amount)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('salt',salt)
        self._add_parameter('starkSignatures',starkSignatures)
        self._add_parameter('to',to)

class createFastWithdrawalPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class createFiatPayerInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,firstName = None,lastName = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('firstName',firstName)
        self._add_parameter('lastName',lastName)

class createFiatPayerPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class createFiatWalletInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,countryOfResidenceCode = None,currency = None,dob = None,firstName = None,lastName = None,mangopayTermsAndConditionsAccepted = None,nationalityCode = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('countryOfResidenceCode',countryOfResidenceCode)
        self._add_parameter('currency',currency)
        self._add_parameter('dob',dob)
        self._add_parameter('firstName',firstName)
        self._add_parameter('lastName',lastName)
        self._add_parameter('mangopayTermsAndConditionsAccepted',mangopayTermsAndConditionsAccepted)
        self._add_parameter('nationalityCode',nationalityCode)

class createFiatWalletPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class createFiatWithdrawalInput(GraphQLInputObject):
    def __init__(self,amounts:'AmountInput' = None,attemptReference = None,bankAccountId = None,clientMutationId = None):
        self._add_parameter('amounts',amounts)
        self._add_parameter('attemptReference',attemptReference)
        self._add_parameter('bankAccountId',bankAccountId)
        self._add_parameter('clientMutationId',clientMutationId)

class MangopayWithdrawal(GraphQLObject):
    value_aasmState = None
    value_amounts:'MonetaryAmount' = None
    value_bankAccount = None
    value_id = None
    value_status = None
    value_to = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def bankAccount(self,_param_name:str = 'bankAccount'):
        inst = None
        self._add_to_query("bankAccount",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def to(self,_param_name:str = 'to'):
        inst = None
        self._add_to_query("to",_param_name)
        pass


class createFiatWithdrawalPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_withdrawal:'MangopayWithdrawal' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def withdrawal(self,_param_name:str = 'withdrawal') -> 'MangopayWithdrawal':
        param_list = []
        inst = MangopayWithdrawal(self,param_list)
        self._add_to_query("withdrawal",_param_name,inst)
        self.value_withdrawal = inst
        return inst


class createIdentityVerificationSessionInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,userIdentityVerificationId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('userIdentityVerificationId',userIdentityVerificationId)

class VerificationSession(GraphQLObject):
    value_clientSecret = None
    value_id = None
    def clientSecret(self,_param_name:str = 'clientSecret'):
        inst = None
        self._add_to_query("clientSecret",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class createIdentityVerificationSessionPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_verificationSession:'VerificationSession' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def verificationSession(self,_param_name:str = 'verificationSession') -> 'VerificationSession':
        param_list = []
        inst = VerificationSession(self,param_list)
        self._add_to_query("verificationSession",_param_name,inst)
        self.value_verificationSession = inst
        return inst


class createJwtTokenInput(GraphQLInputObject):
    def __init__(self,aud = None,clientMutationId = None):
        self._add_parameter('aud',aud)
        self._add_parameter('clientMutationId',clientMutationId)

class createJwtTokenPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_jwtToken:'JwtToken' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def jwtToken(self,_param_name:str = 'jwtToken') -> 'JwtToken':
        param_list = []
        inst = JwtToken(self,param_list)
        self._add_to_query("jwtToken",_param_name,inst)
        self.value_jwtToken = inst
        return inst


class So5AppearanceInput(GraphQLInputObject):
    def __init__(self,boost = None,captain = None,cardSlug = None,composeTeamBenchObjectId = None):
        self._add_parameter('boost',boost)
        self._add_parameter('captain',captain)
        self._add_parameter('cardSlug',cardSlug)
        self._add_parameter('composeTeamBenchObjectId',composeTeamBenchObjectId)

class createOnboardingSo5LineupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,draft = None,name = None,so5Appearances:'So5AppearanceInput' = None,so5LeaderboardId = None,so5LineupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('draft',draft)
        self._add_parameter('name',name)
        self._add_parameter('so5Appearances',so5Appearances)
        self._add_parameter('so5LeaderboardId',so5LeaderboardId)
        self._add_parameter('so5LineupId',so5LineupId)

class createOnboardingSo5LineupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_probabilisticBundle:'ProbabilisticBundle' = None
    value_so5LeaderboardContender:'So5LeaderboardContender' = None
    value_so5Lineup:'So5Lineup' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def probabilisticBundle(self,_param_name:str = 'probabilisticBundle') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundle",_param_name,inst)
        self.value_probabilisticBundle = inst
        return inst

    def so5LeaderboardContender(self,_param_name:str = 'so5LeaderboardContender') -> 'So5LeaderboardContender':
        param_list = []
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("so5LeaderboardContender",_param_name,inst)
        self.value_so5LeaderboardContender = inst
        return inst

    def so5Lineup(self,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst


class createOrUpdateSingleBuyOfferMinPriceInput(GraphQLInputObject):
    def __init__(self,assetId = None,clientMutationId = None,isPrivate = None,minPrice:'AmountInput' = None):
        self._add_parameter('assetId',assetId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('isPrivate',isPrivate)
        self._add_parameter('minPrice',minPrice)

class createOrUpdateSingleBuyOfferMinPricePayload(GraphQLObject):
    value_card:'AnyCardInterface' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_token:'Token' = None
    def card(self,_param_name:str = 'card') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst


class createOrUpdateSo5LineupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,draft = None,managerTeamId = None,name = None,shouldCreateManagerTeam = None,so5Appearances:'So5AppearanceInput' = None,so5LeaderboardId = None,so5LineupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('draft',draft)
        self._add_parameter('managerTeamId',managerTeamId)
        self._add_parameter('name',name)
        self._add_parameter('shouldCreateManagerTeam',shouldCreateManagerTeam)
        self._add_parameter('so5Appearances',so5Appearances)
        self._add_parameter('so5LeaderboardId',so5LeaderboardId)
        self._add_parameter('so5LineupId',so5LineupId)

class createOrUpdateSo5LineupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5LeaderboardContender:'So5LeaderboardContender' = None
    value_so5Lineup:'So5Lineup' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5LeaderboardContender(self,_param_name:str = 'so5LeaderboardContender') -> 'So5LeaderboardContender':
        param_list = []
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("so5LeaderboardContender",_param_name,inst)
        self.value_so5LeaderboardContender = inst
        return inst

    def so5Lineup(self,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst


class createSingleSaleOfferInput(GraphQLInputObject):
    def __init__(self,approvals:'AuthorizationApprovalInput' = None,assetId = None,clientMutationId = None,dealId = None,duration = None,migrationData:'OfferMigrationInput' = None,receiveAmount:'AmountInput' = None,settlementCurrencies = None,startDate = None):
        self._add_parameter('approvals',approvals)
        self._add_parameter('assetId',assetId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('dealId',dealId)
        self._add_parameter('duration',duration)
        self._add_parameter('migrationData',migrationData)
        self._add_parameter('receiveAmount',receiveAmount)
        self._add_parameter('settlementCurrencies',settlementCurrencies)
        self._add_parameter('startDate',startDate)

class createSingleSaleOfferPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_tokenOffer:'TokenOffer' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def tokenOffer(self,_param_name:str = 'tokenOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("tokenOffer",_param_name,inst)
        self.value_tokenOffer = inst
        return inst


class So5LineupImportInput(GraphQLInputObject):
    def __init__(self,managerTeamId = None,shouldCreateManagerTeam = None,so5Appearances:'So5AppearanceInput' = None,so5LeaderboardSlug = None):
        self._add_parameter('managerTeamId',managerTeamId)
        self._add_parameter('shouldCreateManagerTeam',shouldCreateManagerTeam)
        self._add_parameter('so5Appearances',so5Appearances)
        self._add_parameter('so5LeaderboardSlug',so5LeaderboardSlug)

class createSo5LineupImportsBatchInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5Lineups:'So5LineupImportInput' = None,sport = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5Lineups',so5Lineups)
        self._add_parameter('sport',sport)

class ImportedSo5Appearance(GraphQLObject):
    value_boost = None
    value_captain = None
    value_composeTeamObject:'ComposeTeamBenchObjectInterface' = None
    value_index = None
    def boost(self,_param_name:str = 'boost'):
        inst = None
        self._add_to_query("boost",_param_name)
        pass

    def captain(self,_param_name:str = 'captain'):
        inst = None
        self._add_to_query("captain",_param_name)
        pass

    def composeTeamObject(self,_param_name:str = 'composeTeamObject') -> 'ComposeTeamBenchObjectInterface':
        param_list = []
        inst = ComposeTeamBenchObjectInterface(self,param_list)
        self._add_to_query("composeTeamObject",_param_name,inst)
        self.value_composeTeamObject = inst
        return inst

    def index(self,_param_name:str = 'index'):
        inst = None
        self._add_to_query("index",_param_name)
        pass


class So5LineupImport(GraphQLObject):
    value_aasmState = None
    value_appearances:'list[ImportedSo5Appearance]' = None
    value_errorMessage = None
    value_id = None
    value_managerTeam:'ManagerTeam' = None
    value_so5Leaderboard:'So5Leaderboard' = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def appearances(self,_param_name:str = 'appearances') -> 'ImportedSo5Appearance':
        param_list = []
        inst = ImportedSo5Appearance(self,param_list)
        self._add_to_query("appearances",_param_name,inst)
        self.value_appearances = inst
        return inst

    def errorMessage(self,_param_name:str = 'errorMessage'):
        inst = None
        self._add_to_query("errorMessage",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def managerTeam(self,_param_name:str = 'managerTeam') -> 'ManagerTeam':
        param_list = []
        inst = ManagerTeam(self,param_list)
        self._add_to_query("managerTeam",_param_name,inst)
        self.value_managerTeam = inst
        return inst

    def so5Leaderboard(self,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst


class So5LineupImportsBatch(GraphQLObject):
    value_cancelledSo5Lineups:'list[So5Lineup]' = None
    value_id = None
    value_so5LineupImports:'list[So5LineupImport]' = None
    value_status = None
    value_url = None
    def cancelledSo5Lineups(self,_param_name:str = 'cancelledSo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("cancelledSo5Lineups",_param_name,inst)
        self.value_cancelledSo5Lineups = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def so5LineupImports(self,_param_name:str = 'so5LineupImports') -> 'So5LineupImport':
        param_list = []
        inst = So5LineupImport(self,param_list)
        self._add_to_query("so5LineupImports",_param_name,inst)
        self.value_so5LineupImports = inst
        return inst

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def url(self,_param_name:str = 'url'):
        inst = None
        self._add_to_query("url",_param_name)
        pass


class createSo5LineupImportsBatchPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_so5LineupImportsBatch:'So5LineupImportsBatch' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5LineupImportsBatch(self,_param_name:str = 'so5LineupImportsBatch') -> 'So5LineupImportsBatch':
        param_list = []
        inst = So5LineupImportsBatch(self,param_list)
        self._add_to_query("so5LineupImportsBatch",_param_name,inst)
        self.value_so5LineupImportsBatch = inst
        return inst


class createSo5UserGroupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,description = None,displayName = None,endGameWeek = None,gameMode = None,logoId = None,publiclyAccessible = None,so5LeaderboardType = None,startGameWeek = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('description',description)
        self._add_parameter('displayName',displayName)
        self._add_parameter('endGameWeek',endGameWeek)
        self._add_parameter('gameMode',gameMode)
        self._add_parameter('logoId',logoId)
        self._add_parameter('publiclyAccessible',publiclyAccessible)
        self._add_parameter('so5LeaderboardType',so5LeaderboardType)
        self._add_parameter('startGameWeek',startGameWeek)

class createSo5UserGroupPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_so5UserGroup:'So5UserGroup' = None
    value_userGroup:'UserGroupInterface' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5UserGroup(self,_param_name:str = 'so5UserGroup') -> 'So5UserGroup':
        param_list = []
        inst = So5UserGroup(self,param_list)
        self._add_to_query("so5UserGroup",_param_name,inst)
        self.value_so5UserGroup = inst
        return inst

    def userGroup(self,_param_name:str = 'userGroup') -> 'UserGroupInterface':
        param_list = []
        inst = UserGroupInterface(self,param_list)
        self._add_to_query("userGroup",_param_name,inst)
        self.value_userGroup = inst
        return inst


class createSubscriptionInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,interactionContext = None,subscribable:'SubscribableInput' = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('interactionContext',interactionContext)
        self._add_parameter('subscribable',subscribable)

class SubscriptionStats(GraphQLObject):
    value_currentUserSubscription:'EmailSubscription' = None
    value_id = None
    value_subscribersCount = None
    def currentUserSubscription(self,_param_name:str = 'currentUserSubscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("currentUserSubscription",_param_name,inst)
        self.value_currentUserSubscription = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def subscribersCount(self,_param_name:str = 'subscribersCount'):
        inst = None
        self._add_to_query("subscribersCount",_param_name)
        pass


class createSubscriptionPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_subscription:'EmailSubscription' = None
    value_subscriptionStats:'SubscriptionStats' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def subscription(self,_param_name:str = 'subscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("subscription",_param_name,inst)
        self.value_subscription = inst
        return inst

    def subscriptionStats(self,_param_name:str = 'subscriptionStats') -> 'SubscriptionStats':
        param_list = []
        inst = SubscriptionStats(self,param_list)
        self._add_to_query("subscriptionStats",_param_name,inst)
        self.value_subscriptionStats = inst
        return inst


class WalletInput(GraphQLInputObject):
    def __init__(self,backupPrivateKeyRecoveries:'BackupPrivateKeyRecoveryInput' = None,ethereumAddress = None,legacyBackupPrivateKeyRecovery = None,passwordEncryptedPrivateKey:'PasswordEncryptedPrivateKeyInput' = None,privateKeyRecovery:'PrivateKeyRecoveryInput' = None,starkKeyWithPrefix = None):
        self._add_parameter('backupPrivateKeyRecoveries',backupPrivateKeyRecoveries)
        self._add_parameter('ethereumAddress',ethereumAddress)
        self._add_parameter('legacyBackupPrivateKeyRecovery',legacyBackupPrivateKeyRecovery)
        self._add_parameter('passwordEncryptedPrivateKey',passwordEncryptedPrivateKey)
        self._add_parameter('privateKeyRecovery',privateKeyRecovery)
        self._add_parameter('starkKeyWithPrefix',starkKeyWithPrefix)

class createWalletInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,passwordHash = None,wallet:'WalletInput' = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('passwordHash',passwordHash)
        self._add_parameter('wallet',wallet)

class createWalletPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class createWireTransferDepositInput(GraphQLInputObject):
    def __init__(self,amounts:'AmountInput' = None,clientMutationId = None):
        self._add_parameter('amounts',amounts)
        self._add_parameter('clientMutationId',clientMutationId)

class createWireTransferDepositPayload(GraphQLObject):
    value_bankAccount = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_wireReference = None
    def bankAccount(self,_param_name:str = 'bankAccount'):
        inst = None
        self._add_to_query("bankAccount",_param_name)
        pass

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def wireReference(self,_param_name:str = 'wireReference'):
        inst = None
        self._add_to_query("wireReference",_param_name)
        pass


class createWithdrawalBankAccountInput(GraphQLInputObject):
    def __init__(self,accountIdentifier = None,bankAccountType = None,bankIdentifier = None,bankName = None,branchCode = None,clientMutationId = None,countryCode = None,ownerAddress:'BankAccountOwnerAddressInput' = None,ownerName = None):
        self._add_parameter('accountIdentifier',accountIdentifier)
        self._add_parameter('bankAccountType',bankAccountType)
        self._add_parameter('bankIdentifier',bankIdentifier)
        self._add_parameter('bankName',bankName)
        self._add_parameter('branchCode',branchCode)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('countryCode',countryCode)
        self._add_parameter('ownerAddress',ownerAddress)
        self._add_parameter('ownerName',ownerName)

class createWithdrawalBankAccountPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_mangopayBankAccount = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def mangopayBankAccount(self,_param_name:str = 'mangopayBankAccount'):
        inst = None
        self._add_to_query("mangopayBankAccount",_param_name)
        pass


class createWithdrawalInput(GraphQLInputObject):
    def __init__(self,agreedFeeAmount = None,amount = None,clientMutationId = None,dealId = None,signature = None,to = None):
        self._add_parameter('agreedFeeAmount',agreedFeeAmount)
        self._add_parameter('amount',amount)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('dealId',dealId)
        self._add_parameter('signature',signature)
        self._add_parameter('to',to)

class createWithdrawalPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_withdrawal:'Withdrawal' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def withdrawal(self,_param_name:str = 'withdrawal') -> 'Withdrawal':
        param_list = []
        inst = Withdrawal(self,param_list)
        self._add_to_query("withdrawal",_param_name,inst)
        self.value_withdrawal = inst
        return inst


class CumulativeLeaderboardRank(GraphQLObject):
    value_id = None
    value_user:'User' = None
    value_score = None
    value_rank = None
    value_lineups:'list[LineupInterface]' = None
    value_cumulativeLeaderboard:'CumulativeLeaderboard' = None
    value_projectedPrizeCredits = None
    value_projectedReward:'ProjectedReward' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def lineups(self,_param_name:str = 'lineups') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("lineups",_param_name,inst)
        self.value_lineups = inst
        return inst

    def cumulativeLeaderboard(self,_param_name:str = 'cumulativeLeaderboard') -> 'CumulativeLeaderboard':
        param_list = []
        inst = CumulativeLeaderboard(self,param_list)
        self._add_to_query("cumulativeLeaderboard",_param_name,inst)
        self.value_cumulativeLeaderboard = inst
        return inst

    def projectedPrizeCredits(self,_param_name:str = 'projectedPrizeCredits'):
        inst = None
        self._add_to_query("projectedPrizeCredits",_param_name)
        pass

    def projectedReward(self,_param_name:str = 'projectedReward') -> 'ProjectedReward':
        param_list = []
        inst = ProjectedReward(self,param_list)
        self._add_to_query("projectedReward",_param_name,inst)
        self.value_projectedReward = inst
        return inst


class CumulativeLeaderboardRankConnection(GraphQLObject):
    value_nodes:'list[CumulativeLeaderboardRank]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'CumulativeLeaderboardRank':
        param_list = []
        inst = CumulativeLeaderboardRank(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class IRLPrize(GraphQLObject):
    value_headlineText = None
    value_detailText = None
    value_type = None
    def headlineText(self,_param_name:str = 'headlineText'):
        inst = None
        self._add_to_query("headlineText",_param_name)
        pass

    def detailText(self,_param_name:str = 'detailText'):
        inst = None
        self._add_to_query("detailText",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class PrizeCreditsLevel(GraphQLObject):
    value__from:'PrizePoolPrizeLevelBoundary' = None
    value_to:'PrizePoolPrizeLevelBoundary' = None
    value_fromLineup:'CumulativeLeaderboardRank' = None
    value_toLineup:'CumulativeLeaderboardRank' = None
    value_prizeCredits = None
    value_irlPrizes:'list[IRLPrize]' = None
    def _from(self,_param_name:str = '_from') -> 'PrizePoolPrizeLevelBoundary':
        param_list = []
        inst = PrizePoolPrizeLevelBoundary(self,param_list)
        self._add_to_query("_from",_param_name,inst)
        self.value__from = inst
        return inst

    def to(self,_param_name:str = 'to') -> 'PrizePoolPrizeLevelBoundary':
        param_list = []
        inst = PrizePoolPrizeLevelBoundary(self,param_list)
        self._add_to_query("to",_param_name,inst)
        self.value_to = inst
        return inst

    def fromLineup(self,_param_name:str = 'fromLineup') -> 'CumulativeLeaderboardRank':
        param_list = []
        inst = CumulativeLeaderboardRank(self,param_list)
        self._add_to_query("fromLineup",_param_name,inst)
        self.value_fromLineup = inst
        return inst

    def toLineup(self,_param_name:str = 'toLineup') -> 'CumulativeLeaderboardRank':
        param_list = []
        inst = CumulativeLeaderboardRank(self,param_list)
        self._add_to_query("toLineup",_param_name,inst)
        self.value_toLineup = inst
        return inst

    def prizeCredits(self,_param_name:str = 'prizeCredits'):
        inst = None
        self._add_to_query("prizeCredits",_param_name)
        pass

    def irlPrizes(self,_param_name:str = 'irlPrizes') -> 'IRLPrize':
        param_list = []
        inst = IRLPrize(self,param_list)
        self._add_to_query("irlPrizes",_param_name,inst)
        self.value_irlPrizes = inst
        return inst


class CumulativePrizePoolPodiumPrize(GraphQLObject):
    value_rank = None
    value_cardRarity = None
    value_cardTier = None
    value_cards:'list[CardInPrizePool]' = None
    value_amountUSDCents = None
    value_amountCoins = None
    value_cashRewardOnly = None
    value_user:'User' = None
    value_cumulativeLeaderboardRank:'CumulativeLeaderboardRank' = None
    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def cardRarity(self,_param_name:str = 'cardRarity'):
        inst = None
        self._add_to_query("cardRarity",_param_name)
        pass

    def cardTier(self,_param_name:str = 'cardTier'):
        inst = None
        self._add_to_query("cardTier",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'CardInPrizePool':
        param_list = []
        inst = CardInPrizePool(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass

    def cashRewardOnly(self,_param_name:str = 'cashRewardOnly'):
        inst = None
        self._add_to_query("cashRewardOnly",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def cumulativeLeaderboardRank(self,_param_name:str = 'cumulativeLeaderboardRank') -> 'CumulativeLeaderboardRank':
        param_list = []
        inst = CumulativeLeaderboardRank(self,param_list)
        self._add_to_query("cumulativeLeaderboardRank",_param_name,inst)
        self.value_cumulativeLeaderboardRank = inst
        return inst


class CumulativePrizeLevel(GraphQLObject):
    value__from:'PrizePoolPrizeLevelBoundary' = None
    value_to:'PrizePoolPrizeLevelBoundary' = None
    value_cardRarity = None
    value_cardTier = None
    value_cards:'list[CardInPrizePool]' = None
    value_amountUSDCents = None
    value_amountCoins = None
    value_cashRewardOnly = None
    value_fromCumulativeLeaderboardRank:'CumulativeLeaderboardRank' = None
    value_toCumulativeLeaderboardRank:'CumulativeLeaderboardRank' = None
    def _from(self,_param_name:str = '_from') -> 'PrizePoolPrizeLevelBoundary':
        param_list = []
        inst = PrizePoolPrizeLevelBoundary(self,param_list)
        self._add_to_query("_from",_param_name,inst)
        self.value__from = inst
        return inst

    def to(self,_param_name:str = 'to') -> 'PrizePoolPrizeLevelBoundary':
        param_list = []
        inst = PrizePoolPrizeLevelBoundary(self,param_list)
        self._add_to_query("to",_param_name,inst)
        self.value_to = inst
        return inst

    def cardRarity(self,_param_name:str = 'cardRarity'):
        inst = None
        self._add_to_query("cardRarity",_param_name)
        pass

    def cardTier(self,_param_name:str = 'cardTier'):
        inst = None
        self._add_to_query("cardTier",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'CardInPrizePool':
        param_list = []
        inst = CardInPrizePool(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass

    def cashRewardOnly(self,_param_name:str = 'cashRewardOnly'):
        inst = None
        self._add_to_query("cashRewardOnly",_param_name)
        pass

    def fromCumulativeLeaderboardRank(self,_param_name:str = 'fromCumulativeLeaderboardRank') -> 'CumulativeLeaderboardRank':
        param_list = []
        inst = CumulativeLeaderboardRank(self,param_list)
        self._add_to_query("fromCumulativeLeaderboardRank",_param_name,inst)
        self.value_fromCumulativeLeaderboardRank = inst
        return inst

    def toCumulativeLeaderboardRank(self,_param_name:str = 'toCumulativeLeaderboardRank') -> 'CumulativeLeaderboardRank':
        param_list = []
        inst = CumulativeLeaderboardRank(self,param_list)
        self._add_to_query("toCumulativeLeaderboardRank",_param_name,inst)
        self.value_toCumulativeLeaderboardRank = inst
        return inst


class CumulativeLeaderboardPrizePool(GraphQLObject):
    value_commonCardsMaxThreshold = None
    value_commonCardsCount = None
    value_limitedCardsCount = None
    value_rareCardsCount = None
    value_superRareCardsCount = None
    value_uniqueCardsCount = None
    value_amountUSDCents = None
    value_amountCoins = None
    value_podium:'list[CumulativePrizePoolPodiumPrize]' = None
    value_participation:'list[CumulativePrizeLevel]' = None
    def commonCardsMaxThreshold(self,_param_name:str = 'commonCardsMaxThreshold'):
        inst = None
        self._add_to_query("commonCardsMaxThreshold",_param_name)
        pass

    def commonCardsCount(self,_param_name:str = 'commonCardsCount'):
        inst = None
        self._add_to_query("commonCardsCount",_param_name)
        pass

    def limitedCardsCount(self,_param_name:str = 'limitedCardsCount'):
        inst = None
        self._add_to_query("limitedCardsCount",_param_name)
        pass

    def rareCardsCount(self,_param_name:str = 'rareCardsCount'):
        inst = None
        self._add_to_query("rareCardsCount",_param_name)
        pass

    def superRareCardsCount(self,_param_name:str = 'superRareCardsCount'):
        inst = None
        self._add_to_query("superRareCardsCount",_param_name)
        pass

    def uniqueCardsCount(self,_param_name:str = 'uniqueCardsCount'):
        inst = None
        self._add_to_query("uniqueCardsCount",_param_name)
        pass

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass

    def podium(self,_param_name:str = 'podium') -> 'CumulativePrizePoolPodiumPrize':
        param_list = []
        inst = CumulativePrizePoolPodiumPrize(self,param_list)
        self._add_to_query("podium",_param_name,inst)
        self.value_podium = inst
        return inst

    def participation(self,_param_name:str = 'participation') -> 'CumulativePrizeLevel':
        param_list = []
        inst = CumulativePrizeLevel(self,param_list)
        self._add_to_query("participation",_param_name,inst)
        self.value_participation = inst
        return inst


class CumulativeLeaderboard(GraphQLObject):
    value_slug = None
    value_displayName = None
    value_displayNameWithoutRarity = None
    value_iconImageUrl = None
    value_startGameWeek = None
    value_endGameWeek = None
    value_currentCumulativeGameWeek = None
    value_cumulativeLeaderboardRanks:'CumulativeLeaderboardRankConnection' = None
    value_myCumulativeLeaderboardRank:'CumulativeLeaderboardRank' = None
    value_prizeLevels:'list[PrizeCreditsLevel]' = None
    value_prizePool:'LeaderboardPrizePool' = None
    value_cumulativePrizePool:'CumulativeLeaderboardPrizePool' = None
    value_participantsCount = None
    value_leaderboardRarity = None
    value_myLineups:'list[LineupInterface]' = None
    value_webUrl = None
    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def displayNameWithoutRarity(self,_param_name:str = 'displayNameWithoutRarity'):
        inst = None
        self._add_to_query("displayNameWithoutRarity",_param_name)
        pass

    def iconImageUrl(self,_param_name:str = 'iconImageUrl'):
        inst = None
        self._add_to_query("iconImageUrl",_param_name)
        pass

    def startGameWeek(self,_param_name:str = 'startGameWeek'):
        inst = None
        self._add_to_query("startGameWeek",_param_name)
        pass

    def endGameWeek(self,_param_name:str = 'endGameWeek'):
        inst = None
        self._add_to_query("endGameWeek",_param_name)
        pass

    def currentCumulativeGameWeek(self,_param_name:str = 'currentCumulativeGameWeek'):
        inst = None
        self._add_to_query("currentCumulativeGameWeek",_param_name)
        pass

    def cumulativeLeaderboardRanks(self,first,after,_param_name:str = 'cumulativeLeaderboardRanks') -> 'CumulativeLeaderboardRankConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        inst = CumulativeLeaderboardRankConnection(self,param_list)
        self._add_to_query("cumulativeLeaderboardRanks",_param_name,inst)
        self.value_cumulativeLeaderboardRanks = inst
        return inst

    def myCumulativeLeaderboardRank(self,_param_name:str = 'myCumulativeLeaderboardRank') -> 'CumulativeLeaderboardRank':
        param_list = []
        inst = CumulativeLeaderboardRank(self,param_list)
        self._add_to_query("myCumulativeLeaderboardRank",_param_name,inst)
        self.value_myCumulativeLeaderboardRank = inst
        return inst

    def prizeLevels(self,_param_name:str = 'prizeLevels') -> 'PrizeCreditsLevel':
        param_list = []
        inst = PrizeCreditsLevel(self,param_list)
        self._add_to_query("prizeLevels",_param_name,inst)
        self.value_prizeLevels = inst
        return inst

    def prizePool(self,_param_name:str = 'prizePool') -> 'LeaderboardPrizePool':
        param_list = []
        inst = LeaderboardPrizePool(self,param_list)
        self._add_to_query("prizePool",_param_name,inst)
        self.value_prizePool = inst
        return inst

    def cumulativePrizePool(self,_param_name:str = 'cumulativePrizePool') -> 'CumulativeLeaderboardPrizePool':
        param_list = []
        inst = CumulativeLeaderboardPrizePool(self,param_list)
        self._add_to_query("cumulativePrizePool",_param_name,inst)
        self.value_cumulativePrizePool = inst
        return inst

    def participantsCount(self,_param_name:str = 'participantsCount'):
        inst = None
        self._add_to_query("participantsCount",_param_name)
        pass

    def leaderboardRarity(self,_param_name:str = 'leaderboardRarity'):
        inst = None
        self._add_to_query("leaderboardRarity",_param_name)
        pass

    def myLineups(self,_param_name:str = 'myLineups') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("myLineups",_param_name,inst)
        self.value_myLineups = inst
        return inst

    def webUrl(self,_param_name:str = 'webUrl'):
        inst = None
        self._add_to_query("webUrl",_param_name)
        pass


class deactivateWalletRecoveryInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,destination = None,method = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('destination',destination)
        self._add_parameter('method',method)

class deactivateWalletRecoveryPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class TitleBodyNotificationMobileRendering(GraphQLObject):
    value_body = None
    value_deepLinkUrl = None
    value_iconUrl = None
    value_title = None
    def body(self,_param_name:str = 'body'):
        inst = None
        self._add_to_query("body",_param_name)
        pass

    def deepLinkUrl(self,_param_name:str = 'deepLinkUrl'):
        inst = None
        self._add_to_query("deepLinkUrl",_param_name)
        pass

    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class TitleBodyNotificationRendering(GraphQLObject):
    value_mobile:'TitleBodyNotificationMobileRendering' = None
    def mobile(self,_param_name:str = 'mobile') -> 'TitleBodyNotificationMobileRendering':
        param_list = []
        inst = TitleBodyNotificationMobileRendering(self,param_list)
        self._add_to_query("mobile",_param_name,inst)
        self.value_mobile = inst
        return inst


class DecisiveActionNotification(GraphQLObject):
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_rendering:'TitleBodyNotificationRendering' = None
    value_sport = None
    value_user:'CurrentUser' = None
    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def rendering(self,_param_name:str = 'rendering') -> 'TitleBodyNotificationRendering':
        param_list = []
        inst = TitleBodyNotificationRendering(self,param_list)
        self._add_to_query("rendering",_param_name,inst)
        self.value_rendering = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class DecisivePurchaseNotification(GraphQLObject):
    value_card:'AnyCardInterface' = None
    value_createdAt = None
    value_game:'AnyGameInterface' = None
    value_id = None
    value_name = None
    value_read = None
    value_rendering:'TitleBodyNotificationRendering' = None
    value_reward:'AnyRewardInterface' = None
    value_sport = None
    value_user:'CurrentUser' = None
    def card(self,_param_name:str = 'card') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'AnyGameInterface':
        param_list = []
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def rendering(self,_param_name:str = 'rendering') -> 'TitleBodyNotificationRendering':
        param_list = []
        inst = TitleBodyNotificationRendering(self,param_list)
        self._add_to_query("rendering",_param_name,inst)
        self.value_rendering = inst
        return inst

    def reward(self,_param_name:str = 'reward') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("reward",_param_name,inst)
        self.value_reward = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class DeckInterface(GraphQLObject):
    value_cards:'CardConnection' = None
    value_cardsCount = None
    value_deckCards:'DeckCardConnection' = None
    value_deckCardsCount = None
    value_firstCard:'Card' = None
    value_id = None
    value_slug = None
    value_user:'User' = None
    def cards(self,after,before,first,last,_param_name:str = 'cards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = CardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def cardsCount(self,_param_name:str = 'cardsCount'):
        inst = None
        self._add_to_query("cardsCount",_param_name)
        pass

    def deckCards(self,after,before,first,last,_param_name:str = 'deckCards') -> 'DeckCardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = DeckCardConnection(self,param_list)
        self._add_to_query("deckCards",_param_name,inst)
        self.value_deckCards = inst
        return inst

    def deckCardsCount(self,_param_name:str = 'deckCardsCount'):
        inst = None
        self._add_to_query("deckCardsCount",_param_name)
        pass

    def firstCard(self,_param_name:str = 'firstCard') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("firstCard",_param_name,inst)
        self.value_firstCard = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class declareFootballManagerTaskInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,footballManagerTaskId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('footballManagerTaskId',footballManagerTaskId)

class declareFootballManagerTaskPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_footballManagerTask:'FootballManagerTask' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def footballManagerTask(self,_param_name:str = 'footballManagerTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("footballManagerTask",_param_name,inst)
        self.value_footballManagerTask = inst
        return inst


class declareManagerProgressionTaskInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,name = None,sport = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('name',name)
        self._add_parameter('sport',sport)

class declareManagerProgressionTaskPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_managerProgressionTask:'ManagerProgressionTask' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def managerProgressionTask(self,_param_name:str = 'managerProgressionTask') -> 'ManagerProgressionTask':
        param_list = []
        inst = ManagerProgressionTask(self,param_list)
        self._add_to_query("managerProgressionTask",_param_name,inst)
        self.value_managerProgressionTask = inst
        return inst


class declineSo5LineupImportsBatchInput(GraphQLInputObject):
    def __init__(self,batchId = None,clientMutationId = None):
        self._add_parameter('batchId',batchId)
        self._add_parameter('clientMutationId',clientMutationId)

class declineSo5LineupImportsBatchPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class declineSo5NoCardLineupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5NoCardLineupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5NoCardLineupId',so5NoCardLineupId)

class declineSo5NoCardLineupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5NoCardLineup:'So5NoCardLineup' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5NoCardLineup(self,_param_name:str = 'so5NoCardLineup') -> 'So5NoCardLineup':
        param_list = []
        inst = So5NoCardLineup(self,param_list)
        self._add_to_query("so5NoCardLineup",_param_name,inst)
        self.value_so5NoCardLineup = inst
        return inst


class deleteDeckInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,deckSlug = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('deckSlug',deckSlug)

class deleteDeckPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_deck:'Deck' = None
    value_errors:'list[UserError]' = None
    value_userSportProfile = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def deck(self,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def userSportProfile(self,_param_name:str = 'userSportProfile'):
        inst = None
        self._add_to_query("userSportProfile",_param_name)
        pass


class deletePostalAddressInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class deletePostalAddressPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class deleteSo5LineupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5LineupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5LineupId',so5LineupId)

class deleteSo5LineupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5LeaderboardContender:'So5LeaderboardContender' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5Leaderboard(self,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5LeaderboardContender(self,_param_name:str = 'so5LeaderboardContender') -> 'So5LeaderboardContender':
        param_list = []
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("so5LeaderboardContender",_param_name,inst)
        self.value_so5LeaderboardContender = inst
        return inst


class deleteSo5UserGroupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5UserGroupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5UserGroupId',so5UserGroupId)

class deleteSo5UserGroupPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class deleteSubscriptionInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,slug = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('slug',slug)

class deleteSubscriptionPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_subscribable = None
    value_subscription:'EmailSubscription' = None
    value_subscriptionStats:'SubscriptionStats' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def subscribable(self,_param_name:str = 'subscribable'):
        inst = None
        self._add_to_query("subscribable",_param_name)
        pass

    def subscription(self,_param_name:str = 'subscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("subscription",_param_name,inst)
        self.value_subscription = inst
        return inst

    def subscriptionStats(self,_param_name:str = 'subscriptionStats') -> 'SubscriptionStats':
        param_list = []
        inst = SubscriptionStats(self,param_list)
        self._add_to_query("subscriptionStats",_param_name,inst)
        self.value_subscriptionStats = inst
        return inst


class deleteUserSo5LineupsInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5LeagueIds = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5LeagueIds',so5LeagueIds)

class deleteUserSo5LineupsPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5Fixture:'So5Fixture' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst


class deleteWithdrawalBankAccountInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,mangopayBankAccountId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('mangopayBankAccountId',mangopayBankAccountId)

class deleteWithdrawalBankAccountPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class VariantStockCount(GraphQLObject):
    value_currentStockCount = None
    value_initialStockCount = None
    value_size = None
    value_variant = None
    def currentStockCount(self,_param_name:str = 'currentStockCount'):
        inst = None
        self._add_to_query("currentStockCount",_param_name)
        pass

    def initialStockCount(self,_param_name:str = 'initialStockCount'):
        inst = None
        self._add_to_query("initialStockCount",_param_name)
        pass

    def size(self,_param_name:str = 'size'):
        inst = None
        self._add_to_query("size",_param_name)
        pass

    def variant(self,_param_name:str = 'variant'):
        inst = None
        self._add_to_query("variant",_param_name)
        pass


class DeliverableWithCustomVariantShopItem(GraphQLObject):
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_createdAt = None
    value_currentStockCount = None
    value_description = None
    value_disabled = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_initialStockCount = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    value_variantStockCounts:'list[VariantStockCount]' = None
    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def currentStockCount(self,_param_name:str = 'currentStockCount'):
        inst = None
        self._add_to_query("currentStockCount",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def initialStockCount(self,_param_name:str = 'initialStockCount'):
        inst = None
        self._add_to_query("initialStockCount",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass

    def variantStockCounts(self,_param_name:str = 'variantStockCounts') -> 'VariantStockCount':
        param_list = []
        inst = VariantStockCount(self,param_list)
        self._add_to_query("variantStockCounts",_param_name,inst)
        self.value_variantStockCounts = inst
        return inst


class DeliverableWithNoVariantShopItem(GraphQLObject):
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_createdAt = None
    value_currentStockCount = None
    value_description = None
    value_disabled = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_initialStockCount = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def currentStockCount(self,_param_name:str = 'currentStockCount'):
        inst = None
        self._add_to_query("currentStockCount",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def initialStockCount(self,_param_name:str = 'initialStockCount'):
        inst = None
        self._add_to_query("initialStockCount",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass


class depositWithApplePayInput(GraphQLInputObject):
    def __init__(self,amounts:'AmountInput' = None,applePaymentData:'ApplePayPaymentDataInput' = None,clientMutationId = None):
        self._add_parameter('amounts',amounts)
        self._add_parameter('applePaymentData',applePaymentData)
        self._add_parameter('clientMutationId',clientMutationId)

class depositWithApplePayPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_deposit:'PendingDeposit' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def deposit(self,_param_name:str = 'deposit') -> 'PendingDeposit':
        param_list = []
        inst = PendingDeposit(self,param_list)
        self._add_to_query("deposit",_param_name,inst)
        self.value_deposit = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class destroyAccountInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,password = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('password',password)

class destroyAccountPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class destroyReferralInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,referralId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('referralId',referralId)

class destroyReferralPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class detachPaymentMethodInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,paymentMethod = None,provider = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('paymentMethod',paymentMethod)
        self._add_parameter('provider',provider)

class detachPaymentMethodPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class disable2faInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,otpAttempt = None,password = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('otpAttempt',otpAttempt)
        self._add_parameter('password',password)

class disable2faPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class disconnectOmniauthProviderInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,email = None,provider = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('email',email)
        self._add_parameter('provider',provider)

class disconnectOmniauthProviderPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_userProfile:'UserProfile' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def userProfile(self,_param_name:str = 'userProfile') -> 'UserProfile':
        param_list = []
        inst = UserProfile(self,param_list)
        self._add_to_query("userProfile",_param_name,inst)
        self.value_userProfile = inst
        return inst


class DraftableAppearance(GraphQLObject):
    value_id = None
    value_team:'SportsTeamInterface' = None
    value_player:'PlayerInterface' = None
    value_bonus = None
    value_season = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'SportsTeamInterface':
        param_list = []
        inst = SportsTeamInterface(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def player(self,_param_name:str = 'player') -> 'PlayerInterface':
        param_list = []
        inst = PlayerInterface(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def bonus(self,_param_name:str = 'bonus'):
        inst = None
        self._add_to_query("bonus",_param_name)
        pass

    def season(self,_param_name:str = 'season'):
        inst = None
        self._add_to_query("season",_param_name)
        pass


class editDeckInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,deckSlug = None,name = None,newIndex = None,visible = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('deckSlug',deckSlug)
        self._add_parameter('name',name)
        self._add_parameter('newIndex',newIndex)
        self._add_parameter('visible',visible)

class editDeckPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_deck:'Deck' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def deck(self,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class EligibleCardsSort(GraphQLInputObject):
    def __init__(self,direction = None,type = None):
        self._add_parameter('direction',direction)
        self._add_parameter('type',type)

class EmoteSentActivity(GraphQLObject):
    value_activity:'ActivitiesInterface' = None
    value_celebratable = None
    value_createdAt = None
    value_emote = None
    value_id = None
    value_reactions:'list[ActivityReactionType]' = None
    value_rivalsManager:'FootballRivalsManager' = None
    def activity(self,_param_name:str = 'activity') -> 'ActivitiesInterface':
        param_list = []
        inst = ActivitiesInterface(self,param_list)
        self._add_to_query("activity",_param_name,inst)
        self.value_activity = inst
        return inst

    def celebratable(self,_param_name:str = 'celebratable'):
        inst = None
        self._add_to_query("celebratable",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def emote(self,_param_name:str = 'emote'):
        inst = None
        self._add_to_query("emote",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def reactions(self,_param_name:str = 'reactions') -> 'ActivityReactionType':
        param_list = []
        inst = ActivityReactionType(self,param_list)
        self._add_to_query("reactions",_param_name,inst)
        self.value_reactions = inst
        return inst

    def rivalsManager(self,_param_name:str = 'rivalsManager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("rivalsManager",_param_name,inst)
        self.value_rivalsManager = inst
        return inst


class enable2faInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,otpAttempt = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('otpAttempt',otpAttempt)

class enable2faPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_otpBackupCodes = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def otpBackupCodes(self,_param_name:str = 'otpBackupCodes'):
        inst = None
        self._add_to_query("otpBackupCodes",_param_name)
        pass


class EthDeposit(GraphQLObject):
    value_assetType = None
    value_starkKey = None
    value_vaultId = None
    value_weiAmount = None
    def assetType(self,_param_name:str = 'assetType'):
        inst = None
        self._add_to_query("assetType",_param_name)
        pass

    def starkKey(self,_param_name:str = 'starkKey'):
        inst = None
        self._add_to_query("starkKey",_param_name)
        pass

    def vaultId(self,_param_name:str = 'vaultId'):
        inst = None
        self._add_to_query("vaultId",_param_name)
        pass

    def weiAmount(self,_param_name:str = 'weiAmount'):
        inst = None
        self._add_to_query("weiAmount",_param_name)
        pass


class EthereumAccount(GraphQLObject):
    value_address = None
    value_id = None
    value_migratorApproved = None
    def address(self,_param_name:str = 'address'):
        inst = None
        self._add_to_query("address",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def migratorApproved(self,_param_name:str = 'migratorApproved'):
        inst = None
        self._add_to_query("migratorApproved",_param_name)
        pass


class ExperienceDeliverableItem(GraphQLObject):
    value_id = None
    value_mandatoryWearableSizeInput = None
    value_name = None
    value_slug = None
    value_sport = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mandatoryWearableSizeInput(self,_param_name:str = 'mandatoryWearableSizeInput'):
        inst = None
        self._add_to_query("mandatoryWearableSizeInput",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class ExternalDepositNotification(GraphQLObject):
    value_amount = None
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_sport = None
    value_status = None
    value_user:'CurrentUser' = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class ExtraSwapShopItem(GraphQLObject):
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_createdAt = None
    value_description = None
    value_disabled = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5Leaderboards:'list[So5Leaderboard]' = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def so5Leaderboard(self,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5Leaderboards(self,_param_name:str = 'so5Leaderboards') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboards",_param_name,inst)
        self.value_so5Leaderboards = inst
        return inst

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass


class FaceLandmark(GraphQLObject):
    value_type = None
    value_x = None
    value_xInPx = None
    value_y = None
    value_yInPx = None
    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass

    def x(self,_param_name:str = 'x'):
        inst = None
        self._add_to_query("x",_param_name)
        pass

    def xInPx(self,_param_name:str = 'xInPx'):
        inst = None
        self._add_to_query("xInPx",_param_name)
        pass

    def y(self,_param_name:str = 'y'):
        inst = None
        self._add_to_query("y",_param_name)
        pass

    def yInPx(self,_param_name:str = 'yInPx'):
        inst = None
        self._add_to_query("yInPx",_param_name)
        pass


class FeaturedLeagues(GraphQLObject):
    value_latest:'So5League' = None
    value_upcoming:'So5League' = None
    def latest(self,_param_name:str = 'latest') -> 'So5League':
        param_list = []
        inst = So5League(self,param_list)
        self._add_to_query("latest",_param_name,inst)
        self.value_latest = inst
        return inst

    def upcoming(self,_param_name:str = 'upcoming') -> 'So5League':
        param_list = []
        inst = So5League(self,param_list)
        self._add_to_query("upcoming",_param_name,inst)
        self.value_upcoming = inst
        return inst


class fetchAuthorizationStatusInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,preAuthorizationId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('preAuthorizationId',preAuthorizationId)

class fetchAuthorizationStatusPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_message = None
    value_status = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def message(self,_param_name:str = 'message'):
        inst = None
        self._add_to_query("message",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass


class fetchEncryptedPrivateKeyInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,otpAttempt = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('otpAttempt',otpAttempt)

class fetchEncryptedPrivateKeyPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_sorarePrivateKey:'SorarePrivateKey' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def sorarePrivateKey(self,_param_name:str = 'sorarePrivateKey') -> 'SorarePrivateKey':
        param_list = []
        inst = SorarePrivateKey(self,param_list)
        self._add_to_query("sorarePrivateKey",_param_name,inst)
        self.value_sorarePrivateKey = inst
        return inst


class fetchTransactionStatusInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,transactionId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('transactionId',transactionId)

class fetchTransactionStatusPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_message = None
    value_status = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def message(self,_param_name:str = 'message'):
        inst = None
        self._add_to_query("message",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass


class FiatWalletAccount(GraphQLObject):
    value_availableBalance = None
    value_countryOfResidence = None
    value_countryOfResidenceCode = None
    value_currency = None
    value_depositBankAccount = None
    value_dob = None
    value_firstName = None
    value_id = None
    value_kycRefusedReason = None
    value_kycStatus = None
    value_lastName = None
    value_nationality = None
    value_nationalityCode = None
    value_state = None
    value_status = None
    value_totalBalance = None
    value_withdrawalBankAccounts:'BankAccountConnection' = None
    def availableBalance(self,_param_name:str = 'availableBalance'):
        inst = None
        self._add_to_query("availableBalance",_param_name)
        pass

    def countryOfResidence(self,_param_name:str = 'countryOfResidence'):
        inst = None
        self._add_to_query("countryOfResidence",_param_name)
        pass

    def countryOfResidenceCode(self,_param_name:str = 'countryOfResidenceCode'):
        inst = None
        self._add_to_query("countryOfResidenceCode",_param_name)
        pass

    def currency(self,_param_name:str = 'currency'):
        inst = None
        self._add_to_query("currency",_param_name)
        pass

    def depositBankAccount(self,_param_name:str = 'depositBankAccount'):
        inst = None
        self._add_to_query("depositBankAccount",_param_name)
        pass

    def dob(self,_param_name:str = 'dob'):
        inst = None
        self._add_to_query("dob",_param_name)
        pass

    def firstName(self,_param_name:str = 'firstName'):
        inst = None
        self._add_to_query("firstName",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def kycRefusedReason(self,_param_name:str = 'kycRefusedReason'):
        inst = None
        self._add_to_query("kycRefusedReason",_param_name)
        pass

    def kycStatus(self,_param_name:str = 'kycStatus'):
        inst = None
        self._add_to_query("kycStatus",_param_name)
        pass

    def lastName(self,_param_name:str = 'lastName'):
        inst = None
        self._add_to_query("lastName",_param_name)
        pass

    def nationality(self,_param_name:str = 'nationality'):
        inst = None
        self._add_to_query("nationality",_param_name)
        pass

    def nationalityCode(self,_param_name:str = 'nationalityCode'):
        inst = None
        self._add_to_query("nationalityCode",_param_name)
        pass

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def totalBalance(self,_param_name:str = 'totalBalance'):
        inst = None
        self._add_to_query("totalBalance",_param_name)
        pass

    def withdrawalBankAccounts(self,after,before,first,last,_param_name:str = 'withdrawalBankAccounts') -> 'BankAccountConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = BankAccountConnection(self,param_list)
        self._add_to_query("withdrawalBankAccounts",_param_name,inst)
        self.value_withdrawalBankAccounts = inst
        return inst


class FirstRivalsLineupSubmittedActivity(GraphQLObject):
    value_celebratable = None
    value_createdAt = None
    value_id = None
    value_lineup:'FootballRivalsLineup' = None
    value_reactions:'list[ActivityReactionType]' = None
    value_socialPictureUrls:'SocialPictureDerivative' = None
    def celebratable(self,_param_name:str = 'celebratable'):
        inst = None
        self._add_to_query("celebratable",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def reactions(self,_param_name:str = 'reactions') -> 'ActivityReactionType':
        param_list = []
        inst = ActivityReactionType(self,param_list)
        self._add_to_query("reactions",_param_name,inst)
        self.value_reactions = inst
        return inst

    def socialPictureUrls(self,_param_name:str = 'socialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("socialPictureUrls",_param_name,inst)
        self.value_socialPictureUrls = inst
        return inst


class FootballContestantType(GraphQLObject):
    value_gamesDrawn = None
    value_gamesLost = None
    value_gamesPlayed = None
    value_gamesWon = None
    value_goalsAgainst = None
    value_goalsFor = None
    value_id = None
    value_matchesDrawn = None
    value_matchesLost = None
    value_matchesPlayed = None
    value_matchesWon = None
    value_points = None
    value_rank = None
    value_rankStatus = None
    value_rankType = None
    value_team:'TeamInterface' = None
    def gamesDrawn(self,_param_name:str = 'gamesDrawn'):
        inst = None
        self._add_to_query("gamesDrawn",_param_name)
        pass

    def gamesLost(self,_param_name:str = 'gamesLost'):
        inst = None
        self._add_to_query("gamesLost",_param_name)
        pass

    def gamesPlayed(self,_param_name:str = 'gamesPlayed'):
        inst = None
        self._add_to_query("gamesPlayed",_param_name)
        pass

    def gamesWon(self,_param_name:str = 'gamesWon'):
        inst = None
        self._add_to_query("gamesWon",_param_name)
        pass

    def goalsAgainst(self,_param_name:str = 'goalsAgainst'):
        inst = None
        self._add_to_query("goalsAgainst",_param_name)
        pass

    def goalsFor(self,_param_name:str = 'goalsFor'):
        inst = None
        self._add_to_query("goalsFor",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def matchesDrawn(self,_param_name:str = 'matchesDrawn'):
        inst = None
        self._add_to_query("matchesDrawn",_param_name)
        pass

    def matchesLost(self,_param_name:str = 'matchesLost'):
        inst = None
        self._add_to_query("matchesLost",_param_name)
        pass

    def matchesPlayed(self,_param_name:str = 'matchesPlayed'):
        inst = None
        self._add_to_query("matchesPlayed",_param_name)
        pass

    def matchesWon(self,_param_name:str = 'matchesWon'):
        inst = None
        self._add_to_query("matchesWon",_param_name)
        pass

    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def rankStatus(self,_param_name:str = 'rankStatus'):
        inst = None
        self._add_to_query("rankStatus",_param_name)
        pass

    def rankType(self,_param_name:str = 'rankType'):
        inst = None
        self._add_to_query("rankType",_param_name)
        pass

    def team(self,_param_name:str = 'team') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst


class FootballManagerTaskContentTile(GraphQLObject):
    value_color = None
    value_footballManagerTask:'FootballManagerTask' = None
    value_headline = None
    value_id = None
    value_title = None
    value_type = None
    def color(self,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def footballManagerTask(self,_param_name:str = 'footballManagerTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("footballManagerTask",_param_name,inst)
        self.value_footballManagerTask = inst
        return inst

    def headline(self,_param_name:str = 'headline'):
        inst = None
        self._add_to_query("headline",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class FootballRivalLeaderboardInterface(GraphQLObject):
    value_endDate = None
    value_id = None
    value_rankingsCount = None
    value_season:'FootballRivalsSeason' = None
    def endDate(self,_param_name:str = 'endDate'):
        inst = None
        self._add_to_query("endDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def rankingsCount(self,_param_name:str = 'rankingsCount'):
        inst = None
        self._add_to_query("rankingsCount",_param_name)
        pass

    def season(self,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst


class FootballRivalLeaderboardRankingInterface(GraphQLObject):
    value_cumulatedScoreDifference = None
    value_id = None
    value_points = None
    value_ranking = None
    value_reward:'AnyRewardInterface' = None
    value_season:'FootballRivalsSeason' = None
    def cumulatedScoreDifference(self,_param_name:str = 'cumulatedScoreDifference'):
        inst = None
        self._add_to_query("cumulatedScoreDifference",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def points(self,_param_name:str = 'points'):
        inst = None
        self._add_to_query("points",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def reward(self,_param_name:str = 'reward') -> 'AnyRewardInterface':
        param_list = []
        inst = AnyRewardInterface(self,param_list)
        self._add_to_query("reward",_param_name,inst)
        self.value_reward = inst
        return inst

    def season(self,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst


class FootballRivalsAggregatedArenaStory(GraphQLObject):
    value_challenges:'list[FootballRivalsChallenge]' = None
    value_id = None
    value_newPoints = None
    value_newRanking = None
    value_previousPoints = None
    value_previousRanking = None
    value_read = None
    def challenges(self,_param_name:str = 'challenges') -> 'FootballRivalsChallenge':
        param_list = []
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("challenges",_param_name,inst)
        self.value_challenges = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def newPoints(self,_param_name:str = 'newPoints'):
        inst = None
        self._add_to_query("newPoints",_param_name)
        pass

    def newRanking(self,_param_name:str = 'newRanking'):
        inst = None
        self._add_to_query("newRanking",_param_name)
        pass

    def previousPoints(self,_param_name:str = 'previousPoints'):
        inst = None
        self._add_to_query("previousPoints",_param_name)
        pass

    def previousRanking(self,_param_name:str = 'previousRanking'):
        inst = None
        self._add_to_query("previousRanking",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass


class FootballRivalsAppearanceInput(GraphQLInputObject):
    def __init__(self,captain = None,draftableObjectId = None):
        self._add_parameter('captain',captain)
        self._add_parameter('draftableObjectId',draftableObjectId)

class footballRivalsAppearanceSubstituteInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,newAppearance:'FootballRivalsAppearanceInput' = None,previousAppearanceId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('newAppearance',newAppearance)
        self._add_parameter('previousAppearanceId',previousAppearanceId)

class footballRivalsAppearanceSubstitutePayload(GraphQLObject):
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    value_lineup:'FootballRivalsLineup' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def lineup(self,_param_name:str = 'lineup') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst


class footballRivalsArenaRequestCreateInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,lineupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('lineupId',lineupId)

class footballRivalsArenaRequestCreatePayload(GraphQLObject):
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    value_game:'FootballRivalsGame' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst


class footballRivalsArenaTicketClaimInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class footballRivalsArenaTicketClaimPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class FootballRivalsChallengeContentTile(GraphQLObject):
    value_challenge:'FootballRivalsChallenge' = None
    value_color = None
    value_headline = None
    value_id = None
    value_title = None
    value_type = None
    def challenge(self,_param_name:str = 'challenge') -> 'FootballRivalsChallenge':
        param_list = []
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("challenge",_param_name,inst)
        self.value_challenge = inst
        return inst

    def color(self,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def headline(self,_param_name:str = 'headline'):
        inst = None
        self._add_to_query("headline",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class FootballRivalsFriendlyChallengerSection(GraphQLObject):
    value_pictureUrl = None
    value_title = None
    value_type = None
    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class FootballRivalsConfig(GraphQLObject):
    value_eloGroups:'list[FootballRivalsEloGroup]' = None
    value_extraArenaTicketsDrop = None
    value_friendlyChallengerSections:'list[FootballRivalsFriendlyChallengerSection]' = None
    value_id = None
    value_onboardingFeaturedGamePictureUrl = None
    value_unlockedArenaTicketsDrop = None
    def eloGroups(self,_param_name:str = 'eloGroups') -> 'FootballRivalsEloGroup':
        param_list = []
        inst = FootballRivalsEloGroup(self,param_list)
        self._add_to_query("eloGroups",_param_name,inst)
        self.value_eloGroups = inst
        return inst

    def extraArenaTicketsDrop(self,_param_name:str = 'extraArenaTicketsDrop'):
        inst = None
        self._add_to_query("extraArenaTicketsDrop",_param_name)
        pass

    def friendlyChallengerSections(self,_param_name:str = 'friendlyChallengerSections') -> 'FootballRivalsFriendlyChallengerSection':
        param_list = []
        inst = FootballRivalsFriendlyChallengerSection(self,param_list)
        self._add_to_query("friendlyChallengerSections",_param_name,inst)
        self.value_friendlyChallengerSections = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def onboardingFeaturedGamePictureUrl(self,_param_name:str = 'onboardingFeaturedGamePictureUrl'):
        inst = None
        self._add_to_query("onboardingFeaturedGamePictureUrl",_param_name)
        pass

    def unlockedArenaTicketsDrop(self,_param_name:str = 'unlockedArenaTicketsDrop'):
        inst = None
        self._add_to_query("unlockedArenaTicketsDrop",_param_name)
        pass


class FootballRivalsDraftableCard(GraphQLObject):
    value_canSubInUntil = None
    value_capValue = None
    value_card:'Card' = None
    value_id = None
    value_lastFifteenAverageScore = None
    value_licensed = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_positions = None
    value_power = None
    value_so5Score:'So5Score' = None
    def canSubInUntil(self,_param_name:str = 'canSubInUntil'):
        inst = None
        self._add_to_query("canSubInUntil",_param_name)
        pass

    def capValue(self,_param_name:str = 'capValue'):
        inst = None
        self._add_to_query("capValue",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastFifteenAverageScore(self,_param_name:str = 'lastFifteenAverageScore'):
        inst = None
        self._add_to_query("lastFifteenAverageScore",_param_name)
        pass

    def licensed(self,_param_name:str = 'licensed'):
        inst = None
        self._add_to_query("licensed",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def power(self,_param_name:str = 'power'):
        inst = None
        self._add_to_query("power",_param_name)
        pass

    def so5Score(self,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst


class FootballRivalsDraftablePlayer(GraphQLObject):
    value_canSubInUntil = None
    value_capValue = None
    value_id = None
    value_lastFifteenAverageScore = None
    value_licensed = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_position = None
    value_positions = None
    value_so5Score:'So5Score' = None
    def canSubInUntil(self,_param_name:str = 'canSubInUntil'):
        inst = None
        self._add_to_query("canSubInUntil",_param_name)
        pass

    def capValue(self,_param_name:str = 'capValue'):
        inst = None
        self._add_to_query("capValue",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastFifteenAverageScore(self,_param_name:str = 'lastFifteenAverageScore'):
        inst = None
        self._add_to_query("lastFifteenAverageScore",_param_name)
        pass

    def licensed(self,_param_name:str = 'licensed'):
        inst = None
        self._add_to_query("licensed",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def positions(self,_param_name:str = 'positions'):
        inst = None
        self._add_to_query("positions",_param_name)
        pass

    def so5Score(self,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst


class FootballRivalsFeaturedGame(GraphQLObject):
    value_color = None
    value_featuredJoinSecret = None
    value_featuredManager:'FootballRivalsManager' = None
    value_game:'FootballRivalsGame' = None
    value_id = None
    value_pictureUrl = None
    value_title = None
    def color(self,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def featuredJoinSecret(self,_param_name:str = 'featuredJoinSecret'):
        inst = None
        self._add_to_query("featuredJoinSecret",_param_name)
        pass

    def featuredManager(self,_param_name:str = 'featuredManager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("featuredManager",_param_name,inst)
        self.value_featuredManager = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class FootballRivalsGameContentTile(GraphQLObject):
    value_color = None
    value_game:'FootballRivalsGame' = None
    value_headline = None
    value_id = None
    value_title = None
    value_type = None
    def color(self,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def headline(self,_param_name:str = 'headline'):
        inst = None
        self._add_to_query("headline",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class footballRivalsGameMarkArenaStoriesAsReadInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class footballRivalsGameMarkArenaStoriesAsReadPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class footballRivalsGameMarkPostGameStoriesAsReadInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,onlyArena = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('onlyArena',onlyArena)

class footballRivalsGameMarkPostGameStoriesAsReadPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class footballRivalsGameMarkPostGameStoryAsReadInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,gameId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('gameId',gameId)

class footballRivalsGameMarkPostGameStoryAsReadPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    value_game:'FootballRivalsGame' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst


class FootballRivalsGameNotification(GraphQLObject):
    value_body = None
    value_createdAt = None
    value_game:'FootballRivalsGame' = None
    value_id = None
    value_invite:'FootballRivalsInvite' = None
    value_name = None
    value_read = None
    value_sport = None
    value_title = None
    value_user:'CurrentUser' = None
    def body(self,_param_name:str = 'body'):
        inst = None
        self._add_to_query("body",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def invite(self,_param_name:str = 'invite') -> 'FootballRivalsInvite':
        param_list = []
        inst = FootballRivalsInvite(self,param_list)
        self._add_to_query("invite",_param_name,inst)
        self.value_invite = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class footballRivalsInviteAcceptCodeInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,code = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('code',code)

class footballRivalsInviteAcceptCodePayload(GraphQLObject):
    value_challenge:'FootballRivalsChallenge' = None
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_game:'FootballRivalsGame' = None
    value_invite:'FootballRivalsInvite' = None
    def challenge(self,_param_name:str = 'challenge') -> 'FootballRivalsChallenge':
        param_list = []
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("challenge",_param_name,inst)
        self.value_challenge = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def invite(self,_param_name:str = 'invite') -> 'FootballRivalsInvite':
        param_list = []
        inst = FootballRivalsInvite(self,param_list)
        self._add_to_query("invite",_param_name,inst)
        self.value_invite = inst
        return inst


class footballRivalsInviteAcceptInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,inviteId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('inviteId',inviteId)

class footballRivalsInviteAcceptPayload(GraphQLObject):
    value_challenge:'FootballRivalsChallenge' = None
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    value_game:'FootballRivalsGame' = None
    value_invite:'FootballRivalsInvite' = None
    def challenge(self,_param_name:str = 'challenge') -> 'FootballRivalsChallenge':
        param_list = []
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("challenge",_param_name,inst)
        self.value_challenge = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def invite(self,_param_name:str = 'invite') -> 'FootballRivalsInvite':
        param_list = []
        inst = FootballRivalsInvite(self,param_list)
        self._add_to_query("invite",_param_name,inst)
        self.value_invite = inst
        return inst


class footballRivalsInviteCreateInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,follow = None,gameId = None,managerId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('follow',follow)
        self._add_parameter('gameId',gameId)
        self._add_parameter('managerId',managerId)

class footballRivalsInviteCreatePayload(GraphQLObject):
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    value_game:'FootballRivalsGame' = None
    value_invite:'FootballRivalsInvite' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def invite(self,_param_name:str = 'invite') -> 'FootballRivalsInvite':
        param_list = []
        inst = FootballRivalsInvite(self,param_list)
        self._add_to_query("invite",_param_name,inst)
        self.value_invite = inst
        return inst


class footballRivalsInviteRejectInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,inviteId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('inviteId',inviteId)

class footballRivalsInviteRejectPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    value_invite:'FootballRivalsInvite' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def invite(self,_param_name:str = 'invite') -> 'FootballRivalsInvite':
        param_list = []
        inst = FootballRivalsInvite(self,param_list)
        self._add_to_query("invite",_param_name,inst)
        self.value_invite = inst
        return inst


class footballRivalsInvitesAcceptInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,inviteIds = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('inviteIds',inviteIds)

class footballRivalsInvitesAcceptPayload(GraphQLObject):
    value_challenges:'list[FootballRivalsChallenge]' = None
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    value_games:'list[FootballRivalsGame]' = None
    def challenges(self,_param_name:str = 'challenges') -> 'FootballRivalsChallenge':
        param_list = []
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("challenges",_param_name,inst)
        self.value_challenges = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def games(self,_param_name:str = 'games') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("games",_param_name,inst)
        self.value_games = inst
        return inst


class FootballRivalsRanking(GraphQLObject):
    value_manager:'FootballRivalsManager' = None
    value_myLosses = None
    value_myWins = None
    value_rank = None
    value_rankOverview = None
    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst

    def myLosses(self,_param_name:str = 'myLosses'):
        inst = None
        self._add_to_query("myLosses",_param_name)
        pass

    def myWins(self,_param_name:str = 'myWins'):
        inst = None
        self._add_to_query("myWins",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def rankOverview(self,_param_name:str = 'rankOverview'):
        inst = None
        self._add_to_query("rankOverview",_param_name)
        pass


class FootballRivalsRankingsPaginated(GraphQLObject):
    value_currentPage = None
    value_id = None
    value_nodes:'list[FootballRivalsRanking]' = None
    value_pages = None
    value_totalCount = None
    def currentPage(self,_param_name:str = 'currentPage'):
        inst = None
        self._add_to_query("currentPage",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def nodes(self,_param_name:str = 'nodes') -> 'FootballRivalsRanking':
        param_list = []
        inst = FootballRivalsRanking(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pages(self,_param_name:str = 'pages'):
        inst = None
        self._add_to_query("pages",_param_name)
        pass

    def totalCount(self,_param_name:str = 'totalCount'):
        inst = None
        self._add_to_query("totalCount",_param_name)
        pass


class FootballRivalsLeaderboard(GraphQLObject):
    value_myRanking:'FootballRivalsRanking' = None
    value_paginatedRankings:'FootballRivalsRankingsPaginated' = None
    value_ranking:'FootballRivalsRanking' = None
    def myRanking(self,_param_name:str = 'myRanking') -> 'FootballRivalsRanking':
        param_list = []
        inst = FootballRivalsRanking(self,param_list)
        self._add_to_query("myRanking",_param_name,inst)
        self.value_myRanking = inst
        return inst

    def paginatedRankings(self,_param_name:str = 'paginatedRankings') -> 'FootballRivalsRankingsPaginated':
        param_list = []
        inst = FootballRivalsRankingsPaginated(self,param_list)
        self._add_to_query("paginatedRankings",_param_name,inst)
        self.value_paginatedRankings = inst
        return inst

    def ranking(self,userSlug,_param_name:str = 'ranking') -> 'FootballRivalsRanking':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsRanking(self,param_list)
        self._add_to_query("ranking",_param_name,inst)
        self.value_ranking = inst
        return inst


class footballRivalsLineupUpsertInput(GraphQLInputObject):
    def __init__(self,appearances:'FootballRivalsAppearanceInput' = None,clientMutationId = None,gameId = None,source = None,tacticSlug = None):
        self._add_parameter('appearances',appearances)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('gameId',gameId)
        self._add_parameter('source',source)
        self._add_parameter('tacticSlug',tacticSlug)

class footballRivalsLineupUpsertPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    value_game:'FootballRivalsGame' = None
    value_lineup:'FootballRivalsLineup' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def lineup(self,_param_name:str = 'lineup') -> 'FootballRivalsLineup':
        param_list = []
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst


class FootballRivalsManagerNotification(GraphQLObject):
    value_body = None
    value_createdAt = None
    value_id = None
    value_manager:'FootballRivalsManager' = None
    value_name = None
    value_read = None
    value_sport = None
    value_title = None
    value_user:'CurrentUser' = None
    def body(self,_param_name:str = 'body'):
        inst = None
        self._add_to_query("body",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class FootballRivalsManagerSquadRanking(GraphQLObject):
    value_id = None
    value_manager:'FootballRivalsManager' = None
    value_squad:'FootballRivalsSquad' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst

    def squad(self,_param_name:str = 'squad') -> 'FootballRivalsSquad':
        param_list = []
        inst = FootballRivalsSquad(self,param_list)
        self._add_to_query("squad",_param_name,inst)
        self.value_squad = inst
        return inst


class FootballRivalsPrivateRanking(GraphQLObject):
    value_bestDailyGame:'FootballRivalsGame' = None
    value_bestDailyScore = None
    value_id = None
    value_manager:'FootballRivalsManager' = None
    value_ranking = None
    def bestDailyGame(self,_param_name:str = 'bestDailyGame') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("bestDailyGame",_param_name,inst)
        self.value_bestDailyGame = inst
        return inst

    def bestDailyScore(self,_param_name:str = 'bestDailyScore'):
        inst = None
        self._add_to_query("bestDailyScore",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def manager(self,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass


class FootballRivalsPrivateRankingEdge(GraphQLObject):
    value_cursor = None
    value_node:'FootballRivalsPrivateRanking' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'FootballRivalsPrivateRanking':
        param_list = []
        inst = FootballRivalsPrivateRanking(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class FootballRivalsPrivateRankingConnection(GraphQLObject):
    value_edges:'list[FootballRivalsPrivateRankingEdge]' = None
    value_nodes:'list[FootballRivalsPrivateRanking]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'FootballRivalsPrivateRankingEdge':
        param_list = []
        inst = FootballRivalsPrivateRankingEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'FootballRivalsPrivateRanking':
        param_list = []
        inst = FootballRivalsPrivateRanking(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class FootballRivalsPromotionRelegationStory(GraphQLObject):
    value_divisionChange = None
    value_id = None
    value_newDivision:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_previousDivision:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_read = None
    value_rewardProbabilisticBundle:'ProbabilisticBundle' = None
    def divisionChange(self,_param_name:str = 'divisionChange'):
        inst = None
        self._add_to_query("divisionChange",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def newDivision(self,_param_name:str = 'newDivision') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("newDivision",_param_name,inst)
        self.value_newDivision = inst
        return inst

    def previousDivision(self,_param_name:str = 'previousDivision') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("previousDivision",_param_name,inst)
        self.value_previousDivision = inst
        return inst

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def rewardProbabilisticBundle(self,_param_name:str = 'rewardProbabilisticBundle') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("rewardProbabilisticBundle",_param_name,inst)
        self.value_rewardProbabilisticBundle = inst
        return inst


class FootballRivalsPromotionRelegationStoryInterface(GraphQLObject):
    value_divisionChange = None
    value_id = None
    value_newDivision:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_previousDivision:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_read = None
    value_rewardProbabilisticBundle:'ProbabilisticBundle' = None
    def divisionChange(self,_param_name:str = 'divisionChange'):
        inst = None
        self._add_to_query("divisionChange",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def newDivision(self,_param_name:str = 'newDivision') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("newDivision",_param_name,inst)
        self.value_newDivision = inst
        return inst

    def previousDivision(self,_param_name:str = 'previousDivision') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("previousDivision",_param_name,inst)
        self.value_previousDivision = inst
        return inst

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def rewardProbabilisticBundle(self,_param_name:str = 'rewardProbabilisticBundle') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("rewardProbabilisticBundle",_param_name,inst)
        self.value_rewardProbabilisticBundle = inst
        return inst


class FootballRivalsPublicManagerInterface(GraphQLObject):
    value_arenaGames:'FootballRivalsGameConnection' = None
    value_arenaUnlocked = None
    value_completedOrReadyArenaStreakTask:'FootballManagerTask' = None
    value_completedOrReadyTask:'FootballManagerTask' = None
    value_currentArenaStreak = None
    value_currentEloGroup:'FootballRivalsEloGroup' = None
    value_currentLeaderboard:'FootballRivalsDivisionLeaderboard' = None
    value_currentRanking:'FootballRivalsDivisionRanking' = None
    value_currentSeasonSquad:'FootballRivalsSeasonSquad' = None
    value_dailyClaimTasks:'list[FootballManagerTask]' = None
    value_division = None
    value_divisionConfig:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_eloGroup = None
    value_eloScore = None
    value_featuredInvitePictureUrl = None
    value_highestEloScore = None
    value_highestLineupScore = None
    value_highestScore = None
    value_mostLossesAgainstOpponent:'ChallengesCountAgainstOpponentType' = None
    value_mostWinsAgainstOpponent:'ChallengesCountAgainstOpponentType' = None
    value_myUpcomingReceivedInvitesCount = None
    value_nextEloGroup:'FootballRivalsEloGroup' = None
    value_nickname = None
    value_pastChallenges:'FootballRivalsChallengeConnection' = None
    value_pastGames:'FootballRivalsGameConnection' = None
    value_pictureUrl = None
    value_rankingHistory:'list[FootballRivalsRankingDelta]' = None
    value_readyArenaStreakTask:'FootballManagerTask' = None
    value_readyTask:'FootballManagerTask' = None
    value_records:'FootballRivalsManagerRecords' = None
    value_user:'User' = None
    def arenaGames(self,after,before,first,last,_param_name:str = 'arenaGames') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("arenaGames",_param_name,inst)
        self.value_arenaGames = inst
        return inst

    def arenaUnlocked(self,_param_name:str = 'arenaUnlocked'):
        inst = None
        self._add_to_query("arenaUnlocked",_param_name)
        pass

    def completedOrReadyArenaStreakTask(self,_param_name:str = 'completedOrReadyArenaStreakTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("completedOrReadyArenaStreakTask",_param_name,inst)
        self.value_completedOrReadyArenaStreakTask = inst
        return inst

    def completedOrReadyTask(self,_param_name:str = 'completedOrReadyTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("completedOrReadyTask",_param_name,inst)
        self.value_completedOrReadyTask = inst
        return inst

    def currentArenaStreak(self,_param_name:str = 'currentArenaStreak'):
        inst = None
        self._add_to_query("currentArenaStreak",_param_name)
        pass

    def currentEloGroup(self,_param_name:str = 'currentEloGroup') -> 'FootballRivalsEloGroup':
        param_list = []
        inst = FootballRivalsEloGroup(self,param_list)
        self._add_to_query("currentEloGroup",_param_name,inst)
        self.value_currentEloGroup = inst
        return inst

    def currentLeaderboard(self,_param_name:str = 'currentLeaderboard') -> 'FootballRivalsDivisionLeaderboard':
        param_list = []
        inst = FootballRivalsDivisionLeaderboard(self,param_list)
        self._add_to_query("currentLeaderboard",_param_name,inst)
        self.value_currentLeaderboard = inst
        return inst

    def currentRanking(self,_param_name:str = 'currentRanking') -> 'FootballRivalsDivisionRanking':
        param_list = []
        inst = FootballRivalsDivisionRanking(self,param_list)
        self._add_to_query("currentRanking",_param_name,inst)
        self.value_currentRanking = inst
        return inst

    def currentSeasonSquad(self,_param_name:str = 'currentSeasonSquad') -> 'FootballRivalsSeasonSquad':
        param_list = []
        inst = FootballRivalsSeasonSquad(self,param_list)
        self._add_to_query("currentSeasonSquad",_param_name,inst)
        self.value_currentSeasonSquad = inst
        return inst

    def dailyClaimTasks(self,_param_name:str = 'dailyClaimTasks') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("dailyClaimTasks",_param_name,inst)
        self.value_dailyClaimTasks = inst
        return inst

    def division(self,_param_name:str = 'division'):
        inst = None
        self._add_to_query("division",_param_name)
        pass

    def divisionConfig(self,_param_name:str = 'divisionConfig') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("divisionConfig",_param_name,inst)
        self.value_divisionConfig = inst
        return inst

    def eloGroup(self,_param_name:str = 'eloGroup'):
        inst = None
        self._add_to_query("eloGroup",_param_name)
        pass

    def eloScore(self,_param_name:str = 'eloScore'):
        inst = None
        self._add_to_query("eloScore",_param_name)
        pass

    def featuredInvitePictureUrl(self,_param_name:str = 'featuredInvitePictureUrl'):
        inst = None
        self._add_to_query("featuredInvitePictureUrl",_param_name)
        pass

    def highestEloScore(self,_param_name:str = 'highestEloScore'):
        inst = None
        self._add_to_query("highestEloScore",_param_name)
        pass

    def highestLineupScore(self,_param_name:str = 'highestLineupScore'):
        inst = None
        self._add_to_query("highestLineupScore",_param_name)
        pass

    def highestScore(self,_param_name:str = 'highestScore'):
        inst = None
        self._add_to_query("highestScore",_param_name)
        pass

    def mostLossesAgainstOpponent(self,_param_name:str = 'mostLossesAgainstOpponent') -> 'ChallengesCountAgainstOpponentType':
        param_list = []
        inst = ChallengesCountAgainstOpponentType(self,param_list)
        self._add_to_query("mostLossesAgainstOpponent",_param_name,inst)
        self.value_mostLossesAgainstOpponent = inst
        return inst

    def mostWinsAgainstOpponent(self,_param_name:str = 'mostWinsAgainstOpponent') -> 'ChallengesCountAgainstOpponentType':
        param_list = []
        inst = ChallengesCountAgainstOpponentType(self,param_list)
        self._add_to_query("mostWinsAgainstOpponent",_param_name,inst)
        self.value_mostWinsAgainstOpponent = inst
        return inst

    def myUpcomingReceivedInvitesCount(self,_param_name:str = 'myUpcomingReceivedInvitesCount'):
        inst = None
        self._add_to_query("myUpcomingReceivedInvitesCount",_param_name)
        pass

    def nextEloGroup(self,_param_name:str = 'nextEloGroup') -> 'FootballRivalsEloGroup':
        param_list = []
        inst = FootballRivalsEloGroup(self,param_list)
        self._add_to_query("nextEloGroup",_param_name,inst)
        self.value_nextEloGroup = inst
        return inst

    def nickname(self,_param_name:str = 'nickname'):
        inst = None
        self._add_to_query("nickname",_param_name)
        pass

    def pastChallenges(self,after,before,first,last,type,_param_name:str = 'pastChallenges') -> 'FootballRivalsChallengeConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("type",type))
        inst = FootballRivalsChallengeConnection(self,param_list)
        self._add_to_query("pastChallenges",_param_name,inst)
        self.value_pastChallenges = inst
        return inst

    def pastGames(self,after,before,first,last,onlyArena,_param_name:str = 'pastGames') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("onlyArena",onlyArena))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("pastGames",_param_name,inst)
        self.value_pastGames = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def rankingHistory(self,_param_name:str = 'rankingHistory') -> 'FootballRivalsRankingDelta':
        param_list = []
        inst = FootballRivalsRankingDelta(self,param_list)
        self._add_to_query("rankingHistory",_param_name,inst)
        self.value_rankingHistory = inst
        return inst

    def readyArenaStreakTask(self,_param_name:str = 'readyArenaStreakTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("readyArenaStreakTask",_param_name,inst)
        self.value_readyArenaStreakTask = inst
        return inst

    def readyTask(self,_param_name:str = 'readyTask') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("readyTask",_param_name,inst)
        self.value_readyTask = inst
        return inst

    def records(self,_param_name:str = 'records') -> 'FootballRivalsManagerRecords':
        param_list = []
        inst = FootballRivalsManagerRecords(self,param_list)
        self._add_to_query("records",_param_name,inst)
        self.value_records = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class footballRivalsRemindGameInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,gameId = None,shouldNotify = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('gameId',gameId)
        self._add_parameter('shouldNotify',shouldNotify)

class footballRivalsRemindGamePayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_game:'FootballRivalsGame' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst


class TeamInterfaceEdge(GraphQLObject):
    value_cursor = None
    value_node:'TeamInterface' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class TeamInterfaceConnection(GraphQLObject):
    value_edges:'list[TeamInterfaceEdge]' = None
    value_nodes:'list[TeamInterface]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'TeamInterfaceEdge':
        param_list = []
        inst = TeamInterfaceEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'TeamInterface':
        param_list = []
        inst = TeamInterface(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class FootballRivalsSeasonEdge(GraphQLObject):
    value_cursor = None
    value_node:'FootballRivalsSeason' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class FootballRivalsSeasonConnection(GraphQLObject):
    value_edges:'list[FootballRivalsSeasonEdge]' = None
    value_nodes:'list[FootballRivalsSeason]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'FootballRivalsSeasonEdge':
        param_list = []
        inst = FootballRivalsSeasonEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class FootballRivalsRoot(GraphQLObject):
    value_arenaTicketClaimPeriod = None
    value_availableManagers:'FootballRivalsManagerConnection' = None
    value_challenges:'list[FootballRivalsChallenge]' = None
    value_config:'FootballRivalsConfig' = None
    value_contentTiles:'list[ContentTileInterface]' = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_currentManagerHasLiveGames = None
    value_currentSeason:'FootballRivalsSeason' = None
    value_dailyMissionResetIn = None
    value_featuredGames:'list[FootballRivalsGame]' = None
    value_game:'FootballRivalsGame' = None
    value_id = None
    value_leaderboardsConfig:'list[FootballRivalsDivisionLeaderboardConfig]' = None
    value_lineup:'FootballRivalsLineup' = None
    value_liveGames:'list[FootballRivalsGame]' = None
    value_manager:'FootballRivalsManager' = None
    value_myGamesByLeague:'list[FootballRivalsLeagueGame]' = None
    value_myOnboardingFeaturedGames:'list[FootballRivalsFeaturedGame]' = None
    value_myOngoingAndRecentGames:'list[FootballRivalsGame]' = None
    value_myRivals:'FootballRivalsManagerConnection' = None
    value_myStartingGames:'list[FootballRivalsGame]' = None
    value_myUpcomingInvitesCount = None
    value_myUpcomingLineupsCount = None
    value_nextFeaturedGame:'FootballRivalsGame' = None
    value_nextGame:'FootballRivalsGame' = None
    value_onboardingAvailableFavoriteTeams:'TeamInterfaceConnection' = None
    value_overallLeaderboard:'FootballRivalsLeaderboard' = None
    value_pastGames:'list[FootballRivalsGame]' = None
    value_pastGamesPaginated:'FootballRivalsGameConnection' = None
    value_pastSeasons:'FootballRivalsSeasonConnection' = None
    value_publicSquads:'list[FootballRivalsSquad]' = None
    value_season:'FootballRivalsSeason' = None
    value_showBeta = None
    value_squadCreationDivisionConfigLimit:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_squadCreationDivisionLimit = None
    value_squadLeaderboardsConfig:'list[FootballRivalsDivisionSquadLeaderboardConfig]' = None
    value_squadMembershipsMaxCount = None
    value_upcomingGames:'list[FootballRivalsGame]' = None
    value_upcomingGamesByLeague:'list[FootballRivalsLeagueGame]' = None
    value_userGroup:'RivalsUserGroup' = None
    value_userGroupTournament:'RivalsUserGroupTournament' = None
    def arenaTicketClaimPeriod(self,_param_name:str = 'arenaTicketClaimPeriod'):
        inst = None
        self._add_to_query("arenaTicketClaimPeriod",_param_name)
        pass

    def availableManagers(self,after,before,first,last,query,_param_name:str = 'availableManagers') -> 'FootballRivalsManagerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = FootballRivalsManagerConnection(self,param_list)
        self._add_to_query("availableManagers",_param_name,inst)
        self.value_availableManagers = inst
        return inst

    def challenges(self,ids,_param_name:str = 'challenges') -> 'FootballRivalsChallenge':
        param_list = []
        param_list.append(("ids",ids))
        inst = FootballRivalsChallenge(self,param_list)
        self._add_to_query("challenges",_param_name,inst)
        self.value_challenges = inst
        return inst

    def config(self,_param_name:str = 'config') -> 'FootballRivalsConfig':
        param_list = []
        inst = FootballRivalsConfig(self,param_list)
        self._add_to_query("config",_param_name,inst)
        self.value_config = inst
        return inst

    def contentTiles(self,_param_name:str = 'contentTiles') -> 'ContentTileInterface':
        param_list = []
        inst = ContentTileInterface(self,param_list)
        self._add_to_query("contentTiles",_param_name,inst)
        self.value_contentTiles = inst
        return inst

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def currentManagerHasLiveGames(self,sport,_param_name:str = 'currentManagerHasLiveGames'):
        inst = None
        self._add_to_query("currentManagerHasLiveGames",_param_name)
        pass

    def currentSeason(self,_param_name:str = 'currentSeason') -> 'FootballRivalsSeason':
        param_list = []
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("currentSeason",_param_name,inst)
        self.value_currentSeason = inst
        return inst

    def dailyMissionResetIn(self,_param_name:str = 'dailyMissionResetIn'):
        inst = None
        self._add_to_query("dailyMissionResetIn",_param_name)
        pass

    def featuredGames(self,fromDate,toDate,_param_name:str = 'featuredGames') -> 'FootballRivalsGame':
        param_list = []
        param_list.append(("fromDate",fromDate))
        param_list.append(("toDate",toDate))
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("featuredGames",_param_name,inst)
        self.value_featuredGames = inst
        return inst

    def game(self,slug,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        param_list.append(("slug",slug))
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaderboardsConfig(self,_param_name:str = 'leaderboardsConfig') -> 'FootballRivalsDivisionLeaderboardConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardConfig(self,param_list)
        self._add_to_query("leaderboardsConfig",_param_name,inst)
        self.value_leaderboardsConfig = inst
        return inst

    def lineup(self,code,_param_name:str = 'lineup') -> 'FootballRivalsLineup':
        param_list = []
        param_list.append(("code",code))
        inst = FootballRivalsLineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def liveGames(self,_param_name:str = 'liveGames') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("liveGames",_param_name,inst)
        self.value_liveGames = inst
        return inst

    def manager(self,userSlug,_param_name:str = 'manager') -> 'FootballRivalsManager':
        param_list = []
        param_list.append(("userSlug",userSlug))
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("manager",_param_name,inst)
        self.value_manager = inst
        return inst

    def myGamesByLeague(self,fromDate,sortBy,toDate,_param_name:str = 'myGamesByLeague') -> 'FootballRivalsLeagueGame':
        param_list = []
        param_list.append(("fromDate",fromDate))
        param_list.append(("sortBy",sortBy))
        param_list.append(("toDate",toDate))
        inst = FootballRivalsLeagueGame(self,param_list)
        self._add_to_query("myGamesByLeague",_param_name,inst)
        self.value_myGamesByLeague = inst
        return inst

    def myOnboardingFeaturedGames(self,_param_name:str = 'myOnboardingFeaturedGames') -> 'FootballRivalsFeaturedGame':
        param_list = []
        inst = FootballRivalsFeaturedGame(self,param_list)
        self._add_to_query("myOnboardingFeaturedGames",_param_name,inst)
        self.value_myOnboardingFeaturedGames = inst
        return inst

    def myOngoingAndRecentGames(self,_param_name:str = 'myOngoingAndRecentGames') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("myOngoingAndRecentGames",_param_name,inst)
        self.value_myOngoingAndRecentGames = inst
        return inst

    def myRivals(self,after,before,division,first,last,onlyWithUpcomingReceivedInvites,_param_name:str = 'myRivals') -> 'FootballRivalsManagerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("division",division))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("onlyWithUpcomingReceivedInvites",onlyWithUpcomingReceivedInvites))
        inst = FootballRivalsManagerConnection(self,param_list)
        self._add_to_query("myRivals",_param_name,inst)
        self.value_myRivals = inst
        return inst

    def myStartingGames(self,fromDate,toDate,_param_name:str = 'myStartingGames') -> 'FootballRivalsGame':
        param_list = []
        param_list.append(("fromDate",fromDate))
        param_list.append(("toDate",toDate))
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("myStartingGames",_param_name,inst)
        self.value_myStartingGames = inst
        return inst

    def myUpcomingInvitesCount(self,_param_name:str = 'myUpcomingInvitesCount'):
        inst = None
        self._add_to_query("myUpcomingInvitesCount",_param_name)
        pass

    def myUpcomingLineupsCount(self,_param_name:str = 'myUpcomingLineupsCount'):
        inst = None
        self._add_to_query("myUpcomingLineupsCount",_param_name)
        pass

    def nextFeaturedGame(self,_param_name:str = 'nextFeaturedGame') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("nextFeaturedGame",_param_name,inst)
        self.value_nextFeaturedGame = inst
        return inst

    def nextGame(self,_param_name:str = 'nextGame') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("nextGame",_param_name,inst)
        self.value_nextGame = inst
        return inst

    def onboardingAvailableFavoriteTeams(self,after,before,first,last,query,_param_name:str = 'onboardingAvailableFavoriteTeams') -> 'TeamInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = TeamInterfaceConnection(self,param_list)
        self._add_to_query("onboardingAvailableFavoriteTeams",_param_name,inst)
        self.value_onboardingAvailableFavoriteTeams = inst
        return inst

    def overallLeaderboard(self,onlyFollowed,page,pageSize,_param_name:str = 'overallLeaderboard') -> 'FootballRivalsLeaderboard':
        param_list = []
        param_list.append(("onlyFollowed",onlyFollowed))
        param_list.append(("page",page))
        param_list.append(("pageSize",pageSize))
        inst = FootballRivalsLeaderboard(self,param_list)
        self._add_to_query("overallLeaderboard",_param_name,inst)
        self.value_overallLeaderboard = inst
        return inst

    def pastGames(self,_param_name:str = 'pastGames') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("pastGames",_param_name,inst)
        self.value_pastGames = inst
        return inst

    def pastGamesPaginated(self,after,before,first,last,_param_name:str = 'pastGamesPaginated') -> 'FootballRivalsGameConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsGameConnection(self,param_list)
        self._add_to_query("pastGamesPaginated",_param_name,inst)
        self.value_pastGamesPaginated = inst
        return inst

    def pastSeasons(self,after,before,first,last,_param_name:str = 'pastSeasons') -> 'FootballRivalsSeasonConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsSeasonConnection(self,param_list)
        self._add_to_query("pastSeasons",_param_name,inst)
        self.value_pastSeasons = inst
        return inst

    def publicSquads(self,_param_name:str = 'publicSquads') -> 'FootballRivalsSquad':
        param_list = []
        inst = FootballRivalsSquad(self,param_list)
        self._add_to_query("publicSquads",_param_name,inst)
        self.value_publicSquads = inst
        return inst

    def season(self,slug,_param_name:str = 'season') -> 'FootballRivalsSeason':
        param_list = []
        param_list.append(("slug",slug))
        inst = FootballRivalsSeason(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def showBeta(self,_param_name:str = 'showBeta'):
        inst = None
        self._add_to_query("showBeta",_param_name)
        pass

    def squadCreationDivisionConfigLimit(self,_param_name:str = 'squadCreationDivisionConfigLimit') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("squadCreationDivisionConfigLimit",_param_name,inst)
        self.value_squadCreationDivisionConfigLimit = inst
        return inst

    def squadCreationDivisionLimit(self,_param_name:str = 'squadCreationDivisionLimit'):
        inst = None
        self._add_to_query("squadCreationDivisionLimit",_param_name)
        pass

    def squadLeaderboardsConfig(self,_param_name:str = 'squadLeaderboardsConfig') -> 'FootballRivalsDivisionSquadLeaderboardConfig':
        param_list = []
        inst = FootballRivalsDivisionSquadLeaderboardConfig(self,param_list)
        self._add_to_query("squadLeaderboardsConfig",_param_name,inst)
        self.value_squadLeaderboardsConfig = inst
        return inst

    def squadMembershipsMaxCount(self,_param_name:str = 'squadMembershipsMaxCount'):
        inst = None
        self._add_to_query("squadMembershipsMaxCount",_param_name)
        pass

    def upcomingGames(self,query,_param_name:str = 'upcomingGames') -> 'FootballRivalsGame':
        param_list = []
        param_list.append(("query",query))
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("upcomingGames",_param_name,inst)
        self.value_upcomingGames = inst
        return inst

    def upcomingGamesByLeague(self,fromDate,sortBy,toDate,_param_name:str = 'upcomingGamesByLeague') -> 'FootballRivalsLeagueGame':
        param_list = []
        param_list.append(("fromDate",fromDate))
        param_list.append(("sortBy",sortBy))
        param_list.append(("toDate",toDate))
        inst = FootballRivalsLeagueGame(self,param_list)
        self._add_to_query("upcomingGamesByLeague",_param_name,inst)
        self.value_upcomingGamesByLeague = inst
        return inst

    def userGroup(self,joinSecret,slug,_param_name:str = 'userGroup') -> 'RivalsUserGroup':
        param_list = []
        param_list.append(("joinSecret",joinSecret))
        param_list.append(("slug",slug))
        inst = RivalsUserGroup(self,param_list)
        self._add_to_query("userGroup",_param_name,inst)
        self.value_userGroup = inst
        return inst

    def userGroupTournament(self,slug,_param_name:str = 'userGroupTournament') -> 'RivalsUserGroupTournament':
        param_list = []
        param_list.append(("slug",slug))
        inst = RivalsUserGroupTournament(self,param_list)
        self._add_to_query("userGroupTournament",_param_name,inst)
        self.value_userGroupTournament = inst
        return inst


class FootballRivalsSquadPromotionRelegationStory(GraphQLObject):
    value_divisionChange = None
    value_id = None
    value_newDivision:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_previousDivision:'FootballRivalsDivisionLeaderboardDivisionConfig' = None
    value_ranking = None
    value_read = None
    value_rewardProbabilisticBundle:'ProbabilisticBundle' = None
    value_squad:'FootballRivalsSquad' = None
    def divisionChange(self,_param_name:str = 'divisionChange'):
        inst = None
        self._add_to_query("divisionChange",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def newDivision(self,_param_name:str = 'newDivision') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("newDivision",_param_name,inst)
        self.value_newDivision = inst
        return inst

    def previousDivision(self,_param_name:str = 'previousDivision') -> 'FootballRivalsDivisionLeaderboardDivisionConfig':
        param_list = []
        inst = FootballRivalsDivisionLeaderboardDivisionConfig(self,param_list)
        self._add_to_query("previousDivision",_param_name,inst)
        self.value_previousDivision = inst
        return inst

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def rewardProbabilisticBundle(self,_param_name:str = 'rewardProbabilisticBundle') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("rewardProbabilisticBundle",_param_name,inst)
        self.value_rewardProbabilisticBundle = inst
        return inst

    def squad(self,_param_name:str = 'squad') -> 'FootballRivalsSquad':
        param_list = []
        inst = FootballRivalsSquad(self,param_list)
        self._add_to_query("squad",_param_name,inst)
        self.value_squad = inst
        return inst


class footballRivalsUpdateFavoriteTeamInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,teamId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('teamId',teamId)

class footballRivalsUpdateFavoriteTeamPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentManager:'FootballRivalsCurrentManager' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentManager(self,_param_name:str = 'currentManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentManager",_param_name,inst)
        self.value_currentManager = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class So5CampaignSectionItem(GraphQLObject):
    value_iconUrl = None
    value_subtitle = None
    value_title = None
    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def subtitle(self,_param_name:str = 'subtitle'):
        inst = None
        self._add_to_query("subtitle",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class So5CampaignSection(GraphQLObject):
    value_iconUrl = None
    value_items:'list[So5CampaignSectionItem]' = None
    value_title = None
    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def items(self,_param_name:str = 'items') -> 'So5CampaignSectionItem':
        param_list = []
        inst = So5CampaignSectionItem(self,param_list)
        self._add_to_query("items",_param_name,inst)
        self.value_items = inst
        return inst

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class So5Campaign(GraphQLObject):
    value_description = None
    value_faqUrl = None
    value_pictureUrl = None
    value_sections:'list[So5CampaignSection]' = None
    value_slug = None
    value_so5Leaderboards:'list[So5Leaderboard]' = None
    value_termsFilename = None
    value_title = None
    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def faqUrl(self,_param_name:str = 'faqUrl'):
        inst = None
        self._add_to_query("faqUrl",_param_name)
        pass

    def pictureUrl(self,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def sections(self,_param_name:str = 'sections') -> 'So5CampaignSection':
        param_list = []
        inst = So5CampaignSection(self,param_list)
        self._add_to_query("sections",_param_name,inst)
        self.value_sections = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Leaderboards(self,_param_name:str = 'so5Leaderboards') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboards",_param_name,inst)
        self.value_so5Leaderboards = inst
        return inst

    def termsFilename(self,_param_name:str = 'termsFilename'):
        inst = None
        self._add_to_query("termsFilename",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class StarterPackEdge(GraphQLObject):
    value_cursor = None
    value_node:'StarterPack' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'StarterPack':
        param_list = []
        inst = StarterPack(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class StarterPackConnection(GraphQLObject):
    value_edges:'list[StarterPackEdge]' = None
    value_nodes:'list[StarterPack]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'StarterPackEdge':
        param_list = []
        inst = StarterPackEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'StarterPack':
        param_list = []
        inst = StarterPack(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class FootballSo5NoCardRouteRoot(GraphQLObject):
    value_draftableAppearance:'So5NoCardDraftableAppearance' = None
    value_id = None
    def draftableAppearance(self,so5FixtureId,_param_name:str = 'draftableAppearance') -> 'So5NoCardDraftableAppearance':
        param_list = []
        param_list.append(("so5FixtureId",so5FixtureId))
        inst = So5NoCardDraftableAppearance(self,param_list)
        self._add_to_query("draftableAppearance",_param_name,inst)
        self.value_draftableAppearance = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class OnboardingCompetition(GraphQLObject):
    value_commonDraftCampaign:'CommonDraftCampaign' = None
    value_competition:'Competition' = None
    value_slug = None
    def commonDraftCampaign(self,_param_name:str = 'commonDraftCampaign') -> 'CommonDraftCampaign':
        param_list = []
        inst = CommonDraftCampaign(self,param_list)
        self._add_to_query("commonDraftCampaign",_param_name,inst)
        self.value_commonDraftCampaign = inst
        return inst

    def competition(self,_param_name:str = 'competition') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competition",_param_name,inst)
        self.value_competition = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass


class So5FixtureEdge(GraphQLObject):
    value_cursor = None
    value_node:'So5Fixture' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class So5FixtureConnection(GraphQLObject):
    value_edges:'list[So5FixtureEdge]' = None
    value_nodes:'list[So5Fixture]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'So5FixtureEdge':
        param_list = []
        inst = So5FixtureEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class So5LeaderboardGroup(GraphQLObject):
    value_bannerUrl = None
    value_color = None
    value_description = None
    value_displayName = None
    value_eligibleCardsCountByPosition:'list[UserCardsCount]' = None
    value_featured = None
    value_headerBackgroundUrl = None
    value_headerUrl = None
    value_iconUrl = None
    value_leagueSummary = None
    value_logoUrl = None
    value_mySo5LeaderboardContenders:'list[So5LeaderboardContender]' = None
    value_mySo5Leaderboards:'list[So5Leaderboard]' = None
    value_percentageOfGamesPlayed = None
    value_pictureUrl = None
    value_rewardedRarities = None
    value_seasonalities = None
    value_slug = None
    value_so5Fixture:'So5Fixture' = None
    value_so5LeaderboardContenders:'list[So5LeaderboardContender]' = None
    value_so5Leaderboards:'list[So5Leaderboard]' = None
    value_so5LeagueTrack:'So5LeagueTrack' = None
    value_so5LeagueTracks:'list[So5LeagueTrack]' = None
    value_so5LineupsCount = None
    value_totalRewards:'RewardsOverview' = None
    def bannerUrl(self,_param_name:str = 'bannerUrl'):
        inst = None
        self._add_to_query("bannerUrl",_param_name)
        pass

    def color(self,variant,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def displayName(self,_param_name:str = 'displayName'):
        inst = None
        self._add_to_query("displayName",_param_name)
        pass

    def eligibleCardsCountByPosition(self,_param_name:str = 'eligibleCardsCountByPosition') -> 'UserCardsCount':
        param_list = []
        inst = UserCardsCount(self,param_list)
        self._add_to_query("eligibleCardsCountByPosition",_param_name,inst)
        self.value_eligibleCardsCountByPosition = inst
        return inst

    def featured(self,_param_name:str = 'featured'):
        inst = None
        self._add_to_query("featured",_param_name)
        pass

    def headerBackgroundUrl(self,seasonality,_param_name:str = 'headerBackgroundUrl'):
        inst = None
        self._add_to_query("headerBackgroundUrl",_param_name)
        pass

    def headerUrl(self,_param_name:str = 'headerUrl'):
        inst = None
        self._add_to_query("headerUrl",_param_name)
        pass

    def iconUrl(self,_param_name:str = 'iconUrl'):
        inst = None
        self._add_to_query("iconUrl",_param_name)
        pass

    def leagueSummary(self,_param_name:str = 'leagueSummary'):
        inst = None
        self._add_to_query("leagueSummary",_param_name)
        pass

    def logoUrl(self,_param_name:str = 'logoUrl'):
        inst = None
        self._add_to_query("logoUrl",_param_name)
        pass

    def mySo5LeaderboardContenders(self,sortType,_param_name:str = 'mySo5LeaderboardContenders') -> 'So5LeaderboardContender':
        param_list = []
        param_list.append(("sortType",sortType))
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("mySo5LeaderboardContenders",_param_name,inst)
        self.value_mySo5LeaderboardContenders = inst
        return inst

    def mySo5Leaderboards(self,_param_name:str = 'mySo5Leaderboards') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("mySo5Leaderboards",_param_name,inst)
        self.value_mySo5Leaderboards = inst
        return inst

    def percentageOfGamesPlayed(self,_param_name:str = 'percentageOfGamesPlayed'):
        inst = None
        self._add_to_query("percentageOfGamesPlayed",_param_name)
        pass

    def pictureUrl(self,seasonality,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def rewardedRarities(self,_param_name:str = 'rewardedRarities'):
        inst = None
        self._add_to_query("rewardedRarities",_param_name)
        pass

    def seasonalities(self,_param_name:str = 'seasonalities'):
        inst = None
        self._add_to_query("seasonalities",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5Fixture(self,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5LeaderboardContenders(self,sortType,userSlug,_param_name:str = 'so5LeaderboardContenders') -> 'So5LeaderboardContender':
        param_list = []
        param_list.append(("sortType",sortType))
        param_list.append(("userSlug",userSlug))
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("so5LeaderboardContenders",_param_name,inst)
        self.value_so5LeaderboardContenders = inst
        return inst

    def so5Leaderboards(self,_param_name:str = 'so5Leaderboards') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboards",_param_name,inst)
        self.value_so5Leaderboards = inst
        return inst

    def so5LeagueTrack(self,slug,_param_name:str = 'so5LeagueTrack') -> 'So5LeagueTrack':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("so5LeagueTrack",_param_name,inst)
        self.value_so5LeagueTrack = inst
        return inst

    def so5LeagueTracks(self,_param_name:str = 'so5LeagueTracks') -> 'So5LeagueTrack':
        param_list = []
        inst = So5LeagueTrack(self,param_list)
        self._add_to_query("so5LeagueTracks",_param_name,inst)
        self.value_so5LeagueTracks = inst
        return inst

    def so5LineupsCount(self,_param_name:str = 'so5LineupsCount'):
        inst = None
        self._add_to_query("so5LineupsCount",_param_name)
        pass

    def totalRewards(self,_param_name:str = 'totalRewards') -> 'RewardsOverview':
        param_list = []
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalRewards",_param_name,inst)
        self.value_totalRewards = inst
        return inst


class So5Root(GraphQLObject):
    value_campaign:'So5Campaign' = None
    value_canImportLineups = None
    value_cardCollection:'CardCollection' = None
    value_currentManagerHasLiveGames = None
    value_eligibleTournamentTypesForSo5UserGroups:'list[So5Tournament]' = None
    value_eligibleTournamentsForSo5UserGroups:'list[So5UserGroupTournament]' = None
    value_featuredSo5Fixtures:'list[So5Fixture]' = None
    value_futureLeaderboardsPaginated:'So5LeaderboardConnection' = None
    value_id = None
    value_liveStarterPacks:'StarterPackConnection' = None
    value_managerHomeContentUnitsSets:'list[ContentUnitsSet]' = None
    value_managerTeam:'ManagerTeam' = None
    value_myAvailableStories:'list[Story]' = None
    value_myOngoingAndRecentSo5Lineups:'list[So5Lineup]' = None
    value_myOngoingSo5Fixture:'So5Fixture' = None
    value_myOpenedSo5LineupImportsBatch:'So5LineupImportsBatch' = None
    value_myPodiums:'list[So5Podium]' = None
    value_myPodiumsDetails:'list[So5Ranking]' = None
    value_mySo5UserGroups:'So5UserGroupConnection' = None
    value_myUpcomingLineupsPaginated:'So5LineupConnection' = None
    value_myUserGroups:'UserGroupInterfaceConnection' = None
    value_noCardRoute:'FootballSo5NoCardRouteRoot' = None
    value_onboardingCommonDraftCampaigns:'list[CommonDraftCampaign]' = None
    value_onboardingCompetitions:'list[OnboardingCompetition]' = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_seasonalityName = None
    value_so5Appearance:'So5Appearance' = None
    value_so5Fixture:'So5Fixture' = None
    value_so5Fixtures:'So5FixtureConnection' = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5LeaderboardContender:'So5LeaderboardContender' = None
    value_so5LeaderboardGroup:'So5LeaderboardGroup' = None
    value_so5League:'So5League' = None
    value_so5Lineup:'So5Lineup' = None
    value_so5LineupImportsBatch:'So5LineupImportsBatch' = None
    value_so5NoCardLineup:'So5NoCardLineup' = None
    value_so5Ranking:'So5Ranking' = None
    value_so5Reward:'So5Reward' = None
    value_so5Rewards:'list[So5Reward]' = None
    value_so5Score:'So5Score' = None
    value_so5UserGroup:'So5UserGroup' = None
    value_so5UserGroupMembership:'So5UserGroupMembership' = None
    value_totalUpcomingRewards:'RewardsOverview' = None
    value_universalSo5UserGroups:'So5UserGroupConnection' = None
    value_universalUserGroups:'UserGroupInterfaceConnection' = None
    value_upcomingLeaderboards:'list[So5Leaderboard]' = None
    value_upcomingLeaderboardsPaginated:'So5LeaderboardConnection' = None
    value_userCardCollection:'UserCardCollection' = None
    def campaign(self,slug,_param_name:str = 'campaign') -> 'So5Campaign':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5Campaign(self,param_list)
        self._add_to_query("campaign",_param_name,inst)
        self.value_campaign = inst
        return inst

    def canImportLineups(self,_param_name:str = 'canImportLineups'):
        inst = None
        self._add_to_query("canImportLineups",_param_name)
        pass

    def cardCollection(self,slug,_param_name:str = 'cardCollection') -> 'CardCollection':
        param_list = []
        param_list.append(("slug",slug))
        inst = CardCollection(self,param_list)
        self._add_to_query("cardCollection",_param_name,inst)
        self.value_cardCollection = inst
        return inst

    def currentManagerHasLiveGames(self,sport,_param_name:str = 'currentManagerHasLiveGames'):
        inst = None
        self._add_to_query("currentManagerHasLiveGames",_param_name)
        pass

    def eligibleTournamentTypesForSo5UserGroups(self,_param_name:str = 'eligibleTournamentTypesForSo5UserGroups') -> 'So5Tournament':
        param_list = []
        inst = So5Tournament(self,param_list)
        self._add_to_query("eligibleTournamentTypesForSo5UserGroups",_param_name,inst)
        self.value_eligibleTournamentTypesForSo5UserGroups = inst
        return inst

    def eligibleTournamentsForSo5UserGroups(self,_param_name:str = 'eligibleTournamentsForSo5UserGroups') -> 'So5UserGroupTournament':
        param_list = []
        inst = So5UserGroupTournament(self,param_list)
        self._add_to_query("eligibleTournamentsForSo5UserGroups",_param_name,inst)
        self.value_eligibleTournamentsForSo5UserGroups = inst
        return inst

    def featuredSo5Fixtures(self,eventType,first,sport,_param_name:str = 'featuredSo5Fixtures') -> 'So5Fixture':
        param_list = []
        param_list.append(("eventType",eventType))
        param_list.append(("first",first))
        param_list.append(("sport",sport))
        inst = So5Fixture(self,param_list)
        self._add_to_query("featuredSo5Fixtures",_param_name,inst)
        self.value_featuredSo5Fixtures = inst
        return inst

    def futureLeaderboardsPaginated(self,after,before,first,last,rarities,_param_name:str = 'futureLeaderboardsPaginated') -> 'So5LeaderboardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("rarities",rarities))
        inst = So5LeaderboardConnection(self,param_list)
        self._add_to_query("futureLeaderboardsPaginated",_param_name,inst)
        self.value_futureLeaderboardsPaginated = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def liveStarterPacks(self,after,before,first,last,_param_name:str = 'liveStarterPacks') -> 'StarterPackConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = StarterPackConnection(self,param_list)
        self._add_to_query("liveStarterPacks",_param_name,inst)
        self.value_liveStarterPacks = inst
        return inst

    def managerHomeContentUnitsSets(self,sport,_param_name:str = 'managerHomeContentUnitsSets') -> 'ContentUnitsSet':
        param_list = []
        param_list.append(("sport",sport))
        inst = ContentUnitsSet(self,param_list)
        self._add_to_query("managerHomeContentUnitsSets",_param_name,inst)
        self.value_managerHomeContentUnitsSets = inst
        return inst

    def managerTeam(self,id,_param_name:str = 'managerTeam') -> 'ManagerTeam':
        param_list = []
        param_list.append(("id",id))
        inst = ManagerTeam(self,param_list)
        self._add_to_query("managerTeam",_param_name,inst)
        self.value_managerTeam = inst
        return inst

    def myAvailableStories(self,sport,_param_name:str = 'myAvailableStories') -> 'Story':
        param_list = []
        param_list.append(("sport",sport))
        inst = Story(self,param_list)
        self._add_to_query("myAvailableStories",_param_name,inst)
        self.value_myAvailableStories = inst
        return inst

    def myOngoingAndRecentSo5Lineups(self,_param_name:str = 'myOngoingAndRecentSo5Lineups') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("myOngoingAndRecentSo5Lineups",_param_name,inst)
        self.value_myOngoingAndRecentSo5Lineups = inst
        return inst

    def myOngoingSo5Fixture(self,eventType,sport,_param_name:str = 'myOngoingSo5Fixture') -> 'So5Fixture':
        param_list = []
        param_list.append(("eventType",eventType))
        param_list.append(("sport",sport))
        inst = So5Fixture(self,param_list)
        self._add_to_query("myOngoingSo5Fixture",_param_name,inst)
        self.value_myOngoingSo5Fixture = inst
        return inst

    def myOpenedSo5LineupImportsBatch(self,_param_name:str = 'myOpenedSo5LineupImportsBatch') -> 'So5LineupImportsBatch':
        param_list = []
        inst = So5LineupImportsBatch(self,param_list)
        self._add_to_query("myOpenedSo5LineupImportsBatch",_param_name,inst)
        self.value_myOpenedSo5LineupImportsBatch = inst
        return inst

    def myPodiums(self,_param_name:str = 'myPodiums') -> 'So5Podium':
        param_list = []
        inst = So5Podium(self,param_list)
        self._add_to_query("myPodiums",_param_name,inst)
        self.value_myPodiums = inst
        return inst

    def myPodiumsDetails(self,ranking,rarityType,tournamentType,_param_name:str = 'myPodiumsDetails') -> 'So5Ranking':
        param_list = []
        param_list.append(("ranking",ranking))
        param_list.append(("rarityType",rarityType))
        param_list.append(("tournamentType",tournamentType))
        inst = So5Ranking(self,param_list)
        self._add_to_query("myPodiumsDetails",_param_name,inst)
        self.value_myPodiumsDetails = inst
        return inst

    def mySo5UserGroups(self,after,before,first,last,statuses,_param_name:str = 'mySo5UserGroups') -> 'So5UserGroupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("statuses",statuses))
        inst = So5UserGroupConnection(self,param_list)
        self._add_to_query("mySo5UserGroups",_param_name,inst)
        self.value_mySo5UserGroups = inst
        return inst

    def myUpcomingLineupsPaginated(self,after,before,draft,first,last,so5LeaderboardSlug,training,_param_name:str = 'myUpcomingLineupsPaginated') -> 'So5LineupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("draft",draft))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("so5LeaderboardSlug",so5LeaderboardSlug))
        param_list.append(("training",training))
        inst = So5LineupConnection(self,param_list)
        self._add_to_query("myUpcomingLineupsPaginated",_param_name,inst)
        self.value_myUpcomingLineupsPaginated = inst
        return inst

    def myUserGroups(self,after,before,first,last,statuses,_param_name:str = 'myUserGroups') -> 'UserGroupInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("statuses",statuses))
        inst = UserGroupInterfaceConnection(self,param_list)
        self._add_to_query("myUserGroups",_param_name,inst)
        self.value_myUserGroups = inst
        return inst

    def noCardRoute(self,sport,_param_name:str = 'noCardRoute') -> 'FootballSo5NoCardRouteRoot':
        param_list = []
        param_list.append(("sport",sport))
        inst = FootballSo5NoCardRouteRoot(self,param_list)
        self._add_to_query("noCardRoute",_param_name,inst)
        self.value_noCardRoute = inst
        return inst

    def onboardingCommonDraftCampaigns(self,_param_name:str = 'onboardingCommonDraftCampaigns') -> 'CommonDraftCampaign':
        param_list = []
        inst = CommonDraftCampaign(self,param_list)
        self._add_to_query("onboardingCommonDraftCampaigns",_param_name,inst)
        self.value_onboardingCommonDraftCampaigns = inst
        return inst

    def onboardingCompetitions(self,_param_name:str = 'onboardingCompetitions') -> 'OnboardingCompetition':
        param_list = []
        inst = OnboardingCompetition(self,param_list)
        self._add_to_query("onboardingCompetitions",_param_name,inst)
        self.value_onboardingCompetitions = inst
        return inst

    def playerGameScore(self,id,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("id",id))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def seasonalityName(self,seasonality,_param_name:str = 'seasonalityName'):
        inst = None
        self._add_to_query("seasonalityName",_param_name)
        pass

    def so5Appearance(self,id,_param_name:str = 'so5Appearance') -> 'So5Appearance':
        param_list = []
        param_list.append(("id",id))
        inst = So5Appearance(self,param_list)
        self._add_to_query("so5Appearance",_param_name,inst)
        self.value_so5Appearance = inst
        return inst

    def so5Fixture(self,eventType,id,slug,sport,type,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        param_list.append(("eventType",eventType))
        param_list.append(("id",id))
        param_list.append(("slug",slug))
        param_list.append(("sport",sport))
        param_list.append(("type",type))
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5Fixtures(self,aasmStates,after,before,eventType,first,last,sport,_param_name:str = 'so5Fixtures') -> 'So5FixtureConnection':
        param_list = []
        param_list.append(("aasmStates",aasmStates))
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("eventType",eventType))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = So5FixtureConnection(self,param_list)
        self._add_to_query("so5Fixtures",_param_name,inst)
        self.value_so5Fixtures = inst
        return inst

    def so5Leaderboard(self,slug,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5LeaderboardContender(self,slug,_param_name:str = 'so5LeaderboardContender') -> 'So5LeaderboardContender':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("so5LeaderboardContender",_param_name,inst)
        self.value_so5LeaderboardContender = inst
        return inst

    def so5LeaderboardGroup(self,slug,_param_name:str = 'so5LeaderboardGroup') -> 'So5LeaderboardGroup':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5LeaderboardGroup(self,param_list)
        self._add_to_query("so5LeaderboardGroup",_param_name,inst)
        self.value_so5LeaderboardGroup = inst
        return inst

    def so5League(self,slug,_param_name:str = 'so5League') -> 'So5League':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5League(self,param_list)
        self._add_to_query("so5League",_param_name,inst)
        self.value_so5League = inst
        return inst

    def so5Lineup(self,id,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        param_list.append(("id",id))
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst

    def so5LineupImportsBatch(self,id,_param_name:str = 'so5LineupImportsBatch') -> 'So5LineupImportsBatch':
        param_list = []
        param_list.append(("id",id))
        inst = So5LineupImportsBatch(self,param_list)
        self._add_to_query("so5LineupImportsBatch",_param_name,inst)
        self.value_so5LineupImportsBatch = inst
        return inst

    def so5NoCardLineup(self,id,_param_name:str = 'so5NoCardLineup') -> 'So5NoCardLineup':
        param_list = []
        param_list.append(("id",id))
        inst = So5NoCardLineup(self,param_list)
        self._add_to_query("so5NoCardLineup",_param_name,inst)
        self.value_so5NoCardLineup = inst
        return inst

    def so5Ranking(self,id,_param_name:str = 'so5Ranking') -> 'So5Ranking':
        param_list = []
        param_list.append(("id",id))
        inst = So5Ranking(self,param_list)
        self._add_to_query("so5Ranking",_param_name,inst)
        self.value_so5Ranking = inst
        return inst

    def so5Reward(self,slug,_param_name:str = 'so5Reward') -> 'So5Reward':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5Reward(self,param_list)
        self._add_to_query("so5Reward",_param_name,inst)
        self.value_so5Reward = inst
        return inst

    def so5Rewards(self,ids,_param_name:str = 'so5Rewards') -> 'So5Reward':
        param_list = []
        param_list.append(("ids",ids))
        inst = So5Reward(self,param_list)
        self._add_to_query("so5Rewards",_param_name,inst)
        self.value_so5Rewards = inst
        return inst

    def so5Score(self,id,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        param_list.append(("id",id))
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst

    def so5UserGroup(self,joinSecret,slug,_param_name:str = 'so5UserGroup') -> 'So5UserGroup':
        param_list = []
        param_list.append(("joinSecret",joinSecret))
        param_list.append(("slug",slug))
        inst = So5UserGroup(self,param_list)
        self._add_to_query("so5UserGroup",_param_name,inst)
        self.value_so5UserGroup = inst
        return inst

    def so5UserGroupMembership(self,id,_param_name:str = 'so5UserGroupMembership') -> 'So5UserGroupMembership':
        param_list = []
        param_list.append(("id",id))
        inst = So5UserGroupMembership(self,param_list)
        self._add_to_query("so5UserGroupMembership",_param_name,inst)
        self.value_so5UserGroupMembership = inst
        return inst

    def totalUpcomingRewards(self,sport,_param_name:str = 'totalUpcomingRewards') -> 'RewardsOverview':
        param_list = []
        param_list.append(("sport",sport))
        inst = RewardsOverview(self,param_list)
        self._add_to_query("totalUpcomingRewards",_param_name,inst)
        self.value_totalUpcomingRewards = inst
        return inst

    def universalSo5UserGroups(self,after,before,first,last,statuses,_param_name:str = 'universalSo5UserGroups') -> 'So5UserGroupConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("statuses",statuses))
        inst = So5UserGroupConnection(self,param_list)
        self._add_to_query("universalSo5UserGroups",_param_name,inst)
        self.value_universalSo5UserGroups = inst
        return inst

    def universalUserGroups(self,after,before,first,last,statuses,_param_name:str = 'universalUserGroups') -> 'UserGroupInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("statuses",statuses))
        inst = UserGroupInterfaceConnection(self,param_list)
        self._add_to_query("universalUserGroups",_param_name,inst)
        self.value_universalUserGroups = inst
        return inst

    def upcomingLeaderboards(self,competitionSlugs,rarities,_param_name:str = 'upcomingLeaderboards') -> 'So5Leaderboard':
        param_list = []
        param_list.append(("competitionSlugs",competitionSlugs))
        param_list.append(("rarities",rarities))
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("upcomingLeaderboards",_param_name,inst)
        self.value_upcomingLeaderboards = inst
        return inst

    def upcomingLeaderboardsPaginated(self,after,before,competitionSlugs,first,last,rarities,_param_name:str = 'upcomingLeaderboardsPaginated') -> 'So5LeaderboardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("competitionSlugs",competitionSlugs))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("rarities",rarities))
        inst = So5LeaderboardConnection(self,param_list)
        self._add_to_query("upcomingLeaderboardsPaginated",_param_name,inst)
        self.value_upcomingLeaderboardsPaginated = inst
        return inst

    def userCardCollection(self,id,_param_name:str = 'userCardCollection') -> 'UserCardCollection':
        param_list = []
        param_list.append(("id",id))
        inst = UserCardCollection(self,param_list)
        self._add_to_query("userCardCollection",_param_name,inst)
        self.value_userCardCollection = inst
        return inst


class FootballRoot(GraphQLObject):
    value_allCards:'CardConnection' = None
    value_card:'Card' = None
    value_cardByAssetId:'Card' = None
    value_cardByBlockchainId:'Card' = None
    value_cardCollection:'CardCollection' = None
    value_cards:'list[Card]' = None
    value_club:'Club' = None
    value_clubs:'list[Club]' = None
    value_clubsReady:'list[Club]' = None
    value_competition:'Competition' = None
    value_currentManagerHasLiveGames = None
    value_customDeck:'CustomDeck' = None
    value_ethereumCards:'list[Card]' = None
    value_game:'Game' = None
    value_id = None
    value_leaguesOpenForGameStats:'list[Competition]' = None
    value_myLiveGames:'list[Game]' = None
    value_myOngoingAndRecentGames:'list[Game]' = None
    value_nationalTeam:'NationalTeam' = None
    value_nationalTeams:'list[NationalTeam]' = None
    value_player:'Player' = None
    value_players:'list[Player]' = None
    value_rivals:'FootballRivalsRoot' = None
    value_season:'Season' = None
    value_shopItems:'ClubShopItemConnection' = None
    value_so5:'So5Root' = None
    value_userCardCollection:'UserCardCollection' = None
    def allCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'allCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("allCards",_param_name,inst)
        self.value_allCards = inst
        return inst

    def card(self,slug,_param_name:str = 'card') -> 'Card':
        param_list = []
        param_list.append(("slug",slug))
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def cardByAssetId(self,assetId,_param_name:str = 'cardByAssetId') -> 'Card':
        param_list = []
        param_list.append(("assetId",assetId))
        inst = Card(self,param_list)
        self._add_to_query("cardByAssetId",_param_name,inst)
        self.value_cardByAssetId = inst
        return inst

    def cardByBlockchainId(self,blockchainId,_param_name:str = 'cardByBlockchainId') -> 'Card':
        param_list = []
        param_list.append(("blockchainId",blockchainId))
        inst = Card(self,param_list)
        self._add_to_query("cardByBlockchainId",_param_name,inst)
        self.value_cardByBlockchainId = inst
        return inst

    def cardCollection(self,slug,_param_name:str = 'cardCollection') -> 'CardCollection':
        param_list = []
        param_list.append(("slug",slug))
        inst = CardCollection(self,param_list)
        self._add_to_query("cardCollection",_param_name,inst)
        self.value_cardCollection = inst
        return inst

    def cards(self,age,assetIds,customCardEditionName,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'Card':
        param_list = []
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = Card(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def club(self,slug,_param_name:str = 'club') -> 'Club':
        param_list = []
        param_list.append(("slug",slug))
        inst = Club(self,param_list)
        self._add_to_query("club",_param_name,inst)
        self.value_club = inst
        return inst

    def clubs(self,slugs,_param_name:str = 'clubs') -> 'Club':
        param_list = []
        param_list.append(("slugs",slugs))
        inst = Club(self,param_list)
        self._add_to_query("clubs",_param_name,inst)
        self.value_clubs = inst
        return inst

    def clubsReady(self,_param_name:str = 'clubsReady') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("clubsReady",_param_name,inst)
        self.value_clubsReady = inst
        return inst

    def competition(self,slug,_param_name:str = 'competition') -> 'Competition':
        param_list = []
        param_list.append(("slug",slug))
        inst = Competition(self,param_list)
        self._add_to_query("competition",_param_name,inst)
        self.value_competition = inst
        return inst

    def currentManagerHasLiveGames(self,sport,_param_name:str = 'currentManagerHasLiveGames'):
        inst = None
        self._add_to_query("currentManagerHasLiveGames",_param_name)
        pass

    def customDeck(self,name,slug,_param_name:str = 'customDeck') -> 'CustomDeck':
        param_list = []
        param_list.append(("name",name))
        param_list.append(("slug",slug))
        inst = CustomDeck(self,param_list)
        self._add_to_query("customDeck",_param_name,inst)
        self.value_customDeck = inst
        return inst

    def ethereumCards(self,address,_param_name:str = 'ethereumCards') -> 'Card':
        param_list = []
        param_list.append(("address",address))
        inst = Card(self,param_list)
        self._add_to_query("ethereumCards",_param_name,inst)
        self.value_ethereumCards = inst
        return inst

    def game(self,id,_param_name:str = 'game') -> 'Game':
        param_list = []
        param_list.append(("id",id))
        inst = Game(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def leaguesOpenForGameStats(self,sortType:'LeaguesSortInput',_param_name:str = 'leaguesOpenForGameStats') -> 'Competition':
        param_list = []
        param_list.append(("sortType",sortType))
        inst = Competition(self,param_list)
        self._add_to_query("leaguesOpenForGameStats",_param_name,inst)
        self.value_leaguesOpenForGameStats = inst
        return inst

    def myLiveGames(self,_param_name:str = 'myLiveGames') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("myLiveGames",_param_name,inst)
        self.value_myLiveGames = inst
        return inst

    def myOngoingAndRecentGames(self,_param_name:str = 'myOngoingAndRecentGames') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("myOngoingAndRecentGames",_param_name,inst)
        self.value_myOngoingAndRecentGames = inst
        return inst

    def nationalTeam(self,countryCode,slug,_param_name:str = 'nationalTeam') -> 'NationalTeam':
        param_list = []
        param_list.append(("countryCode",countryCode))
        param_list.append(("slug",slug))
        inst = NationalTeam(self,param_list)
        self._add_to_query("nationalTeam",_param_name,inst)
        self.value_nationalTeam = inst
        return inst

    def nationalTeams(self,slugs,_param_name:str = 'nationalTeams') -> 'NationalTeam':
        param_list = []
        param_list.append(("slugs",slugs))
        inst = NationalTeam(self,param_list)
        self._add_to_query("nationalTeams",_param_name,inst)
        self.value_nationalTeams = inst
        return inst

    def player(self,slug,_param_name:str = 'player') -> 'Player':
        param_list = []
        param_list.append(("slug",slug))
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def players(self,slugs,_param_name:str = 'players') -> 'Player':
        param_list = []
        param_list.append(("slugs",slugs))
        inst = Player(self,param_list)
        self._add_to_query("players",_param_name,inst)
        self.value_players = inst
        return inst

    def rivals(self,_param_name:str = 'rivals') -> 'FootballRivalsRoot':
        param_list = []
        inst = FootballRivalsRoot(self,param_list)
        self._add_to_query("rivals",_param_name,inst)
        self.value_rivals = inst
        return inst

    def season(self,startYear,_param_name:str = 'season') -> 'Season':
        param_list = []
        param_list.append(("startYear",startYear))
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def shopItems(self,after,before,first,last,sortType:'ShopItemsSortInput',types,unlockedOnly,_param_name:str = 'shopItems') -> 'ClubShopItemConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("types",types))
        param_list.append(("unlockedOnly",unlockedOnly))
        inst = ClubShopItemConnection(self,param_list)
        self._add_to_query("shopItems",_param_name,inst)
        self.value_shopItems = inst
        return inst

    def so5(self,_param_name:str = 'so5') -> 'So5Root':
        param_list = []
        inst = So5Root(self,param_list)
        self._add_to_query("so5",_param_name,inst)
        self.value_so5 = inst
        return inst

    def userCardCollection(self,id,_param_name:str = 'userCardCollection') -> 'UserCardCollection':
        param_list = []
        param_list.append(("id",id))
        inst = UserCardCollection(self,param_list)
        self._add_to_query("userCardCollection",_param_name,inst)
        self.value_userCardCollection = inst
        return inst


class IncompleteCardCollection(GraphQLObject):
    value_cardCollection:'CardCollection' = None
    value_recommendedSlots:'list[CardCollectionSlot]' = None
    def cardCollection(self,_param_name:str = 'cardCollection') -> 'CardCollection':
        param_list = []
        inst = CardCollection(self,param_list)
        self._add_to_query("cardCollection",_param_name,inst)
        self.value_cardCollection = inst
        return inst

    def recommendedSlots(self,_param_name:str = 'recommendedSlots') -> 'CardCollectionSlot':
        param_list = []
        inst = CardCollectionSlot(self,param_list)
        self._add_to_query("recommendedSlots",_param_name,inst)
        self.value_recommendedSlots = inst
        return inst


class IncompleteCardCollectionEdge(GraphQLObject):
    value_cursor = None
    value_node:'IncompleteCardCollection' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'IncompleteCardCollection':
        param_list = []
        inst = IncompleteCardCollection(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class IncompleteCardCollectionConnection(GraphQLObject):
    value_edges:'list[IncompleteCardCollectionEdge]' = None
    value_nodes:'list[IncompleteCardCollection]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'IncompleteCardCollectionEdge':
        param_list = []
        inst = IncompleteCardCollectionEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'IncompleteCardCollection':
        param_list = []
        inst = IncompleteCardCollection(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class Substitute(GraphQLObject):
    value_position = None
    value_so5League:'So5League' = None
    value_substitutes:'list[AnyPlayerInterface]' = None
    value_unavailablePlayer:'AnyPlayerInterface' = None
    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def so5League(self,_param_name:str = 'so5League') -> 'So5League':
        param_list = []
        inst = So5League(self,param_list)
        self._add_to_query("so5League",_param_name,inst)
        self.value_so5League = inst
        return inst

    def substitutes(self,_param_name:str = 'substitutes') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("substitutes",_param_name,inst)
        self.value_substitutes = inst
        return inst

    def unavailablePlayer(self,_param_name:str = 'unavailablePlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("unavailablePlayer",_param_name,inst)
        self.value_unavailablePlayer = inst
        return inst


class WinningLineup(GraphQLObject):
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5League:'So5League' = None
    value_so5Lineup:'So5Lineup' = None
    def so5Leaderboard(self,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5League(self,_param_name:str = 'so5League') -> 'So5League':
        param_list = []
        inst = So5League(self,param_list)
        self._add_to_query("so5League",_param_name,inst)
        self.value_so5League = inst
        return inst

    def so5Lineup(self,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst


class ForYouRoot(GraphQLObject):
    value_featuredLeagues:'list[So5League]' = None
    value_featuredLeaguesWithUpcoming:'list[FeaturedLeagues]' = None
    value_friendsRecentPurchases:'list[TokenOwner]' = None
    value_myIncompleteCardCollections:'list[IncompleteCardCollection]' = None
    value_myIncompleteCardCollectionsPaginated:'IncompleteCardCollectionConnection' = None
    value_unavailablePlayersSubstitutes:'list[Substitute]' = None
    value_winningLineup:'WinningLineup' = None
    def featuredLeagues(self,sport,_param_name:str = 'featuredLeagues') -> 'So5League':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5League(self,param_list)
        self._add_to_query("featuredLeagues",_param_name,inst)
        self.value_featuredLeagues = inst
        return inst

    def featuredLeaguesWithUpcoming(self,sport,_param_name:str = 'featuredLeaguesWithUpcoming') -> 'FeaturedLeagues':
        param_list = []
        param_list.append(("sport",sport))
        inst = FeaturedLeagues(self,param_list)
        self._add_to_query("featuredLeaguesWithUpcoming",_param_name,inst)
        self.value_featuredLeaguesWithUpcoming = inst
        return inst

    def friendsRecentPurchases(self,so5LeagueSlug,_param_name:str = 'friendsRecentPurchases') -> 'TokenOwner':
        param_list = []
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = TokenOwner(self,param_list)
        self._add_to_query("friendsRecentPurchases",_param_name,inst)
        self.value_friendsRecentPurchases = inst
        return inst

    def myIncompleteCardCollections(self,so5LeagueSlug,_param_name:str = 'myIncompleteCardCollections') -> 'IncompleteCardCollection':
        param_list = []
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = IncompleteCardCollection(self,param_list)
        self._add_to_query("myIncompleteCardCollections",_param_name,inst)
        self.value_myIncompleteCardCollections = inst
        return inst

    def myIncompleteCardCollectionsPaginated(self,after,before,first,last,so5LeagueSlug,_param_name:str = 'myIncompleteCardCollectionsPaginated') -> 'IncompleteCardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = IncompleteCardCollectionConnection(self,param_list)
        self._add_to_query("myIncompleteCardCollectionsPaginated",_param_name,inst)
        self.value_myIncompleteCardCollectionsPaginated = inst
        return inst

    def unavailablePlayersSubstitutes(self,limit,so5LeagueSlug,_param_name:str = 'unavailablePlayersSubstitutes') -> 'Substitute':
        param_list = []
        param_list.append(("limit",limit))
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = Substitute(self,param_list)
        self._add_to_query("unavailablePlayersSubstitutes",_param_name,inst)
        self.value_unavailablePlayersSubstitutes = inst
        return inst

    def winningLineup(self,so5LeagueSlug,_param_name:str = 'winningLineup') -> 'WinningLineup':
        param_list = []
        param_list.append(("so5LeagueSlug",so5LeagueSlug))
        inst = WinningLineup(self,param_list)
        self._add_to_query("winningLineup",_param_name,inst)
        self.value_winningLineup = inst
        return inst


class FullWithdrawalRequest(GraphQLObject):
    value_id = None
    value_served = None
    value_valid = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def served(self,_param_name:str = 'served'):
        inst = None
        self._add_to_query("served",_param_name)
        pass

    def valid(self,_param_name:str = 'valid'):
        inst = None
        self._add_to_query("valid",_param_name)
        pass


class GbBankAccount(GraphQLObject):
    value_accountNumber = None
    value_country:'Country' = None
    value_id = None
    value_ownerAddress:'MangopayBankAccountOwnerAddress' = None
    value_ownerName = None
    value_sortCode = None
    def accountNumber(self,_param_name:str = 'accountNumber'):
        inst = None
        self._add_to_query("accountNumber",_param_name)
        pass

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def ownerAddress(self,_param_name:str = 'ownerAddress') -> 'MangopayBankAccountOwnerAddress':
        param_list = []
        inst = MangopayBankAccountOwnerAddress(self,param_list)
        self._add_to_query("ownerAddress",_param_name,inst)
        self.value_ownerAddress = inst
        return inst

    def ownerName(self,_param_name:str = 'ownerName'):
        inst = None
        self._add_to_query("ownerName",_param_name)
        pass

    def sortCode(self,_param_name:str = 'sortCode'):
        inst = None
        self._add_to_query("sortCode",_param_name)
        pass


class generateAccountingExtractInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,includeCreditCardPayments = None,includeFiatEntries = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('includeCreditCardPayments',includeCreditCardPayments)
        self._add_parameter('includeFiatEntries',includeFiatEntries)

class generateAccountingExtractPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class generateOtpBackupCodesInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,otpAttempt = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('otpAttempt',otpAttempt)

class generateOtpBackupCodesPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_otpBackupCodes = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def otpBackupCodes(self,_param_name:str = 'otpBackupCodes'):
        inst = None
        self._add_to_query("otpBackupCodes",_param_name)
        pass


class generateOtpProvisioningUriInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class generateOtpProvisioningUriPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_otpProvisioningUri = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def otpProvisioningUri(self,_param_name:str = 'otpProvisioningUri'):
        inst = None
        self._add_to_query("otpProvisioningUri",_param_name)
        pass


class generateSo5NoCardLineupInput(GraphQLInputObject):
    def __init__(self,accessToken = None,clientMutationId = None,proofOfResidencyPresignedKey = None,recaptchaToken = None,recaptchaTokenIos = None,recaptchaTokenV2 = None,so5FixtureId = None):
        self._add_parameter('accessToken',accessToken)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('proofOfResidencyPresignedKey',proofOfResidencyPresignedKey)
        self._add_parameter('recaptchaToken',recaptchaToken)
        self._add_parameter('recaptchaTokenIos',recaptchaTokenIos)
        self._add_parameter('recaptchaTokenV2',recaptchaTokenV2)
        self._add_parameter('so5FixtureId',so5FixtureId)

class generateSo5NoCardLineupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class GiphySentActivity(GraphQLObject):
    value_activity:'ActivitiesInterface' = None
    value_celebratable = None
    value_createdAt = None
    value_giphySlug = None
    value_id = None
    value_mp4Url = None
    value_reactions:'list[ActivityReactionType]' = None
    value_rivalsManager:'FootballRivalsManager' = None
    def activity(self,_param_name:str = 'activity') -> 'ActivitiesInterface':
        param_list = []
        inst = ActivitiesInterface(self,param_list)
        self._add_to_query("activity",_param_name,inst)
        self.value_activity = inst
        return inst

    def celebratable(self,_param_name:str = 'celebratable'):
        inst = None
        self._add_to_query("celebratable",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def giphySlug(self,_param_name:str = 'giphySlug'):
        inst = None
        self._add_to_query("giphySlug",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mp4Url(self,_param_name:str = 'mp4Url'):
        inst = None
        self._add_to_query("mp4Url",_param_name)
        pass

    def reactions(self,_param_name:str = 'reactions') -> 'ActivityReactionType':
        param_list = []
        inst = ActivityReactionType(self,param_list)
        self._add_to_query("reactions",_param_name,inst)
        self.value_reactions = inst
        return inst

    def rivalsManager(self,_param_name:str = 'rivalsManager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("rivalsManager",_param_name,inst)
        self.value_rivalsManager = inst
        return inst


class IbanBankAccount(GraphQLObject):
    value_bic = None
    value_country:'Country' = None
    value_iban = None
    value_id = None
    value_ownerAddress:'MangopayBankAccountOwnerAddress' = None
    value_ownerName = None
    def bic(self,_param_name:str = 'bic'):
        inst = None
        self._add_to_query("bic",_param_name)
        pass

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def iban(self,_param_name:str = 'iban'):
        inst = None
        self._add_to_query("iban",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def ownerAddress(self,_param_name:str = 'ownerAddress') -> 'MangopayBankAccountOwnerAddress':
        param_list = []
        inst = MangopayBankAccountOwnerAddress(self,param_list)
        self._add_to_query("ownerAddress",_param_name,inst)
        self.value_ownerAddress = inst
        return inst

    def ownerName(self,_param_name:str = 'ownerName'):
        inst = None
        self._add_to_query("ownerName",_param_name)
        pass


class JerseyDeliverableItem(GraphQLObject):
    value_competition:'Competition' = None
    value_id = None
    value_mandatoryWearableSizeInput = None
    value_name = None
    value_signed = None
    value_slug = None
    value_sport = None
    value_team = None
    def competition(self,_param_name:str = 'competition') -> 'Competition':
        param_list = []
        inst = Competition(self,param_list)
        self._add_to_query("competition",_param_name,inst)
        self.value_competition = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mandatoryWearableSizeInput(self,_param_name:str = 'mandatoryWearableSizeInput'):
        inst = None
        self._add_to_query("mandatoryWearableSizeInput",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def signed(self,_param_name:str = 'signed'):
        inst = None
        self._add_to_query("signed",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def team(self,_param_name:str = 'team'):
        inst = None
        self._add_to_query("team",_param_name)
        pass


class JerseyShopItem(GraphQLObject):
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_createdAt = None
    value_currentStockCount = None
    value_description = None
    value_disabled = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_initialStockCount = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    value_variantStockCounts:'list[VariantStockCount]' = None
    value_variantType = None
    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def currentStockCount(self,_param_name:str = 'currentStockCount'):
        inst = None
        self._add_to_query("currentStockCount",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def initialStockCount(self,_param_name:str = 'initialStockCount'):
        inst = None
        self._add_to_query("initialStockCount",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass

    def variantStockCounts(self,_param_name:str = 'variantStockCounts') -> 'VariantStockCount':
        param_list = []
        inst = VariantStockCount(self,param_list)
        self._add_to_query("variantStockCounts",_param_name,inst)
        self.value_variantStockCounts = inst
        return inst

    def variantType(self,_param_name:str = 'variantType'):
        inst = None
        self._add_to_query("variantType",_param_name)
        pass


class joinSo5UserGroupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,joinSecret = None,userGroupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('joinSecret',joinSecret)
        self._add_parameter('userGroupId',userGroupId)

class joinSo5UserGroupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5UserGroup:'So5UserGroup' = None
    value_userGroup:'UserGroupInterface' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5UserGroup(self,_param_name:str = 'so5UserGroup') -> 'So5UserGroup':
        param_list = []
        inst = So5UserGroup(self,param_list)
        self._add_to_query("so5UserGroup",_param_name,inst)
        self.value_so5UserGroup = inst
        return inst

    def userGroup(self,_param_name:str = 'userGroup') -> 'UserGroupInterface':
        param_list = []
        inst = UserGroupInterface(self,param_list)
        self._add_to_query("userGroup",_param_name,inst)
        self.value_userGroup = inst
        return inst


class KycDocumentRequirement(GraphQLObject):
    value_documentType = None
    value_nbPages = None
    def documentType(self,_param_name:str = 'documentType'):
        inst = None
        self._add_to_query("documentType",_param_name)
        pass

    def nbPages(self,_param_name:str = 'nbPages'):
        inst = None
        self._add_to_query("nbPages",_param_name)
        pass


class KycRequestNotification(GraphQLObject):
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_refusedReason = None
    value_sport = None
    value_status = None
    value_user:'CurrentUser' = None
    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def refusedReason(self,_param_name:str = 'refusedReason'):
        inst = None
        self._add_to_query("refusedReason",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class LeaderboardEligibleCardData(GraphQLObject):
    value_currentSeasonCardCounts:'CardCountsByRarity' = None
    value_priorSeasonCardCounts:'CardCountsByRarity' = None
    def currentSeasonCardCounts(self,_param_name:str = 'currentSeasonCardCounts') -> 'CardCountsByRarity':
        param_list = []
        inst = CardCountsByRarity(self,param_list)
        self._add_to_query("currentSeasonCardCounts",_param_name,inst)
        self.value_currentSeasonCardCounts = inst
        return inst

    def priorSeasonCardCounts(self,_param_name:str = 'priorSeasonCardCounts') -> 'CardCountsByRarity':
        param_list = []
        inst = CardCountsByRarity(self,param_list)
        self._add_to_query("priorSeasonCardCounts",_param_name,inst)
        self.value_priorSeasonCardCounts = inst
        return inst


class League(GraphQLObject):
    value_id = None
    value_slug = None
    value_name = None
    value_usSport = None
    value_memberCount = None
    value_members:'list[User]' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def usSport(self,_param_name:str = 'usSport'):
        inst = None
        self._add_to_query("usSport",_param_name)
        pass

    def memberCount(self,_param_name:str = 'memberCount'):
        inst = None
        self._add_to_query("memberCount",_param_name)
        pass

    def members(self,offset,limit,_param_name:str = 'members') -> 'User':
        param_list = []
        param_list.append(("offset",offset))
        param_list.append(("limit",limit))
        inst = User(self,param_list)
        self._add_to_query("members",_param_name,inst)
        self.value_members = inst
        return inst


class LeagueInterface(GraphQLObject):
    value_id = None
    value_slug = None
    value_name = None
    value_members:'list[User]' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def members(self,_param_name:str = 'members') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("members",_param_name,inst)
        self.value_members = inst
        return inst


class LeagueLineup(GraphQLObject):
    value_rank = None
    value_lineup:'LineupInterface' = None
    value_leaderboard:'LeagueLeaderboard' = None
    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'LeagueLeaderboard':
        param_list = []
        inst = LeagueLeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst


class LeagueLeaderboard(GraphQLObject):
    value_league:'League' = None
    value_leaderboard:'LeaderboardInterface' = None
    value_lineupCount = None
    value_lineups:'list[LeagueLineup]' = None
    def league(self,_param_name:str = 'league') -> 'League':
        param_list = []
        inst = League(self,param_list)
        self._add_to_query("league",_param_name,inst)
        self.value_league = inst
        return inst

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'LeaderboardInterface':
        param_list = []
        inst = LeaderboardInterface(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def lineupCount(self,_param_name:str = 'lineupCount'):
        inst = None
        self._add_to_query("lineupCount",_param_name)
        pass

    def lineups(self,offset,limit,_param_name:str = 'lineups') -> 'LeagueLineup':
        param_list = []
        param_list.append(("offset",offset))
        param_list.append(("limit",limit))
        inst = LeagueLineup(self,param_list)
        self._add_to_query("lineups",_param_name,inst)
        self.value_lineups = inst
        return inst


class LeagueLineupInterface(GraphQLObject):
    value_rank = None
    value_lineup:'LineupInterface' = None
    value_leaderboard:'LeagueLeaderboardInterface' = None
    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'LineupInterface':
        param_list = []
        inst = LineupInterface(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'LeagueLeaderboardInterface':
        param_list = []
        inst = LeagueLeaderboardInterface(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst


class LeagueLeaderboardInterface(GraphQLObject):
    value_league:'LeagueInterface' = None
    value_leaderboard:'LeaderboardInterface' = None
    value_lineupCount = None
    value_lineups:'list[LeagueLineupInterface]' = None
    value_participants:'list[User]' = None
    def league(self,_param_name:str = 'league') -> 'LeagueInterface':
        param_list = []
        inst = LeagueInterface(self,param_list)
        self._add_to_query("league",_param_name,inst)
        self.value_league = inst
        return inst

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'LeaderboardInterface':
        param_list = []
        inst = LeaderboardInterface(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def lineupCount(self,_param_name:str = 'lineupCount'):
        inst = None
        self._add_to_query("lineupCount",_param_name)
        pass

    def lineups(self,_param_name:str = 'lineups') -> 'LeagueLineupInterface':
        param_list = []
        inst = LeagueLineupInterface(self,param_list)
        self._add_to_query("lineups",_param_name,inst)
        self.value_lineups = inst
        return inst

    def participants(self,_param_name:str = 'participants') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("participants",_param_name,inst)
        self.value_participants = inst
        return inst


class LeaguesSortInput(GraphQLInputObject):
    def __init__(self,direction = None,type = None):
        self._add_parameter('direction',direction)
        self._add_parameter('type',type)

class LevelUpShopItem(GraphQLObject):
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_createdAt = None
    value_description = None
    value_disabled = None
    value_endLevel = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_rarity = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_startLevel = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def endLevel(self,_param_name:str = 'endLevel'):
        inst = None
        self._add_to_query("endLevel",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def startLevel(self,_param_name:str = 'startLevel'):
        inst = None
        self._add_to_query("startLevel",_param_name)
        pass

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass


class linkEthereumAddressInput(GraphQLInputObject):
    def __init__(self,address = None,clientMutationId = None,signature = None):
        self._add_parameter('address',address)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('signature',signature)

class linkEthereumAddressPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class loadPreviousLineupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,managerTeamId = None,previousSo5LineupId = None,so5LeaderboardId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('managerTeamId',managerTeamId)
        self._add_parameter('previousSo5LineupId',previousSo5LineupId)
        self._add_parameter('so5LeaderboardId',so5LeaderboardId)

class loadPreviousLineupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5LeaderboardContender:'So5LeaderboardContender' = None
    value_so5Lineup:'So5Lineup' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5LeaderboardContender(self,_param_name:str = 'so5LeaderboardContender') -> 'So5LeaderboardContender':
        param_list = []
        inst = So5LeaderboardContender(self,param_list)
        self._add_to_query("so5LeaderboardContender",_param_name,inst)
        self.value_so5LeaderboardContender = inst
        return inst

    def so5Lineup(self,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst


class LoomAccount(GraphQLObject):
    value_address = None
    value_id = None
    def address(self,_param_name:str = 'address'):
        inst = None
        self._add_to_query("address",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class ManagerProgressionMission(GraphQLObject):
    value_aasmState = None
    value_category:'ManagerProgressionCategory' = None
    value_claimedAt = None
    value_completedAt = None
    value_configRewards:'list[ManagerTaskRewardInterface]' = None
    value_cutoffAt = None
    value_declarative = None
    value_description = None
    value_id = None
    value_name = None
    value_probabilisticBundles:'list[ProbabilisticBundle]' = None
    value_progress = None
    value_rewards = None
    value_target = None
    value_title = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def category(self,_param_name:str = 'category') -> 'ManagerProgressionCategory':
        param_list = []
        inst = ManagerProgressionCategory(self,param_list)
        self._add_to_query("category",_param_name,inst)
        self.value_category = inst
        return inst

    def claimedAt(self,_param_name:str = 'claimedAt'):
        inst = None
        self._add_to_query("claimedAt",_param_name)
        pass

    def completedAt(self,_param_name:str = 'completedAt'):
        inst = None
        self._add_to_query("completedAt",_param_name)
        pass

    def configRewards(self,_param_name:str = 'configRewards') -> 'ManagerTaskRewardInterface':
        param_list = []
        inst = ManagerTaskRewardInterface(self,param_list)
        self._add_to_query("configRewards",_param_name,inst)
        self.value_configRewards = inst
        return inst

    def cutoffAt(self,_param_name:str = 'cutoffAt'):
        inst = None
        self._add_to_query("cutoffAt",_param_name)
        pass

    def declarative(self,_param_name:str = 'declarative'):
        inst = None
        self._add_to_query("declarative",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def probabilisticBundles(self,_param_name:str = 'probabilisticBundles') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundles",_param_name,inst)
        self.value_probabilisticBundles = inst
        return inst

    def progress(self,_param_name:str = 'progress'):
        inst = None
        self._add_to_query("progress",_param_name)
        pass

    def rewards(self,_param_name:str = 'rewards'):
        inst = None
        self._add_to_query("rewards",_param_name)
        pass

    def target(self,_param_name:str = 'target'):
        inst = None
        self._add_to_query("target",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass


class ManagerProgressionMissionContentTile(GraphQLObject):
    value_color = None
    value_headline = None
    value_id = None
    value_mission:'ManagerProgressionMission' = None
    value_title = None
    value_type = None
    def color(self,_param_name:str = 'color'):
        inst = None
        self._add_to_query("color",_param_name)
        pass

    def headline(self,_param_name:str = 'headline'):
        inst = None
        self._add_to_query("headline",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mission(self,_param_name:str = 'mission') -> 'ManagerProgressionMission':
        param_list = []
        inst = ManagerProgressionMission(self,param_list)
        self._add_to_query("mission",_param_name,inst)
        self.value_mission = inst
        return inst

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def type(self,_param_name:str = 'type'):
        inst = None
        self._add_to_query("type",_param_name)
        pass


class ManagerProgressionNotification(GraphQLObject):
    value_createdAt = None
    value_id = None
    value_managerProgressionTask:'ManagerProgressionTask' = None
    value_name = None
    value_read = None
    value_sport = None
    value_user:'CurrentUser' = None
    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def managerProgressionTask(self,_param_name:str = 'managerProgressionTask') -> 'ManagerProgressionTask':
        param_list = []
        inst = ManagerProgressionTask(self,param_list)
        self._add_to_query("managerProgressionTask",_param_name,inst)
        self.value_managerProgressionTask = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class MangopayCreditCardAuthorizationRequest(GraphQLObject):
    value_amount = None
    value_currency = None
    value_id = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def currency(self,_param_name:str = 'currency'):
        inst = None
        self._add_to_query("currency",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class MangopayRoot(GraphQLObject):
    value_bankAccountType = None
    value_countryCurrency = None
    value_id = None
    value_kycDocumentRequirements:'list[KycDocumentRequirement]' = None
    value_ownerRegionRequired = None
    def bankAccountType(self,countryCode,_param_name:str = 'bankAccountType'):
        inst = None
        self._add_to_query("bankAccountType",_param_name)
        pass

    def countryCurrency(self,countryCode,_param_name:str = 'countryCurrency'):
        inst = None
        self._add_to_query("countryCurrency",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def kycDocumentRequirements(self,countryCode,_param_name:str = 'kycDocumentRequirements') -> 'KycDocumentRequirement':
        param_list = []
        param_list.append(("countryCode",countryCode))
        inst = KycDocumentRequirement(self,param_list)
        self._add_to_query("kycDocumentRequirements",_param_name,inst)
        self.value_kycDocumentRequirements = inst
        return inst

    def ownerRegionRequired(self,countryCode,_param_name:str = 'ownerRegionRequired'):
        inst = None
        self._add_to_query("ownerRegionRequired",_param_name)
        pass


class MangopayWalletTransferAuthorizationRequest(GraphQLObject):
    value_amount = None
    value_currency = None
    value_mangopayWalletId = None
    value_nonce = None
    value_operationHash = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def currency(self,_param_name:str = 'currency'):
        inst = None
        self._add_to_query("currency",_param_name)
        pass

    def mangopayWalletId(self,_param_name:str = 'mangopayWalletId'):
        inst = None
        self._add_to_query("mangopayWalletId",_param_name)
        pass

    def nonce(self,_param_name:str = 'nonce'):
        inst = None
        self._add_to_query("nonce",_param_name)
        pass

    def operationHash(self,_param_name:str = 'operationHash'):
        inst = None
        self._add_to_query("operationHash",_param_name)
        pass


class markCardShardsChestUnlockedThresholdAsSeenInput(GraphQLInputObject):
    def __init__(self,cardShardsChestId = None,clientMutationId = None):
        self._add_parameter('cardShardsChestId',cardShardsChestId)
        self._add_parameter('clientMutationId',clientMutationId)

class markCardShardsChestUnlockedThresholdAsSeenPayload(GraphQLObject):
    value_cardShardsChest:'CardShardsChest' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def cardShardsChest(self,_param_name:str = 'cardShardsChest') -> 'CardShardsChest':
        param_list = []
        inst = CardShardsChest(self,param_list)
        self._add_to_query("cardShardsChest",_param_name,inst)
        self.value_cardShardsChest = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class MarketplacePreferenceInput(GraphQLInputObject):
    def __init__(self,name = None,sports = None,value = None):
        self._add_parameter('name',name)
        self._add_parameter('sports',sports)
        self._add_parameter('value',value)

class markItemAsSeenInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,shopItemId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('shopItemId',shopItemId)

class markItemAsSeenPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_shopItem:'ShopItem' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def shopItem(self,_param_name:str = 'shopItem') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItem",_param_name,inst)
        self.value_shopItem = inst
        return inst


class markNotificationsAsReadInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,notificationId = None,notificationIds = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('notificationId',notificationId)
        self._add_parameter('notificationIds',notificationIds)

class markNotificationsAsReadPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class markStoriesAsReadInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,storyIds = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('storyIds',storyIds)

class markStoriesAsReadPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentRivalsManager:'FootballRivalsCurrentManager' = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_stories:'list[Story]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentRivalsManager(self,_param_name:str = 'currentRivalsManager') -> 'FootballRivalsCurrentManager':
        param_list = []
        inst = FootballRivalsCurrentManager(self,param_list)
        self._add_to_query("currentRivalsManager",_param_name,inst)
        self.value_currentRivalsManager = inst
        return inst

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def stories(self,_param_name:str = 'stories') -> 'Story':
        param_list = []
        inst = Story(self,param_list)
        self._add_to_query("stories",_param_name,inst)
        self.value_stories = inst
        return inst


class matchUserContactsInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,contacts:'ContactInput' = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('contacts',contacts)

class matchUserContactsPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class MonetaryReward(GraphQLObject):
    value_aasmState = None
    value_achievement = None
    value_amount:'MonetaryAmount' = None
    value_id = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def achievement(self,_param_name:str = 'achievement'):
        inst = None
        self._add_to_query("achievement",_param_name)
        pass

    def amount(self,_param_name:str = 'amount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amount",_param_name,inst)
        self.value_amount = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class prepareAcceptOfferPayload(GraphQLObject):
    value_authorizations:'list[AuthorizationRequest]' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def authorizations(self,_param_name:str = 'authorizations') -> 'AuthorizationRequest':
        param_list = []
        inst = AuthorizationRequest(self,param_list)
        self._add_to_query("authorizations",_param_name,inst)
        self.value_authorizations = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class prepareAcceptTradeWithWalletAndCreditCardPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class prepareBidPayload(GraphQLObject):
    value_authorizations:'list[AuthorizationRequest]' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def authorizations(self,_param_name:str = 'authorizations') -> 'AuthorizationRequest':
        param_list = []
        inst = AuthorizationRequest(self,param_list)
        self._add_to_query("authorizations",_param_name,inst)
        self.value_authorizations = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class TransferRequest(GraphQLObject):
    value_amount = None
    value_condition = None
    value_expirationTimestamp = None
    value_feeInfoUser:'Fee' = None
    value_nonce = None
    value_receiverPublicKey = None
    value_receiverVaultId = None
    value_senderVaultId = None
    value_token = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def condition(self,_param_name:str = 'condition'):
        inst = None
        self._add_to_query("condition",_param_name)
        pass

    def expirationTimestamp(self,_param_name:str = 'expirationTimestamp'):
        inst = None
        self._add_to_query("expirationTimestamp",_param_name)
        pass

    def feeInfoUser(self,_param_name:str = 'feeInfoUser') -> 'Fee':
        param_list = []
        inst = Fee(self,param_list)
        self._add_to_query("feeInfoUser",_param_name,inst)
        self.value_feeInfoUser = inst
        return inst

    def nonce(self,_param_name:str = 'nonce'):
        inst = None
        self._add_to_query("nonce",_param_name)
        pass

    def receiverPublicKey(self,_param_name:str = 'receiverPublicKey'):
        inst = None
        self._add_to_query("receiverPublicKey",_param_name)
        pass

    def receiverVaultId(self,_param_name:str = 'receiverVaultId'):
        inst = None
        self._add_to_query("receiverVaultId",_param_name)
        pass

    def senderVaultId(self,_param_name:str = 'senderVaultId'):
        inst = None
        self._add_to_query("senderVaultId",_param_name)
        pass

    def token(self,_param_name:str = 'token'):
        inst = None
        self._add_to_query("token",_param_name)
        pass


class prepareCardWithdrawalPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_transferRequest:'TransferRequest' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def transferRequest(self,_param_name:str = 'transferRequest') -> 'TransferRequest':
        param_list = []
        inst = TransferRequest(self,param_list)
        self._add_to_query("transferRequest",_param_name,inst)
        self.value_transferRequest = inst
        return inst


class prepareDepositPayload(GraphQLObject):
    value_authorization:'MangopayCreditCardAuthorizationRequest' = None
    value_clientMutationId = None
    value_creditCardAuthorization = None
    value_errors:'list[UserError]' = None
    def authorization(self,_param_name:str = 'authorization') -> 'MangopayCreditCardAuthorizationRequest':
        param_list = []
        inst = MangopayCreditCardAuthorizationRequest(self,param_list)
        self._add_to_query("authorization",_param_name,inst)
        self.value_authorization = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def creditCardAuthorization(self,_param_name:str = 'creditCardAuthorization'):
        inst = None
        self._add_to_query("creditCardAuthorization",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class prepareEthDepositPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_ethDeposit:'EthDeposit' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def ethDeposit(self,_param_name:str = 'ethDeposit') -> 'EthDeposit':
        param_list = []
        inst = EthDeposit(self,param_list)
        self._add_to_query("ethDeposit",_param_name,inst)
        self.value_ethDeposit = inst
        return inst


class prepareFastWithdrawalPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_fastWithdrawal:'FastWithdrawal' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def fastWithdrawal(self,_param_name:str = 'fastWithdrawal') -> 'FastWithdrawal':
        param_list = []
        inst = FastWithdrawal(self,param_list)
        self._add_to_query("fastWithdrawal",_param_name,inst)
        self.value_fastWithdrawal = inst
        return inst


class prepareIdealDepositPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_redirectUrl = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def redirectUrl(self,_param_name:str = 'redirectUrl'):
        inst = None
        self._add_to_query("redirectUrl",_param_name)
        pass


class prepareOfferPayload(GraphQLObject):
    value_authorizations:'list[AuthorizationRequest]' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def authorizations(self,_param_name:str = 'authorizations') -> 'AuthorizationRequest':
        param_list = []
        inst = AuthorizationRequest(self,param_list)
        self._add_to_query("authorizations",_param_name,inst)
        self.value_authorizations = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class preparePaypalDepositPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_redirectUrl = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def redirectUrl(self,_param_name:str = 'redirectUrl'):
        inst = None
        self._add_to_query("redirectUrl",_param_name)
        pass


class TokenDeposit(GraphQLObject):
    value_assetType = None
    value_starkKey = None
    value_tokenId = None
    value_vaultId = None
    def assetType(self,_param_name:str = 'assetType'):
        inst = None
        self._add_to_query("assetType",_param_name)
        pass

    def starkKey(self,_param_name:str = 'starkKey'):
        inst = None
        self._add_to_query("starkKey",_param_name)
        pass

    def tokenId(self,_param_name:str = 'tokenId'):
        inst = None
        self._add_to_query("tokenId",_param_name)
        pass

    def vaultId(self,_param_name:str = 'vaultId'):
        inst = None
        self._add_to_query("vaultId",_param_name)
        pass


class prepareTokenDepositPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_tokenDeposit:'TokenDeposit' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def tokenDeposit(self,_param_name:str = 'tokenDeposit') -> 'TokenDeposit':
        param_list = []
        inst = TokenDeposit(self,param_list)
        self._add_to_query("tokenDeposit",_param_name,inst)
        self.value_tokenDeposit = inst
        return inst


class probabilisticBundlesOpenPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_probabilisticBundle:'ProbabilisticBundle' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def probabilisticBundle(self,_param_name:str = 'probabilisticBundle') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundle",_param_name,inst)
        self.value_probabilisticBundle = inst
        return inst


class reactActivityPayload(GraphQLObject):
    value_activity:'ActivitiesInterface' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def activity(self,_param_name:str = 'activity') -> 'ActivitiesInterface':
        param_list = []
        inst = ActivitiesInterface(self,param_list)
        self._add_to_query("activity",_param_name,inst)
        self.value_activity = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class refreshAwardPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class rejectOfferPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_tokenOffer:'TokenOffer' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def tokenOffer(self,_param_name:str = 'tokenOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("tokenOffer",_param_name,inst)
        self.value_tokenOffer = inst
        return inst


class relayCallPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_transaction:'EthereumTransaction' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def transaction(self,_param_name:str = 'transaction') -> 'EthereumTransaction':
        param_list = []
        inst = EthereumTransaction(self,param_list)
        self._add_to_query("transaction",_param_name,inst)
        self.value_transaction = inst
        return inst


class removeAuctionReminderPayload(GraphQLObject):
    value_auction:'TokenAuction' = None
    value_auctionReminder:'AuctionReminder' = None
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def auction(self,_param_name:str = 'auction') -> 'TokenAuction':
        param_list = []
        inst = TokenAuction(self,param_list)
        self._add_to_query("auction",_param_name,inst)
        self.value_auction = inst
        return inst

    def auctionReminder(self,_param_name:str = 'auctionReminder') -> 'AuctionReminder':
        param_list = []
        inst = AuctionReminder(self,param_list)
        self._add_to_query("auctionReminder",_param_name,inst)
        self.value_auctionReminder = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class removeTokenFromDeckPayload(GraphQLObject):
    value_card:'AnyCardInterface' = None
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_deck:'Deck' = None
    value_errors:'list[UserError]' = None
    value_token:'Token' = None
    def card(self,_param_name:str = 'card') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def deck(self,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst


class removeUserFromSo5UserGroupPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5UserGroup:'So5UserGroup' = None
    value_userGroup:'UserGroupInterface' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5UserGroup(self,_param_name:str = 'so5UserGroup') -> 'So5UserGroup':
        param_list = []
        inst = So5UserGroup(self,param_list)
        self._add_to_query("so5UserGroup",_param_name,inst)
        self.value_so5UserGroup = inst
        return inst

    def userGroup(self,_param_name:str = 'userGroup') -> 'UserGroupInterface':
        param_list = []
        inst = UserGroupInterface(self,param_list)
        self._add_to_query("userGroup",_param_name,inst)
        self.value_userGroup = inst
        return inst


class reportTelemetryPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class requestReceiptPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_payment:'Payment' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def payment(self,_param_name:str = 'payment') -> 'Payment':
        param_list = []
        inst = Payment(self,param_list)
        self._add_to_query("payment",_param_name,inst)
        self.value_payment = inst
        return inst


class requestSo5NoCardLineupEligibleLeaderboardsPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_so5NoCardLineup:'So5NoCardLineup' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5NoCardLineup(self,_param_name:str = 'so5NoCardLineup') -> 'So5NoCardLineup':
        param_list = []
        inst = So5NoCardLineup(self,param_list)
        self._add_to_query("so5NoCardLineup",_param_name,inst)
        self.value_so5NoCardLineup = inst
        return inst


class resendConfirmationInstructionsPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class resendVerificationCodePayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class resetPrivateKeyPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class resetSo5NoCardDraftedAppearancesPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class restoreWalletPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class resumeOnboardingPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class revealBlueprintsPayload(GraphQLObject):
    value_cards:'list[AnyCardInterface]' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def cards(self,_param_name:str = 'cards') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class revokeDevicePayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class revokeOAuthAccessTokenPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class revokeOAuthAccessTokenForApplicationPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class sendWalletRecoveryPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class setDeviceTokenPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class setLiveActivityTokenPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class setTokenTradeStatusPayload(GraphQLObject):
    value_card:'AnyCardInterface' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_token:'Token' = None
    def card(self,_param_name:str = 'card') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst


class SignInMutationPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_jwtToken:'JwtToken' = None
    value_otpSessionChallenge = None
    value_tcuToken = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def jwtToken(self,aud,_param_name:str = 'jwtToken') -> 'JwtToken':
        param_list = []
        param_list.append(("aud",aud))
        inst = JwtToken(self,param_list)
        self._add_to_query("jwtToken",_param_name,inst)
        self.value_jwtToken = inst
        return inst

    def otpSessionChallenge(self,_param_name:str = 'otpSessionChallenge'):
        inst = None
        self._add_to_query("otpSessionChallenge",_param_name)
        pass

    def tcuToken(self,_param_name:str = 'tcuToken'):
        inst = None
        self._add_to_query("tcuToken",_param_name)
        pass


class SignInWithOAuthMutationPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_isSignUp = None
    value_jwtToken:'JwtToken' = None
    value_tcuToken = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def isSignUp(self,_param_name:str = 'isSignUp'):
        inst = None
        self._add_to_query("isSignUp",_param_name)
        pass

    def jwtToken(self,aud,_param_name:str = 'jwtToken') -> 'JwtToken':
        param_list = []
        param_list.append(("aud",aud))
        inst = JwtToken(self,param_list)
        self._add_to_query("jwtToken",_param_name,inst)
        self.value_jwtToken = inst
        return inst

    def tcuToken(self,_param_name:str = 'tcuToken'):
        inst = None
        self._add_to_query("tcuToken",_param_name)
        pass


class signOutFromAllDevicesPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class SignUpMutationPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_jwtToken:'JwtToken' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def jwtToken(self,aud,_param_name:str = 'jwtToken') -> 'JwtToken':
        param_list = []
        param_list.append(("aud",aud))
        inst = JwtToken(self,param_list)
        self._add_to_query("jwtToken",_param_name,inst)
        self.value_jwtToken = inst
        return inst


class skipOnboardingPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class spendCardShardsChestPayload(GraphQLObject):
    value_cardShardsChest:'CardShardsChest' = None
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def cardShardsChest(self,_param_name:str = 'cardShardsChest') -> 'CardShardsChest':
        param_list = []
        inst = CardShardsChest(self,param_list)
        self._add_to_query("cardShardsChest",_param_name,inst)
        self.value_cardShardsChest = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class startOnboardingPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class stopAutoBidPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_tokenBid:'TokenBid' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def tokenBid(self,_param_name:str = 'tokenBid') -> 'TokenBid':
        param_list = []
        inst = TokenBid(self,param_list)
        self._add_to_query("tokenBid",_param_name,inst)
        self.value_tokenBid = inst
        return inst


class UnblockEmailPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class unblockUserOffersPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class updateCardFiltersPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class updateExternalEthDepositPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class updateFiatWalletPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class updateHighlightedCardPayload(GraphQLObject):
    value_cardCollectionCard:'CardCollectionCard' = None
    value_cardCollectionSlot:'CardCollectionSlot' = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def cardCollectionCard(self,_param_name:str = 'cardCollectionCard') -> 'CardCollectionCard':
        param_list = []
        inst = CardCollectionCard(self,param_list)
        self._add_to_query("cardCollectionCard",_param_name,inst)
        self.value_cardCollectionCard = inst
        return inst

    def cardCollectionSlot(self,_param_name:str = 'cardCollectionSlot') -> 'CardCollectionSlot':
        param_list = []
        inst = CardCollectionSlot(self,param_list)
        self._add_to_query("cardCollectionSlot",_param_name,inst)
        self.value_cardCollectionSlot = inst
        return inst

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class updateManagerTeamPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_managerTeam:'ManagerTeam' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def managerTeam(self,_param_name:str = 'managerTeam') -> 'ManagerTeam':
        param_list = []
        inst = ManagerTeam(self,param_list)
        self._add_to_query("managerTeam",_param_name,inst)
        self.value_managerTeam = inst
        return inst


class updatePartnerOffersAgreementPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class updateSo5UserGroupPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_so5UserGroup:'So5UserGroup' = None
    value_userGroup:'UserGroupInterface' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def so5UserGroup(self,_param_name:str = 'so5UserGroup') -> 'So5UserGroup':
        param_list = []
        inst = So5UserGroup(self,param_list)
        self._add_to_query("so5UserGroup",_param_name,inst)
        self.value_so5UserGroup = inst
        return inst

    def userGroup(self,_param_name:str = 'userGroup') -> 'UserGroupInterface':
        param_list = []
        inst = UserGroupInterface(self,param_list)
        self._add_to_query("userGroup",_param_name,inst)
        self.value_userGroup = inst
        return inst


class updateSportProfilePayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_userSportProfile = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def userSportProfile(self,_param_name:str = 'userSportProfile'):
        inst = None
        self._add_to_query("userSportProfile",_param_name)
        pass


class updateSubscriptionPayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_subscribable = None
    value_subscription:'EmailSubscription' = None
    value_subscriptionStats:'SubscriptionStats' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def subscribable(self,_param_name:str = 'subscribable'):
        inst = None
        self._add_to_query("subscribable",_param_name)
        pass

    def subscription(self,_param_name:str = 'subscription') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("subscription",_param_name,inst)
        self.value_subscription = inst
        return inst

    def subscriptionStats(self,_param_name:str = 'subscriptionStats') -> 'SubscriptionStats':
        param_list = []
        inst = SubscriptionStats(self,param_list)
        self._add_to_query("subscriptionStats",_param_name,inst)
        self.value_subscriptionStats = inst
        return inst


class updateUserEmailPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class updateUserProfilePayload(GraphQLObject):
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    value_userProfile:'UserProfile' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def userProfile(self,_param_name:str = 'userProfile') -> 'UserProfile':
        param_list = []
        inst = UserProfile(self,param_list)
        self._add_to_query("userProfile",_param_name,inst)
        self.value_userProfile = inst
        return inst


class updateUserSettingsPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    value_userSettings:'UserSettings' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst

    def userSettings(self,_param_name:str = 'userSettings') -> 'UserSettings':
        param_list = []
        inst = UserSettings(self,param_list)
        self._add_to_query("userSettings",_param_name,inst)
        self.value_userSettings = inst
        return inst


class So5CommonDraftError(GraphQLObject):
    value_code = None
    value_error = None
    value_message = None
    value_printablePlayers:'list[DraftablePlayer]' = None
    def code(self,_param_name:str = 'code'):
        inst = None
        self._add_to_query("code",_param_name)
        pass

    def error(self,_param_name:str = 'error'):
        inst = None
        self._add_to_query("error",_param_name)
        pass

    def message(self,_param_name:str = 'message'):
        inst = None
        self._add_to_query("message",_param_name)
        pass

    def printablePlayers(self,_param_name:str = 'printablePlayers') -> 'DraftablePlayer':
        param_list = []
        inst = DraftablePlayer(self,param_list)
        self._add_to_query("printablePlayers",_param_name,inst)
        self.value_printablePlayers = inst
        return inst


class upsertCommonDraftPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_draftError:'So5CommonDraftError' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def draftError(self,_param_name:str = 'draftError') -> 'So5CommonDraftError':
        param_list = []
        inst = So5CommonDraftError(self,param_list)
        self._add_to_query("draftError",_param_name,inst)
        self.value_draftError = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class validateApplePayMerchantSessionPayload(GraphQLObject):
    value_applePaySessionData = None
    value_clientMutationId = None
    value_errors:'list[UserError]' = None
    def applePaySessionData(self,_param_name:str = 'applePaySessionData'):
        inst = None
        self._add_to_query("applePaySessionData",_param_name)
        pass

    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class validateFiatWalletPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class verifyMobilePurchasePayload(GraphQLObject):
    value_clientMutationId = None
    value_deal:'TokenPrimaryOffer' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def deal(self,_param_name:str = 'deal') -> 'TokenPrimaryOffer':
        param_list = []
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("deal",_param_name,inst)
        self.value_deal = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class verifyPhoneNumberPayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class visitCampaignPagePayload(GraphQLObject):
    value_clientMutationId = None
    value_currentUser:'CurrentUser' = None
    value_errors:'list[UserError]' = None
    def clientMutationId(self,_param_name:str = 'clientMutationId'):
        inst = None
        self._add_to_query("clientMutationId",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def errors(self,_param_name:str = 'errors') -> 'UserError':
        param_list = []
        inst = UserError(self,param_list)
        self._add_to_query("errors",_param_name,inst)
        self.value_errors = inst
        return inst


class NBAReferralReward(GraphQLObject):
    value_id = None
    value_card:'NBACard' = None
    value_state = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass


class NBACompleteOnboardingTaskResponse(GraphQLObject):
    value_currentUser:'CurrentUser' = None
    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst


class NBACreateOrUpdateLineupResponse(GraphQLObject):
    value_createdLineup:'NBALineup' = None
    value_lineupValidationErrors = None
    def createdLineup(self,_param_name:str = 'createdLineup') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("createdLineup",_param_name,inst)
        self.value_createdLineup = inst
        return inst

    def lineupValidationErrors(self,_param_name:str = 'lineupValidationErrors'):
        inst = None
        self._add_to_query("lineupValidationErrors",_param_name)
        pass


class Mutation(GraphQLObject):
    value_acceptOffer:'acceptOfferPayload' = None
    value_acceptSo5NoCardDraftableAppearance:'acceptSo5NoCardDraftableAppearancePayload' = None
    value_acceptSo5NoCardLineup:'acceptSo5NoCardLineupPayload' = None
    value_acceptTerms:'AcceptTermsMutationPayload' = None
    value_activateWalletRecovery:'activateWalletRecoveryPayload' = None
    value_addAuctionReminder:'addAuctionReminderPayload' = None
    value_addDevice:'addDevicePayload' = None
    value_addEmailToList:'addEmailToListPayload' = None
    value_addFavouriteClubs:'addFavouriteClubsPayload' = None
    value_addTokensToDeck:'addTokensToDeckPayload' = None
    value_addWalletRecovery:'addWalletRecoveryPayload' = None
    value_approveMigrator:'approveMigratorPayload' = None
    value_autoPickDraft:'autoPickDraftPayload' = None
    value_bid:'bidPayload' = None
    value_blockUserOffers:'blockUserOffersPayload' = None
    value_buyDeliverableShopItem:'buyDeliverableShopItemPayload' = None
    value_buyShopItem:'buyShopItemPayload' = None
    value_cancelEthBankWithdrawals:'cancelEthBankWithdrawalsPayload' = None
    value_cancelFastWithdrawal:'cancelFastWithdrawalPayload' = None
    value_cancelMobilePurchase:'cancelMobilePurchasePayload' = None
    value_cancelOffer:'cancelOfferPayload' = None
    value_cancelWithdrawal:'cancelWithdrawalPayload' = None
    value_celebrateActivity:'celebrateActivityPayload' = None
    value_changePassword:'changePasswordPayload' = None
    value_checkPhoneNumberVerificationCode:'checkPhoneNumberVerificationCodePayload' = None
    value_claimAnyReward:'claimAnyRewardPayload' = None
    value_claimAward:'claimAwardPayload' = None
    value_claimCardDrop:'claimCardDropPayload' = None
    value_claimConversionCredit:'claimConversionCreditPayload' = None
    value_claimDeliverableItemOrder:'claimDeliverableItemOrderPayload' = None
    value_claimFootballManagerTask:'claimFootballManagerTaskPayload' = None
    value_claimManagerProgressionTask:'claimManagerProgressionTaskPayload' = None
    value_claimReferralReward:'claimReferralRewardPayload' = None
    value_claimReward:'claimRewardPayload' = None
    value_claimRewards:'claimRewardsPayload' = None
    value_claimStarterPack:'claimStarterPackPayload' = None
    value_completeOnboardingTask:'completeOnboardingTaskPayload' = None
    value_confirmDevice:'ConfirmDeviceMutationPayload' = None
    value_confirmEmail:'ConfirmEmailMutationPayload' = None
    value_confirmSo5LineupImportsBatch:'confirmSo5LineupImportsBatchPayload' = None
    value_confirmSo5Lineups:'confirmSo5LineupsPayload' = None
    value_confirmSo5NoCardLineup:'confirmSo5NoCardLineupPayload' = None
    value_consumeCardBooster:'consumeCardBoosterPayload' = None
    value_consumeEphemeralToken:'ConsumeEphemeralTokenMutationPayload' = None
    value_createCardAuthorization:'createCardAuthorizationPayload' = None
    value_createCardRegistration:'createCardRegistrationPayload' = None
    value_createCardWithdrawal:'createCardWithdrawalPayload' = None
    value_createCheckoutCardAuthorization:'createCheckoutCardAuthorizationPayload' = None
    value_createCommonDraftSwap:'createCommonDraftSwapPayload' = None
    value_createDeck:'createDeckPayload' = None
    value_createDepositBankAccount:'createDepositBankAccountMutationPayload' = None
    value_createDirectOffer:'createDirectOfferPayload' = None
    value_createDraftAndSo5Lineup:'createDraftAndSo5LineupPayload' = None
    value_createEphemeralLink:'createEphemeralLinkPayload' = None
    value_createEthBankWithdrawalIntent:'createEthBankWithdrawalIntentPayload' = None
    value_createEthDeposit:'createEthDepositPayload' = None
    value_createEthMigration:'createEthMigrationPayload' = None
    value_createEthVault:'createEthVaultPayload' = None
    value_createFastWithdrawal:'createFastWithdrawalPayload' = None
    value_createFiatPayer:'createFiatPayerPayload' = None
    value_createFiatWallet:'createFiatWalletPayload' = None
    value_createFiatWithdrawal:'createFiatWithdrawalPayload' = None
    value_createIdentityVerificationSession:'createIdentityVerificationSessionPayload' = None
    value_createJwtToken:'createJwtTokenPayload' = None
    value_createOnboardingSo5Lineup:'createOnboardingSo5LineupPayload' = None
    value_createOrUpdateSingleBuyOfferMinPrice:'createOrUpdateSingleBuyOfferMinPricePayload' = None
    value_createOrUpdateSo5Lineup:'createOrUpdateSo5LineupPayload' = None
    value_createSingleSaleOffer:'createSingleSaleOfferPayload' = None
    value_createSo5LineupImportsBatch:'createSo5LineupImportsBatchPayload' = None
    value_createSo5UserGroup:'createSo5UserGroupPayload' = None
    value_createSubscription:'createSubscriptionPayload' = None
    value_createWallet:'createWalletPayload' = None
    value_createWireTransferDeposit:'createWireTransferDepositPayload' = None
    value_createWithdrawal:'createWithdrawalPayload' = None
    value_createWithdrawalBankAccount:'createWithdrawalBankAccountPayload' = None
    value_deactivateWalletRecovery:'deactivateWalletRecoveryPayload' = None
    value_declareFootballManagerTask:'declareFootballManagerTaskPayload' = None
    value_declareManagerProgressionTask:'declareManagerProgressionTaskPayload' = None
    value_declineSo5LineupImportsBatch:'declineSo5LineupImportsBatchPayload' = None
    value_declineSo5NoCardLineup:'declineSo5NoCardLineupPayload' = None
    value_deleteDeck:'deleteDeckPayload' = None
    value_deletePostalAddress:'deletePostalAddressPayload' = None
    value_deleteSo5Lineup:'deleteSo5LineupPayload' = None
    value_deleteSo5UserGroup:'deleteSo5UserGroupPayload' = None
    value_deleteSubscription:'deleteSubscriptionPayload' = None
    value_deleteUserSo5Lineups:'deleteUserSo5LineupsPayload' = None
    value_deleteWithdrawalBankAccount:'deleteWithdrawalBankAccountPayload' = None
    value_depositWithApplePay:'depositWithApplePayPayload' = None
    value_destroyAccount:'destroyAccountPayload' = None
    value_destroyReferral:'destroyReferralPayload' = None
    value_detachPaymentMethod:'detachPaymentMethodPayload' = None
    value_disable2Fa:'disable2faPayload' = None
    value_disconnectOmniauthProvider:'disconnectOmniauthProviderPayload' = None
    value_editDeck:'editDeckPayload' = None
    value_enable2Fa:'enable2faPayload' = None
    value_fetchAuthorizationStatus:'fetchAuthorizationStatusPayload' = None
    value_fetchEncryptedPrivateKey:'fetchEncryptedPrivateKeyPayload' = None
    value_fetchTransactionStatus:'fetchTransactionStatusPayload' = None
    value_footballRivalsAppearanceSubstitute:'footballRivalsAppearanceSubstitutePayload' = None
    value_footballRivalsArenaRequestCreate:'footballRivalsArenaRequestCreatePayload' = None
    value_footballRivalsArenaTicketClaim:'footballRivalsArenaTicketClaimPayload' = None
    value_footballRivalsGameMarkArenaStoriesAsRead:'footballRivalsGameMarkArenaStoriesAsReadPayload' = None
    value_footballRivalsGameMarkPostGameStoriesAsRead:'footballRivalsGameMarkPostGameStoriesAsReadPayload' = None
    value_footballRivalsGameMarkPostGameStoryAsRead:'footballRivalsGameMarkPostGameStoryAsReadPayload' = None
    value_footballRivalsInviteAccept:'footballRivalsInviteAcceptPayload' = None
    value_footballRivalsInviteAcceptCode:'footballRivalsInviteAcceptCodePayload' = None
    value_footballRivalsInviteCreate:'footballRivalsInviteCreatePayload' = None
    value_footballRivalsInviteReject:'footballRivalsInviteRejectPayload' = None
    value_footballRivalsInvitesAccept:'footballRivalsInvitesAcceptPayload' = None
    value_footballRivalsLineupUpsert:'footballRivalsLineupUpsertPayload' = None
    value_footballRivalsRemindGame:'footballRivalsRemindGamePayload' = None
    value_footballRivalsUpdateFavoriteTeam:'footballRivalsUpdateFavoriteTeamPayload' = None
    value_generateAccountingExtract:'generateAccountingExtractPayload' = None
    value_generateOtpBackupCodes:'generateOtpBackupCodesPayload' = None
    value_generateOtpProvisioningUri:'generateOtpProvisioningUriPayload' = None
    value_generateSo5NoCardLineup:'generateSo5NoCardLineupPayload' = None
    value_joinSo5UserGroup:'joinSo5UserGroupPayload' = None
    value_linkEthereumAddress:'linkEthereumAddressPayload' = None
    value_loadPreviousLineup:'loadPreviousLineupPayload' = None
    value_markCardShardsChestUnlockedThresholdAsSeen:'markCardShardsChestUnlockedThresholdAsSeenPayload' = None
    value_markItemAsSeen:'markItemAsSeenPayload' = None
    value_markNotificationsAsRead:'markNotificationsAsReadPayload' = None
    value_markStoriesAsRead:'markStoriesAsReadPayload' = None
    value_matchUserContacts:'matchUserContactsPayload' = None
    value_prepareAcceptOffer:'prepareAcceptOfferPayload' = None
    value_prepareAcceptTradeWithWalletAndCreditCard:'prepareAcceptTradeWithWalletAndCreditCardPayload' = None
    value_prepareBid:'prepareBidPayload' = None
    value_prepareCardWithdrawal:'prepareCardWithdrawalPayload' = None
    value_prepareDeposit:'prepareDepositPayload' = None
    value_prepareEthDeposit:'prepareEthDepositPayload' = None
    value_prepareFastWithdrawal:'prepareFastWithdrawalPayload' = None
    value_prepareIdealDeposit:'prepareIdealDepositPayload' = None
    value_prepareOffer:'prepareOfferPayload' = None
    value_preparePaypalDeposit:'preparePaypalDepositPayload' = None
    value_prepareTokenDeposit:'prepareTokenDepositPayload' = None
    value_probabilisticBundlesOpen:'probabilisticBundlesOpenPayload' = None
    value_reactActivity:'reactActivityPayload' = None
    value_refreshAward:'refreshAwardPayload' = None
    value_rejectOffer:'rejectOfferPayload' = None
    value_relayCall:'relayCallPayload' = None
    value_removeAuctionReminder:'removeAuctionReminderPayload' = None
    value_removeTokenFromDeck:'removeTokenFromDeckPayload' = None
    value_removeUserFromSo5UserGroup:'removeUserFromSo5UserGroupPayload' = None
    value_reportTelemetry:'reportTelemetryPayload' = None
    value_requestPaymentReceipt:'requestReceiptPayload' = None
    value_requestSo5NoCardLineupEligibleLeaderboards:'requestSo5NoCardLineupEligibleLeaderboardsPayload' = None
    value_resendConfirmationInstructions:'resendConfirmationInstructionsPayload' = None
    value_resendVerificationCode:'resendVerificationCodePayload' = None
    value_resetPrivateKey:'resetPrivateKeyPayload' = None
    value_resetSo5NoCardDraftedAppearances:'resetSo5NoCardDraftedAppearancesPayload' = None
    value_restoreWallet:'restoreWalletPayload' = None
    value_resumeOnboarding:'resumeOnboardingPayload' = None
    value_revealBlueprints:'revealBlueprintsPayload' = None
    value_revokeDevice:'revokeDevicePayload' = None
    value_revokeOAuthAccessToken:'revokeOAuthAccessTokenPayload' = None
    value_revokeOAuthAccessTokenForApplication:'revokeOAuthAccessTokenForApplicationPayload' = None
    value_sendWalletRecovery:'sendWalletRecoveryPayload' = None
    value_setDeviceToken:'setDeviceTokenPayload' = None
    value_setLiveActivityToken:'setLiveActivityTokenPayload' = None
    value_setTokenTradeStatus:'setTokenTradeStatusPayload' = None
    value_signIn:'SignInMutationPayload' = None
    value_signInWithOauth:'SignInWithOAuthMutationPayload' = None
    value_signOutFromAllDevices:'signOutFromAllDevicesPayload' = None
    value_signUp:'SignUpMutationPayload' = None
    value_skipOnboarding:'skipOnboardingPayload' = None
    value_spendCardShardsChest:'spendCardShardsChestPayload' = None
    value_startOnboarding:'startOnboardingPayload' = None
    value_stopAutoBid:'stopAutoBidPayload' = None
    value_unblockEmail:'UnblockEmailPayload' = None
    value_unblockUserOffers:'unblockUserOffersPayload' = None
    value_updateCardFilters:'updateCardFiltersPayload' = None
    value_updateExternalEthDeposit:'updateExternalEthDepositPayload' = None
    value_updateFiatWallet:'updateFiatWalletPayload' = None
    value_updateHighlightedCard:'updateHighlightedCardPayload' = None
    value_updateManagerTeam:'updateManagerTeamPayload' = None
    value_updatePartnerOffersAgreement:'updatePartnerOffersAgreementPayload' = None
    value_updateSo5UserGroup:'updateSo5UserGroupPayload' = None
    value_updateSportProfile:'updateSportProfilePayload' = None
    value_updateSubscription:'updateSubscriptionPayload' = None
    value_updateUserEmail:'updateUserEmailPayload' = None
    value_updateUserProfile:'updateUserProfilePayload' = None
    value_updateUserSettings:'updateUserSettingsPayload' = None
    value_upsertCommonDraft:'upsertCommonDraftPayload' = None
    value_validateApplePayMerchantSession:'validateApplePayMerchantSessionPayload' = None
    value_validateFiatWallet:'validateFiatWalletPayload' = None
    value_verifyMobilePurchase:'verifyMobilePurchasePayload' = None
    value_verifyPhoneNumber:'verifyPhoneNumberPayload' = None
    value_visitCampaignPage:'visitCampaignPagePayload' = None
    value_deleteLineup = None
    value_claimBoxRewards:'list[BoxReward]' = None
    value_claimCardRewards:'list[CardReward]' = None
    value_claimNBARewards:'list[NBAReward]' = None
    value_claimNBAReferralRewards:'list[NBAReferralReward]' = None
    value_completeNBAOnboardingTask:'NBACompleteOnboardingTaskResponse' = None
    value_createOrUpdateNBALineup:'NBACreateOrUpdateLineupResponse' = None
    value_deleteNBALineup = None
    value_claimBaseballRewards:'list[BaseballReward]' = None
    value_claimBaseballReferralRewards:'list[BaseballReferralReward]' = None
    value_createOrUpdateBaseballLineup:'BaseballCreateOrUpdateLineupResponse' = None
    value_deleteBaseballLineup = None
    def acceptOffer(self,input:'acceptOfferInput',_param_name:str = 'acceptOffer') -> 'acceptOfferPayload':
        param_list = []
        param_list.append(("input",input))
        inst = acceptOfferPayload(self,param_list)
        self._add_to_query("acceptOffer",_param_name,inst)
        self.value_acceptOffer = inst
        return inst

    def acceptSo5NoCardDraftableAppearance(self,input:'acceptSo5NoCardDraftableAppearanceInput',_param_name:str = 'acceptSo5NoCardDraftableAppearance') -> 'acceptSo5NoCardDraftableAppearancePayload':
        param_list = []
        param_list.append(("input",input))
        inst = acceptSo5NoCardDraftableAppearancePayload(self,param_list)
        self._add_to_query("acceptSo5NoCardDraftableAppearance",_param_name,inst)
        self.value_acceptSo5NoCardDraftableAppearance = inst
        return inst

    def acceptSo5NoCardLineup(self,input:'acceptSo5NoCardLineupInput',_param_name:str = 'acceptSo5NoCardLineup') -> 'acceptSo5NoCardLineupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = acceptSo5NoCardLineupPayload(self,param_list)
        self._add_to_query("acceptSo5NoCardLineup",_param_name,inst)
        self.value_acceptSo5NoCardLineup = inst
        return inst

    def acceptTerms(self,input:'acceptTermsInput',_param_name:str = 'acceptTerms') -> 'AcceptTermsMutationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = AcceptTermsMutationPayload(self,param_list)
        self._add_to_query("acceptTerms",_param_name,inst)
        self.value_acceptTerms = inst
        return inst

    def activateWalletRecovery(self,input:'activateWalletRecoveryInput',_param_name:str = 'activateWalletRecovery') -> 'activateWalletRecoveryPayload':
        param_list = []
        param_list.append(("input",input))
        inst = activateWalletRecoveryPayload(self,param_list)
        self._add_to_query("activateWalletRecovery",_param_name,inst)
        self.value_activateWalletRecovery = inst
        return inst

    def addAuctionReminder(self,input:'addAuctionReminderInput',_param_name:str = 'addAuctionReminder') -> 'addAuctionReminderPayload':
        param_list = []
        param_list.append(("input",input))
        inst = addAuctionReminderPayload(self,param_list)
        self._add_to_query("addAuctionReminder",_param_name,inst)
        self.value_addAuctionReminder = inst
        return inst

    def addDevice(self,input:'addDeviceInput',_param_name:str = 'addDevice') -> 'addDevicePayload':
        param_list = []
        param_list.append(("input",input))
        inst = addDevicePayload(self,param_list)
        self._add_to_query("addDevice",_param_name,inst)
        self.value_addDevice = inst
        return inst

    def addEmailToList(self,input:'addEmailToListInput',_param_name:str = 'addEmailToList') -> 'addEmailToListPayload':
        param_list = []
        param_list.append(("input",input))
        inst = addEmailToListPayload(self,param_list)
        self._add_to_query("addEmailToList",_param_name,inst)
        self.value_addEmailToList = inst
        return inst

    def addFavouriteClubs(self,input:'addFavouriteClubsInput',_param_name:str = 'addFavouriteClubs') -> 'addFavouriteClubsPayload':
        param_list = []
        param_list.append(("input",input))
        inst = addFavouriteClubsPayload(self,param_list)
        self._add_to_query("addFavouriteClubs",_param_name,inst)
        self.value_addFavouriteClubs = inst
        return inst

    def addTokensToDeck(self,input:'addTokensToDeckInput',_param_name:str = 'addTokensToDeck') -> 'addTokensToDeckPayload':
        param_list = []
        param_list.append(("input",input))
        inst = addTokensToDeckPayload(self,param_list)
        self._add_to_query("addTokensToDeck",_param_name,inst)
        self.value_addTokensToDeck = inst
        return inst

    def addWalletRecovery(self,input:'addWalletRecoveryInput',_param_name:str = 'addWalletRecovery') -> 'addWalletRecoveryPayload':
        param_list = []
        param_list.append(("input",input))
        inst = addWalletRecoveryPayload(self,param_list)
        self._add_to_query("addWalletRecovery",_param_name,inst)
        self.value_addWalletRecovery = inst
        return inst

    def approveMigrator(self,input:'approveMigratorInput',_param_name:str = 'approveMigrator') -> 'approveMigratorPayload':
        param_list = []
        param_list.append(("input",input))
        inst = approveMigratorPayload(self,param_list)
        self._add_to_query("approveMigrator",_param_name,inst)
        self.value_approveMigrator = inst
        return inst

    def autoPickDraft(self,input:'autoPickDraftInput',_param_name:str = 'autoPickDraft') -> 'autoPickDraftPayload':
        param_list = []
        param_list.append(("input",input))
        inst = autoPickDraftPayload(self,param_list)
        self._add_to_query("autoPickDraft",_param_name,inst)
        self.value_autoPickDraft = inst
        return inst

    def bid(self,input:'bidInput',_param_name:str = 'bid') -> 'bidPayload':
        param_list = []
        param_list.append(("input",input))
        inst = bidPayload(self,param_list)
        self._add_to_query("bid",_param_name,inst)
        self.value_bid = inst
        return inst

    def blockUserOffers(self,input:'blockUserOffersInput',_param_name:str = 'blockUserOffers') -> 'blockUserOffersPayload':
        param_list = []
        param_list.append(("input",input))
        inst = blockUserOffersPayload(self,param_list)
        self._add_to_query("blockUserOffers",_param_name,inst)
        self.value_blockUserOffers = inst
        return inst

    def buyDeliverableShopItem(self,input:'buyDeliverableShopItemInput',_param_name:str = 'buyDeliverableShopItem') -> 'buyDeliverableShopItemPayload':
        param_list = []
        param_list.append(("input",input))
        inst = buyDeliverableShopItemPayload(self,param_list)
        self._add_to_query("buyDeliverableShopItem",_param_name,inst)
        self.value_buyDeliverableShopItem = inst
        return inst

    def buyShopItem(self,input:'buyShopItemInput',_param_name:str = 'buyShopItem') -> 'buyShopItemPayload':
        param_list = []
        param_list.append(("input",input))
        inst = buyShopItemPayload(self,param_list)
        self._add_to_query("buyShopItem",_param_name,inst)
        self.value_buyShopItem = inst
        return inst

    def cancelEthBankWithdrawals(self,input:'cancelEthBankWithdrawalsInput',_param_name:str = 'cancelEthBankWithdrawals') -> 'cancelEthBankWithdrawalsPayload':
        param_list = []
        param_list.append(("input",input))
        inst = cancelEthBankWithdrawalsPayload(self,param_list)
        self._add_to_query("cancelEthBankWithdrawals",_param_name,inst)
        self.value_cancelEthBankWithdrawals = inst
        return inst

    def cancelFastWithdrawal(self,input:'cancelFastWithdrawalInput',_param_name:str = 'cancelFastWithdrawal') -> 'cancelFastWithdrawalPayload':
        param_list = []
        param_list.append(("input",input))
        inst = cancelFastWithdrawalPayload(self,param_list)
        self._add_to_query("cancelFastWithdrawal",_param_name,inst)
        self.value_cancelFastWithdrawal = inst
        return inst

    def cancelMobilePurchase(self,input:'cancelMobilePurchaseInput',_param_name:str = 'cancelMobilePurchase') -> 'cancelMobilePurchasePayload':
        param_list = []
        param_list.append(("input",input))
        inst = cancelMobilePurchasePayload(self,param_list)
        self._add_to_query("cancelMobilePurchase",_param_name,inst)
        self.value_cancelMobilePurchase = inst
        return inst

    def cancelOffer(self,input:'cancelOfferInput',_param_name:str = 'cancelOffer') -> 'cancelOfferPayload':
        param_list = []
        param_list.append(("input",input))
        inst = cancelOfferPayload(self,param_list)
        self._add_to_query("cancelOffer",_param_name,inst)
        self.value_cancelOffer = inst
        return inst

    def cancelWithdrawal(self,input:'cancelWithdrawalInput',_param_name:str = 'cancelWithdrawal') -> 'cancelWithdrawalPayload':
        param_list = []
        param_list.append(("input",input))
        inst = cancelWithdrawalPayload(self,param_list)
        self._add_to_query("cancelWithdrawal",_param_name,inst)
        self.value_cancelWithdrawal = inst
        return inst

    def celebrateActivity(self,input:'celebrateActivityInput',_param_name:str = 'celebrateActivity') -> 'celebrateActivityPayload':
        param_list = []
        param_list.append(("input",input))
        inst = celebrateActivityPayload(self,param_list)
        self._add_to_query("celebrateActivity",_param_name,inst)
        self.value_celebrateActivity = inst
        return inst

    def changePassword(self,input:'changePasswordInput',_param_name:str = 'changePassword') -> 'changePasswordPayload':
        param_list = []
        param_list.append(("input",input))
        inst = changePasswordPayload(self,param_list)
        self._add_to_query("changePassword",_param_name,inst)
        self.value_changePassword = inst
        return inst

    def checkPhoneNumberVerificationCode(self,input:'checkPhoneNumberVerificationCodeInput',_param_name:str = 'checkPhoneNumberVerificationCode') -> 'checkPhoneNumberVerificationCodePayload':
        param_list = []
        param_list.append(("input",input))
        inst = checkPhoneNumberVerificationCodePayload(self,param_list)
        self._add_to_query("checkPhoneNumberVerificationCode",_param_name,inst)
        self.value_checkPhoneNumberVerificationCode = inst
        return inst

    def claimAnyReward(self,input:'claimAnyRewardInput',_param_name:str = 'claimAnyReward') -> 'claimAnyRewardPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimAnyRewardPayload(self,param_list)
        self._add_to_query("claimAnyReward",_param_name,inst)
        self.value_claimAnyReward = inst
        return inst

    def claimAward(self,input:'claimAwardInput',_param_name:str = 'claimAward') -> 'claimAwardPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimAwardPayload(self,param_list)
        self._add_to_query("claimAward",_param_name,inst)
        self.value_claimAward = inst
        return inst

    def claimCardDrop(self,input:'claimCardDropInput',_param_name:str = 'claimCardDrop') -> 'claimCardDropPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimCardDropPayload(self,param_list)
        self._add_to_query("claimCardDrop",_param_name,inst)
        self.value_claimCardDrop = inst
        return inst

    def claimConversionCredit(self,input:'claimConversionCreditInput',_param_name:str = 'claimConversionCredit') -> 'claimConversionCreditPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimConversionCreditPayload(self,param_list)
        self._add_to_query("claimConversionCredit",_param_name,inst)
        self.value_claimConversionCredit = inst
        return inst

    def claimDeliverableItemOrder(self,input:'claimDeliverableItemOrderInput',_param_name:str = 'claimDeliverableItemOrder') -> 'claimDeliverableItemOrderPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimDeliverableItemOrderPayload(self,param_list)
        self._add_to_query("claimDeliverableItemOrder",_param_name,inst)
        self.value_claimDeliverableItemOrder = inst
        return inst

    def claimFootballManagerTask(self,input:'claimFootballManagerTaskInput',_param_name:str = 'claimFootballManagerTask') -> 'claimFootballManagerTaskPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimFootballManagerTaskPayload(self,param_list)
        self._add_to_query("claimFootballManagerTask",_param_name,inst)
        self.value_claimFootballManagerTask = inst
        return inst

    def claimManagerProgressionTask(self,input:'claimManagerProgressionTaskInput',_param_name:str = 'claimManagerProgressionTask') -> 'claimManagerProgressionTaskPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimManagerProgressionTaskPayload(self,param_list)
        self._add_to_query("claimManagerProgressionTask",_param_name,inst)
        self.value_claimManagerProgressionTask = inst
        return inst

    def claimReferralReward(self,input:'claimReferralRewardInput',_param_name:str = 'claimReferralReward') -> 'claimReferralRewardPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimReferralRewardPayload(self,param_list)
        self._add_to_query("claimReferralReward",_param_name,inst)
        self.value_claimReferralReward = inst
        return inst

    def claimReward(self,input:'claimRewardInput',_param_name:str = 'claimReward') -> 'claimRewardPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimRewardPayload(self,param_list)
        self._add_to_query("claimReward",_param_name,inst)
        self.value_claimReward = inst
        return inst

    def claimRewards(self,input:'claimRewardsInput',_param_name:str = 'claimRewards') -> 'claimRewardsPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimRewardsPayload(self,param_list)
        self._add_to_query("claimRewards",_param_name,inst)
        self.value_claimRewards = inst
        return inst

    def claimStarterPack(self,input:'claimStarterPackInput',_param_name:str = 'claimStarterPack') -> 'claimStarterPackPayload':
        param_list = []
        param_list.append(("input",input))
        inst = claimStarterPackPayload(self,param_list)
        self._add_to_query("claimStarterPack",_param_name,inst)
        self.value_claimStarterPack = inst
        return inst

    def completeOnboardingTask(self,input:'completeOnboardingTaskInput',_param_name:str = 'completeOnboardingTask') -> 'completeOnboardingTaskPayload':
        param_list = []
        param_list.append(("input",input))
        inst = completeOnboardingTaskPayload(self,param_list)
        self._add_to_query("completeOnboardingTask",_param_name,inst)
        self.value_completeOnboardingTask = inst
        return inst

    def confirmDevice(self,input:'confirmDeviceInput',_param_name:str = 'confirmDevice') -> 'ConfirmDeviceMutationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = ConfirmDeviceMutationPayload(self,param_list)
        self._add_to_query("confirmDevice",_param_name,inst)
        self.value_confirmDevice = inst
        return inst

    def confirmEmail(self,input:'confirmEmailInput',_param_name:str = 'confirmEmail') -> 'ConfirmEmailMutationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = ConfirmEmailMutationPayload(self,param_list)
        self._add_to_query("confirmEmail",_param_name,inst)
        self.value_confirmEmail = inst
        return inst

    def confirmSo5LineupImportsBatch(self,input:'confirmSo5LineupImportsBatchInput',_param_name:str = 'confirmSo5LineupImportsBatch') -> 'confirmSo5LineupImportsBatchPayload':
        param_list = []
        param_list.append(("input",input))
        inst = confirmSo5LineupImportsBatchPayload(self,param_list)
        self._add_to_query("confirmSo5LineupImportsBatch",_param_name,inst)
        self.value_confirmSo5LineupImportsBatch = inst
        return inst

    def confirmSo5Lineups(self,input:'confirmSo5LineupsInput',_param_name:str = 'confirmSo5Lineups') -> 'confirmSo5LineupsPayload':
        param_list = []
        param_list.append(("input",input))
        inst = confirmSo5LineupsPayload(self,param_list)
        self._add_to_query("confirmSo5Lineups",_param_name,inst)
        self.value_confirmSo5Lineups = inst
        return inst

    def confirmSo5NoCardLineup(self,input:'confirmSo5NoCardLineupInput',_param_name:str = 'confirmSo5NoCardLineup') -> 'confirmSo5NoCardLineupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = confirmSo5NoCardLineupPayload(self,param_list)
        self._add_to_query("confirmSo5NoCardLineup",_param_name,inst)
        self.value_confirmSo5NoCardLineup = inst
        return inst

    def consumeCardBooster(self,input:'consumeCardBoosterInput',_param_name:str = 'consumeCardBooster') -> 'consumeCardBoosterPayload':
        param_list = []
        param_list.append(("input",input))
        inst = consumeCardBoosterPayload(self,param_list)
        self._add_to_query("consumeCardBooster",_param_name,inst)
        self.value_consumeCardBooster = inst
        return inst

    def consumeEphemeralToken(self,input:'consumeEphemeralTokenInput',_param_name:str = 'consumeEphemeralToken') -> 'ConsumeEphemeralTokenMutationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = ConsumeEphemeralTokenMutationPayload(self,param_list)
        self._add_to_query("consumeEphemeralToken",_param_name,inst)
        self.value_consumeEphemeralToken = inst
        return inst

    def createCardAuthorization(self,input:'createCardAuthorizationInput',_param_name:str = 'createCardAuthorization') -> 'createCardAuthorizationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createCardAuthorizationPayload(self,param_list)
        self._add_to_query("createCardAuthorization",_param_name,inst)
        self.value_createCardAuthorization = inst
        return inst

    def createCardRegistration(self,input:'createCardRegistrationInput',_param_name:str = 'createCardRegistration') -> 'createCardRegistrationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createCardRegistrationPayload(self,param_list)
        self._add_to_query("createCardRegistration",_param_name,inst)
        self.value_createCardRegistration = inst
        return inst

    def createCardWithdrawal(self,input:'createCardWithdrawalInput',_param_name:str = 'createCardWithdrawal') -> 'createCardWithdrawalPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createCardWithdrawalPayload(self,param_list)
        self._add_to_query("createCardWithdrawal",_param_name,inst)
        self.value_createCardWithdrawal = inst
        return inst

    def createCheckoutCardAuthorization(self,input:'createCheckoutCardAuthorizationInput',_param_name:str = 'createCheckoutCardAuthorization') -> 'createCheckoutCardAuthorizationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createCheckoutCardAuthorizationPayload(self,param_list)
        self._add_to_query("createCheckoutCardAuthorization",_param_name,inst)
        self.value_createCheckoutCardAuthorization = inst
        return inst

    def createCommonDraftSwap(self,input:'createCommonDraftSwapInput',_param_name:str = 'createCommonDraftSwap') -> 'createCommonDraftSwapPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createCommonDraftSwapPayload(self,param_list)
        self._add_to_query("createCommonDraftSwap",_param_name,inst)
        self.value_createCommonDraftSwap = inst
        return inst

    def createDeck(self,input:'createDeckInput',_param_name:str = 'createDeck') -> 'createDeckPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createDeckPayload(self,param_list)
        self._add_to_query("createDeck",_param_name,inst)
        self.value_createDeck = inst
        return inst

    def createDepositBankAccount(self,input:'createDepositBankAccountMutationInput',_param_name:str = 'createDepositBankAccount') -> 'createDepositBankAccountMutationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createDepositBankAccountMutationPayload(self,param_list)
        self._add_to_query("createDepositBankAccount",_param_name,inst)
        self.value_createDepositBankAccount = inst
        return inst

    def createDirectOffer(self,input:'createDirectOfferInput',_param_name:str = 'createDirectOffer') -> 'createDirectOfferPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createDirectOfferPayload(self,param_list)
        self._add_to_query("createDirectOffer",_param_name,inst)
        self.value_createDirectOffer = inst
        return inst

    def createDraftAndSo5Lineup(self,input:'createDraftAndSo5LineupInput',_param_name:str = 'createDraftAndSo5Lineup') -> 'createDraftAndSo5LineupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createDraftAndSo5LineupPayload(self,param_list)
        self._add_to_query("createDraftAndSo5Lineup",_param_name,inst)
        self.value_createDraftAndSo5Lineup = inst
        return inst

    def createEphemeralLink(self,input:'createEphemeralLinkInput',_param_name:str = 'createEphemeralLink') -> 'createEphemeralLinkPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createEphemeralLinkPayload(self,param_list)
        self._add_to_query("createEphemeralLink",_param_name,inst)
        self.value_createEphemeralLink = inst
        return inst

    def createEthBankWithdrawalIntent(self,input:'createEthBankWithdrawalIntentInput',_param_name:str = 'createEthBankWithdrawalIntent') -> 'createEthBankWithdrawalIntentPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createEthBankWithdrawalIntentPayload(self,param_list)
        self._add_to_query("createEthBankWithdrawalIntent",_param_name,inst)
        self.value_createEthBankWithdrawalIntent = inst
        return inst

    def createEthDeposit(self,input:'createEthDepositInput',_param_name:str = 'createEthDeposit') -> 'createEthDepositPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createEthDepositPayload(self,param_list)
        self._add_to_query("createEthDeposit",_param_name,inst)
        self.value_createEthDeposit = inst
        return inst

    def createEthMigration(self,input:'createEthMigrationInput',_param_name:str = 'createEthMigration') -> 'createEthMigrationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createEthMigrationPayload(self,param_list)
        self._add_to_query("createEthMigration",_param_name,inst)
        self.value_createEthMigration = inst
        return inst

    def createEthVault(self,input:'createEthVaultInput',_param_name:str = 'createEthVault') -> 'createEthVaultPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createEthVaultPayload(self,param_list)
        self._add_to_query("createEthVault",_param_name,inst)
        self.value_createEthVault = inst
        return inst

    def createFastWithdrawal(self,input:'createFastWithdrawalInput',_param_name:str = 'createFastWithdrawal') -> 'createFastWithdrawalPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createFastWithdrawalPayload(self,param_list)
        self._add_to_query("createFastWithdrawal",_param_name,inst)
        self.value_createFastWithdrawal = inst
        return inst

    def createFiatPayer(self,input:'createFiatPayerInput',_param_name:str = 'createFiatPayer') -> 'createFiatPayerPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createFiatPayerPayload(self,param_list)
        self._add_to_query("createFiatPayer",_param_name,inst)
        self.value_createFiatPayer = inst
        return inst

    def createFiatWallet(self,input:'createFiatWalletInput',_param_name:str = 'createFiatWallet') -> 'createFiatWalletPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createFiatWalletPayload(self,param_list)
        self._add_to_query("createFiatWallet",_param_name,inst)
        self.value_createFiatWallet = inst
        return inst

    def createFiatWithdrawal(self,input:'createFiatWithdrawalInput',_param_name:str = 'createFiatWithdrawal') -> 'createFiatWithdrawalPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createFiatWithdrawalPayload(self,param_list)
        self._add_to_query("createFiatWithdrawal",_param_name,inst)
        self.value_createFiatWithdrawal = inst
        return inst

    def createIdentityVerificationSession(self,input:'createIdentityVerificationSessionInput',_param_name:str = 'createIdentityVerificationSession') -> 'createIdentityVerificationSessionPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createIdentityVerificationSessionPayload(self,param_list)
        self._add_to_query("createIdentityVerificationSession",_param_name,inst)
        self.value_createIdentityVerificationSession = inst
        return inst

    def createJwtToken(self,input:'createJwtTokenInput',_param_name:str = 'createJwtToken') -> 'createJwtTokenPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createJwtTokenPayload(self,param_list)
        self._add_to_query("createJwtToken",_param_name,inst)
        self.value_createJwtToken = inst
        return inst

    def createOnboardingSo5Lineup(self,input:'createOnboardingSo5LineupInput',_param_name:str = 'createOnboardingSo5Lineup') -> 'createOnboardingSo5LineupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createOnboardingSo5LineupPayload(self,param_list)
        self._add_to_query("createOnboardingSo5Lineup",_param_name,inst)
        self.value_createOnboardingSo5Lineup = inst
        return inst

    def createOrUpdateSingleBuyOfferMinPrice(self,input:'createOrUpdateSingleBuyOfferMinPriceInput',_param_name:str = 'createOrUpdateSingleBuyOfferMinPrice') -> 'createOrUpdateSingleBuyOfferMinPricePayload':
        param_list = []
        param_list.append(("input",input))
        inst = createOrUpdateSingleBuyOfferMinPricePayload(self,param_list)
        self._add_to_query("createOrUpdateSingleBuyOfferMinPrice",_param_name,inst)
        self.value_createOrUpdateSingleBuyOfferMinPrice = inst
        return inst

    def createOrUpdateSo5Lineup(self,input:'createOrUpdateSo5LineupInput',_param_name:str = 'createOrUpdateSo5Lineup') -> 'createOrUpdateSo5LineupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createOrUpdateSo5LineupPayload(self,param_list)
        self._add_to_query("createOrUpdateSo5Lineup",_param_name,inst)
        self.value_createOrUpdateSo5Lineup = inst
        return inst

    def createSingleSaleOffer(self,input:'createSingleSaleOfferInput',_param_name:str = 'createSingleSaleOffer') -> 'createSingleSaleOfferPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createSingleSaleOfferPayload(self,param_list)
        self._add_to_query("createSingleSaleOffer",_param_name,inst)
        self.value_createSingleSaleOffer = inst
        return inst

    def createSo5LineupImportsBatch(self,input:'createSo5LineupImportsBatchInput',_param_name:str = 'createSo5LineupImportsBatch') -> 'createSo5LineupImportsBatchPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createSo5LineupImportsBatchPayload(self,param_list)
        self._add_to_query("createSo5LineupImportsBatch",_param_name,inst)
        self.value_createSo5LineupImportsBatch = inst
        return inst

    def createSo5UserGroup(self,input:'createSo5UserGroupInput',_param_name:str = 'createSo5UserGroup') -> 'createSo5UserGroupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createSo5UserGroupPayload(self,param_list)
        self._add_to_query("createSo5UserGroup",_param_name,inst)
        self.value_createSo5UserGroup = inst
        return inst

    def createSubscription(self,input:'createSubscriptionInput',_param_name:str = 'createSubscription') -> 'createSubscriptionPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createSubscriptionPayload(self,param_list)
        self._add_to_query("createSubscription",_param_name,inst)
        self.value_createSubscription = inst
        return inst

    def createWallet(self,input:'createWalletInput',_param_name:str = 'createWallet') -> 'createWalletPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createWalletPayload(self,param_list)
        self._add_to_query("createWallet",_param_name,inst)
        self.value_createWallet = inst
        return inst

    def createWireTransferDeposit(self,input:'createWireTransferDepositInput',_param_name:str = 'createWireTransferDeposit') -> 'createWireTransferDepositPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createWireTransferDepositPayload(self,param_list)
        self._add_to_query("createWireTransferDeposit",_param_name,inst)
        self.value_createWireTransferDeposit = inst
        return inst

    def createWithdrawal(self,input:'createWithdrawalInput',_param_name:str = 'createWithdrawal') -> 'createWithdrawalPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createWithdrawalPayload(self,param_list)
        self._add_to_query("createWithdrawal",_param_name,inst)
        self.value_createWithdrawal = inst
        return inst

    def createWithdrawalBankAccount(self,input:'createWithdrawalBankAccountInput',_param_name:str = 'createWithdrawalBankAccount') -> 'createWithdrawalBankAccountPayload':
        param_list = []
        param_list.append(("input",input))
        inst = createWithdrawalBankAccountPayload(self,param_list)
        self._add_to_query("createWithdrawalBankAccount",_param_name,inst)
        self.value_createWithdrawalBankAccount = inst
        return inst

    def deactivateWalletRecovery(self,input:'deactivateWalletRecoveryInput',_param_name:str = 'deactivateWalletRecovery') -> 'deactivateWalletRecoveryPayload':
        param_list = []
        param_list.append(("input",input))
        inst = deactivateWalletRecoveryPayload(self,param_list)
        self._add_to_query("deactivateWalletRecovery",_param_name,inst)
        self.value_deactivateWalletRecovery = inst
        return inst

    def declareFootballManagerTask(self,input:'declareFootballManagerTaskInput',_param_name:str = 'declareFootballManagerTask') -> 'declareFootballManagerTaskPayload':
        param_list = []
        param_list.append(("input",input))
        inst = declareFootballManagerTaskPayload(self,param_list)
        self._add_to_query("declareFootballManagerTask",_param_name,inst)
        self.value_declareFootballManagerTask = inst
        return inst

    def declareManagerProgressionTask(self,input:'declareManagerProgressionTaskInput',_param_name:str = 'declareManagerProgressionTask') -> 'declareManagerProgressionTaskPayload':
        param_list = []
        param_list.append(("input",input))
        inst = declareManagerProgressionTaskPayload(self,param_list)
        self._add_to_query("declareManagerProgressionTask",_param_name,inst)
        self.value_declareManagerProgressionTask = inst
        return inst

    def declineSo5LineupImportsBatch(self,input:'declineSo5LineupImportsBatchInput',_param_name:str = 'declineSo5LineupImportsBatch') -> 'declineSo5LineupImportsBatchPayload':
        param_list = []
        param_list.append(("input",input))
        inst = declineSo5LineupImportsBatchPayload(self,param_list)
        self._add_to_query("declineSo5LineupImportsBatch",_param_name,inst)
        self.value_declineSo5LineupImportsBatch = inst
        return inst

    def declineSo5NoCardLineup(self,input:'declineSo5NoCardLineupInput',_param_name:str = 'declineSo5NoCardLineup') -> 'declineSo5NoCardLineupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = declineSo5NoCardLineupPayload(self,param_list)
        self._add_to_query("declineSo5NoCardLineup",_param_name,inst)
        self.value_declineSo5NoCardLineup = inst
        return inst

    def deleteDeck(self,input:'deleteDeckInput',_param_name:str = 'deleteDeck') -> 'deleteDeckPayload':
        param_list = []
        param_list.append(("input",input))
        inst = deleteDeckPayload(self,param_list)
        self._add_to_query("deleteDeck",_param_name,inst)
        self.value_deleteDeck = inst
        return inst

    def deletePostalAddress(self,input:'deletePostalAddressInput',_param_name:str = 'deletePostalAddress') -> 'deletePostalAddressPayload':
        param_list = []
        param_list.append(("input",input))
        inst = deletePostalAddressPayload(self,param_list)
        self._add_to_query("deletePostalAddress",_param_name,inst)
        self.value_deletePostalAddress = inst
        return inst

    def deleteSo5Lineup(self,input:'deleteSo5LineupInput',_param_name:str = 'deleteSo5Lineup') -> 'deleteSo5LineupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = deleteSo5LineupPayload(self,param_list)
        self._add_to_query("deleteSo5Lineup",_param_name,inst)
        self.value_deleteSo5Lineup = inst
        return inst

    def deleteSo5UserGroup(self,input:'deleteSo5UserGroupInput',_param_name:str = 'deleteSo5UserGroup') -> 'deleteSo5UserGroupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = deleteSo5UserGroupPayload(self,param_list)
        self._add_to_query("deleteSo5UserGroup",_param_name,inst)
        self.value_deleteSo5UserGroup = inst
        return inst

    def deleteSubscription(self,input:'deleteSubscriptionInput',_param_name:str = 'deleteSubscription') -> 'deleteSubscriptionPayload':
        param_list = []
        param_list.append(("input",input))
        inst = deleteSubscriptionPayload(self,param_list)
        self._add_to_query("deleteSubscription",_param_name,inst)
        self.value_deleteSubscription = inst
        return inst

    def deleteUserSo5Lineups(self,input:'deleteUserSo5LineupsInput',_param_name:str = 'deleteUserSo5Lineups') -> 'deleteUserSo5LineupsPayload':
        param_list = []
        param_list.append(("input",input))
        inst = deleteUserSo5LineupsPayload(self,param_list)
        self._add_to_query("deleteUserSo5Lineups",_param_name,inst)
        self.value_deleteUserSo5Lineups = inst
        return inst

    def deleteWithdrawalBankAccount(self,input:'deleteWithdrawalBankAccountInput',_param_name:str = 'deleteWithdrawalBankAccount') -> 'deleteWithdrawalBankAccountPayload':
        param_list = []
        param_list.append(("input",input))
        inst = deleteWithdrawalBankAccountPayload(self,param_list)
        self._add_to_query("deleteWithdrawalBankAccount",_param_name,inst)
        self.value_deleteWithdrawalBankAccount = inst
        return inst

    def depositWithApplePay(self,input:'depositWithApplePayInput',_param_name:str = 'depositWithApplePay') -> 'depositWithApplePayPayload':
        param_list = []
        param_list.append(("input",input))
        inst = depositWithApplePayPayload(self,param_list)
        self._add_to_query("depositWithApplePay",_param_name,inst)
        self.value_depositWithApplePay = inst
        return inst

    def destroyAccount(self,input:'destroyAccountInput',_param_name:str = 'destroyAccount') -> 'destroyAccountPayload':
        param_list = []
        param_list.append(("input",input))
        inst = destroyAccountPayload(self,param_list)
        self._add_to_query("destroyAccount",_param_name,inst)
        self.value_destroyAccount = inst
        return inst

    def destroyReferral(self,input:'destroyReferralInput',_param_name:str = 'destroyReferral') -> 'destroyReferralPayload':
        param_list = []
        param_list.append(("input",input))
        inst = destroyReferralPayload(self,param_list)
        self._add_to_query("destroyReferral",_param_name,inst)
        self.value_destroyReferral = inst
        return inst

    def detachPaymentMethod(self,input:'detachPaymentMethodInput',_param_name:str = 'detachPaymentMethod') -> 'detachPaymentMethodPayload':
        param_list = []
        param_list.append(("input",input))
        inst = detachPaymentMethodPayload(self,param_list)
        self._add_to_query("detachPaymentMethod",_param_name,inst)
        self.value_detachPaymentMethod = inst
        return inst

    def disable2Fa(self,input:'disable2faInput',_param_name:str = 'disable2Fa') -> 'disable2faPayload':
        param_list = []
        param_list.append(("input",input))
        inst = disable2faPayload(self,param_list)
        self._add_to_query("disable2Fa",_param_name,inst)
        self.value_disable2Fa = inst
        return inst

    def disconnectOmniauthProvider(self,input:'disconnectOmniauthProviderInput',_param_name:str = 'disconnectOmniauthProvider') -> 'disconnectOmniauthProviderPayload':
        param_list = []
        param_list.append(("input",input))
        inst = disconnectOmniauthProviderPayload(self,param_list)
        self._add_to_query("disconnectOmniauthProvider",_param_name,inst)
        self.value_disconnectOmniauthProvider = inst
        return inst

    def editDeck(self,input:'editDeckInput',_param_name:str = 'editDeck') -> 'editDeckPayload':
        param_list = []
        param_list.append(("input",input))
        inst = editDeckPayload(self,param_list)
        self._add_to_query("editDeck",_param_name,inst)
        self.value_editDeck = inst
        return inst

    def enable2Fa(self,input:'enable2faInput',_param_name:str = 'enable2Fa') -> 'enable2faPayload':
        param_list = []
        param_list.append(("input",input))
        inst = enable2faPayload(self,param_list)
        self._add_to_query("enable2Fa",_param_name,inst)
        self.value_enable2Fa = inst
        return inst

    def fetchAuthorizationStatus(self,input:'fetchAuthorizationStatusInput',_param_name:str = 'fetchAuthorizationStatus') -> 'fetchAuthorizationStatusPayload':
        param_list = []
        param_list.append(("input",input))
        inst = fetchAuthorizationStatusPayload(self,param_list)
        self._add_to_query("fetchAuthorizationStatus",_param_name,inst)
        self.value_fetchAuthorizationStatus = inst
        return inst

    def fetchEncryptedPrivateKey(self,input:'fetchEncryptedPrivateKeyInput',_param_name:str = 'fetchEncryptedPrivateKey') -> 'fetchEncryptedPrivateKeyPayload':
        param_list = []
        param_list.append(("input",input))
        inst = fetchEncryptedPrivateKeyPayload(self,param_list)
        self._add_to_query("fetchEncryptedPrivateKey",_param_name,inst)
        self.value_fetchEncryptedPrivateKey = inst
        return inst

    def fetchTransactionStatus(self,input:'fetchTransactionStatusInput',_param_name:str = 'fetchTransactionStatus') -> 'fetchTransactionStatusPayload':
        param_list = []
        param_list.append(("input",input))
        inst = fetchTransactionStatusPayload(self,param_list)
        self._add_to_query("fetchTransactionStatus",_param_name,inst)
        self.value_fetchTransactionStatus = inst
        return inst

    def footballRivalsAppearanceSubstitute(self,input:'footballRivalsAppearanceSubstituteInput',_param_name:str = 'footballRivalsAppearanceSubstitute') -> 'footballRivalsAppearanceSubstitutePayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsAppearanceSubstitutePayload(self,param_list)
        self._add_to_query("footballRivalsAppearanceSubstitute",_param_name,inst)
        self.value_footballRivalsAppearanceSubstitute = inst
        return inst

    def footballRivalsArenaRequestCreate(self,input:'footballRivalsArenaRequestCreateInput',_param_name:str = 'footballRivalsArenaRequestCreate') -> 'footballRivalsArenaRequestCreatePayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsArenaRequestCreatePayload(self,param_list)
        self._add_to_query("footballRivalsArenaRequestCreate",_param_name,inst)
        self.value_footballRivalsArenaRequestCreate = inst
        return inst

    def footballRivalsArenaTicketClaim(self,input:'footballRivalsArenaTicketClaimInput',_param_name:str = 'footballRivalsArenaTicketClaim') -> 'footballRivalsArenaTicketClaimPayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsArenaTicketClaimPayload(self,param_list)
        self._add_to_query("footballRivalsArenaTicketClaim",_param_name,inst)
        self.value_footballRivalsArenaTicketClaim = inst
        return inst

    def footballRivalsGameMarkArenaStoriesAsRead(self,input:'footballRivalsGameMarkArenaStoriesAsReadInput',_param_name:str = 'footballRivalsGameMarkArenaStoriesAsRead') -> 'footballRivalsGameMarkArenaStoriesAsReadPayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsGameMarkArenaStoriesAsReadPayload(self,param_list)
        self._add_to_query("footballRivalsGameMarkArenaStoriesAsRead",_param_name,inst)
        self.value_footballRivalsGameMarkArenaStoriesAsRead = inst
        return inst

    def footballRivalsGameMarkPostGameStoriesAsRead(self,input:'footballRivalsGameMarkPostGameStoriesAsReadInput',_param_name:str = 'footballRivalsGameMarkPostGameStoriesAsRead') -> 'footballRivalsGameMarkPostGameStoriesAsReadPayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsGameMarkPostGameStoriesAsReadPayload(self,param_list)
        self._add_to_query("footballRivalsGameMarkPostGameStoriesAsRead",_param_name,inst)
        self.value_footballRivalsGameMarkPostGameStoriesAsRead = inst
        return inst

    def footballRivalsGameMarkPostGameStoryAsRead(self,input:'footballRivalsGameMarkPostGameStoryAsReadInput',_param_name:str = 'footballRivalsGameMarkPostGameStoryAsRead') -> 'footballRivalsGameMarkPostGameStoryAsReadPayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsGameMarkPostGameStoryAsReadPayload(self,param_list)
        self._add_to_query("footballRivalsGameMarkPostGameStoryAsRead",_param_name,inst)
        self.value_footballRivalsGameMarkPostGameStoryAsRead = inst
        return inst

    def footballRivalsInviteAccept(self,input:'footballRivalsInviteAcceptInput',_param_name:str = 'footballRivalsInviteAccept') -> 'footballRivalsInviteAcceptPayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsInviteAcceptPayload(self,param_list)
        self._add_to_query("footballRivalsInviteAccept",_param_name,inst)
        self.value_footballRivalsInviteAccept = inst
        return inst

    def footballRivalsInviteAcceptCode(self,input:'footballRivalsInviteAcceptCodeInput',_param_name:str = 'footballRivalsInviteAcceptCode') -> 'footballRivalsInviteAcceptCodePayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsInviteAcceptCodePayload(self,param_list)
        self._add_to_query("footballRivalsInviteAcceptCode",_param_name,inst)
        self.value_footballRivalsInviteAcceptCode = inst
        return inst

    def footballRivalsInviteCreate(self,input:'footballRivalsInviteCreateInput',_param_name:str = 'footballRivalsInviteCreate') -> 'footballRivalsInviteCreatePayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsInviteCreatePayload(self,param_list)
        self._add_to_query("footballRivalsInviteCreate",_param_name,inst)
        self.value_footballRivalsInviteCreate = inst
        return inst

    def footballRivalsInviteReject(self,input:'footballRivalsInviteRejectInput',_param_name:str = 'footballRivalsInviteReject') -> 'footballRivalsInviteRejectPayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsInviteRejectPayload(self,param_list)
        self._add_to_query("footballRivalsInviteReject",_param_name,inst)
        self.value_footballRivalsInviteReject = inst
        return inst

    def footballRivalsInvitesAccept(self,input:'footballRivalsInvitesAcceptInput',_param_name:str = 'footballRivalsInvitesAccept') -> 'footballRivalsInvitesAcceptPayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsInvitesAcceptPayload(self,param_list)
        self._add_to_query("footballRivalsInvitesAccept",_param_name,inst)
        self.value_footballRivalsInvitesAccept = inst
        return inst

    def footballRivalsLineupUpsert(self,input:'footballRivalsLineupUpsertInput',_param_name:str = 'footballRivalsLineupUpsert') -> 'footballRivalsLineupUpsertPayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsLineupUpsertPayload(self,param_list)
        self._add_to_query("footballRivalsLineupUpsert",_param_name,inst)
        self.value_footballRivalsLineupUpsert = inst
        return inst

    def footballRivalsRemindGame(self,input:'footballRivalsRemindGameInput',_param_name:str = 'footballRivalsRemindGame') -> 'footballRivalsRemindGamePayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsRemindGamePayload(self,param_list)
        self._add_to_query("footballRivalsRemindGame",_param_name,inst)
        self.value_footballRivalsRemindGame = inst
        return inst

    def footballRivalsUpdateFavoriteTeam(self,input:'footballRivalsUpdateFavoriteTeamInput',_param_name:str = 'footballRivalsUpdateFavoriteTeam') -> 'footballRivalsUpdateFavoriteTeamPayload':
        param_list = []
        param_list.append(("input",input))
        inst = footballRivalsUpdateFavoriteTeamPayload(self,param_list)
        self._add_to_query("footballRivalsUpdateFavoriteTeam",_param_name,inst)
        self.value_footballRivalsUpdateFavoriteTeam = inst
        return inst

    def generateAccountingExtract(self,input:'generateAccountingExtractInput',_param_name:str = 'generateAccountingExtract') -> 'generateAccountingExtractPayload':
        param_list = []
        param_list.append(("input",input))
        inst = generateAccountingExtractPayload(self,param_list)
        self._add_to_query("generateAccountingExtract",_param_name,inst)
        self.value_generateAccountingExtract = inst
        return inst

    def generateOtpBackupCodes(self,input:'generateOtpBackupCodesInput',_param_name:str = 'generateOtpBackupCodes') -> 'generateOtpBackupCodesPayload':
        param_list = []
        param_list.append(("input",input))
        inst = generateOtpBackupCodesPayload(self,param_list)
        self._add_to_query("generateOtpBackupCodes",_param_name,inst)
        self.value_generateOtpBackupCodes = inst
        return inst

    def generateOtpProvisioningUri(self,input:'generateOtpProvisioningUriInput',_param_name:str = 'generateOtpProvisioningUri') -> 'generateOtpProvisioningUriPayload':
        param_list = []
        param_list.append(("input",input))
        inst = generateOtpProvisioningUriPayload(self,param_list)
        self._add_to_query("generateOtpProvisioningUri",_param_name,inst)
        self.value_generateOtpProvisioningUri = inst
        return inst

    def generateSo5NoCardLineup(self,input:'generateSo5NoCardLineupInput',_param_name:str = 'generateSo5NoCardLineup') -> 'generateSo5NoCardLineupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = generateSo5NoCardLineupPayload(self,param_list)
        self._add_to_query("generateSo5NoCardLineup",_param_name,inst)
        self.value_generateSo5NoCardLineup = inst
        return inst

    def joinSo5UserGroup(self,input:'joinSo5UserGroupInput',_param_name:str = 'joinSo5UserGroup') -> 'joinSo5UserGroupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = joinSo5UserGroupPayload(self,param_list)
        self._add_to_query("joinSo5UserGroup",_param_name,inst)
        self.value_joinSo5UserGroup = inst
        return inst

    def linkEthereumAddress(self,input:'linkEthereumAddressInput',_param_name:str = 'linkEthereumAddress') -> 'linkEthereumAddressPayload':
        param_list = []
        param_list.append(("input",input))
        inst = linkEthereumAddressPayload(self,param_list)
        self._add_to_query("linkEthereumAddress",_param_name,inst)
        self.value_linkEthereumAddress = inst
        return inst

    def loadPreviousLineup(self,input:'loadPreviousLineupInput',_param_name:str = 'loadPreviousLineup') -> 'loadPreviousLineupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = loadPreviousLineupPayload(self,param_list)
        self._add_to_query("loadPreviousLineup",_param_name,inst)
        self.value_loadPreviousLineup = inst
        return inst

    def markCardShardsChestUnlockedThresholdAsSeen(self,input:'markCardShardsChestUnlockedThresholdAsSeenInput',_param_name:str = 'markCardShardsChestUnlockedThresholdAsSeen') -> 'markCardShardsChestUnlockedThresholdAsSeenPayload':
        param_list = []
        param_list.append(("input",input))
        inst = markCardShardsChestUnlockedThresholdAsSeenPayload(self,param_list)
        self._add_to_query("markCardShardsChestUnlockedThresholdAsSeen",_param_name,inst)
        self.value_markCardShardsChestUnlockedThresholdAsSeen = inst
        return inst

    def markItemAsSeen(self,input:'markItemAsSeenInput',_param_name:str = 'markItemAsSeen') -> 'markItemAsSeenPayload':
        param_list = []
        param_list.append(("input",input))
        inst = markItemAsSeenPayload(self,param_list)
        self._add_to_query("markItemAsSeen",_param_name,inst)
        self.value_markItemAsSeen = inst
        return inst

    def markNotificationsAsRead(self,input:'markNotificationsAsReadInput',_param_name:str = 'markNotificationsAsRead') -> 'markNotificationsAsReadPayload':
        param_list = []
        param_list.append(("input",input))
        inst = markNotificationsAsReadPayload(self,param_list)
        self._add_to_query("markNotificationsAsRead",_param_name,inst)
        self.value_markNotificationsAsRead = inst
        return inst

    def markStoriesAsRead(self,input:'markStoriesAsReadInput',_param_name:str = 'markStoriesAsRead') -> 'markStoriesAsReadPayload':
        param_list = []
        param_list.append(("input",input))
        inst = markStoriesAsReadPayload(self,param_list)
        self._add_to_query("markStoriesAsRead",_param_name,inst)
        self.value_markStoriesAsRead = inst
        return inst

    def matchUserContacts(self,input:'matchUserContactsInput',_param_name:str = 'matchUserContacts') -> 'matchUserContactsPayload':
        param_list = []
        param_list.append(("input",input))
        inst = matchUserContactsPayload(self,param_list)
        self._add_to_query("matchUserContacts",_param_name,inst)
        self.value_matchUserContacts = inst
        return inst

    def prepareAcceptOffer(self,input:'prepareAcceptOfferInput',_param_name:str = 'prepareAcceptOffer') -> 'prepareAcceptOfferPayload':
        param_list = []
        param_list.append(("input",input))
        inst = prepareAcceptOfferPayload(self,param_list)
        self._add_to_query("prepareAcceptOffer",_param_name,inst)
        self.value_prepareAcceptOffer = inst
        return inst

    def prepareAcceptTradeWithWalletAndCreditCard(self,input:'prepareAcceptTradeWithWalletAndCreditCardInput',_param_name:str = 'prepareAcceptTradeWithWalletAndCreditCard') -> 'prepareAcceptTradeWithWalletAndCreditCardPayload':
        param_list = []
        param_list.append(("input",input))
        inst = prepareAcceptTradeWithWalletAndCreditCardPayload(self,param_list)
        self._add_to_query("prepareAcceptTradeWithWalletAndCreditCard",_param_name,inst)
        self.value_prepareAcceptTradeWithWalletAndCreditCard = inst
        return inst

    def prepareBid(self,input:'prepareBidInput',_param_name:str = 'prepareBid') -> 'prepareBidPayload':
        param_list = []
        param_list.append(("input",input))
        inst = prepareBidPayload(self,param_list)
        self._add_to_query("prepareBid",_param_name,inst)
        self.value_prepareBid = inst
        return inst

    def prepareCardWithdrawal(self,input:'prepareCardWithdrawalInput',_param_name:str = 'prepareCardWithdrawal') -> 'prepareCardWithdrawalPayload':
        param_list = []
        param_list.append(("input",input))
        inst = prepareCardWithdrawalPayload(self,param_list)
        self._add_to_query("prepareCardWithdrawal",_param_name,inst)
        self.value_prepareCardWithdrawal = inst
        return inst

    def prepareDeposit(self,input:'prepareDepositInput',_param_name:str = 'prepareDeposit') -> 'prepareDepositPayload':
        param_list = []
        param_list.append(("input",input))
        inst = prepareDepositPayload(self,param_list)
        self._add_to_query("prepareDeposit",_param_name,inst)
        self.value_prepareDeposit = inst
        return inst

    def prepareEthDeposit(self,input:'prepareEthDepositInput',_param_name:str = 'prepareEthDeposit') -> 'prepareEthDepositPayload':
        param_list = []
        param_list.append(("input",input))
        inst = prepareEthDepositPayload(self,param_list)
        self._add_to_query("prepareEthDeposit",_param_name,inst)
        self.value_prepareEthDeposit = inst
        return inst

    def prepareFastWithdrawal(self,input:'prepareFastWithdrawalInput',_param_name:str = 'prepareFastWithdrawal') -> 'prepareFastWithdrawalPayload':
        param_list = []
        param_list.append(("input",input))
        inst = prepareFastWithdrawalPayload(self,param_list)
        self._add_to_query("prepareFastWithdrawal",_param_name,inst)
        self.value_prepareFastWithdrawal = inst
        return inst

    def prepareIdealDeposit(self,input:'prepareIdealDepositInput',_param_name:str = 'prepareIdealDeposit') -> 'prepareIdealDepositPayload':
        param_list = []
        param_list.append(("input",input))
        inst = prepareIdealDepositPayload(self,param_list)
        self._add_to_query("prepareIdealDeposit",_param_name,inst)
        self.value_prepareIdealDeposit = inst
        return inst

    def prepareOffer(self,input:'prepareOfferInput',_param_name:str = 'prepareOffer') -> 'prepareOfferPayload':
        param_list = []
        param_list.append(("input",input))
        inst = prepareOfferPayload(self,param_list)
        self._add_to_query("prepareOffer",_param_name,inst)
        self.value_prepareOffer = inst
        return inst

    def preparePaypalDeposit(self,input:'preparePaypalDepositInput',_param_name:str = 'preparePaypalDeposit') -> 'preparePaypalDepositPayload':
        param_list = []
        param_list.append(("input",input))
        inst = preparePaypalDepositPayload(self,param_list)
        self._add_to_query("preparePaypalDeposit",_param_name,inst)
        self.value_preparePaypalDeposit = inst
        return inst

    def prepareTokenDeposit(self,input:'prepareTokenDepositInput',_param_name:str = 'prepareTokenDeposit') -> 'prepareTokenDepositPayload':
        param_list = []
        param_list.append(("input",input))
        inst = prepareTokenDepositPayload(self,param_list)
        self._add_to_query("prepareTokenDeposit",_param_name,inst)
        self.value_prepareTokenDeposit = inst
        return inst

    def probabilisticBundlesOpen(self,input:'probabilisticBundlesOpenInput',_param_name:str = 'probabilisticBundlesOpen') -> 'probabilisticBundlesOpenPayload':
        param_list = []
        param_list.append(("input",input))
        inst = probabilisticBundlesOpenPayload(self,param_list)
        self._add_to_query("probabilisticBundlesOpen",_param_name,inst)
        self.value_probabilisticBundlesOpen = inst
        return inst

    def reactActivity(self,input:'reactActivityInput',_param_name:str = 'reactActivity') -> 'reactActivityPayload':
        param_list = []
        param_list.append(("input",input))
        inst = reactActivityPayload(self,param_list)
        self._add_to_query("reactActivity",_param_name,inst)
        self.value_reactActivity = inst
        return inst

    def refreshAward(self,input:'refreshAwardInput',_param_name:str = 'refreshAward') -> 'refreshAwardPayload':
        param_list = []
        param_list.append(("input",input))
        inst = refreshAwardPayload(self,param_list)
        self._add_to_query("refreshAward",_param_name,inst)
        self.value_refreshAward = inst
        return inst

    def rejectOffer(self,input:'rejectOfferInput',_param_name:str = 'rejectOffer') -> 'rejectOfferPayload':
        param_list = []
        param_list.append(("input",input))
        inst = rejectOfferPayload(self,param_list)
        self._add_to_query("rejectOffer",_param_name,inst)
        self.value_rejectOffer = inst
        return inst

    def relayCall(self,input:'relayCallInput',_param_name:str = 'relayCall') -> 'relayCallPayload':
        param_list = []
        param_list.append(("input",input))
        inst = relayCallPayload(self,param_list)
        self._add_to_query("relayCall",_param_name,inst)
        self.value_relayCall = inst
        return inst

    def removeAuctionReminder(self,input:'removeAuctionReminderInput',_param_name:str = 'removeAuctionReminder') -> 'removeAuctionReminderPayload':
        param_list = []
        param_list.append(("input",input))
        inst = removeAuctionReminderPayload(self,param_list)
        self._add_to_query("removeAuctionReminder",_param_name,inst)
        self.value_removeAuctionReminder = inst
        return inst

    def removeTokenFromDeck(self,input:'removeTokenFromDeckInput',_param_name:str = 'removeTokenFromDeck') -> 'removeTokenFromDeckPayload':
        param_list = []
        param_list.append(("input",input))
        inst = removeTokenFromDeckPayload(self,param_list)
        self._add_to_query("removeTokenFromDeck",_param_name,inst)
        self.value_removeTokenFromDeck = inst
        return inst

    def removeUserFromSo5UserGroup(self,input:'removeUserFromSo5UserGroupInput',_param_name:str = 'removeUserFromSo5UserGroup') -> 'removeUserFromSo5UserGroupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = removeUserFromSo5UserGroupPayload(self,param_list)
        self._add_to_query("removeUserFromSo5UserGroup",_param_name,inst)
        self.value_removeUserFromSo5UserGroup = inst
        return inst

    def reportTelemetry(self,input:'reportTelemetryInput',_param_name:str = 'reportTelemetry') -> 'reportTelemetryPayload':
        param_list = []
        param_list.append(("input",input))
        inst = reportTelemetryPayload(self,param_list)
        self._add_to_query("reportTelemetry",_param_name,inst)
        self.value_reportTelemetry = inst
        return inst

    def requestPaymentReceipt(self,input:'requestReceiptInput',_param_name:str = 'requestPaymentReceipt') -> 'requestReceiptPayload':
        param_list = []
        param_list.append(("input",input))
        inst = requestReceiptPayload(self,param_list)
        self._add_to_query("requestPaymentReceipt",_param_name,inst)
        self.value_requestPaymentReceipt = inst
        return inst

    def requestSo5NoCardLineupEligibleLeaderboards(self,input:'requestSo5NoCardLineupEligibleLeaderboardsInput',_param_name:str = 'requestSo5NoCardLineupEligibleLeaderboards') -> 'requestSo5NoCardLineupEligibleLeaderboardsPayload':
        param_list = []
        param_list.append(("input",input))
        inst = requestSo5NoCardLineupEligibleLeaderboardsPayload(self,param_list)
        self._add_to_query("requestSo5NoCardLineupEligibleLeaderboards",_param_name,inst)
        self.value_requestSo5NoCardLineupEligibleLeaderboards = inst
        return inst

    def resendConfirmationInstructions(self,input:'resendConfirmationInstructionsInput',_param_name:str = 'resendConfirmationInstructions') -> 'resendConfirmationInstructionsPayload':
        param_list = []
        param_list.append(("input",input))
        inst = resendConfirmationInstructionsPayload(self,param_list)
        self._add_to_query("resendConfirmationInstructions",_param_name,inst)
        self.value_resendConfirmationInstructions = inst
        return inst

    def resendVerificationCode(self,input:'resendVerificationCodeInput',_param_name:str = 'resendVerificationCode') -> 'resendVerificationCodePayload':
        param_list = []
        param_list.append(("input",input))
        inst = resendVerificationCodePayload(self,param_list)
        self._add_to_query("resendVerificationCode",_param_name,inst)
        self.value_resendVerificationCode = inst
        return inst

    def resetPrivateKey(self,input:'resetPrivateKeyInput',_param_name:str = 'resetPrivateKey') -> 'resetPrivateKeyPayload':
        param_list = []
        param_list.append(("input",input))
        inst = resetPrivateKeyPayload(self,param_list)
        self._add_to_query("resetPrivateKey",_param_name,inst)
        self.value_resetPrivateKey = inst
        return inst

    def resetSo5NoCardDraftedAppearances(self,input:'resetSo5NoCardDraftedAppearancesInput',_param_name:str = 'resetSo5NoCardDraftedAppearances') -> 'resetSo5NoCardDraftedAppearancesPayload':
        param_list = []
        param_list.append(("input",input))
        inst = resetSo5NoCardDraftedAppearancesPayload(self,param_list)
        self._add_to_query("resetSo5NoCardDraftedAppearances",_param_name,inst)
        self.value_resetSo5NoCardDraftedAppearances = inst
        return inst

    def restoreWallet(self,input:'restoreWalletInput',_param_name:str = 'restoreWallet') -> 'restoreWalletPayload':
        param_list = []
        param_list.append(("input",input))
        inst = restoreWalletPayload(self,param_list)
        self._add_to_query("restoreWallet",_param_name,inst)
        self.value_restoreWallet = inst
        return inst

    def resumeOnboarding(self,input:'resumeOnboardingInput',_param_name:str = 'resumeOnboarding') -> 'resumeOnboardingPayload':
        param_list = []
        param_list.append(("input",input))
        inst = resumeOnboardingPayload(self,param_list)
        self._add_to_query("resumeOnboarding",_param_name,inst)
        self.value_resumeOnboarding = inst
        return inst

    def revealBlueprints(self,input:'revealBlueprintsInput',_param_name:str = 'revealBlueprints') -> 'revealBlueprintsPayload':
        param_list = []
        param_list.append(("input",input))
        inst = revealBlueprintsPayload(self,param_list)
        self._add_to_query("revealBlueprints",_param_name,inst)
        self.value_revealBlueprints = inst
        return inst

    def revokeDevice(self,input:'revokeDeviceInput',_param_name:str = 'revokeDevice') -> 'revokeDevicePayload':
        param_list = []
        param_list.append(("input",input))
        inst = revokeDevicePayload(self,param_list)
        self._add_to_query("revokeDevice",_param_name,inst)
        self.value_revokeDevice = inst
        return inst

    def revokeOAuthAccessToken(self,input:'revokeOAuthAccessTokenInput',_param_name:str = 'revokeOAuthAccessToken') -> 'revokeOAuthAccessTokenPayload':
        param_list = []
        param_list.append(("input",input))
        inst = revokeOAuthAccessTokenPayload(self,param_list)
        self._add_to_query("revokeOAuthAccessToken",_param_name,inst)
        self.value_revokeOAuthAccessToken = inst
        return inst

    def revokeOAuthAccessTokenForApplication(self,input:'revokeOAuthAccessTokenForApplicationInput',_param_name:str = 'revokeOAuthAccessTokenForApplication') -> 'revokeOAuthAccessTokenForApplicationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = revokeOAuthAccessTokenForApplicationPayload(self,param_list)
        self._add_to_query("revokeOAuthAccessTokenForApplication",_param_name,inst)
        self.value_revokeOAuthAccessTokenForApplication = inst
        return inst

    def sendWalletRecovery(self,input:'sendWalletRecoveryInput',_param_name:str = 'sendWalletRecovery') -> 'sendWalletRecoveryPayload':
        param_list = []
        param_list.append(("input",input))
        inst = sendWalletRecoveryPayload(self,param_list)
        self._add_to_query("sendWalletRecovery",_param_name,inst)
        self.value_sendWalletRecovery = inst
        return inst

    def setDeviceToken(self,input:'setDeviceTokenInput',_param_name:str = 'setDeviceToken') -> 'setDeviceTokenPayload':
        param_list = []
        param_list.append(("input",input))
        inst = setDeviceTokenPayload(self,param_list)
        self._add_to_query("setDeviceToken",_param_name,inst)
        self.value_setDeviceToken = inst
        return inst

    def setLiveActivityToken(self,input:'setLiveActivityTokenInput',_param_name:str = 'setLiveActivityToken') -> 'setLiveActivityTokenPayload':
        param_list = []
        param_list.append(("input",input))
        inst = setLiveActivityTokenPayload(self,param_list)
        self._add_to_query("setLiveActivityToken",_param_name,inst)
        self.value_setLiveActivityToken = inst
        return inst

    def setTokenTradeStatus(self,input:'setTokenTradeStatusInput',_param_name:str = 'setTokenTradeStatus') -> 'setTokenTradeStatusPayload':
        param_list = []
        param_list.append(("input",input))
        inst = setTokenTradeStatusPayload(self,param_list)
        self._add_to_query("setTokenTradeStatus",_param_name,inst)
        self.value_setTokenTradeStatus = inst
        return inst

    def signIn(self,input:'signInInput',_param_name:str = 'signIn') -> 'SignInMutationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = SignInMutationPayload(self,param_list)
        self._add_to_query("signIn",_param_name,inst)
        self.value_signIn = inst
        return inst

    def signInWithOauth(self,input:'signInWithOAuthInput',_param_name:str = 'signInWithOauth') -> 'SignInWithOAuthMutationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = SignInWithOAuthMutationPayload(self,param_list)
        self._add_to_query("signInWithOauth",_param_name,inst)
        self.value_signInWithOauth = inst
        return inst

    def signOutFromAllDevices(self,input:'signOutFromAllDevicesInput',_param_name:str = 'signOutFromAllDevices') -> 'signOutFromAllDevicesPayload':
        param_list = []
        param_list.append(("input",input))
        inst = signOutFromAllDevicesPayload(self,param_list)
        self._add_to_query("signOutFromAllDevices",_param_name,inst)
        self.value_signOutFromAllDevices = inst
        return inst

    def signUp(self,input:'signUpInput',_param_name:str = 'signUp') -> 'SignUpMutationPayload':
        param_list = []
        param_list.append(("input",input))
        inst = SignUpMutationPayload(self,param_list)
        self._add_to_query("signUp",_param_name,inst)
        self.value_signUp = inst
        return inst

    def skipOnboarding(self,input:'skipOnboardingInput',_param_name:str = 'skipOnboarding') -> 'skipOnboardingPayload':
        param_list = []
        param_list.append(("input",input))
        inst = skipOnboardingPayload(self,param_list)
        self._add_to_query("skipOnboarding",_param_name,inst)
        self.value_skipOnboarding = inst
        return inst

    def spendCardShardsChest(self,input:'spendCardShardsChestInput',_param_name:str = 'spendCardShardsChest') -> 'spendCardShardsChestPayload':
        param_list = []
        param_list.append(("input",input))
        inst = spendCardShardsChestPayload(self,param_list)
        self._add_to_query("spendCardShardsChest",_param_name,inst)
        self.value_spendCardShardsChest = inst
        return inst

    def startOnboarding(self,input:'startOnboardingInput',_param_name:str = 'startOnboarding') -> 'startOnboardingPayload':
        param_list = []
        param_list.append(("input",input))
        inst = startOnboardingPayload(self,param_list)
        self._add_to_query("startOnboarding",_param_name,inst)
        self.value_startOnboarding = inst
        return inst

    def stopAutoBid(self,input:'stopAutoBidInput',_param_name:str = 'stopAutoBid') -> 'stopAutoBidPayload':
        param_list = []
        param_list.append(("input",input))
        inst = stopAutoBidPayload(self,param_list)
        self._add_to_query("stopAutoBid",_param_name,inst)
        self.value_stopAutoBid = inst
        return inst

    def unblockEmail(self,input:'UnblockEmailInput',_param_name:str = 'unblockEmail') -> 'UnblockEmailPayload':
        param_list = []
        param_list.append(("input",input))
        inst = UnblockEmailPayload(self,param_list)
        self._add_to_query("unblockEmail",_param_name,inst)
        self.value_unblockEmail = inst
        return inst

    def unblockUserOffers(self,input:'unblockUserOffersInput',_param_name:str = 'unblockUserOffers') -> 'unblockUserOffersPayload':
        param_list = []
        param_list.append(("input",input))
        inst = unblockUserOffersPayload(self,param_list)
        self._add_to_query("unblockUserOffers",_param_name,inst)
        self.value_unblockUserOffers = inst
        return inst

    def updateCardFilters(self,input:'updateCardFiltersInput',_param_name:str = 'updateCardFilters') -> 'updateCardFiltersPayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateCardFiltersPayload(self,param_list)
        self._add_to_query("updateCardFilters",_param_name,inst)
        self.value_updateCardFilters = inst
        return inst

    def updateExternalEthDeposit(self,input:'updateExternalEthDepositInput',_param_name:str = 'updateExternalEthDeposit') -> 'updateExternalEthDepositPayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateExternalEthDepositPayload(self,param_list)
        self._add_to_query("updateExternalEthDeposit",_param_name,inst)
        self.value_updateExternalEthDeposit = inst
        return inst

    def updateFiatWallet(self,input:'updateFiatWalletInput',_param_name:str = 'updateFiatWallet') -> 'updateFiatWalletPayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateFiatWalletPayload(self,param_list)
        self._add_to_query("updateFiatWallet",_param_name,inst)
        self.value_updateFiatWallet = inst
        return inst

    def updateHighlightedCard(self,input:'updateHighlightedCardInput',_param_name:str = 'updateHighlightedCard') -> 'updateHighlightedCardPayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateHighlightedCardPayload(self,param_list)
        self._add_to_query("updateHighlightedCard",_param_name,inst)
        self.value_updateHighlightedCard = inst
        return inst

    def updateManagerTeam(self,input:'updateManagerTeamInput',_param_name:str = 'updateManagerTeam') -> 'updateManagerTeamPayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateManagerTeamPayload(self,param_list)
        self._add_to_query("updateManagerTeam",_param_name,inst)
        self.value_updateManagerTeam = inst
        return inst

    def updatePartnerOffersAgreement(self,input:'updatePartnerOffersAgreementInput',_param_name:str = 'updatePartnerOffersAgreement') -> 'updatePartnerOffersAgreementPayload':
        param_list = []
        param_list.append(("input",input))
        inst = updatePartnerOffersAgreementPayload(self,param_list)
        self._add_to_query("updatePartnerOffersAgreement",_param_name,inst)
        self.value_updatePartnerOffersAgreement = inst
        return inst

    def updateSo5UserGroup(self,input:'updateSo5UserGroupInput',_param_name:str = 'updateSo5UserGroup') -> 'updateSo5UserGroupPayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateSo5UserGroupPayload(self,param_list)
        self._add_to_query("updateSo5UserGroup",_param_name,inst)
        self.value_updateSo5UserGroup = inst
        return inst

    def updateSportProfile(self,input:'updateSportProfileInput',_param_name:str = 'updateSportProfile') -> 'updateSportProfilePayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateSportProfilePayload(self,param_list)
        self._add_to_query("updateSportProfile",_param_name,inst)
        self.value_updateSportProfile = inst
        return inst

    def updateSubscription(self,input:'updateSubscriptionInput',_param_name:str = 'updateSubscription') -> 'updateSubscriptionPayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateSubscriptionPayload(self,param_list)
        self._add_to_query("updateSubscription",_param_name,inst)
        self.value_updateSubscription = inst
        return inst

    def updateUserEmail(self,input:'updateUserEmailInput',_param_name:str = 'updateUserEmail') -> 'updateUserEmailPayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateUserEmailPayload(self,param_list)
        self._add_to_query("updateUserEmail",_param_name,inst)
        self.value_updateUserEmail = inst
        return inst

    def updateUserProfile(self,input:'updateUserProfileInput',_param_name:str = 'updateUserProfile') -> 'updateUserProfilePayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateUserProfilePayload(self,param_list)
        self._add_to_query("updateUserProfile",_param_name,inst)
        self.value_updateUserProfile = inst
        return inst

    def updateUserSettings(self,input:'updateUserSettingsInput',_param_name:str = 'updateUserSettings') -> 'updateUserSettingsPayload':
        param_list = []
        param_list.append(("input",input))
        inst = updateUserSettingsPayload(self,param_list)
        self._add_to_query("updateUserSettings",_param_name,inst)
        self.value_updateUserSettings = inst
        return inst

    def upsertCommonDraft(self,input:'upsertCommonDraftInput',_param_name:str = 'upsertCommonDraft') -> 'upsertCommonDraftPayload':
        param_list = []
        param_list.append(("input",input))
        inst = upsertCommonDraftPayload(self,param_list)
        self._add_to_query("upsertCommonDraft",_param_name,inst)
        self.value_upsertCommonDraft = inst
        return inst

    def validateApplePayMerchantSession(self,input:'validateApplePayMerchantSessionInput',_param_name:str = 'validateApplePayMerchantSession') -> 'validateApplePayMerchantSessionPayload':
        param_list = []
        param_list.append(("input",input))
        inst = validateApplePayMerchantSessionPayload(self,param_list)
        self._add_to_query("validateApplePayMerchantSession",_param_name,inst)
        self.value_validateApplePayMerchantSession = inst
        return inst

    def validateFiatWallet(self,input:'validateFiatWalletInput',_param_name:str = 'validateFiatWallet') -> 'validateFiatWalletPayload':
        param_list = []
        param_list.append(("input",input))
        inst = validateFiatWalletPayload(self,param_list)
        self._add_to_query("validateFiatWallet",_param_name,inst)
        self.value_validateFiatWallet = inst
        return inst

    def verifyMobilePurchase(self,input:'verifyMobilePurchaseInput',_param_name:str = 'verifyMobilePurchase') -> 'verifyMobilePurchasePayload':
        param_list = []
        param_list.append(("input",input))
        inst = verifyMobilePurchasePayload(self,param_list)
        self._add_to_query("verifyMobilePurchase",_param_name,inst)
        self.value_verifyMobilePurchase = inst
        return inst

    def verifyPhoneNumber(self,input:'verifyPhoneNumberInput',_param_name:str = 'verifyPhoneNumber') -> 'verifyPhoneNumberPayload':
        param_list = []
        param_list.append(("input",input))
        inst = verifyPhoneNumberPayload(self,param_list)
        self._add_to_query("verifyPhoneNumber",_param_name,inst)
        self.value_verifyPhoneNumber = inst
        return inst

    def visitCampaignPage(self,input:'visitCampaignPageInput',_param_name:str = 'visitCampaignPage') -> 'visitCampaignPagePayload':
        param_list = []
        param_list.append(("input",input))
        inst = visitCampaignPagePayload(self,param_list)
        self._add_to_query("visitCampaignPage",_param_name,inst)
        self.value_visitCampaignPage = inst
        return inst

    def deleteLineup(self,input:'BaseballDeleteLineupInput',id,_param_name:str = 'deleteLineup'):
        inst = None
        self._add_to_query("deleteLineup",_param_name)
        pass

    def claimBoxRewards(self,ids,_param_name:str = 'claimBoxRewards') -> 'BoxReward':
        param_list = []
        param_list.append(("ids",ids))
        inst = BoxReward(self,param_list)
        self._add_to_query("claimBoxRewards",_param_name,inst)
        self.value_claimBoxRewards = inst
        return inst

    def claimCardRewards(self,ids,_param_name:str = 'claimCardRewards') -> 'CardReward':
        param_list = []
        param_list.append(("ids",ids))
        inst = CardReward(self,param_list)
        self._add_to_query("claimCardRewards",_param_name,inst)
        self.value_claimCardRewards = inst
        return inst

    def claimNBARewards(self,ids,_param_name:str = 'claimNBARewards') -> 'NBAReward':
        param_list = []
        param_list.append(("ids",ids))
        inst = NBAReward(self,param_list)
        self._add_to_query("claimNBARewards",_param_name,inst)
        self.value_claimNBARewards = inst
        return inst

    def claimNBAReferralRewards(self,referralIDs,_param_name:str = 'claimNBAReferralRewards') -> 'NBAReferralReward':
        param_list = []
        param_list.append(("referralIDs",referralIDs))
        inst = NBAReferralReward(self,param_list)
        self._add_to_query("claimNBAReferralRewards",_param_name,inst)
        self.value_claimNBAReferralRewards = inst
        return inst

    def completeNBAOnboardingTask(self,input:'NBACompleteOnboardingTaskInput',_param_name:str = 'completeNBAOnboardingTask') -> 'NBACompleteOnboardingTaskResponse':
        param_list = []
        param_list.append(("input",input))
        inst = NBACompleteOnboardingTaskResponse(self,param_list)
        self._add_to_query("completeNBAOnboardingTask",_param_name,inst)
        self.value_completeNBAOnboardingTask = inst
        return inst

    def createOrUpdateNBALineup(self,input:'NBACreateOrUpdateLineupInput',_param_name:str = 'createOrUpdateNBALineup') -> 'NBACreateOrUpdateLineupResponse':
        param_list = []
        param_list.append(("input",input))
        inst = NBACreateOrUpdateLineupResponse(self,param_list)
        self._add_to_query("createOrUpdateNBALineup",_param_name,inst)
        self.value_createOrUpdateNBALineup = inst
        return inst

    def deleteNBALineup(self,id,_param_name:str = 'deleteNBALineup'):
        inst = None
        self._add_to_query("deleteNBALineup",_param_name)
        pass

    def claimBaseballRewards(self,ids,_param_name:str = 'claimBaseballRewards') -> 'BaseballReward':
        param_list = []
        param_list.append(("ids",ids))
        inst = BaseballReward(self,param_list)
        self._add_to_query("claimBaseballRewards",_param_name,inst)
        self.value_claimBaseballRewards = inst
        return inst

    def claimBaseballReferralRewards(self,referralIDs,_param_name:str = 'claimBaseballReferralRewards') -> 'BaseballReferralReward':
        param_list = []
        param_list.append(("referralIDs",referralIDs))
        inst = BaseballReferralReward(self,param_list)
        self._add_to_query("claimBaseballReferralRewards",_param_name,inst)
        self.value_claimBaseballReferralRewards = inst
        return inst

    def createOrUpdateBaseballLineup(self,input:'BaseballCreateOrUpdateLineupInput',_param_name:str = 'createOrUpdateBaseballLineup') -> 'BaseballCreateOrUpdateLineupResponse':
        param_list = []
        param_list.append(("input",input))
        inst = BaseballCreateOrUpdateLineupResponse(self,param_list)
        self._add_to_query("createOrUpdateBaseballLineup",_param_name,inst)
        self.value_createOrUpdateBaseballLineup = inst
        return inst

    def deleteBaseballLineup(self,id,_param_name:str = 'deleteBaseballLineup'):
        inst = None
        self._add_to_query("deleteBaseballLineup",_param_name)
        pass


class NBACardBundleOffer(GraphQLObject):
    value_id = None
    value_priceUSDCents = None
    value_cards:'list[NBACard]' = None
    value_expiresAt = None
    value_leaderboard:'NBALeaderboard' = None
    value_rewardPlayerName = None
    value_rank = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def priceUSDCents(self,_param_name:str = 'priceUSDCents'):
        inst = None
        self._add_to_query("priceUSDCents",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def expiresAt(self,_param_name:str = 'expiresAt'):
        inst = None
        self._add_to_query("expiresAt",_param_name)
        pass

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'NBALeaderboard':
        param_list = []
        inst = NBALeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def rewardPlayerName(self,_param_name:str = 'rewardPlayerName'):
        inst = None
        self._add_to_query("rewardPlayerName",_param_name)
        pass

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass


class NBACardsInput(GraphQLInputObject):
    def __init__(self,ids = None,assetIds = None):
        self._add_parameter('ids',ids)
        self._add_parameter('assetIds',assetIds)

class NBACardsPaginated(GraphQLObject):
    value_currentPage = None
    value_pages = None
    value_cards:'list[NBACard]' = None
    def currentPage(self,_param_name:str = 'currentPage'):
        inst = None
        self._add_to_query("currentPage",_param_name)
        pass

    def pages(self,_param_name:str = 'pages'):
        inst = None
        self._add_to_query("pages",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst


class NBACommonCardSample(GraphQLObject):
    value_id = None
    value_player:'NBAPlayer' = None
    value_commonCardImageUrl = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'NBAPlayer':
        param_list = []
        inst = NBAPlayer(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def commonCardImageUrl(self,_param_name:str = 'commonCardImageUrl'):
        inst = None
        self._add_to_query("commonCardImageUrl",_param_name)
        pass


class NBACardTrade(GraphQLObject):
    value_id = None
    value_expiresAfter = None
    value_userGiveCard:'NBACard' = None
    value_userGiveCardUsedInLineup:'NBALineup' = None
    value_userReceiveCardChoices:'list[NBACommonCardSample]' = None
    value_userReceiveCard:'NBACard' = None
    value_isComplete = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def expiresAfter(self,_param_name:str = 'expiresAfter'):
        inst = None
        self._add_to_query("expiresAfter",_param_name)
        pass

    def userGiveCard(self,_param_name:str = 'userGiveCard') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("userGiveCard",_param_name,inst)
        self.value_userGiveCard = inst
        return inst

    def userGiveCardUsedInLineup(self,_param_name:str = 'userGiveCardUsedInLineup') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("userGiveCardUsedInLineup",_param_name,inst)
        self.value_userGiveCardUsedInLineup = inst
        return inst

    def userReceiveCardChoices(self,_param_name:str = 'userReceiveCardChoices') -> 'NBACommonCardSample':
        param_list = []
        inst = NBACommonCardSample(self,param_list)
        self._add_to_query("userReceiveCardChoices",_param_name,inst)
        self.value_userReceiveCardChoices = inst
        return inst

    def userReceiveCard(self,_param_name:str = 'userReceiveCard') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("userReceiveCard",_param_name,inst)
        self.value_userReceiveCard = inst
        return inst

    def isComplete(self,_param_name:str = 'isComplete'):
        inst = None
        self._add_to_query("isComplete",_param_name)
        pass


class NBACommonCardDrop(GraphQLObject):
    value_id = None
    value_cardChoices:'list[NBACommonCardSample]' = None
    value_claimedCard:'NBACard' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def cardChoices(self,_param_name:str = 'cardChoices') -> 'NBACommonCardSample':
        param_list = []
        inst = NBACommonCardSample(self,param_list)
        self._add_to_query("cardChoices",_param_name,inst)
        self.value_cardChoices = inst
        return inst

    def claimedCard(self,_param_name:str = 'claimedCard') -> 'NBACard':
        param_list = []
        inst = NBACard(self,param_list)
        self._add_to_query("claimedCard",_param_name,inst)
        self.value_claimedCard = inst
        return inst


class NBACompleteOnboardingTaskInput(GraphQLInputObject):
    def __init__(self,task = None,selectedCardPlayerId = None):
        self._add_parameter('task',task)
        self._add_parameter('selectedCardPlayerId',selectedCardPlayerId)

class NBACreateOrUpdateLineupInput(GraphQLInputObject):
    def __init__(self,lineupId = None,leaderboardSlug = None,cardSlugs = None):
        self._add_parameter('lineupId',lineupId)
        self._add_parameter('leaderboardSlug',leaderboardSlug)
        self._add_parameter('cardSlugs',cardSlugs)

class NBADeleteLineupInput(GraphQLInputObject):
    def __init__(self,lineupId = None):
        self._add_parameter('lineupId',lineupId)

class NBAFixtureConnection(GraphQLObject):
    value_nodes:'list[NBAFixture]' = None
    value_pageInfo:'PageInfo' = None
    def nodes(self,_param_name:str = 'nodes') -> 'NBAFixture':
        param_list = []
        inst = NBAFixture(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class NBALeaderboardRuleRange(GraphQLObject):
    value_min = None
    value_max = None
    def min(self,_param_name:str = 'min'):
        inst = None
        self._add_to_query("min",_param_name)
        pass

    def max(self,_param_name:str = 'max'):
        inst = None
        self._add_to_query("max",_param_name)
        pass


class NBALeaderboardRulesRarityRange(GraphQLObject):
    value_common:'NBALeaderboardRuleRange' = None
    value_limited:'NBALeaderboardRuleRange' = None
    value_rare:'NBALeaderboardRuleRange' = None
    value_superRare:'NBALeaderboardRuleRange' = None
    value_unique:'NBALeaderboardRuleRange' = None
    def common(self,_param_name:str = 'common') -> 'NBALeaderboardRuleRange':
        param_list = []
        inst = NBALeaderboardRuleRange(self,param_list)
        self._add_to_query("common",_param_name,inst)
        self.value_common = inst
        return inst

    def limited(self,_param_name:str = 'limited') -> 'NBALeaderboardRuleRange':
        param_list = []
        inst = NBALeaderboardRuleRange(self,param_list)
        self._add_to_query("limited",_param_name,inst)
        self.value_limited = inst
        return inst

    def rare(self,_param_name:str = 'rare') -> 'NBALeaderboardRuleRange':
        param_list = []
        inst = NBALeaderboardRuleRange(self,param_list)
        self._add_to_query("rare",_param_name,inst)
        self.value_rare = inst
        return inst

    def superRare(self,_param_name:str = 'superRare') -> 'NBALeaderboardRuleRange':
        param_list = []
        inst = NBALeaderboardRuleRange(self,param_list)
        self._add_to_query("superRare",_param_name,inst)
        self.value_superRare = inst
        return inst

    def unique(self,_param_name:str = 'unique') -> 'NBALeaderboardRuleRange':
        param_list = []
        inst = NBALeaderboardRuleRange(self,param_list)
        self._add_to_query("unique",_param_name,inst)
        self.value_unique = inst
        return inst


class NBALeagueLineup(GraphQLObject):
    value_rank = None
    value_lineup:'NBALineup' = None
    value_leaderboard:'NBALeagueLeaderboard' = None
    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def lineup(self,_param_name:str = 'lineup') -> 'NBALineup':
        param_list = []
        inst = NBALineup(self,param_list)
        self._add_to_query("lineup",_param_name,inst)
        self.value_lineup = inst
        return inst

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'NBALeagueLeaderboard':
        param_list = []
        inst = NBALeagueLeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst


class NBALeagueLeaderboard(GraphQLObject):
    value_league:'NBALeague' = None
    value_leaderboard:'NBALeaderboard' = None
    value_lineupCount = None
    value_lineups:'list[NBALeagueLineup]' = None
    value_participants:'list[User]' = None
    def league(self,_param_name:str = 'league') -> 'NBALeague':
        param_list = []
        inst = NBALeague(self,param_list)
        self._add_to_query("league",_param_name,inst)
        self.value_league = inst
        return inst

    def leaderboard(self,_param_name:str = 'leaderboard') -> 'NBALeaderboard':
        param_list = []
        inst = NBALeaderboard(self,param_list)
        self._add_to_query("leaderboard",_param_name,inst)
        self.value_leaderboard = inst
        return inst

    def lineupCount(self,_param_name:str = 'lineupCount'):
        inst = None
        self._add_to_query("lineupCount",_param_name)
        pass

    def lineups(self,_param_name:str = 'lineups') -> 'NBALeagueLineup':
        param_list = []
        inst = NBALeagueLineup(self,param_list)
        self._add_to_query("lineups",_param_name,inst)
        self.value_lineups = inst
        return inst

    def participants(self,_param_name:str = 'participants') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("participants",_param_name,inst)
        self.value_participants = inst
        return inst


class NoCardRouteInfo(GraphQLObject):
    value_emailAddress = None
    value_isRouteOpen = None
    value_maxLineupsPerUser = None
    value_gameWeek = None
    value_cardCountsByRarity:'CardCountsByRarity' = None
    value_draftableAppearance:'DraftableAppearance' = None
    def emailAddress(self,_param_name:str = 'emailAddress'):
        inst = None
        self._add_to_query("emailAddress",_param_name)
        pass

    def isRouteOpen(self,_param_name:str = 'isRouteOpen'):
        inst = None
        self._add_to_query("isRouteOpen",_param_name)
        pass

    def maxLineupsPerUser(self,_param_name:str = 'maxLineupsPerUser'):
        inst = None
        self._add_to_query("maxLineupsPerUser",_param_name)
        pass

    def gameWeek(self,_param_name:str = 'gameWeek'):
        inst = None
        self._add_to_query("gameWeek",_param_name)
        pass

    def cardCountsByRarity(self,_param_name:str = 'cardCountsByRarity') -> 'CardCountsByRarity':
        param_list = []
        inst = CardCountsByRarity(self,param_list)
        self._add_to_query("cardCountsByRarity",_param_name,inst)
        self.value_cardCountsByRarity = inst
        return inst

    def draftableAppearance(self,_param_name:str = 'draftableAppearance') -> 'DraftableAppearance':
        param_list = []
        inst = DraftableAppearance(self,param_list)
        self._add_to_query("draftableAppearance",_param_name,inst)
        self.value_draftableAppearance = inst
        return inst


class Node(GraphQLObject):
    value_id = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class NotificationCategoryInput(GraphQLInputObject):
    def __init__(self,name = None,type = None):
        self._add_parameter('name',name)
        self._add_parameter('type',type)

class NotificationInterface(GraphQLObject):
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_sport = None
    value_user:'CurrentUser' = None
    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class NotificationPreferenceInput(GraphQLInputObject):
    def __init__(self,name = None,sport = None,value = None):
        self._add_parameter('name',name)
        self._add_parameter('sport',sport)
        self._add_parameter('value',value)

class OfferNotification(GraphQLObject):
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_sport = None
    value_tokenOffer:'TokenOffer' = None
    value_user:'CurrentUser' = None
    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def tokenOffer(self,_param_name:str = 'tokenOffer') -> 'TokenOffer':
        param_list = []
        inst = TokenOffer(self,param_list)
        self._add_to_query("tokenOffer",_param_name,inst)
        self.value_tokenOffer = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class OperationInput(GraphQLInputObject):
    def __init__(self,name = None,path = None,timeMs = None):
        self._add_parameter('name',name)
        self._add_parameter('path',path)
        self._add_parameter('timeMs',timeMs)

class OtherBankAccount(GraphQLObject):
    value_accountNumber = None
    value_bic = None
    value_country:'Country' = None
    value_id = None
    value_ownerAddress:'MangopayBankAccountOwnerAddress' = None
    value_ownerName = None
    def accountNumber(self,_param_name:str = 'accountNumber'):
        inst = None
        self._add_to_query("accountNumber",_param_name)
        pass

    def bic(self,_param_name:str = 'bic'):
        inst = None
        self._add_to_query("bic",_param_name)
        pass

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def ownerAddress(self,_param_name:str = 'ownerAddress') -> 'MangopayBankAccountOwnerAddress':
        param_list = []
        inst = MangopayBankAccountOwnerAddress(self,param_list)
        self._add_to_query("ownerAddress",_param_name,inst)
        self.value_ownerAddress = inst
        return inst

    def ownerName(self,_param_name:str = 'ownerName'):
        inst = None
        self._add_to_query("ownerName",_param_name)
        pass


class OwnerInterface(GraphQLObject):
    value_account:'Account' = None
    value_address = None
    value_amounts:'MonetaryAmount' = None
    value_blockchain = None
    value_card:'Card' = None
    value__from = None
    value_id = None
    value_optimistic = None
    value_price = None
    value_referenceId = None
    value_settleAt = None
    value_transferType = None
    def account(self,_param_name:str = 'account') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("account",_param_name,inst)
        self.value_account = inst
        return inst

    def address(self,_param_name:str = 'address'):
        inst = None
        self._add_to_query("address",_param_name)
        pass

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def blockchain(self,_param_name:str = 'blockchain'):
        inst = None
        self._add_to_query("blockchain",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def _from(self,_param_name:str = '_from'):
        inst = None
        self._add_to_query("_from",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def optimistic(self,_param_name:str = 'optimistic'):
        inst = None
        self._add_to_query("optimistic",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def referenceId(self,_param_name:str = 'referenceId'):
        inst = None
        self._add_to_query("referenceId",_param_name)
        pass

    def settleAt(self,_param_name:str = 'settleAt'):
        inst = None
        self._add_to_query("settleAt",_param_name)
        pass

    def transferType(self,_param_name:str = 'transferType'):
        inst = None
        self._add_to_query("transferType",_param_name)
        pass


class PaypalAuthorizationRequest(GraphQLObject):
    value_amount = None
    value_currency = None
    value_id = None
    value_redirectUrl = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def currency(self,_param_name:str = 'currency'):
        inst = None
        self._add_to_query("currency",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def redirectUrl(self,_param_name:str = 'redirectUrl'):
        inst = None
        self._add_to_query("redirectUrl",_param_name)
        pass


class prepareAcceptOfferInput(GraphQLInputObject):
    def __init__(self,attemptReference = None,clientMutationId = None,offerId = None,settlementInfo:'AcceptorSettlementInfoInput' = None,signedAmount = None):
        self._add_parameter('attemptReference',attemptReference)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('offerId',offerId)
        self._add_parameter('settlementInfo',settlementInfo)
        self._add_parameter('signedAmount',signedAmount)

class prepareAcceptTradeWithWalletAndCreditCardInput(GraphQLInputObject):
    def __init__(self,amount = None,approval:'AuthorizationApprovalInput' = None,authorizationId = None,clientMutationId = None,settlementInfo:'AcceptorSettlementInfoInput' = None,signedAmount = None):
        self._add_parameter('amount',amount)
        self._add_parameter('approval',approval)
        self._add_parameter('authorizationId',authorizationId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('settlementInfo',settlementInfo)
        self._add_parameter('signedAmount',signedAmount)

class prepareBidInput(GraphQLInputObject):
    def __init__(self,amount = None,attemptReference = None,auctionId = None,clientMutationId = None,settlementInfo:'AcceptorSettlementInfoInput' = None):
        self._add_parameter('amount',amount)
        self._add_parameter('attemptReference',attemptReference)
        self._add_parameter('auctionId',auctionId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('settlementInfo',settlementInfo)

class prepareCardWithdrawalInput(GraphQLInputObject):
    def __init__(self,assetId = None,cardSlug = None,clientMutationId = None,destination = None):
        self._add_parameter('assetId',assetId)
        self._add_parameter('cardSlug',cardSlug)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('destination',destination)

class prepareDepositInput(GraphQLInputObject):
    def __init__(self,amount = None,attemptReference = None,clientMutationId = None,saveCard = None):
        self._add_parameter('amount',amount)
        self._add_parameter('attemptReference',attemptReference)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('saveCard',saveCard)

class prepareEthDepositInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,weiAmount = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('weiAmount',weiAmount)

class prepareFastWithdrawalInput(GraphQLInputObject):
    def __init__(self,amount = None,clientMutationId = None,to = None):
        self._add_parameter('amount',amount)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('to',to)

class prepareIdealDepositInput(GraphQLInputObject):
    def __init__(self,amounts:'AmountInput' = None,attemptReference = None,bic = None,clientMutationId = None,returnUrl = None):
        self._add_parameter('amounts',amounts)
        self._add_parameter('attemptReference',attemptReference)
        self._add_parameter('bic',bic)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('returnUrl',returnUrl)

class prepareOfferInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,receiveAmount:'AmountInput' = None,receiveAssetIds = None,sendAmount:'AmountInput' = None,sendAssetIds = None,settlementCurrencies = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('receiveAmount',receiveAmount)
        self._add_parameter('receiveAssetIds',receiveAssetIds)
        self._add_parameter('sendAmount',sendAmount)
        self._add_parameter('sendAssetIds',sendAssetIds)
        self._add_parameter('settlementCurrencies',settlementCurrencies)

class preparePaypalDepositInput(GraphQLInputObject):
    def __init__(self,amounts:'AmountInput' = None,attemptReference = None,clientMutationId = None,returnUrl = None):
        self._add_parameter('amounts',amounts)
        self._add_parameter('attemptReference',attemptReference)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('returnUrl',returnUrl)

class prepareTokenDepositInput(GraphQLInputObject):
    def __init__(self,assetId = None,clientMutationId = None):
        self._add_parameter('assetId',assetId)
        self._add_parameter('clientMutationId',clientMutationId)

class PrivateEmptyAccount(GraphQLObject):
    value_id = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class PrivateFiatWalletAccount(GraphQLObject):
    value_availableBalance = None
    value_countryOfResidence = None
    value_countryOfResidenceCode = None
    value_depositBankAccount = None
    value_dob = None
    value_firstName = None
    value_id = None
    value_kycRefusedReason = None
    value_kycStatus = None
    value_lastName = None
    value_nationality = None
    value_nationalityCode = None
    value_publicInfo:'FiatWalletAccount' = None
    value_state = None
    value_totalBalance = None
    value_withdrawalBankAccounts:'BankAccountConnection' = None
    def availableBalance(self,_param_name:str = 'availableBalance'):
        inst = None
        self._add_to_query("availableBalance",_param_name)
        pass

    def countryOfResidence(self,_param_name:str = 'countryOfResidence'):
        inst = None
        self._add_to_query("countryOfResidence",_param_name)
        pass

    def countryOfResidenceCode(self,_param_name:str = 'countryOfResidenceCode'):
        inst = None
        self._add_to_query("countryOfResidenceCode",_param_name)
        pass

    def depositBankAccount(self,_param_name:str = 'depositBankAccount'):
        inst = None
        self._add_to_query("depositBankAccount",_param_name)
        pass

    def dob(self,_param_name:str = 'dob'):
        inst = None
        self._add_to_query("dob",_param_name)
        pass

    def firstName(self,_param_name:str = 'firstName'):
        inst = None
        self._add_to_query("firstName",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def kycRefusedReason(self,_param_name:str = 'kycRefusedReason'):
        inst = None
        self._add_to_query("kycRefusedReason",_param_name)
        pass

    def kycStatus(self,_param_name:str = 'kycStatus'):
        inst = None
        self._add_to_query("kycStatus",_param_name)
        pass

    def lastName(self,_param_name:str = 'lastName'):
        inst = None
        self._add_to_query("lastName",_param_name)
        pass

    def nationality(self,_param_name:str = 'nationality'):
        inst = None
        self._add_to_query("nationality",_param_name)
        pass

    def nationalityCode(self,_param_name:str = 'nationalityCode'):
        inst = None
        self._add_to_query("nationalityCode",_param_name)
        pass

    def publicInfo(self,_param_name:str = 'publicInfo') -> 'FiatWalletAccount':
        param_list = []
        inst = FiatWalletAccount(self,param_list)
        self._add_to_query("publicInfo",_param_name,inst)
        self.value_publicInfo = inst
        return inst

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass

    def totalBalance(self,_param_name:str = 'totalBalance'):
        inst = None
        self._add_to_query("totalBalance",_param_name)
        pass

    def withdrawalBankAccounts(self,after,before,first,last,_param_name:str = 'withdrawalBankAccounts') -> 'BankAccountConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = BankAccountConnection(self,param_list)
        self._add_to_query("withdrawalBankAccounts",_param_name,inst)
        self.value_withdrawalBankAccounts = inst
        return inst


class PrizeLevelInterface(GraphQLObject):
    value__from:'PrizePoolPrizeLevelBoundary' = None
    value_to:'PrizePoolPrizeLevelBoundary' = None
    value_cardRarity = None
    value_cardTier = None
    value_cards:'list[CardInPrizePool]' = None
    value_amountUSDCents = None
    value_amountCoins = None
    value_cashRewardOnly = None
    def _from(self,_param_name:str = '_from') -> 'PrizePoolPrizeLevelBoundary':
        param_list = []
        inst = PrizePoolPrizeLevelBoundary(self,param_list)
        self._add_to_query("_from",_param_name,inst)
        self.value__from = inst
        return inst

    def to(self,_param_name:str = 'to') -> 'PrizePoolPrizeLevelBoundary':
        param_list = []
        inst = PrizePoolPrizeLevelBoundary(self,param_list)
        self._add_to_query("to",_param_name,inst)
        self.value_to = inst
        return inst

    def cardRarity(self,_param_name:str = 'cardRarity'):
        inst = None
        self._add_to_query("cardRarity",_param_name)
        pass

    def cardTier(self,_param_name:str = 'cardTier'):
        inst = None
        self._add_to_query("cardTier",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'CardInPrizePool':
        param_list = []
        inst = CardInPrizePool(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass

    def cashRewardOnly(self,_param_name:str = 'cashRewardOnly'):
        inst = None
        self._add_to_query("cashRewardOnly",_param_name)
        pass


class PrizePoolPodiumPrizeInterface(GraphQLObject):
    value_rank = None
    value_cardRarity = None
    value_cardTier = None
    value_cards:'list[CardInPrizePool]' = None
    value_amountUSDCents = None
    value_amountCoins = None
    value_cashRewardOnly = None
    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def cardRarity(self,_param_name:str = 'cardRarity'):
        inst = None
        self._add_to_query("cardRarity",_param_name)
        pass

    def cardTier(self,_param_name:str = 'cardTier'):
        inst = None
        self._add_to_query("cardTier",_param_name)
        pass

    def cards(self,_param_name:str = 'cards') -> 'CardInPrizePool':
        param_list = []
        inst = CardInPrizePool(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass

    def cashRewardOnly(self,_param_name:str = 'cashRewardOnly'):
        inst = None
        self._add_to_query("cashRewardOnly",_param_name)
        pass


class PrizePoolInterface(GraphQLObject):
    value_commonCardsMaxThreshold = None
    value_commonCardsCount = None
    value_limitedCardsCount = None
    value_rareCardsCount = None
    value_superRareCardsCount = None
    value_uniqueCardsCount = None
    value_amountUSDCents = None
    value_amountCoins = None
    value_podium:'list[PrizePoolPodiumPrizeInterface]' = None
    value_participation:'list[PrizeLevelInterface]' = None
    def commonCardsMaxThreshold(self,_param_name:str = 'commonCardsMaxThreshold'):
        inst = None
        self._add_to_query("commonCardsMaxThreshold",_param_name)
        pass

    def commonCardsCount(self,_param_name:str = 'commonCardsCount'):
        inst = None
        self._add_to_query("commonCardsCount",_param_name)
        pass

    def limitedCardsCount(self,_param_name:str = 'limitedCardsCount'):
        inst = None
        self._add_to_query("limitedCardsCount",_param_name)
        pass

    def rareCardsCount(self,_param_name:str = 'rareCardsCount'):
        inst = None
        self._add_to_query("rareCardsCount",_param_name)
        pass

    def superRareCardsCount(self,_param_name:str = 'superRareCardsCount'):
        inst = None
        self._add_to_query("superRareCardsCount",_param_name)
        pass

    def uniqueCardsCount(self,_param_name:str = 'uniqueCardsCount'):
        inst = None
        self._add_to_query("uniqueCardsCount",_param_name)
        pass

    def amountUSDCents(self,_param_name:str = 'amountUSDCents'):
        inst = None
        self._add_to_query("amountUSDCents",_param_name)
        pass

    def amountCoins(self,_param_name:str = 'amountCoins'):
        inst = None
        self._add_to_query("amountCoins",_param_name)
        pass

    def podium(self,_param_name:str = 'podium') -> 'PrizePoolPodiumPrizeInterface':
        param_list = []
        inst = PrizePoolPodiumPrizeInterface(self,param_list)
        self._add_to_query("podium",_param_name,inst)
        self.value_podium = inst
        return inst

    def participation(self,_param_name:str = 'participation') -> 'PrizeLevelInterface':
        param_list = []
        inst = PrizeLevelInterface(self,param_list)
        self._add_to_query("participation",_param_name,inst)
        self.value_participation = inst
        return inst


class ProbabilisticBundleConfigReward(GraphQLObject):
    value_count = None
    value_probabilisticBundle:'ProbabilisticBundle' = None
    value_probabilisticBundleConfig:'ProbabilisticBundleConfig' = None
    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass

    def probabilisticBundle(self,_param_name:str = 'probabilisticBundle') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundle",_param_name,inst)
        self.value_probabilisticBundle = inst
        return inst

    def probabilisticBundleConfig(self,_param_name:str = 'probabilisticBundleConfig') -> 'ProbabilisticBundleConfig':
        param_list = []
        inst = ProbabilisticBundleConfig(self,param_list)
        self._add_to_query("probabilisticBundleConfig",_param_name,inst)
        self.value_probabilisticBundleConfig = inst
        return inst


class ProbabilisticBundleReward(GraphQLObject):
    value_aasmState = None
    value_achievement = None
    value_id = None
    value_probabilisticBundle:'ProbabilisticBundle' = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def achievement(self,_param_name:str = 'achievement'):
        inst = None
        self._add_to_query("achievement",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def probabilisticBundle(self,_param_name:str = 'probabilisticBundle') -> 'ProbabilisticBundle':
        param_list = []
        inst = ProbabilisticBundle(self,param_list)
        self._add_to_query("probabilisticBundle",_param_name,inst)
        self.value_probabilisticBundle = inst
        return inst


class ProbabilisticBundleSlotArenaTicketItem(GraphQLObject):
    value_id = None
    value_intensity = None
    value_neonColor = None
    value_quantity = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def intensity(self,_param_name:str = 'intensity'):
        inst = None
        self._add_to_query("intensity",_param_name)
        pass

    def neonColor(self,_param_name:str = 'neonColor'):
        inst = None
        self._add_to_query("neonColor",_param_name)
        pass

    def quantity(self,_param_name:str = 'quantity'):
        inst = None
        self._add_to_query("quantity",_param_name)
        pass


class ProbabilisticBundleSlotCardItem(GraphQLObject):
    value_anyCard:'AnyCardInterface' = None
    value_card:'Card' = None
    value_id = None
    value_intensity = None
    value_neonColor = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def intensity(self,_param_name:str = 'intensity'):
        inst = None
        self._add_to_query("intensity",_param_name)
        pass

    def neonColor(self,_param_name:str = 'neonColor'):
        inst = None
        self._add_to_query("neonColor",_param_name)
        pass


class ProbabilisticBundleSlotCardShardItem(GraphQLObject):
    value_id = None
    value_intensity = None
    value_neonColor = None
    value_quantity = None
    value_rarity = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def intensity(self,_param_name:str = 'intensity'):
        inst = None
        self._add_to_query("intensity",_param_name)
        pass

    def neonColor(self,_param_name:str = 'neonColor'):
        inst = None
        self._add_to_query("neonColor",_param_name)
        pass

    def quantity(self,_param_name:str = 'quantity'):
        inst = None
        self._add_to_query("quantity",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass


class ProbabilisticBundleSlotConversionCreditItem(GraphQLObject):
    value_id = None
    value_intensity = None
    value_maxDiscount:'MonetaryAmount' = None
    value_neonColor = None
    value_percentageDiscount = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def intensity(self,_param_name:str = 'intensity'):
        inst = None
        self._add_to_query("intensity",_param_name)
        pass

    def maxDiscount(self,_param_name:str = 'maxDiscount') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("maxDiscount",_param_name,inst)
        self.value_maxDiscount = inst
        return inst

    def neonColor(self,_param_name:str = 'neonColor'):
        inst = None
        self._add_to_query("neonColor",_param_name)
        pass

    def percentageDiscount(self,_param_name:str = 'percentageDiscount'):
        inst = None
        self._add_to_query("percentageDiscount",_param_name)
        pass


class ProbabilisticBundleSlotDeliverableItem(GraphQLObject):
    value_id = None
    value_intensity = None
    value_neonColor = None
    value_rewardDeliverableItem:'RewardDeliverableItem' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def intensity(self,_param_name:str = 'intensity'):
        inst = None
        self._add_to_query("intensity",_param_name)
        pass

    def neonColor(self,_param_name:str = 'neonColor'):
        inst = None
        self._add_to_query("neonColor",_param_name)
        pass

    def rewardDeliverableItem(self,_param_name:str = 'rewardDeliverableItem') -> 'RewardDeliverableItem':
        param_list = []
        inst = RewardDeliverableItem(self,param_list)
        self._add_to_query("rewardDeliverableItem",_param_name,inst)
        self.value_rewardDeliverableItem = inst
        return inst


class ProbabilisticBundleSlotRewardShopItem(GraphQLObject):
    value_id = None
    value_intensity = None
    value_neonColor = None
    value_rewardShopItem:'FootballRewardShopItem' = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def intensity(self,_param_name:str = 'intensity'):
        inst = None
        self._add_to_query("intensity",_param_name)
        pass

    def neonColor(self,_param_name:str = 'neonColor'):
        inst = None
        self._add_to_query("neonColor",_param_name)
        pass

    def rewardShopItem(self,_param_name:str = 'rewardShopItem') -> 'FootballRewardShopItem':
        param_list = []
        inst = FootballRewardShopItem(self,param_list)
        self._add_to_query("rewardShopItem",_param_name,inst)
        self.value_rewardShopItem = inst
        return inst


class probabilisticBundlesOpenInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,probabilisticBundleId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('probabilisticBundleId',probabilisticBundleId)

class PublicUserInfoInterface(GraphQLObject):
    value_accounts:'list[Account]' = None
    value_active = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_awards:'list[UserAward]' = None
    value_baseballProfile:'UserSportProfile' = None
    value_baseballUserProfile:'BaseballUserSportProfile' = None
    value_blueprintCards:'AnyCardInterfaceConnection' = None
    value_boughtSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_buyingTokenAuctions:'list[TokenAuction]' = None
    value_cardCollections:'CardCollectionConnection' = None
    value_cardCounts:'CardCount' = None
    value_cards:'AnyCardInterfaceConnection' = None
    value_cardsCount = None
    value_createdAt = None
    value_customDecks:'CustomDeckConnection' = None
    value_disabled = None
    value_endedWithNoBuyerSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_ethVaultId = None
    value_ethereumAddress = None
    value_followed:'EmailSubscription' = None
    value_followers:'UserWithSubscriptionSlugConnection' = None
    value_followersCount = None
    value_following:'UserWithSubscriptionSlugConnection' = None
    value_followingCount = None
    value_footballCardCollections:'CardCollectionConnection' = None
    value_footballCardCounts:'CardCount' = None
    value_footballCards:'CardConnection' = None
    value_footballProfile:'UserSportProfile' = None
    value_footballRivalsManager:'FootballRivalsManager' = None
    value_footballUserProfile:'FootballUserSportProfile' = None
    value_hoursToAnswerTrades = None
    value_id = None
    value_liveSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_lostTokenAuctions:'TokenAuctionConnection' = None
    value_managerProgression:'ManagerProgression' = None
    value_managerProgressionTasksCount = None
    value_managerTeams:'ManagerTeamConnection' = None
    value_nbaProfile:'UserSportProfile' = None
    value_nbaUserProfile:'NBAUserSportProfile' = None
    value_nickname = None
    value_paginatedCards:'CardConnection' = None
    value_pictureUrl = None
    value_player:'Player' = None
    value_podiumRankings:'So5RankingConnection' = None
    value_podiums:'list[So5Podium]' = None
    value_profile:'UserProfile' = None
    value_recommendedManagers:'UserConnection' = None
    value_rewardedRankings:'So5RankingConnection' = None
    value_singleSaleTokenOffers:'TokenOfferConnection' = None
    value_slug = None
    value_so5TrophiesSummary:'TrophiesSummary' = None
    value_soldSingleSaleTokenOffers:'TokenOfferConnection' = None
    value_sorareAddress = None
    value_starkKey = None
    value_starkKeyRegistered = None
    value_status = None
    value_suspended = None
    value_tokenAuctions:'TokenAuctionConnection' = None
    value_trophies:'list[So5Trophies]' = None
    value_trophiesSummary:'So5TrophiesSummary' = None
    value_userSportProfile = None
    value_wonTokenAuctions:'TokenAuctionConnection' = None
    def accounts(self,_param_name:str = 'accounts') -> 'Account':
        param_list = []
        inst = Account(self,param_list)
        self._add_to_query("accounts",_param_name,inst)
        self.value_accounts = inst
        return inst

    def active(self,_param_name:str = 'active'):
        inst = None
        self._add_to_query("active",_param_name)
        pass

    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def awards(self,category,_param_name:str = 'awards') -> 'UserAward':
        param_list = []
        param_list.append(("category",category))
        inst = UserAward(self,param_list)
        self._add_to_query("awards",_param_name,inst)
        self.value_awards = inst
        return inst

    def baseballProfile(self,_param_name:str = 'baseballProfile') -> 'UserSportProfile':
        param_list = []
        inst = UserSportProfile(self,param_list)
        self._add_to_query("baseballProfile",_param_name,inst)
        self.value_baseballProfile = inst
        return inst

    def baseballUserProfile(self,_param_name:str = 'baseballUserProfile') -> 'BaseballUserSportProfile':
        param_list = []
        inst = BaseballUserSportProfile(self,param_list)
        self._add_to_query("baseballUserProfile",_param_name,inst)
        self.value_baseballUserProfile = inst
        return inst

    def blueprintCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'blueprintCards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("blueprintCards",_param_name,inst)
        self.value_blueprintCards = inst
        return inst

    def boughtSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'boughtSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("boughtSingleSaleTokenOffers",_param_name,inst)
        self.value_boughtSingleSaleTokenOffers = inst
        return inst

    def buyingTokenAuctions(self,newlyListed,sport,_param_name:str = 'buyingTokenAuctions') -> 'TokenAuction':
        param_list = []
        param_list.append(("newlyListed",newlyListed))
        param_list.append(("sport",sport))
        inst = TokenAuction(self,param_list)
        self._add_to_query("buyingTokenAuctions",_param_name,inst)
        self.value_buyingTokenAuctions = inst
        return inst

    def cardCollections(self,after,before,favoriteOnly,first,last,query,rarities,seasonStartYears,sport,startedOnly,teamSlug,_param_name:str = 'cardCollections') -> 'CardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("favoriteOnly",favoriteOnly))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("seasonStartYears",seasonStartYears))
        param_list.append(("sport",sport))
        param_list.append(("startedOnly",startedOnly))
        param_list.append(("teamSlug",teamSlug))
        inst = CardCollectionConnection(self,param_list)
        self._add_to_query("cardCollections",_param_name,inst)
        self.value_cardCollections = inst
        return inst

    def cardCounts(self,_param_name:str = 'cardCounts') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("cardCounts",_param_name,inst)
        self.value_cardCounts = inst
        return inst

    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def cardsCount(self,_param_name:str = 'cardsCount'):
        inst = None
        self._add_to_query("cardsCount",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def customDecks(self,after,before,first,last,query,_param_name:str = 'customDecks') -> 'CustomDeckConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = CustomDeckConnection(self,param_list)
        self._add_to_query("customDecks",_param_name,inst)
        self.value_customDecks = inst
        return inst

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def endedWithNoBuyerSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'endedWithNoBuyerSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("endedWithNoBuyerSingleSaleTokenOffers",_param_name,inst)
        self.value_endedWithNoBuyerSingleSaleTokenOffers = inst
        return inst

    def ethVaultId(self,_param_name:str = 'ethVaultId'):
        inst = None
        self._add_to_query("ethVaultId",_param_name)
        pass

    def ethereumAddress(self,_param_name:str = 'ethereumAddress'):
        inst = None
        self._add_to_query("ethereumAddress",_param_name)
        pass

    def followed(self,_param_name:str = 'followed') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("followed",_param_name,inst)
        self.value_followed = inst
        return inst

    def followers(self,after,before,first,last,_param_name:str = 'followers') -> 'UserWithSubscriptionSlugConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserWithSubscriptionSlugConnection(self,param_list)
        self._add_to_query("followers",_param_name,inst)
        self.value_followers = inst
        return inst

    def followersCount(self,_param_name:str = 'followersCount'):
        inst = None
        self._add_to_query("followersCount",_param_name)
        pass

    def following(self,after,before,first,last,_param_name:str = 'following') -> 'UserWithSubscriptionSlugConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserWithSubscriptionSlugConnection(self,param_list)
        self._add_to_query("following",_param_name,inst)
        self.value_following = inst
        return inst

    def followingCount(self,_param_name:str = 'followingCount'):
        inst = None
        self._add_to_query("followingCount",_param_name)
        pass

    def footballCardCollections(self,after,before,favoriteOnly,first,last,query,rarities,seasonStartYears,startedOnly,teamSlug,_param_name:str = 'footballCardCollections') -> 'CardCollectionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("favoriteOnly",favoriteOnly))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        param_list.append(("rarities",rarities))
        param_list.append(("seasonStartYears",seasonStartYears))
        param_list.append(("startedOnly",startedOnly))
        param_list.append(("teamSlug",teamSlug))
        inst = CardCollectionConnection(self,param_list)
        self._add_to_query("footballCardCollections",_param_name,inst)
        self.value_footballCardCollections = inst
        return inst

    def footballCardCounts(self,_param_name:str = 'footballCardCounts') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("footballCardCounts",_param_name,inst)
        self.value_footballCardCounts = inst
        return inst

    def footballCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'footballCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("footballCards",_param_name,inst)
        self.value_footballCards = inst
        return inst

    def footballProfile(self,variant,_param_name:str = 'footballProfile') -> 'UserSportProfile':
        param_list = []
        param_list.append(("variant",variant))
        inst = UserSportProfile(self,param_list)
        self._add_to_query("footballProfile",_param_name,inst)
        self.value_footballProfile = inst
        return inst

    def footballRivalsManager(self,_param_name:str = 'footballRivalsManager') -> 'FootballRivalsManager':
        param_list = []
        inst = FootballRivalsManager(self,param_list)
        self._add_to_query("footballRivalsManager",_param_name,inst)
        self.value_footballRivalsManager = inst
        return inst

    def footballUserProfile(self,variant,_param_name:str = 'footballUserProfile') -> 'FootballUserSportProfile':
        param_list = []
        param_list.append(("variant",variant))
        inst = FootballUserSportProfile(self,param_list)
        self._add_to_query("footballUserProfile",_param_name,inst)
        self.value_footballUserProfile = inst
        return inst

    def hoursToAnswerTrades(self,_param_name:str = 'hoursToAnswerTrades'):
        inst = None
        self._add_to_query("hoursToAnswerTrades",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def liveSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'liveSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("liveSingleSaleTokenOffers",_param_name,inst)
        self.value_liveSingleSaleTokenOffers = inst
        return inst

    def lostTokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'lostTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("lostTokenAuctions",_param_name,inst)
        self.value_lostTokenAuctions = inst
        return inst

    def managerProgression(self,sport,_param_name:str = 'managerProgression') -> 'ManagerProgression':
        param_list = []
        param_list.append(("sport",sport))
        inst = ManagerProgression(self,param_list)
        self._add_to_query("managerProgression",_param_name,inst)
        self.value_managerProgression = inst
        return inst

    def managerProgressionTasksCount(self,sport,state,type,_param_name:str = 'managerProgressionTasksCount'):
        inst = None
        self._add_to_query("managerProgressionTasksCount",_param_name)
        pass

    def managerTeams(self,after,before,first,last,_param_name:str = 'managerTeams') -> 'ManagerTeamConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = ManagerTeamConnection(self,param_list)
        self._add_to_query("managerTeams",_param_name,inst)
        self.value_managerTeams = inst
        return inst

    def nbaProfile(self,_param_name:str = 'nbaProfile') -> 'UserSportProfile':
        param_list = []
        inst = UserSportProfile(self,param_list)
        self._add_to_query("nbaProfile",_param_name,inst)
        self.value_nbaProfile = inst
        return inst

    def nbaUserProfile(self,_param_name:str = 'nbaUserProfile') -> 'NBAUserSportProfile':
        param_list = []
        inst = NBAUserSportProfile(self,param_list)
        self._add_to_query("nbaUserProfile",_param_name,inst)
        self.value_nbaUserProfile = inst
        return inst

    def nickname(self,_param_name:str = 'nickname'):
        inst = None
        self._add_to_query("nickname",_param_name)
        pass

    def paginatedCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'paginatedCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("paginatedCards",_param_name,inst)
        self.value_paginatedCards = inst
        return inst

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def player(self,_param_name:str = 'player') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def podiumRankings(self,after,before,first,last,ranking,so5LeaderboardType,sport,_param_name:str = 'podiumRankings') -> 'So5RankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("ranking",ranking))
        param_list.append(("so5LeaderboardType",so5LeaderboardType))
        param_list.append(("sport",sport))
        inst = So5RankingConnection(self,param_list)
        self._add_to_query("podiumRankings",_param_name,inst)
        self.value_podiumRankings = inst
        return inst

    def podiums(self,sport,_param_name:str = 'podiums') -> 'So5Podium':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5Podium(self,param_list)
        self._add_to_query("podiums",_param_name,inst)
        self.value_podiums = inst
        return inst

    def profile(self,_param_name:str = 'profile') -> 'UserProfile':
        param_list = []
        inst = UserProfile(self,param_list)
        self._add_to_query("profile",_param_name,inst)
        self.value_profile = inst
        return inst

    def recommendedManagers(self,after,before,first,last,sport,_param_name:str = 'recommendedManagers') -> 'UserConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = UserConnection(self,param_list)
        self._add_to_query("recommendedManagers",_param_name,inst)
        self.value_recommendedManagers = inst
        return inst

    def rewardedRankings(self,after,before,first,last,so5LeaderboardType,sport,_param_name:str = 'rewardedRankings') -> 'So5RankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("so5LeaderboardType",so5LeaderboardType))
        param_list.append(("sport",sport))
        inst = So5RankingConnection(self,param_list)
        self._add_to_query("rewardedRankings",_param_name,inst)
        self.value_rewardedRankings = inst
        return inst

    def singleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'singleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("singleSaleTokenOffers",_param_name,inst)
        self.value_singleSaleTokenOffers = inst
        return inst

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def so5TrophiesSummary(self,sport,_param_name:str = 'so5TrophiesSummary') -> 'TrophiesSummary':
        param_list = []
        param_list.append(("sport",sport))
        inst = TrophiesSummary(self,param_list)
        self._add_to_query("so5TrophiesSummary",_param_name,inst)
        self.value_so5TrophiesSummary = inst
        return inst

    def soldSingleSaleTokenOffers(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'soldSingleSaleTokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("soldSingleSaleTokenOffers",_param_name,inst)
        self.value_soldSingleSaleTokenOffers = inst
        return inst

    def sorareAddress(self,_param_name:str = 'sorareAddress'):
        inst = None
        self._add_to_query("sorareAddress",_param_name)
        pass

    def starkKey(self,_param_name:str = 'starkKey'):
        inst = None
        self._add_to_query("starkKey",_param_name)
        pass

    def starkKeyRegistered(self,_param_name:str = 'starkKeyRegistered'):
        inst = None
        self._add_to_query("starkKeyRegistered",_param_name)
        pass

    def status(self,_param_name:str = 'status'):
        inst = None
        self._add_to_query("status",_param_name)
        pass

    def suspended(self,_param_name:str = 'suspended'):
        inst = None
        self._add_to_query("suspended",_param_name)
        pass

    def tokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'tokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("tokenAuctions",_param_name,inst)
        self.value_tokenAuctions = inst
        return inst

    def trophies(self,_param_name:str = 'trophies') -> 'So5Trophies':
        param_list = []
        inst = So5Trophies(self,param_list)
        self._add_to_query("trophies",_param_name,inst)
        self.value_trophies = inst
        return inst

    def trophiesSummary(self,sport,_param_name:str = 'trophiesSummary') -> 'So5TrophiesSummary':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5TrophiesSummary(self,param_list)
        self._add_to_query("trophiesSummary",_param_name,inst)
        self.value_trophiesSummary = inst
        return inst

    def userSportProfile(self,sport,variant,_param_name:str = 'userSportProfile'):
        inst = None
        self._add_to_query("userSportProfile",_param_name)
        pass

    def wonTokenAuctions(self,after,before,first,last,sortByEndDate,sport,_param_name:str = 'wonTokenAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortByEndDate",sortByEndDate))
        param_list.append(("sport",sport))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("wonTokenAuctions",_param_name,inst)
        self.value_wonTokenAuctions = inst
        return inst


class SeasonPicture(GraphQLObject):
    value_backgroundUrl = None
    value_chinY = None
    value_chinYTarget = None
    value_eyeLeft:'FaceLandmark' = None
    value_eyeRight:'FaceLandmark' = None
    value_height = None
    value_id = None
    value_kit = None
    value_nose:'FaceLandmark' = None
    value_offsetX = None
    value_offsetY = None
    value_pictureUrl = None
    value_positioning = None
    value_width = None
    value_zoom = None
    def backgroundUrl(self,_param_name:str = 'backgroundUrl'):
        inst = None
        self._add_to_query("backgroundUrl",_param_name)
        pass

    def chinY(self,_param_name:str = 'chinY'):
        inst = None
        self._add_to_query("chinY",_param_name)
        pass

    def chinYTarget(self,_param_name:str = 'chinYTarget'):
        inst = None
        self._add_to_query("chinYTarget",_param_name)
        pass

    def eyeLeft(self,_param_name:str = 'eyeLeft') -> 'FaceLandmark':
        param_list = []
        inst = FaceLandmark(self,param_list)
        self._add_to_query("eyeLeft",_param_name,inst)
        self.value_eyeLeft = inst
        return inst

    def eyeRight(self,_param_name:str = 'eyeRight') -> 'FaceLandmark':
        param_list = []
        inst = FaceLandmark(self,param_list)
        self._add_to_query("eyeRight",_param_name,inst)
        self.value_eyeRight = inst
        return inst

    def height(self,_param_name:str = 'height'):
        inst = None
        self._add_to_query("height",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def kit(self,_param_name:str = 'kit'):
        inst = None
        self._add_to_query("kit",_param_name)
        pass

    def nose(self,_param_name:str = 'nose') -> 'FaceLandmark':
        param_list = []
        inst = FaceLandmark(self,param_list)
        self._add_to_query("nose",_param_name,inst)
        self.value_nose = inst
        return inst

    def offsetX(self,_param_name:str = 'offsetX'):
        inst = None
        self._add_to_query("offsetX",_param_name)
        pass

    def offsetY(self,_param_name:str = 'offsetY'):
        inst = None
        self._add_to_query("offsetY",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def positioning(self,_param_name:str = 'positioning'):
        inst = None
        self._add_to_query("positioning",_param_name)
        pass

    def width(self,_param_name:str = 'width'):
        inst = None
        self._add_to_query("width",_param_name)
        pass

    def zoom(self,_param_name:str = 'zoom'):
        inst = None
        self._add_to_query("zoom",_param_name)
        pass


class ThreeDimensionalCardLayout(GraphQLObject):
    value_backgroundNormalUrl = None
    def backgroundNormalUrl(self,_param_name:str = 'backgroundNormalUrl'):
        inst = None
        self._add_to_query("backgroundNormalUrl",_param_name)
        pass


class ScreenshottableCard(GraphQLObject):
    value_age = None
    value_baseballPositions = None
    value_birthPlaceCountry = None
    value_cardEditionName = None
    value_cardSample:'CardSample' = None
    value_cropped = None
    value_footballPosition = None
    value_layout:'CardLayout' = None
    value_nbaPositions = None
    value_playerDisplayName = None
    value_playerPicture:'SeasonPicture' = None
    value_position = None
    value_rarity = None
    value_rookie = None
    value_season = None
    value_serialNumber = None
    value_shirtNumber = None
    value_singleCivilYear = None
    value_sport = None
    value_teamPictureUrl = None
    value_teamShortName = None
    value_teamSlug = None
    value_threeDimensionalLayout:'ThreeDimensionalCardLayout' = None
    def age(self,_param_name:str = 'age'):
        inst = None
        self._add_to_query("age",_param_name)
        pass

    def baseballPositions(self,_param_name:str = 'baseballPositions'):
        inst = None
        self._add_to_query("baseballPositions",_param_name)
        pass

    def birthPlaceCountry(self,_param_name:str = 'birthPlaceCountry'):
        inst = None
        self._add_to_query("birthPlaceCountry",_param_name)
        pass

    def cardEditionName(self,_param_name:str = 'cardEditionName'):
        inst = None
        self._add_to_query("cardEditionName",_param_name)
        pass

    def cardSample(self,_param_name:str = 'cardSample') -> 'CardSample':
        param_list = []
        inst = CardSample(self,param_list)
        self._add_to_query("cardSample",_param_name,inst)
        self.value_cardSample = inst
        return inst

    def cropped(self,_param_name:str = 'cropped'):
        inst = None
        self._add_to_query("cropped",_param_name)
        pass

    def footballPosition(self,_param_name:str = 'footballPosition'):
        inst = None
        self._add_to_query("footballPosition",_param_name)
        pass

    def layout(self,_param_name:str = 'layout') -> 'CardLayout':
        param_list = []
        inst = CardLayout(self,param_list)
        self._add_to_query("layout",_param_name,inst)
        self.value_layout = inst
        return inst

    def nbaPositions(self,_param_name:str = 'nbaPositions'):
        inst = None
        self._add_to_query("nbaPositions",_param_name)
        pass

    def playerDisplayName(self,_param_name:str = 'playerDisplayName'):
        inst = None
        self._add_to_query("playerDisplayName",_param_name)
        pass

    def playerPicture(self,_param_name:str = 'playerPicture') -> 'SeasonPicture':
        param_list = []
        inst = SeasonPicture(self,param_list)
        self._add_to_query("playerPicture",_param_name,inst)
        self.value_playerPicture = inst
        return inst

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def rookie(self,_param_name:str = 'rookie'):
        inst = None
        self._add_to_query("rookie",_param_name)
        pass

    def season(self,_param_name:str = 'season'):
        inst = None
        self._add_to_query("season",_param_name)
        pass

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def shirtNumber(self,_param_name:str = 'shirtNumber'):
        inst = None
        self._add_to_query("shirtNumber",_param_name)
        pass

    def singleCivilYear(self,_param_name:str = 'singleCivilYear'):
        inst = None
        self._add_to_query("singleCivilYear",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def teamPictureUrl(self,_param_name:str = 'teamPictureUrl'):
        inst = None
        self._add_to_query("teamPictureUrl",_param_name)
        pass

    def teamShortName(self,_param_name:str = 'teamShortName'):
        inst = None
        self._add_to_query("teamShortName",_param_name)
        pass

    def teamSlug(self,_param_name:str = 'teamSlug'):
        inst = None
        self._add_to_query("teamSlug",_param_name)
        pass

    def threeDimensionalLayout(self,_param_name:str = 'threeDimensionalLayout') -> 'ThreeDimensionalCardLayout':
        param_list = []
        inst = ThreeDimensionalCardLayout(self,param_list)
        self._add_to_query("threeDimensionalLayout",_param_name,inst)
        self.value_threeDimensionalLayout = inst
        return inst


class StarkwareAccount(GraphQLObject):
    value_availableBalance = None
    value_availableBalanceForWithdrawal = None
    value_id = None
    value_starkKey = None
    value_totalBalance = None
    value_user:'User' = None
    def availableBalance(self,_param_name:str = 'availableBalance'):
        inst = None
        self._add_to_query("availableBalance",_param_name)
        pass

    def availableBalanceForWithdrawal(self,_param_name:str = 'availableBalanceForWithdrawal'):
        inst = None
        self._add_to_query("availableBalanceForWithdrawal",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def starkKey(self,_param_name:str = 'starkKey'):
        inst = None
        self._add_to_query("starkKey",_param_name)
        pass

    def totalBalance(self,_param_name:str = 'totalBalance'):
        inst = None
        self._add_to_query("totalBalance",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class TokenPrimaryOfferEdge(GraphQLObject):
    value_cursor = None
    value_node:'TokenPrimaryOffer' = None
    def cursor(self,_param_name:str = 'cursor'):
        inst = None
        self._add_to_query("cursor",_param_name)
        pass

    def node(self,_param_name:str = 'node') -> 'TokenPrimaryOffer':
        param_list = []
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst


class TokenPrimaryOfferConnection(GraphQLObject):
    value_edges:'list[TokenPrimaryOfferEdge]' = None
    value_nodes:'list[TokenPrimaryOffer]' = None
    value_pageInfo:'PageInfo' = None
    def edges(self,_param_name:str = 'edges') -> 'TokenPrimaryOfferEdge':
        param_list = []
        inst = TokenPrimaryOfferEdge(self,param_list)
        self._add_to_query("edges",_param_name,inst)
        self.value_edges = inst
        return inst

    def nodes(self,_param_name:str = 'nodes') -> 'TokenPrimaryOffer':
        param_list = []
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def pageInfo(self,_param_name:str = 'pageInfo') -> 'PageInfo':
        param_list = []
        inst = PageInfo(self,param_list)
        self._add_to_query("pageInfo",_param_name,inst)
        self.value_pageInfo = inst
        return inst


class TopGainers(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_footballPlayer:'Player' = None
    value_lowestPriceAnyCard:'AnyCardInterface' = None
    value_lowestPriceCard = None
    value_performance = None
    value_player = None
    value_playerSlug = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def footballPlayer(self,_param_name:str = 'footballPlayer') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("footballPlayer",_param_name,inst)
        self.value_footballPlayer = inst
        return inst

    def lowestPriceAnyCard(self,rarity,seasonStartYear,teamSlug,_param_name:str = 'lowestPriceAnyCard') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("rarity",rarity))
        param_list.append(("seasonStartYear",seasonStartYear))
        param_list.append(("teamSlug",teamSlug))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("lowestPriceAnyCard",_param_name,inst)
        self.value_lowestPriceAnyCard = inst
        return inst

    def lowestPriceCard(self,rarity,_param_name:str = 'lowestPriceCard'):
        inst = None
        self._add_to_query("lowestPriceCard",_param_name)
        pass

    def performance(self,_param_name:str = 'performance'):
        inst = None
        self._add_to_query("performance",_param_name)
        pass

    def player(self,_param_name:str = 'player'):
        inst = None
        self._add_to_query("player",_param_name)
        pass

    def playerSlug(self,_param_name:str = 'playerSlug'):
        inst = None
        self._add_to_query("playerSlug",_param_name)
        pass


class TopVolume(GraphQLObject):
    value_anyPlayer:'AnyPlayerInterface' = None
    value_footballPlayer:'Player' = None
    value_numberOfTrades = None
    value_player = None
    value_playerSlug = None
    def anyPlayer(self,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def footballPlayer(self,_param_name:str = 'footballPlayer') -> 'Player':
        param_list = []
        inst = Player(self,param_list)
        self._add_to_query("footballPlayer",_param_name,inst)
        self.value_footballPlayer = inst
        return inst

    def numberOfTrades(self,_param_name:str = 'numberOfTrades'):
        inst = None
        self._add_to_query("numberOfTrades",_param_name)
        pass

    def player(self,_param_name:str = 'player'):
        inst = None
        self._add_to_query("player",_param_name)
        pass

    def playerSlug(self,_param_name:str = 'playerSlug'):
        inst = None
        self._add_to_query("playerSlug",_param_name)
        pass


class TokenRoot(GraphQLObject):
    value_allCards:'AnyCardInterfaceConnection' = None
    value_allNfts:'TokenConnection' = None
    value_anyCard:'AnyCardInterface' = None
    value_anyCards:'list[AnyCardInterface]' = None
    value_auction:'TokenAuction' = None
    value_auctions:'list[TokenAuction]' = None
    value_card = None
    value_cards = None
    value_conversionCreditCampaign:'ConversionCreditCampaign' = None
    value_liveAuctions:'TokenAuctionConnection' = None
    value_livePrimaryOffers:'TokenPrimaryOfferConnection' = None
    value_liveSingleSaleOffers:'TokenOfferConnection' = None
    value_nft:'Token' = None
    value_nfts:'list[Token]' = None
    value_offer:'TokenOffer' = None
    value_offers:'list[TokenOffer]' = None
    value_primaryOffer:'TokenPrimaryOffer' = None
    value_primaryOffers:'list[TokenPrimaryOffer]' = None
    value_tokenPrices:'list[TokenPrice]' = None
    value_topGainers:'list[TopGainers]' = None
    value_topSales:'list[TokenOwner]' = None
    value_topVolume:'list[TopVolume]' = None
    def allCards(self,after,before,first,last,playerSlug,rarities,sport,_param_name:str = 'allCards') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("rarities",rarities))
        param_list.append(("sport",sport))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("allCards",_param_name,inst)
        self.value_allCards = inst
        return inst

    def allNfts(self,after,before,first,last,playerSlug,rarities,sport,_param_name:str = 'allNfts') -> 'TokenConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("rarities",rarities))
        param_list.append(("sport",sport))
        inst = TokenConnection(self,param_list)
        self._add_to_query("allNfts",_param_name,inst)
        self.value_allNfts = inst
        return inst

    def anyCard(self,assetId,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("assetId",assetId))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def anyCards(self,assetIds,_param_name:str = 'anyCards') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("assetIds",assetIds))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCards",_param_name,inst)
        self.value_anyCards = inst
        return inst

    def auction(self,id,_param_name:str = 'auction') -> 'TokenAuction':
        param_list = []
        param_list.append(("id",id))
        inst = TokenAuction(self,param_list)
        self._add_to_query("auction",_param_name,inst)
        self.value_auction = inst
        return inst

    def auctions(self,ids,_param_name:str = 'auctions') -> 'TokenAuction':
        param_list = []
        param_list.append(("ids",ids))
        inst = TokenAuction(self,param_list)
        self._add_to_query("auctions",_param_name,inst)
        self.value_auctions = inst
        return inst

    def card(self,assetId,_param_name:str = 'card'):
        inst = None
        self._add_to_query("card",_param_name)
        pass

    def cards(self,assetIds,_param_name:str = 'cards'):
        inst = None
        self._add_to_query("cards",_param_name)
        pass

    def conversionCreditCampaign(self,code,_param_name:str = 'conversionCreditCampaign') -> 'ConversionCreditCampaign':
        param_list = []
        param_list.append(("code",code))
        inst = ConversionCreditCampaign(self,param_list)
        self._add_to_query("conversionCreditCampaign",_param_name,inst)
        self.value_conversionCreditCampaign = inst
        return inst

    def liveAuctions(self,after,before,first,last,sport,updatedAfter,_param_name:str = 'liveAuctions') -> 'TokenAuctionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        param_list.append(("updatedAfter",updatedAfter))
        inst = TokenAuctionConnection(self,param_list)
        self._add_to_query("liveAuctions",_param_name,inst)
        self.value_liveAuctions = inst
        return inst

    def livePrimaryOffers(self,after,before,first,last,sport,updatedAfter,_param_name:str = 'livePrimaryOffers') -> 'TokenPrimaryOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        param_list.append(("updatedAfter",updatedAfter))
        inst = TokenPrimaryOfferConnection(self,param_list)
        self._add_to_query("livePrimaryOffers",_param_name,inst)
        self.value_livePrimaryOffers = inst
        return inst

    def liveSingleSaleOffers(self,after,before,first,last,playerSlug,sport,updatedAfter,_param_name:str = 'liveSingleSaleOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("sport",sport))
        param_list.append(("updatedAfter",updatedAfter))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("liveSingleSaleOffers",_param_name,inst)
        self.value_liveSingleSaleOffers = inst
        return inst

    def nft(self,assetId,_param_name:str = 'nft') -> 'Token':
        param_list = []
        param_list.append(("assetId",assetId))
        inst = Token(self,param_list)
        self._add_to_query("nft",_param_name,inst)
        self.value_nft = inst
        return inst

    def nfts(self,assetIds,_param_name:str = 'nfts') -> 'Token':
        param_list = []
        param_list.append(("assetIds",assetIds))
        inst = Token(self,param_list)
        self._add_to_query("nfts",_param_name,inst)
        self.value_nfts = inst
        return inst

    def offer(self,id,_param_name:str = 'offer') -> 'TokenOffer':
        param_list = []
        param_list.append(("id",id))
        inst = TokenOffer(self,param_list)
        self._add_to_query("offer",_param_name,inst)
        self.value_offer = inst
        return inst

    def offers(self,ids,_param_name:str = 'offers') -> 'TokenOffer':
        param_list = []
        param_list.append(("ids",ids))
        inst = TokenOffer(self,param_list)
        self._add_to_query("offers",_param_name,inst)
        self.value_offers = inst
        return inst

    def primaryOffer(self,id,_param_name:str = 'primaryOffer') -> 'TokenPrimaryOffer':
        param_list = []
        param_list.append(("id",id))
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("primaryOffer",_param_name,inst)
        self.value_primaryOffer = inst
        return inst

    def primaryOffers(self,ids,_param_name:str = 'primaryOffers') -> 'TokenPrimaryOffer':
        param_list = []
        param_list.append(("ids",ids))
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("primaryOffers",_param_name,inst)
        self.value_primaryOffers = inst
        return inst

    def tokenPrices(self,first,playerSlug,rarity,season,seasonEligibility,_param_name:str = 'tokenPrices') -> 'TokenPrice':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("playerSlug",playerSlug))
        param_list.append(("rarity",rarity))
        param_list.append(("season",season))
        param_list.append(("seasonEligibility",seasonEligibility))
        inst = TokenPrice(self,param_list)
        self._add_to_query("tokenPrices",_param_name,inst)
        self.value_tokenPrices = inst
        return inst

    def topGainers(self,days,sport,_param_name:str = 'topGainers') -> 'TopGainers':
        param_list = []
        param_list.append(("days",days))
        param_list.append(("sport",sport))
        inst = TopGainers(self,param_list)
        self._add_to_query("topGainers",_param_name,inst)
        self.value_topGainers = inst
        return inst

    def topSales(self,days,sport,_param_name:str = 'topSales') -> 'TokenOwner':
        param_list = []
        param_list.append(("days",days))
        param_list.append(("sport",sport))
        inst = TokenOwner(self,param_list)
        self._add_to_query("topSales",_param_name,inst)
        self.value_topSales = inst
        return inst

    def topVolume(self,days,sport,_param_name:str = 'topVolume') -> 'TopVolume':
        param_list = []
        param_list.append(("days",days))
        param_list.append(("sport",sport))
        inst = TopVolume(self,param_list)
        self._add_to_query("topVolume",_param_name,inst)
        self.value_topVolume = inst
        return inst


class Query(GraphQLObject):
    value_allCards:'CardConnection' = None
    value_announcements:'AnnouncementConnection' = None
    value_anyCard:'AnyCardInterface' = None
    value_anyCards:'list[AnyCardInterface]' = None
    value_anyGame:'AnyGameInterface' = None
    value_anyPlayer:'AnyPlayerInterface' = None
    value_anyPlayers:'AnyPlayerInterfaceConnection' = None
    value_card:'Card' = None
    value_cardByAssetId:'Card' = None
    value_cardByBlockchainId:'Card' = None
    value_cardCollection:'CardCollection' = None
    value_cardShardsPool:'list[PlayerWithSupply]' = None
    value_cards:'list[Card]' = None
    value_cardsWhere:'AnyCardInterfaceConnection' = None
    value_club:'Club' = None
    value_clubs:'list[Club]' = None
    value_clubsReady:'list[Club]' = None
    value_commonPlayers:'CommonPlayerConnection' = None
    value_competition:'Competition' = None
    value_config:'Config' = None
    value_countries:'list[Country]' = None
    value_country:'Country' = None
    value_currentBlockHeight = None
    value_currentUser:'CurrentUser' = None
    value_customDeck:'CustomDeck' = None
    value_deck:'Deck' = None
    value_ethereumCards:'list[AnyCardInterface]' = None
    value_ethereumTokens:'list[Token]' = None
    value_featuredSo5Fixtures:'list[So5Fixture]' = None
    value_football:'FootballRoot' = None
    value_forYou:'ForYouRoot' = None
    value_fullReferrer = None
    value_game:'Game' = None
    value_isNicknameAvailable = None
    value_leaguesOpenForGameStats:'list[Competition]' = None
    value_mangopay:'MangopayRoot' = None
    value_nextRelayBatchNonce = None
    value_node:'Node' = None
    value_nodes:'list[Node]' = None
    value_oauthApplication:'OAuthApplication' = None
    value_player:'Player' = None
    value_playerGameScore:'PlayerGameScoreInterface' = None
    value_players:'list[Player]' = None
    value_referralLeaderboard:'ReferralLeaderboard' = None
    value_referrer = None
    value_screenshottableCard:'ScreenshottableCard' = None
    value_season:'Season' = None
    value_shopItems:'ClubShopItemConnection' = None
    value_so5:'So5Root' = None
    value_so5Appearance:'So5Appearance' = None
    value_so5Fixture:'So5Fixture' = None
    value_so5Leaderboard:'So5Leaderboard' = None
    value_so5LeaderboardGroup:'So5LeaderboardGroup' = None
    value_so5League:'So5League' = None
    value_so5Lineup:'So5Lineup' = None
    value_so5Ranking:'So5Ranking' = None
    value_so5Reward:'So5Reward' = None
    value_so5Score:'So5Score' = None
    value_starkwareAccount:'StarkwareAccount' = None
    value_subscriptionStats:'SubscriptionStats' = None
    value_team:'TeamInterface' = None
    value_teams:'TeamInterfaceConnection' = None
    value_tokens:'TokenRoot' = None
    value_user:'User' = None
    value_userById:'User' = None
    value_userCardCollection:'UserCardCollection' = None
    value_userGroup:'UserGroupInterface' = None
    value_users:'list[User]' = None
    value_sportsUser:'User' = None
    value_cumulativeLeaderboardsForSport:'list[CumulativeLeaderboard]' = None
    value_cumulativeLeaderboardRank:'CumulativeLeaderboardRank' = None
    value_nbaCard:'NBACard' = None
    value_nbaCards:'list[NBACard]' = None
    value_nbaFixture:'NBAFixture' = None
    value_nbaLeaderboard:'NBALeaderboard' = None
    value_nbaLineup:'NBALineup' = None
    value_nbaLineups:'list[NBALineup]' = None
    value_nbaLiveFixture:'NBAFixture' = None
    value_nbaOpenFixture:'NBAFixture' = None
    value_nbaPastFixtures:'NBAFixtureConnection' = None
    value_nbaPlayer:'NBAPlayer' = None
    value_nbaPlayers:'list[NBAPlayer]' = None
    value_nbaReferralRewards:'list[NBAReferralReward]' = None
    value_nbaTeam:'NBATeam' = None
    value_baseballCard:'BaseballCard' = None
    value_baseballCards:'list[BaseballCard]' = None
    value_baseballFixture:'BaseballFixture' = None
    value_baseballLeaderboard:'BaseballLeaderboard' = None
    value_baseballLiveFixture:'BaseballFixture' = None
    value_baseballOpenFixture:'BaseballFixture' = None
    value_baseballPastFixtures:'BaseballFixtureConnection' = None
    value_baseballPlayer:'BaseballPlayer' = None
    value_baseballPlayers:'list[BaseballPlayer]' = None
    value_baseballReferralRewards:'list[BaseballReferralReward]' = None
    value_baseballTeam:'BaseballTeam' = None
    value_baseballLineup:'BaseballLineup' = None
    value_baseballLineups:'list[BaseballLineup]' = None
    def allCards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'allCards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("allCards",_param_name,inst)
        self.value_allCards = inst
        return inst

    def announcements(self,after,announcementIds,before,first,last,sports,_param_name:str = 'announcements') -> 'AnnouncementConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("announcementIds",announcementIds))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sports",sports))
        inst = AnnouncementConnection(self,param_list)
        self._add_to_query("announcements",_param_name,inst)
        self.value_announcements = inst
        return inst

    def anyCard(self,assetId,slug,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("assetId",assetId))
        param_list.append(("slug",slug))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def anyCards(self,age,assetIds,customCardEditionName,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'anyCards') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCards",_param_name,inst)
        self.value_anyCards = inst
        return inst

    def anyGame(self,id,_param_name:str = 'anyGame') -> 'AnyGameInterface':
        param_list = []
        param_list.append(("id",id))
        inst = AnyGameInterface(self,param_list)
        self._add_to_query("anyGame",_param_name,inst)
        self.value_anyGame = inst
        return inst

    def anyPlayer(self,slug,_param_name:str = 'anyPlayer') -> 'AnyPlayerInterface':
        param_list = []
        param_list.append(("slug",slug))
        inst = AnyPlayerInterface(self,param_list)
        self._add_to_query("anyPlayer",_param_name,inst)
        self.value_anyPlayer = inst
        return inst

    def anyPlayers(self,after,before,first,last,slugs,_param_name:str = 'anyPlayers') -> 'AnyPlayerInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("slugs",slugs))
        inst = AnyPlayerInterfaceConnection(self,param_list)
        self._add_to_query("anyPlayers",_param_name,inst)
        self.value_anyPlayers = inst
        return inst

    def card(self,slug,_param_name:str = 'card') -> 'Card':
        param_list = []
        param_list.append(("slug",slug))
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def cardByAssetId(self,assetId,_param_name:str = 'cardByAssetId') -> 'Card':
        param_list = []
        param_list.append(("assetId",assetId))
        inst = Card(self,param_list)
        self._add_to_query("cardByAssetId",_param_name,inst)
        self.value_cardByAssetId = inst
        return inst

    def cardByBlockchainId(self,blockchainId,_param_name:str = 'cardByBlockchainId') -> 'Card':
        param_list = []
        param_list.append(("blockchainId",blockchainId))
        inst = Card(self,param_list)
        self._add_to_query("cardByBlockchainId",_param_name,inst)
        self.value_cardByBlockchainId = inst
        return inst

    def cardCollection(self,slug,_param_name:str = 'cardCollection') -> 'CardCollection':
        param_list = []
        param_list.append(("slug",slug))
        inst = CardCollection(self,param_list)
        self._add_to_query("cardCollection",_param_name,inst)
        self.value_cardCollection = inst
        return inst

    def cardShardsPool(self,quality,rarity,sport,_param_name:str = 'cardShardsPool') -> 'PlayerWithSupply':
        param_list = []
        param_list.append(("quality",quality))
        param_list.append(("rarity",rarity))
        param_list.append(("sport",sport))
        inst = PlayerWithSupply(self,param_list)
        self._add_to_query("cardShardsPool",_param_name,inst)
        self.value_cardShardsPool = inst
        return inst

    def cards(self,age,assetIds,customCardEditionName,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'Card':
        param_list = []
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = Card(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst

    def cardsWhere(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cardsWhere') -> 'AnyCardInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = AnyCardInterfaceConnection(self,param_list)
        self._add_to_query("cardsWhere",_param_name,inst)
        self.value_cardsWhere = inst
        return inst

    def club(self,slug,_param_name:str = 'club') -> 'Club':
        param_list = []
        param_list.append(("slug",slug))
        inst = Club(self,param_list)
        self._add_to_query("club",_param_name,inst)
        self.value_club = inst
        return inst

    def clubs(self,slugs,_param_name:str = 'clubs') -> 'Club':
        param_list = []
        param_list.append(("slugs",slugs))
        inst = Club(self,param_list)
        self._add_to_query("clubs",_param_name,inst)
        self.value_clubs = inst
        return inst

    def clubsReady(self,_param_name:str = 'clubsReady') -> 'Club':
        param_list = []
        inst = Club(self,param_list)
        self._add_to_query("clubsReady",_param_name,inst)
        self.value_clubsReady = inst
        return inst

    def commonPlayers(self,after,before,first,last,quality,query,sport,_param_name:str = 'commonPlayers') -> 'CommonPlayerConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("quality",quality))
        param_list.append(("query",query))
        param_list.append(("sport",sport))
        inst = CommonPlayerConnection(self,param_list)
        self._add_to_query("commonPlayers",_param_name,inst)
        self.value_commonPlayers = inst
        return inst

    def competition(self,slug,_param_name:str = 'competition') -> 'Competition':
        param_list = []
        param_list.append(("slug",slug))
        inst = Competition(self,param_list)
        self._add_to_query("competition",_param_name,inst)
        self.value_competition = inst
        return inst

    def config(self,_param_name:str = 'config') -> 'Config':
        param_list = []
        inst = Config(self,param_list)
        self._add_to_query("config",_param_name,inst)
        self.value_config = inst
        return inst

    def countries(self,slugs,_param_name:str = 'countries') -> 'Country':
        param_list = []
        param_list.append(("slugs",slugs))
        inst = Country(self,param_list)
        self._add_to_query("countries",_param_name,inst)
        self.value_countries = inst
        return inst

    def country(self,slug,_param_name:str = 'country') -> 'Country':
        param_list = []
        param_list.append(("slug",slug))
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def currentBlockHeight(self,_param_name:str = 'currentBlockHeight'):
        inst = None
        self._add_to_query("currentBlockHeight",_param_name)
        pass

    def currentUser(self,_param_name:str = 'currentUser') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUser",_param_name,inst)
        self.value_currentUser = inst
        return inst

    def customDeck(self,name,slug,_param_name:str = 'customDeck') -> 'CustomDeck':
        param_list = []
        param_list.append(("name",name))
        param_list.append(("slug",slug))
        inst = CustomDeck(self,param_list)
        self._add_to_query("customDeck",_param_name,inst)
        self.value_customDeck = inst
        return inst

    def deck(self,slug,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        param_list.append(("slug",slug))
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def ethereumCards(self,address,_param_name:str = 'ethereumCards') -> 'AnyCardInterface':
        param_list = []
        param_list.append(("address",address))
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("ethereumCards",_param_name,inst)
        self.value_ethereumCards = inst
        return inst

    def ethereumTokens(self,address,_param_name:str = 'ethereumTokens') -> 'Token':
        param_list = []
        param_list.append(("address",address))
        inst = Token(self,param_list)
        self._add_to_query("ethereumTokens",_param_name,inst)
        self.value_ethereumTokens = inst
        return inst

    def featuredSo5Fixtures(self,first,_param_name:str = 'featuredSo5Fixtures') -> 'So5Fixture':
        param_list = []
        param_list.append(("first",first))
        inst = So5Fixture(self,param_list)
        self._add_to_query("featuredSo5Fixtures",_param_name,inst)
        self.value_featuredSo5Fixtures = inst
        return inst

    def football(self,_param_name:str = 'football') -> 'FootballRoot':
        param_list = []
        inst = FootballRoot(self,param_list)
        self._add_to_query("football",_param_name,inst)
        self.value_football = inst
        return inst

    def forYou(self,_param_name:str = 'forYou') -> 'ForYouRoot':
        param_list = []
        inst = ForYouRoot(self,param_list)
        self._add_to_query("forYou",_param_name,inst)
        self.value_forYou = inst
        return inst

    def fullReferrer(self,name,_param_name:str = 'fullReferrer'):
        inst = None
        self._add_to_query("fullReferrer",_param_name)
        pass

    def game(self,id,_param_name:str = 'game') -> 'Game':
        param_list = []
        param_list.append(("id",id))
        inst = Game(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def isNicknameAvailable(self,nickname,_param_name:str = 'isNicknameAvailable'):
        inst = None
        self._add_to_query("isNicknameAvailable",_param_name)
        pass

    def leaguesOpenForGameStats(self,sortType:'LeaguesSortInput',_param_name:str = 'leaguesOpenForGameStats') -> 'Competition':
        param_list = []
        param_list.append(("sortType",sortType))
        inst = Competition(self,param_list)
        self._add_to_query("leaguesOpenForGameStats",_param_name,inst)
        self.value_leaguesOpenForGameStats = inst
        return inst

    def mangopay(self,_param_name:str = 'mangopay') -> 'MangopayRoot':
        param_list = []
        inst = MangopayRoot(self,param_list)
        self._add_to_query("mangopay",_param_name,inst)
        self.value_mangopay = inst
        return inst

    def nextRelayBatchNonce(self,address,_param_name:str = 'nextRelayBatchNonce'):
        inst = None
        self._add_to_query("nextRelayBatchNonce",_param_name)
        pass

    def node(self,id,_param_name:str = 'node') -> 'Node':
        param_list = []
        param_list.append(("id",id))
        inst = Node(self,param_list)
        self._add_to_query("node",_param_name,inst)
        self.value_node = inst
        return inst

    def nodes(self,ids,_param_name:str = 'nodes') -> 'Node':
        param_list = []
        param_list.append(("ids",ids))
        inst = Node(self,param_list)
        self._add_to_query("nodes",_param_name,inst)
        self.value_nodes = inst
        return inst

    def oauthApplication(self,clientId,_param_name:str = 'oauthApplication') -> 'OAuthApplication':
        param_list = []
        param_list.append(("clientId",clientId))
        inst = OAuthApplication(self,param_list)
        self._add_to_query("oauthApplication",_param_name,inst)
        self.value_oauthApplication = inst
        return inst

    def player(self,slug,_param_name:str = 'player') -> 'Player':
        param_list = []
        param_list.append(("slug",slug))
        inst = Player(self,param_list)
        self._add_to_query("player",_param_name,inst)
        self.value_player = inst
        return inst

    def playerGameScore(self,id,_param_name:str = 'playerGameScore') -> 'PlayerGameScoreInterface':
        param_list = []
        param_list.append(("id",id))
        inst = PlayerGameScoreInterface(self,param_list)
        self._add_to_query("playerGameScore",_param_name,inst)
        self.value_playerGameScore = inst
        return inst

    def players(self,slugs,_param_name:str = 'players') -> 'Player':
        param_list = []
        param_list.append(("slugs",slugs))
        inst = Player(self,param_list)
        self._add_to_query("players",_param_name,inst)
        self.value_players = inst
        return inst

    def referralLeaderboard(self,referralSpecialEventId,_param_name:str = 'referralLeaderboard') -> 'ReferralLeaderboard':
        param_list = []
        param_list.append(("referralSpecialEventId",referralSpecialEventId))
        inst = ReferralLeaderboard(self,param_list)
        self._add_to_query("referralLeaderboard",_param_name,inst)
        self.value_referralLeaderboard = inst
        return inst

    def referrer(self,name,_param_name:str = 'referrer'):
        inst = None
        self._add_to_query("referrer",_param_name)
        pass

    def screenshottableCard(self,id,serialNumber,_param_name:str = 'screenshottableCard') -> 'ScreenshottableCard':
        param_list = []
        param_list.append(("id",id))
        param_list.append(("serialNumber",serialNumber))
        inst = ScreenshottableCard(self,param_list)
        self._add_to_query("screenshottableCard",_param_name,inst)
        self.value_screenshottableCard = inst
        return inst

    def season(self,startYear,_param_name:str = 'season') -> 'Season':
        param_list = []
        param_list.append(("startYear",startYear))
        inst = Season(self,param_list)
        self._add_to_query("season",_param_name,inst)
        self.value_season = inst
        return inst

    def shopItems(self,after,before,first,last,sortType:'ShopItemsSortInput',sport,types,unlockedOnly,_param_name:str = 'shopItems') -> 'ClubShopItemConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        param_list.append(("types",types))
        param_list.append(("unlockedOnly",unlockedOnly))
        inst = ClubShopItemConnection(self,param_list)
        self._add_to_query("shopItems",_param_name,inst)
        self.value_shopItems = inst
        return inst

    def so5(self,_param_name:str = 'so5') -> 'So5Root':
        param_list = []
        inst = So5Root(self,param_list)
        self._add_to_query("so5",_param_name,inst)
        self.value_so5 = inst
        return inst

    def so5Appearance(self,id,_param_name:str = 'so5Appearance') -> 'So5Appearance':
        param_list = []
        param_list.append(("id",id))
        inst = So5Appearance(self,param_list)
        self._add_to_query("so5Appearance",_param_name,inst)
        self.value_so5Appearance = inst
        return inst

    def so5Fixture(self,id,slug,type,_param_name:str = 'so5Fixture') -> 'So5Fixture':
        param_list = []
        param_list.append(("id",id))
        param_list.append(("slug",slug))
        param_list.append(("type",type))
        inst = So5Fixture(self,param_list)
        self._add_to_query("so5Fixture",_param_name,inst)
        self.value_so5Fixture = inst
        return inst

    def so5Leaderboard(self,slug,_param_name:str = 'so5Leaderboard') -> 'So5Leaderboard':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5Leaderboard(self,param_list)
        self._add_to_query("so5Leaderboard",_param_name,inst)
        self.value_so5Leaderboard = inst
        return inst

    def so5LeaderboardGroup(self,slug,_param_name:str = 'so5LeaderboardGroup') -> 'So5LeaderboardGroup':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5LeaderboardGroup(self,param_list)
        self._add_to_query("so5LeaderboardGroup",_param_name,inst)
        self.value_so5LeaderboardGroup = inst
        return inst

    def so5League(self,slug,_param_name:str = 'so5League') -> 'So5League':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5League(self,param_list)
        self._add_to_query("so5League",_param_name,inst)
        self.value_so5League = inst
        return inst

    def so5Lineup(self,id,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        param_list.append(("id",id))
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst

    def so5Ranking(self,id,_param_name:str = 'so5Ranking') -> 'So5Ranking':
        param_list = []
        param_list.append(("id",id))
        inst = So5Ranking(self,param_list)
        self._add_to_query("so5Ranking",_param_name,inst)
        self.value_so5Ranking = inst
        return inst

    def so5Reward(self,slug,_param_name:str = 'so5Reward') -> 'So5Reward':
        param_list = []
        param_list.append(("slug",slug))
        inst = So5Reward(self,param_list)
        self._add_to_query("so5Reward",_param_name,inst)
        self.value_so5Reward = inst
        return inst

    def so5Score(self,id,_param_name:str = 'so5Score') -> 'So5Score':
        param_list = []
        param_list.append(("id",id))
        inst = So5Score(self,param_list)
        self._add_to_query("so5Score",_param_name,inst)
        self.value_so5Score = inst
        return inst

    def starkwareAccount(self,starkKey,_param_name:str = 'starkwareAccount') -> 'StarkwareAccount':
        param_list = []
        param_list.append(("starkKey",starkKey))
        inst = StarkwareAccount(self,param_list)
        self._add_to_query("starkwareAccount",_param_name,inst)
        self.value_starkwareAccount = inst
        return inst

    def subscriptionStats(self,subscribable:'SubscribableInput',_param_name:str = 'subscriptionStats') -> 'SubscriptionStats':
        param_list = []
        param_list.append(("subscribable",subscribable))
        inst = SubscriptionStats(self,param_list)
        self._add_to_query("subscriptionStats",_param_name,inst)
        self.value_subscriptionStats = inst
        return inst

    def team(self,slug,_param_name:str = 'team') -> 'TeamInterface':
        param_list = []
        param_list.append(("slug",slug))
        inst = TeamInterface(self,param_list)
        self._add_to_query("team",_param_name,inst)
        self.value_team = inst
        return inst

    def teams(self,after,before,first,last,sport,_param_name:str = 'teams') -> 'TeamInterfaceConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = TeamInterfaceConnection(self,param_list)
        self._add_to_query("teams",_param_name,inst)
        self.value_teams = inst
        return inst

    def tokens(self,_param_name:str = 'tokens') -> 'TokenRoot':
        param_list = []
        inst = TokenRoot(self,param_list)
        self._add_to_query("tokens",_param_name,inst)
        self.value_tokens = inst
        return inst

    def user(self,slug,_param_name:str = 'user') -> 'User':
        param_list = []
        param_list.append(("slug",slug))
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def userById(self,id,_param_name:str = 'userById') -> 'User':
        param_list = []
        param_list.append(("id",id))
        inst = User(self,param_list)
        self._add_to_query("userById",_param_name,inst)
        self.value_userById = inst
        return inst

    def userCardCollection(self,id,_param_name:str = 'userCardCollection') -> 'UserCardCollection':
        param_list = []
        param_list.append(("id",id))
        inst = UserCardCollection(self,param_list)
        self._add_to_query("userCardCollection",_param_name,inst)
        self.value_userCardCollection = inst
        return inst

    def userGroup(self,joinSecret,slug,_param_name:str = 'userGroup') -> 'UserGroupInterface':
        param_list = []
        param_list.append(("joinSecret",joinSecret))
        param_list.append(("slug",slug))
        inst = UserGroupInterface(self,param_list)
        self._add_to_query("userGroup",_param_name,inst)
        self.value_userGroup = inst
        return inst

    def users(self,slugs,_param_name:str = 'users') -> 'User':
        param_list = []
        param_list.append(("slugs",slugs))
        inst = User(self,param_list)
        self._add_to_query("users",_param_name,inst)
        self.value_users = inst
        return inst

    def sportsUser(self,id,_param_name:str = 'sportsUser') -> 'User':
        param_list = []
        param_list.append(("id",id))
        inst = User(self,param_list)
        self._add_to_query("sportsUser",_param_name,inst)
        self.value_sportsUser = inst
        return inst

    def cumulativeLeaderboardsForSport(self,sport,_param_name:str = 'cumulativeLeaderboardsForSport') -> 'CumulativeLeaderboard':
        param_list = []
        param_list.append(("sport",sport))
        inst = CumulativeLeaderboard(self,param_list)
        self._add_to_query("cumulativeLeaderboardsForSport",_param_name,inst)
        self.value_cumulativeLeaderboardsForSport = inst
        return inst

    def cumulativeLeaderboardRank(self,id,_param_name:str = 'cumulativeLeaderboardRank') -> 'CumulativeLeaderboardRank':
        param_list = []
        param_list.append(("id",id))
        inst = CumulativeLeaderboardRank(self,param_list)
        self._add_to_query("cumulativeLeaderboardRank",_param_name,inst)
        self.value_cumulativeLeaderboardRank = inst
        return inst

    def nbaCard(self,slug,_param_name:str = 'nbaCard') -> 'NBACard':
        param_list = []
        param_list.append(("slug",slug))
        inst = NBACard(self,param_list)
        self._add_to_query("nbaCard",_param_name,inst)
        self.value_nbaCard = inst
        return inst

    def nbaCards(self,ids,assetIds,input:'NBACardsInput',slugs,_param_name:str = 'nbaCards') -> 'NBACard':
        param_list = []
        param_list.append(("ids",ids))
        param_list.append(("assetIds",assetIds))
        param_list.append(("input",input))
        param_list.append(("slugs",slugs))
        inst = NBACard(self,param_list)
        self._add_to_query("nbaCards",_param_name,inst)
        self.value_nbaCards = inst
        return inst

    def nbaFixture(self,slug,_param_name:str = 'nbaFixture') -> 'NBAFixture':
        param_list = []
        param_list.append(("slug",slug))
        inst = NBAFixture(self,param_list)
        self._add_to_query("nbaFixture",_param_name,inst)
        self.value_nbaFixture = inst
        return inst

    def nbaLeaderboard(self,slug,_param_name:str = 'nbaLeaderboard') -> 'NBALeaderboard':
        param_list = []
        param_list.append(("slug",slug))
        inst = NBALeaderboard(self,param_list)
        self._add_to_query("nbaLeaderboard",_param_name,inst)
        self.value_nbaLeaderboard = inst
        return inst

    def nbaLineup(self,id,_param_name:str = 'nbaLineup') -> 'NBALineup':
        param_list = []
        param_list.append(("id",id))
        inst = NBALineup(self,param_list)
        self._add_to_query("nbaLineup",_param_name,inst)
        self.value_nbaLineup = inst
        return inst

    def nbaLineups(self,ids,_param_name:str = 'nbaLineups') -> 'NBALineup':
        param_list = []
        param_list.append(("ids",ids))
        inst = NBALineup(self,param_list)
        self._add_to_query("nbaLineups",_param_name,inst)
        self.value_nbaLineups = inst
        return inst

    def nbaLiveFixture(self,_param_name:str = 'nbaLiveFixture') -> 'NBAFixture':
        param_list = []
        inst = NBAFixture(self,param_list)
        self._add_to_query("nbaLiveFixture",_param_name,inst)
        self.value_nbaLiveFixture = inst
        return inst

    def nbaOpenFixture(self,_param_name:str = 'nbaOpenFixture') -> 'NBAFixture':
        param_list = []
        inst = NBAFixture(self,param_list)
        self._add_to_query("nbaOpenFixture",_param_name,inst)
        self.value_nbaOpenFixture = inst
        return inst

    def nbaPastFixtures(self,first,after,_param_name:str = 'nbaPastFixtures') -> 'NBAFixtureConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        inst = NBAFixtureConnection(self,param_list)
        self._add_to_query("nbaPastFixtures",_param_name,inst)
        self.value_nbaPastFixtures = inst
        return inst

    def nbaPlayer(self,slug,_param_name:str = 'nbaPlayer') -> 'NBAPlayer':
        param_list = []
        param_list.append(("slug",slug))
        inst = NBAPlayer(self,param_list)
        self._add_to_query("nbaPlayer",_param_name,inst)
        self.value_nbaPlayer = inst
        return inst

    def nbaPlayers(self,slugs,_param_name:str = 'nbaPlayers') -> 'NBAPlayer':
        param_list = []
        param_list.append(("slugs",slugs))
        inst = NBAPlayer(self,param_list)
        self._add_to_query("nbaPlayers",_param_name,inst)
        self.value_nbaPlayers = inst
        return inst

    def nbaReferralRewards(self,referralIDs,_param_name:str = 'nbaReferralRewards') -> 'NBAReferralReward':
        param_list = []
        param_list.append(("referralIDs",referralIDs))
        inst = NBAReferralReward(self,param_list)
        self._add_to_query("nbaReferralRewards",_param_name,inst)
        self.value_nbaReferralRewards = inst
        return inst

    def nbaTeam(self,slug,_param_name:str = 'nbaTeam') -> 'NBATeam':
        param_list = []
        param_list.append(("slug",slug))
        inst = NBATeam(self,param_list)
        self._add_to_query("nbaTeam",_param_name,inst)
        self.value_nbaTeam = inst
        return inst

    def baseballCard(self,slug,_param_name:str = 'baseballCard') -> 'BaseballCard':
        param_list = []
        param_list.append(("slug",slug))
        inst = BaseballCard(self,param_list)
        self._add_to_query("baseballCard",_param_name,inst)
        self.value_baseballCard = inst
        return inst

    def baseballCards(self,slugs,ids,assetIds,_param_name:str = 'baseballCards') -> 'BaseballCard':
        param_list = []
        param_list.append(("slugs",slugs))
        param_list.append(("ids",ids))
        param_list.append(("assetIds",assetIds))
        inst = BaseballCard(self,param_list)
        self._add_to_query("baseballCards",_param_name,inst)
        self.value_baseballCards = inst
        return inst

    def baseballFixture(self,slug,_param_name:str = 'baseballFixture') -> 'BaseballFixture':
        param_list = []
        param_list.append(("slug",slug))
        inst = BaseballFixture(self,param_list)
        self._add_to_query("baseballFixture",_param_name,inst)
        self.value_baseballFixture = inst
        return inst

    def baseballLeaderboard(self,slug,_param_name:str = 'baseballLeaderboard') -> 'BaseballLeaderboard':
        param_list = []
        param_list.append(("slug",slug))
        inst = BaseballLeaderboard(self,param_list)
        self._add_to_query("baseballLeaderboard",_param_name,inst)
        self.value_baseballLeaderboard = inst
        return inst

    def baseballLiveFixture(self,_param_name:str = 'baseballLiveFixture') -> 'BaseballFixture':
        param_list = []
        inst = BaseballFixture(self,param_list)
        self._add_to_query("baseballLiveFixture",_param_name,inst)
        self.value_baseballLiveFixture = inst
        return inst

    def baseballOpenFixture(self,_param_name:str = 'baseballOpenFixture') -> 'BaseballFixture':
        param_list = []
        inst = BaseballFixture(self,param_list)
        self._add_to_query("baseballOpenFixture",_param_name,inst)
        self.value_baseballOpenFixture = inst
        return inst

    def baseballPastFixtures(self,first,after,_param_name:str = 'baseballPastFixtures') -> 'BaseballFixtureConnection':
        param_list = []
        param_list.append(("first",first))
        param_list.append(("after",after))
        inst = BaseballFixtureConnection(self,param_list)
        self._add_to_query("baseballPastFixtures",_param_name,inst)
        self.value_baseballPastFixtures = inst
        return inst

    def baseballPlayer(self,slug,_param_name:str = 'baseballPlayer') -> 'BaseballPlayer':
        param_list = []
        param_list.append(("slug",slug))
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("baseballPlayer",_param_name,inst)
        self.value_baseballPlayer = inst
        return inst

    def baseballPlayers(self,slugs,_param_name:str = 'baseballPlayers') -> 'BaseballPlayer':
        param_list = []
        param_list.append(("slugs",slugs))
        inst = BaseballPlayer(self,param_list)
        self._add_to_query("baseballPlayers",_param_name,inst)
        self.value_baseballPlayers = inst
        return inst

    def baseballReferralRewards(self,referralIDs,_param_name:str = 'baseballReferralRewards') -> 'BaseballReferralReward':
        param_list = []
        param_list.append(("referralIDs",referralIDs))
        inst = BaseballReferralReward(self,param_list)
        self._add_to_query("baseballReferralRewards",_param_name,inst)
        self.value_baseballReferralRewards = inst
        return inst

    def baseballTeam(self,slug,_param_name:str = 'baseballTeam') -> 'BaseballTeam':
        param_list = []
        param_list.append(("slug",slug))
        inst = BaseballTeam(self,param_list)
        self._add_to_query("baseballTeam",_param_name,inst)
        self.value_baseballTeam = inst
        return inst

    def baseballLineup(self,id,_param_name:str = 'baseballLineup') -> 'BaseballLineup':
        param_list = []
        param_list.append(("id",id))
        inst = BaseballLineup(self,param_list)
        self._add_to_query("baseballLineup",_param_name,inst)
        self.value_baseballLineup = inst
        return inst

    def baseballLineups(self,ids,_param_name:str = 'baseballLineups') -> 'BaseballLineup':
        param_list = []
        param_list.append(("ids",ids))
        inst = BaseballLineup(self,param_list)
        self._add_to_query("baseballLineups",_param_name,inst)
        self.value_baseballLineups = inst
        return inst


class RaffleShopItem(GraphQLObject):
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_createdAt = None
    value_currentStockCount = None
    value_description = None
    value_disabled = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_initialStockCount = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def currentStockCount(self,_param_name:str = 'currentStockCount'):
        inst = None
        self._add_to_query("currentStockCount",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def initialStockCount(self,_param_name:str = 'initialStockCount'):
        inst = None
        self._add_to_query("initialStockCount",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass


class RaffleShopItemReward(GraphQLObject):
    value_count = None
    value_raffleShopItem:'RaffleShopItem' = None
    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass

    def raffleShopItem(self,_param_name:str = 'raffleShopItem') -> 'RaffleShopItem':
        param_list = []
        inst = RaffleShopItem(self,param_list)
        self._add_to_query("raffleShopItem",_param_name,inst)
        self.value_raffleShopItem = inst
        return inst


class RangeInput(GraphQLInputObject):
    def __init__(self,max = None,min = None):
        self._add_parameter('max',max)
        self._add_parameter('min',min)

class reactActivityInput(GraphQLInputObject):
    def __init__(self,activityId = None,clientMutationId = None,emoji = None):
        self._add_parameter('activityId',activityId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('emoji',emoji)

class ReferralRewardInterface(GraphQLObject):
    value_id = None
    value_card:'CardInterface' = None
    value_state = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def card(self,_param_name:str = 'card') -> 'CardInterface':
        param_list = []
        inst = CardInterface(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def state(self,_param_name:str = 'state'):
        inst = None
        self._add_to_query("state",_param_name)
        pass


class ReferralRewardNotification(GraphQLObject):
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_referralReward:'ReferralReward' = None
    value_sport = None
    value_user:'CurrentUser' = None
    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def referralReward(self,_param_name:str = 'referralReward') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("referralReward",_param_name,inst)
        self.value_referralReward = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class refreshAwardInput(GraphQLInputObject):
    def __init__(self,award = None,clientMutationId = None):
        self._add_parameter('award',award)
        self._add_parameter('clientMutationId',clientMutationId)

class rejectOfferInput(GraphQLInputObject):
    def __init__(self,block = None,blockchainId = None,clientMutationId = None,rejectionReason = None):
        self._add_parameter('block',block)
        self._add_parameter('blockchainId',blockchainId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('rejectionReason',rejectionReason)

class relayCallInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,encodedFunction = None,extraGas = None,signature = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('encodedFunction',encodedFunction)
        self._add_parameter('extraGas',extraGas)
        self._add_parameter('signature',signature)

class ReminderNotification(GraphQLObject):
    value_body = None
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_remindable = None
    value_similar = None
    value_sport = None
    value_title = None
    value_user:'CurrentUser' = None
    def body(self,_param_name:str = 'body'):
        inst = None
        self._add_to_query("body",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def remindable(self,_param_name:str = 'remindable'):
        inst = None
        self._add_to_query("remindable",_param_name)
        pass

    def similar(self,_param_name:str = 'similar'):
        inst = None
        self._add_to_query("similar",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def title(self,_param_name:str = 'title'):
        inst = None
        self._add_to_query("title",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class removeAuctionReminderInput(GraphQLInputObject):
    def __init__(self,auctionReminderId = None,clientMutationId = None):
        self._add_parameter('auctionReminderId',auctionReminderId)
        self._add_parameter('clientMutationId',clientMutationId)

class removeTokenFromDeckInput(GraphQLInputObject):
    def __init__(self,assetId = None,clientMutationId = None,deckSlug = None,slug = None):
        self._add_parameter('assetId',assetId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('deckSlug',deckSlug)
        self._add_parameter('slug',slug)

class removeUserFromSo5UserGroupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5UserGroupId = None,userId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5UserGroupId',so5UserGroupId)
        self._add_parameter('userId',userId)

class reportTelemetryInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,operations:'OperationInput' = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('operations',operations)

class ReputationReward(GraphQLObject):
    value_count = None
    def count(self,_param_name:str = 'count'):
        inst = None
        self._add_to_query("count",_param_name)
        pass


class requestReceiptInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,paymentId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('paymentId',paymentId)

class requestSo5NoCardLineupEligibleLeaderboardsInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,so5NoCardLineupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5NoCardLineupId',so5NoCardLineupId)

class resendConfirmationInstructionsInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,fromPath = None,recaptchaToken = None,recaptchaTokenIos = None,recaptchaTokenV2 = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('fromPath',fromPath)
        self._add_parameter('recaptchaToken',recaptchaToken)
        self._add_parameter('recaptchaTokenIos',recaptchaTokenIos)
        self._add_parameter('recaptchaTokenV2',recaptchaTokenV2)

class resendVerificationCodeInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,reference = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('reference',reference)

class resetPrivateKeyInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,starkKey = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('starkKey',starkKey)

class resetSo5NoCardDraftedAppearancesInput(GraphQLInputObject):
    def __init__(self,accessToken = None,clientMutationId = None,so5FixtureId = None):
        self._add_parameter('accessToken',accessToken)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('so5FixtureId',so5FixtureId)

class restoreWalletInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,passwordEncryptedPrivateKey:'PasswordEncryptedPrivateKeyInput' = None,passwordHash = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('passwordEncryptedPrivateKey',passwordEncryptedPrivateKey)
        self._add_parameter('passwordHash',passwordHash)

class resumeOnboardingInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class revealBlueprintsInput(GraphQLInputObject):
    def __init__(self,cardSlugs = None,clientMutationId = None):
        self._add_parameter('cardSlugs',cardSlugs)
        self._add_parameter('clientMutationId',clientMutationId)

class revokeDeviceInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,deviceId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('deviceId',deviceId)

class revokeOAuthAccessTokenForApplicationInput(GraphQLInputObject):
    def __init__(self,applicationId = None,clientMutationId = None):
        self._add_parameter('applicationId',applicationId)
        self._add_parameter('clientMutationId',clientMutationId)

class revokeOAuthAccessTokenInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,id = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('id',id)

class RivalsGameEndedActivity(GraphQLObject):
    value_celebratable = None
    value_createdAt = None
    value_game:'FootballRivalsGame' = None
    value_id = None
    value_reactions:'list[ActivityReactionType]' = None
    value_topScore = None
    value_topScorer:'User' = None
    def celebratable(self,_param_name:str = 'celebratable'):
        inst = None
        self._add_to_query("celebratable",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def reactions(self,_param_name:str = 'reactions') -> 'ActivityReactionType':
        param_list = []
        inst = ActivityReactionType(self,param_list)
        self._add_to_query("reactions",_param_name,inst)
        self.value_reactions = inst
        return inst

    def topScore(self,_param_name:str = 'topScore'):
        inst = None
        self._add_to_query("topScore",_param_name)
        pass

    def topScorer(self,_param_name:str = 'topScorer') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("topScorer",_param_name,inst)
        self.value_topScorer = inst
        return inst


class RivalsGameStartedActivity(GraphQLObject):
    value_celebratable = None
    value_createdAt = None
    value_game:'FootballRivalsGame' = None
    value_id = None
    value_reactions:'list[ActivityReactionType]' = None
    def celebratable(self,_param_name:str = 'celebratable'):
        inst = None
        self._add_to_query("celebratable",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'FootballRivalsGame':
        param_list = []
        inst = FootballRivalsGame(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def reactions(self,_param_name:str = 'reactions') -> 'ActivityReactionType':
        param_list = []
        inst = ActivityReactionType(self,param_list)
        self._add_to_query("reactions",_param_name,inst)
        self.value_reactions = inst
        return inst


class RivalsSquadMembership(GraphQLObject):
    value_administrator = None
    value_createdAt = None
    value_id = None
    value_ranking = None
    value_score = None
    value_user:'User' = None
    def administrator(self,_param_name:str = 'administrator'):
        inst = None
        self._add_to_query("administrator",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class RivalsUserGroupMembership(GraphQLObject):
    value_administrator = None
    value_createdAt = None
    value_id = None
    value_liveRanking:'FootballRivalsPrivateRanking' = None
    value_ranking = None
    value_rankingHistory:'FootballRivalsPrivateRankingConnection' = None
    value_score = None
    value_user:'User' = None
    def administrator(self,_param_name:str = 'administrator'):
        inst = None
        self._add_to_query("administrator",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def liveRanking(self,_param_name:str = 'liveRanking') -> 'FootballRivalsPrivateRanking':
        param_list = []
        inst = FootballRivalsPrivateRanking(self,param_list)
        self._add_to_query("liveRanking",_param_name,inst)
        self.value_liveRanking = inst
        return inst

    def ranking(self,_param_name:str = 'ranking'):
        inst = None
        self._add_to_query("ranking",_param_name)
        pass

    def rankingHistory(self,after,before,first,last,_param_name:str = 'rankingHistory') -> 'FootballRivalsPrivateRankingConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = FootballRivalsPrivateRankingConnection(self,param_list)
        self._add_to_query("rankingHistory",_param_name,inst)
        self.value_rankingHistory = inst
        return inst

    def score(self,_param_name:str = 'score'):
        inst = None
        self._add_to_query("score",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class SaleNotification(GraphQLObject):
    value_anyCard:'AnyCardInterface' = None
    value_buyer:'User' = None
    value_card:'Card' = None
    value_createdAt = None
    value_id = None
    value_name = None
    value_priceInWei = None
    value_read = None
    value_seller:'User' = None
    value_sport = None
    value_token:'Token' = None
    value_user:'CurrentUser' = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def buyer(self,_param_name:str = 'buyer') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("buyer",_param_name,inst)
        self.value_buyer = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def priceInWei(self,_param_name:str = 'priceInWei'):
        inst = None
        self._add_to_query("priceInWei",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def seller(self,_param_name:str = 'seller') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("seller",_param_name,inst)
        self.value_seller = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def token(self,_param_name:str = 'token') -> 'Token':
        param_list = []
        inst = Token(self,param_list)
        self._add_to_query("token",_param_name,inst)
        self.value_token = inst
        return inst

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class sendWalletRecoveryInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,destination = None,method = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('destination',destination)
        self._add_parameter('method',method)

class setDeviceTokenInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,devicePlatform = None,deviceToken = None,disable = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('devicePlatform',devicePlatform)
        self._add_parameter('deviceToken',deviceToken)
        self._add_parameter('disable',disable)

class setLiveActivityTokenInput(GraphQLInputObject):
    def __init__(self,activityToken = None,clientMutationId = None,devicePlatform = None,disable = None,topicId = None,topicType = None):
        self._add_parameter('activityToken',activityToken)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('devicePlatform',devicePlatform)
        self._add_parameter('disable',disable)
        self._add_parameter('topicId',topicId)
        self._add_parameter('topicType',topicType)

class setTokenTradeStatusInput(GraphQLInputObject):
    def __init__(self,assetId = None,clientMutationId = None,tradeable = None):
        self._add_parameter('assetId',assetId)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('tradeable',tradeable)

class ShopItemInterface(GraphQLObject):
    value_cardCollectionRequirements:'list[CardCollectionRequirement]' = None
    value_createdAt = None
    value_description = None
    value_disabled = None
    value_expirationDate = None
    value_id = None
    value_infoLink = None
    value_limitPerUser = None
    value_myAvailableTotalPurchasesCount = None
    value_myAvailableUserShopItems:'list[UserShopItem]' = None
    value_myBalance = None
    value_myLimitResetAt = None
    value_myPurchasesCount = None
    value_name = None
    value_pictureUrl = None
    value_position = None
    value_price = None
    value_requirementsRulesLink = None
    value_salePrice = None
    value_seenInManagerId = None
    value_shopItemsRequired:'list[ShopItem]' = None
    value_threeDimensionalAssetUrl = None
    value_unlocked = None
    def cardCollectionRequirements(self,_param_name:str = 'cardCollectionRequirements') -> 'CardCollectionRequirement':
        param_list = []
        inst = CardCollectionRequirement(self,param_list)
        self._add_to_query("cardCollectionRequirements",_param_name,inst)
        self.value_cardCollectionRequirements = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def disabled(self,_param_name:str = 'disabled'):
        inst = None
        self._add_to_query("disabled",_param_name)
        pass

    def expirationDate(self,_param_name:str = 'expirationDate'):
        inst = None
        self._add_to_query("expirationDate",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def infoLink(self,_param_name:str = 'infoLink'):
        inst = None
        self._add_to_query("infoLink",_param_name)
        pass

    def limitPerUser(self,_param_name:str = 'limitPerUser'):
        inst = None
        self._add_to_query("limitPerUser",_param_name)
        pass

    def myAvailableTotalPurchasesCount(self,_param_name:str = 'myAvailableTotalPurchasesCount'):
        inst = None
        self._add_to_query("myAvailableTotalPurchasesCount",_param_name)
        pass

    def myAvailableUserShopItems(self,_param_name:str = 'myAvailableUserShopItems') -> 'UserShopItem':
        param_list = []
        inst = UserShopItem(self,param_list)
        self._add_to_query("myAvailableUserShopItems",_param_name,inst)
        self.value_myAvailableUserShopItems = inst
        return inst

    def myBalance(self,_param_name:str = 'myBalance'):
        inst = None
        self._add_to_query("myBalance",_param_name)
        pass

    def myLimitResetAt(self,_param_name:str = 'myLimitResetAt'):
        inst = None
        self._add_to_query("myLimitResetAt",_param_name)
        pass

    def myPurchasesCount(self,_param_name:str = 'myPurchasesCount'):
        inst = None
        self._add_to_query("myPurchasesCount",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def pictureUrl(self,derivative,_param_name:str = 'pictureUrl'):
        inst = None
        self._add_to_query("pictureUrl",_param_name)
        pass

    def position(self,_param_name:str = 'position'):
        inst = None
        self._add_to_query("position",_param_name)
        pass

    def price(self,_param_name:str = 'price'):
        inst = None
        self._add_to_query("price",_param_name)
        pass

    def requirementsRulesLink(self,_param_name:str = 'requirementsRulesLink'):
        inst = None
        self._add_to_query("requirementsRulesLink",_param_name)
        pass

    def salePrice(self,_param_name:str = 'salePrice'):
        inst = None
        self._add_to_query("salePrice",_param_name)
        pass

    def seenInManagerId(self,_param_name:str = 'seenInManagerId'):
        inst = None
        self._add_to_query("seenInManagerId",_param_name)
        pass

    def shopItemsRequired(self,_param_name:str = 'shopItemsRequired') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItemsRequired",_param_name,inst)
        self.value_shopItemsRequired = inst
        return inst

    def threeDimensionalAssetUrl(self,format,_param_name:str = 'threeDimensionalAssetUrl'):
        inst = None
        self._add_to_query("threeDimensionalAssetUrl",_param_name)
        pass

    def unlocked(self,_param_name:str = 'unlocked'):
        inst = None
        self._add_to_query("unlocked",_param_name)
        pass


class ShopItemNotification(GraphQLObject):
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_shopItem:'ShopItem' = None
    value_sport = None
    value_user:'CurrentUser' = None
    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def shopItem(self,_param_name:str = 'shopItem') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItem",_param_name,inst)
        self.value_shopItem = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class ShopItemReward(GraphQLObject):
    value_aasmState = None
    value_achievement = None
    value_id = None
    value_shopItem:'ShopItem' = None
    def aasmState(self,_param_name:str = 'aasmState'):
        inst = None
        self._add_to_query("aasmState",_param_name)
        pass

    def achievement(self,_param_name:str = 'achievement'):
        inst = None
        self._add_to_query("achievement",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def shopItem(self,_param_name:str = 'shopItem') -> 'ShopItem':
        param_list = []
        inst = ShopItem(self,param_list)
        self._add_to_query("shopItem",_param_name,inst)
        self.value_shopItem = inst
        return inst


class ShopItemsSortInput(GraphQLInputObject):
    def __init__(self,direction = None,type = None):
        self._add_parameter('direction',direction)
        self._add_parameter('type',type)

class signInInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,deviceFingerprint = None,email = None,gaClientId = None,otpAttempt = None,otpSessionChallenge = None,password = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('deviceFingerprint',deviceFingerprint)
        self._add_parameter('email',email)
        self._add_parameter('gaClientId',gaClientId)
        self._add_parameter('otpAttempt',otpAttempt)
        self._add_parameter('otpSessionChallenge',otpSessionChallenge)
        self._add_parameter('password',password)

class signInWithOAuthInput(GraphQLInputObject):
    def __init__(self,acceptAgeLimit = None,acceptGameRules = None,acceptPrivacyPolicy = None,acceptTerms = None,agreedToReceiveOffersFromPartners = None,agreedToReceiveOffersFromPartnersSpecific = None,clientMutationId = None,facebookClickId = None,googleClickId = None,idToken = None,impactClickId = None,nickname = None,provider = None,referrer = None,signupPlatform = None,tikTokClickId = None,twitterClickId = None,utmParams = None):
        self._add_parameter('acceptAgeLimit',acceptAgeLimit)
        self._add_parameter('acceptGameRules',acceptGameRules)
        self._add_parameter('acceptPrivacyPolicy',acceptPrivacyPolicy)
        self._add_parameter('acceptTerms',acceptTerms)
        self._add_parameter('agreedToReceiveOffersFromPartners',agreedToReceiveOffersFromPartners)
        self._add_parameter('agreedToReceiveOffersFromPartnersSpecific',agreedToReceiveOffersFromPartnersSpecific)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('facebookClickId',facebookClickId)
        self._add_parameter('googleClickId',googleClickId)
        self._add_parameter('idToken',idToken)
        self._add_parameter('impactClickId',impactClickId)
        self._add_parameter('nickname',nickname)
        self._add_parameter('provider',provider)
        self._add_parameter('referrer',referrer)
        self._add_parameter('signupPlatform',signupPlatform)
        self._add_parameter('tikTokClickId',tikTokClickId)
        self._add_parameter('twitterClickId',twitterClickId)
        self._add_parameter('utmParams',utmParams)

class signOutFromAllDevicesInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class SorarePrivateKeyAttributes(GraphQLInputObject):
    def __init__(self,encryptedPrivateKey = None,iv = None,salt = None):
        self._add_parameter('encryptedPrivateKey',encryptedPrivateKey)
        self._add_parameter('iv',iv)
        self._add_parameter('salt',salt)

class signUpInput(GraphQLInputObject):
    def __init__(self,acceptAgeLimit = None,acceptGameRules = None,acceptPrivacyPolicy = None,acceptTerms = None,agreedToReceiveOffersFromPartners = None,agreedToReceiveOffersFromPartnersSpecific = None,certified = None,clientMutationId = None,email = None,facebookClickId = None,fromPath = None,gaClientId = None,googleClickId = None,impactClickId = None,nickname = None,password = None,promoCode = None,recaptchaToken = None,recaptchaTokenIos = None,recaptchaTokenV2 = None,referrer = None,signupPlatform = None,sorareAddress = None,sorarePrivateKey:'SorarePrivateKeyAttributes' = None,sorarePrivateKeyBackup = None,starkKey = None,tikTokClickId = None,twitterClickId = None,utmParams:'UtmInput' = None,wallet:'WalletInput' = None):
        self._add_parameter('acceptAgeLimit',acceptAgeLimit)
        self._add_parameter('acceptGameRules',acceptGameRules)
        self._add_parameter('acceptPrivacyPolicy',acceptPrivacyPolicy)
        self._add_parameter('acceptTerms',acceptTerms)
        self._add_parameter('agreedToReceiveOffersFromPartners',agreedToReceiveOffersFromPartners)
        self._add_parameter('agreedToReceiveOffersFromPartnersSpecific',agreedToReceiveOffersFromPartnersSpecific)
        self._add_parameter('certified',certified)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('email',email)
        self._add_parameter('facebookClickId',facebookClickId)
        self._add_parameter('fromPath',fromPath)
        self._add_parameter('gaClientId',gaClientId)
        self._add_parameter('googleClickId',googleClickId)
        self._add_parameter('impactClickId',impactClickId)
        self._add_parameter('nickname',nickname)
        self._add_parameter('password',password)
        self._add_parameter('promoCode',promoCode)
        self._add_parameter('recaptchaToken',recaptchaToken)
        self._add_parameter('recaptchaTokenIos',recaptchaTokenIos)
        self._add_parameter('recaptchaTokenV2',recaptchaTokenV2)
        self._add_parameter('referrer',referrer)
        self._add_parameter('signupPlatform',signupPlatform)
        self._add_parameter('sorareAddress',sorareAddress)
        self._add_parameter('sorarePrivateKey',sorarePrivateKey)
        self._add_parameter('sorarePrivateKeyBackup',sorarePrivateKeyBackup)
        self._add_parameter('starkKey',starkKey)
        self._add_parameter('tikTokClickId',tikTokClickId)
        self._add_parameter('twitterClickId',twitterClickId)
        self._add_parameter('utmParams',utmParams)
        self._add_parameter('wallet',wallet)

class skipOnboardingInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class So5CurrentUserInterface(GraphQLObject):
    value_blockchainCardsInLineups = None
    value_composedAtLeastOneNonTutorialLineup = None
    value_footballLast30DaysLineupsCount = None
    value_forcedIntoOnboarding = None
    value_last30DaysLineupsCount:'IntegerBySportType' = None
    value_myFootballManagerTasks:'list[FootballManagerTask]' = None
    value_onboardingStatus:'Onboarding' = None
    value_so5NoCardRouteOpened = None
    value_unclaimedActionRewards:'list[ActionReward]' = None
    value_unclaimedSo5Rewards:'list[So5Reward]' = None
    def blockchainCardsInLineups(self,sport,_param_name:str = 'blockchainCardsInLineups'):
        inst = None
        self._add_to_query("blockchainCardsInLineups",_param_name)
        pass

    def composedAtLeastOneNonTutorialLineup(self,_param_name:str = 'composedAtLeastOneNonTutorialLineup'):
        inst = None
        self._add_to_query("composedAtLeastOneNonTutorialLineup",_param_name)
        pass

    def footballLast30DaysLineupsCount(self,_param_name:str = 'footballLast30DaysLineupsCount'):
        inst = None
        self._add_to_query("footballLast30DaysLineupsCount",_param_name)
        pass

    def forcedIntoOnboarding(self,sport,_param_name:str = 'forcedIntoOnboarding'):
        inst = None
        self._add_to_query("forcedIntoOnboarding",_param_name)
        pass

    def last30DaysLineupsCount(self,_param_name:str = 'last30DaysLineupsCount') -> 'IntegerBySportType':
        param_list = []
        inst = IntegerBySportType(self,param_list)
        self._add_to_query("last30DaysLineupsCount",_param_name,inst)
        self.value_last30DaysLineupsCount = inst
        return inst

    def myFootballManagerTasks(self,_param_name:str = 'myFootballManagerTasks') -> 'FootballManagerTask':
        param_list = []
        inst = FootballManagerTask(self,param_list)
        self._add_to_query("myFootballManagerTasks",_param_name,inst)
        self.value_myFootballManagerTasks = inst
        return inst

    def onboardingStatus(self,_param_name:str = 'onboardingStatus') -> 'Onboarding':
        param_list = []
        inst = Onboarding(self,param_list)
        self._add_to_query("onboardingStatus",_param_name,inst)
        self.value_onboardingStatus = inst
        return inst

    def so5NoCardRouteOpened(self,sport,_param_name:str = 'so5NoCardRouteOpened'):
        inst = None
        self._add_to_query("so5NoCardRouteOpened",_param_name)
        pass

    def unclaimedActionRewards(self,_param_name:str = 'unclaimedActionRewards') -> 'ActionReward':
        param_list = []
        inst = ActionReward(self,param_list)
        self._add_to_query("unclaimedActionRewards",_param_name,inst)
        self.value_unclaimedActionRewards = inst
        return inst

    def unclaimedSo5Rewards(self,sport,_param_name:str = 'unclaimedSo5Rewards') -> 'So5Reward':
        param_list = []
        param_list.append(("sport",sport))
        inst = So5Reward(self,param_list)
        self._add_to_query("unclaimedSo5Rewards",_param_name,inst)
        self.value_unclaimedSo5Rewards = inst
        return inst


class So5LeaderboardRulesInterface(GraphQLObject):
    value_canCompose:'Validity' = None
    value_defaultAverageScore = None
    value_displayedRules:'So5Rules' = None
    value_rules:'So5Rules' = None
    def canCompose(self,_param_name:str = 'canCompose') -> 'Validity':
        param_list = []
        inst = Validity(self,param_list)
        self._add_to_query("canCompose",_param_name,inst)
        self.value_canCompose = inst
        return inst

    def defaultAverageScore(self,_param_name:str = 'defaultAverageScore'):
        inst = None
        self._add_to_query("defaultAverageScore",_param_name)
        pass

    def displayedRules(self,_param_name:str = 'displayedRules') -> 'So5Rules':
        param_list = []
        inst = So5Rules(self,param_list)
        self._add_to_query("displayedRules",_param_name,inst)
        self.value_displayedRules = inst
        return inst

    def rules(self,_param_name:str = 'rules') -> 'So5Rules':
        param_list = []
        inst = So5Rules(self,param_list)
        self._add_to_query("rules",_param_name,inst)
        self.value_rules = inst
        return inst


class So5LineupNotification(GraphQLObject):
    value_anyCard:'AnyCardInterface' = None
    value_card:'Card' = None
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_so5Lineup:'So5Lineup' = None
    value_sport = None
    value_user:'CurrentUser' = None
    def anyCard(self,_param_name:str = 'anyCard') -> 'AnyCardInterface':
        param_list = []
        inst = AnyCardInterface(self,param_list)
        self._add_to_query("anyCard",_param_name,inst)
        self.value_anyCard = inst
        return inst

    def card(self,_param_name:str = 'card') -> 'Card':
        param_list = []
        inst = Card(self,param_list)
        self._add_to_query("card",_param_name,inst)
        self.value_card = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def so5Lineup(self,_param_name:str = 'so5Lineup') -> 'So5Lineup':
        param_list = []
        inst = So5Lineup(self,param_list)
        self._add_to_query("so5Lineup",_param_name,inst)
        self.value_so5Lineup = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class So5UserGroupNotification(GraphQLObject):
    value_createdAt = None
    value_id = None
    value_membership:'So5UserGroupMembership' = None
    value_name = None
    value_otherMembershipsCount = None
    value_read = None
    value_so5UserGroup:'So5UserGroup' = None
    value_sport = None
    value_user:'CurrentUser' = None
    value_userGroup:'UserGroupInterface' = None
    value_userGroupMembership:'UserGroupMembershipInterface' = None
    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def membership(self,_param_name:str = 'membership') -> 'So5UserGroupMembership':
        param_list = []
        inst = So5UserGroupMembership(self,param_list)
        self._add_to_query("membership",_param_name,inst)
        self.value_membership = inst
        return inst

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def otherMembershipsCount(self,_param_name:str = 'otherMembershipsCount'):
        inst = None
        self._add_to_query("otherMembershipsCount",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def so5UserGroup(self,_param_name:str = 'so5UserGroup') -> 'So5UserGroup':
        param_list = []
        inst = So5UserGroup(self,param_list)
        self._add_to_query("so5UserGroup",_param_name,inst)
        self.value_so5UserGroup = inst
        return inst

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def userGroup(self,_param_name:str = 'userGroup') -> 'UserGroupInterface':
        param_list = []
        inst = UserGroupInterface(self,param_list)
        self._add_to_query("userGroup",_param_name,inst)
        self.value_userGroup = inst
        return inst

    def userGroupMembership(self,_param_name:str = 'userGroupMembership') -> 'UserGroupMembershipInterface':
        param_list = []
        inst = UserGroupMembershipInterface(self,param_list)
        self._add_to_query("userGroupMembership",_param_name,inst)
        self.value_userGroupMembership = inst
        return inst


class SocialPicturesInterface(GraphQLObject):
    value_socialPictureFingerprint = None
    value_socialPictureUrls:'SocialPictureDerivative' = None
    def socialPictureFingerprint(self,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def socialPictureUrls(self,_param_name:str = 'socialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("socialPictureUrls",_param_name,inst)
        self.value_socialPictureUrls = inst
        return inst


class spendCardShardsChestInput(GraphQLInputObject):
    def __init__(self,cardShardsChestId = None,clientMutationId = None):
        self._add_parameter('cardShardsChestId',cardShardsChestId)
        self._add_parameter('clientMutationId',clientMutationId)

class SportsNode(GraphQLObject):
    value_id = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass


class StarkexLimitOrderAuthorizationRequest(GraphQLObject):
    value_amountBuy = None
    value_amountSell = None
    value_expirationTimestamp = None
    value_feeInfo:'Fee' = None
    value_nonce = None
    value_tokenBuy = None
    value_tokenSell = None
    value_vaultIdBuy = None
    value_vaultIdSell = None
    def amountBuy(self,_param_name:str = 'amountBuy'):
        inst = None
        self._add_to_query("amountBuy",_param_name)
        pass

    def amountSell(self,_param_name:str = 'amountSell'):
        inst = None
        self._add_to_query("amountSell",_param_name)
        pass

    def expirationTimestamp(self,_param_name:str = 'expirationTimestamp'):
        inst = None
        self._add_to_query("expirationTimestamp",_param_name)
        pass

    def feeInfo(self,_param_name:str = 'feeInfo') -> 'Fee':
        param_list = []
        inst = Fee(self,param_list)
        self._add_to_query("feeInfo",_param_name,inst)
        self.value_feeInfo = inst
        return inst

    def nonce(self,_param_name:str = 'nonce'):
        inst = None
        self._add_to_query("nonce",_param_name)
        pass

    def tokenBuy(self,_param_name:str = 'tokenBuy'):
        inst = None
        self._add_to_query("tokenBuy",_param_name)
        pass

    def tokenSell(self,_param_name:str = 'tokenSell'):
        inst = None
        self._add_to_query("tokenSell",_param_name)
        pass

    def vaultIdBuy(self,_param_name:str = 'vaultIdBuy'):
        inst = None
        self._add_to_query("vaultIdBuy",_param_name)
        pass

    def vaultIdSell(self,_param_name:str = 'vaultIdSell'):
        inst = None
        self._add_to_query("vaultIdSell",_param_name)
        pass


class StarkexTransferAuthorizationRequest(GraphQLObject):
    value_amount = None
    value_condition = None
    value_expirationTimestamp = None
    value_feeInfoUser:'Fee' = None
    value_nonce = None
    value_receiverPublicKey = None
    value_receiverVaultId = None
    value_senderVaultId = None
    value_token = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def condition(self,_param_name:str = 'condition'):
        inst = None
        self._add_to_query("condition",_param_name)
        pass

    def expirationTimestamp(self,_param_name:str = 'expirationTimestamp'):
        inst = None
        self._add_to_query("expirationTimestamp",_param_name)
        pass

    def feeInfoUser(self,_param_name:str = 'feeInfoUser') -> 'Fee':
        param_list = []
        inst = Fee(self,param_list)
        self._add_to_query("feeInfoUser",_param_name,inst)
        self.value_feeInfoUser = inst
        return inst

    def nonce(self,_param_name:str = 'nonce'):
        inst = None
        self._add_to_query("nonce",_param_name)
        pass

    def receiverPublicKey(self,_param_name:str = 'receiverPublicKey'):
        inst = None
        self._add_to_query("receiverPublicKey",_param_name)
        pass

    def receiverVaultId(self,_param_name:str = 'receiverVaultId'):
        inst = None
        self._add_to_query("receiverVaultId",_param_name)
        pass

    def senderVaultId(self,_param_name:str = 'senderVaultId'):
        inst = None
        self._add_to_query("senderVaultId",_param_name)
        pass

    def token(self,_param_name:str = 'token'):
        inst = None
        self._add_to_query("token",_param_name)
        pass


class StarkwarePrivateAccount(GraphQLObject):
    value_availableBalance = None
    value_availableBalanceForWithdrawal = None
    value_id = None
    value_publicInfo:'StarkwareAccount' = None
    value_totalBalance = None
    value_user:'User' = None
    def availableBalance(self,_param_name:str = 'availableBalance'):
        inst = None
        self._add_to_query("availableBalance",_param_name)
        pass

    def availableBalanceForWithdrawal(self,_param_name:str = 'availableBalanceForWithdrawal'):
        inst = None
        self._add_to_query("availableBalanceForWithdrawal",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def publicInfo(self,_param_name:str = 'publicInfo') -> 'StarkwareAccount':
        param_list = []
        inst = StarkwareAccount(self,param_list)
        self._add_to_query("publicInfo",_param_name,inst)
        self.value_publicInfo = inst
        return inst

    def totalBalance(self,_param_name:str = 'totalBalance'):
        inst = None
        self._add_to_query("totalBalance",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class StartingLineupRevealedActivity(GraphQLObject):
    value_celebratable = None
    value_createdAt = None
    value_game:'Game' = None
    value_id = None
    value_reactions:'list[ActivityReactionType]' = None
    def celebratable(self,_param_name:str = 'celebratable'):
        inst = None
        self._add_to_query("celebratable",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def game(self,_param_name:str = 'game') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("game",_param_name,inst)
        self.value_game = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def reactions(self,_param_name:str = 'reactions') -> 'ActivityReactionType':
        param_list = []
        inst = ActivityReactionType(self,param_list)
        self._add_to_query("reactions",_param_name,inst)
        self.value_reactions = inst
        return inst


class startOnboardingInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class stopAutoBidInput(GraphQLInputObject):
    def __init__(self,bidId = None,clientMutationId = None):
        self._add_parameter('bidId',bidId)
        self._add_parameter('clientMutationId',clientMutationId)

class StripeCreditCardAuthorizationRequest(GraphQLObject):
    value_amount = None
    value_clientSecret = None
    value_currency = None
    value_id = None
    value_paymentMethod = None
    value_receiptUrl = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def clientSecret(self,_param_name:str = 'clientSecret'):
        inst = None
        self._add_to_query("clientSecret",_param_name)
        pass

    def currency(self,_param_name:str = 'currency'):
        inst = None
        self._add_to_query("currency",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def paymentMethod(self,_param_name:str = 'paymentMethod'):
        inst = None
        self._add_to_query("paymentMethod",_param_name)
        pass

    def receiptUrl(self,_param_name:str = 'receiptUrl'):
        inst = None
        self._add_to_query("receiptUrl",_param_name)
        pass


class UserDeviceEvent(GraphQLObject):
    value_deviceType = None
    value_eventType = None
    value_id = None
    value_lastUsedAt = None
    value_os = None
    value_userAgent = None
    def deviceType(self,_param_name:str = 'deviceType'):
        inst = None
        self._add_to_query("deviceType",_param_name)
        pass

    def eventType(self,_param_name:str = 'eventType'):
        inst = None
        self._add_to_query("eventType",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def lastUsedAt(self,_param_name:str = 'lastUsedAt'):
        inst = None
        self._add_to_query("lastUsedAt",_param_name)
        pass

    def os(self,_param_name:str = 'os'):
        inst = None
        self._add_to_query("os",_param_name)
        pass

    def userAgent(self,_param_name:str = 'userAgent'):
        inst = None
        self._add_to_query("userAgent",_param_name)
        pass


class Subscription(GraphQLObject):
    value_aCardWasUpdated:'CardSubscription' = None
    value_aGameWasUpdated:'Game' = None
    value_currentUserWasUpdated:'CurrentUser' = None
    value_deviceWasUpdated:'UserDeviceEvent' = None
    value_gameWasUpdated:'Game' = None
    value_primaryOfferWasUpdated:'TokenPrimaryOffer' = None
    value_tokenAuctionWasUpdated:'TokenAuction' = None
    value_tokenOfferWasUpdated:'TokenOffer' = None
    def aCardWasUpdated(self,ages,cardEditions,events,owned,playerSlugs,positions,rarities,seasonStartYears,serialNumbers,shirtNumbers,slugs,_param_name:str = 'aCardWasUpdated') -> 'CardSubscription':
        param_list = []
        param_list.append(("ages",ages))
        param_list.append(("cardEditions",cardEditions))
        param_list.append(("events",events))
        param_list.append(("owned",owned))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("seasonStartYears",seasonStartYears))
        param_list.append(("serialNumbers",serialNumbers))
        param_list.append(("shirtNumbers",shirtNumbers))
        param_list.append(("slugs",slugs))
        inst = CardSubscription(self,param_list)
        self._add_to_query("aCardWasUpdated",_param_name,inst)
        self.value_aCardWasUpdated = inst
        return inst

    def aGameWasUpdated(self,id,_param_name:str = 'aGameWasUpdated') -> 'Game':
        param_list = []
        param_list.append(("id",id))
        inst = Game(self,param_list)
        self._add_to_query("aGameWasUpdated",_param_name,inst)
        self.value_aGameWasUpdated = inst
        return inst

    def currentUserWasUpdated(self,_param_name:str = 'currentUserWasUpdated') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("currentUserWasUpdated",_param_name,inst)
        self.value_currentUserWasUpdated = inst
        return inst

    def deviceWasUpdated(self,_param_name:str = 'deviceWasUpdated') -> 'UserDeviceEvent':
        param_list = []
        inst = UserDeviceEvent(self,param_list)
        self._add_to_query("deviceWasUpdated",_param_name,inst)
        self.value_deviceWasUpdated = inst
        return inst

    def gameWasUpdated(self,_param_name:str = 'gameWasUpdated') -> 'Game':
        param_list = []
        inst = Game(self,param_list)
        self._add_to_query("gameWasUpdated",_param_name,inst)
        self.value_gameWasUpdated = inst
        return inst

    def primaryOfferWasUpdated(self,sports,_param_name:str = 'primaryOfferWasUpdated') -> 'TokenPrimaryOffer':
        param_list = []
        param_list.append(("sports",sports))
        inst = TokenPrimaryOffer(self,param_list)
        self._add_to_query("primaryOfferWasUpdated",_param_name,inst)
        self.value_primaryOfferWasUpdated = inst
        return inst

    def tokenAuctionWasUpdated(self,sports,_param_name:str = 'tokenAuctionWasUpdated') -> 'TokenAuction':
        param_list = []
        param_list.append(("sports",sports))
        inst = TokenAuction(self,param_list)
        self._add_to_query("tokenAuctionWasUpdated",_param_name,inst)
        self.value_tokenAuctionWasUpdated = inst
        return inst

    def tokenOfferWasUpdated(self,sports,_param_name:str = 'tokenOfferWasUpdated') -> 'TokenOffer':
        param_list = []
        param_list.append(("sports",sports))
        inst = TokenOffer(self,param_list)
        self._add_to_query("tokenOfferWasUpdated",_param_name,inst)
        self.value_tokenOfferWasUpdated = inst
        return inst


class TicketsDeliverableItem(GraphQLObject):
    value_id = None
    value_mandatoryWearableSizeInput = None
    value_name = None
    value_slug = None
    value_sport = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mandatoryWearableSizeInput(self,_param_name:str = 'mandatoryWearableSizeInput'):
        inst = None
        self._add_to_query("mandatoryWearableSizeInput",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class TokenBaseballMetadata(GraphQLObject):
    value_id = None
    value_playerDisplayName = None
    value_playerPositions = None
    value_playerSlug = None
    value_rarity = None
    value_seasonStartYear = None
    value_serialNumber = None
    value_singleCivilYear = None
    value_supply = None
    value_teamSlug = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def playerDisplayName(self,_param_name:str = 'playerDisplayName'):
        inst = None
        self._add_to_query("playerDisplayName",_param_name)
        pass

    def playerPositions(self,_param_name:str = 'playerPositions'):
        inst = None
        self._add_to_query("playerPositions",_param_name)
        pass

    def playerSlug(self,_param_name:str = 'playerSlug'):
        inst = None
        self._add_to_query("playerSlug",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def seasonStartYear(self,_param_name:str = 'seasonStartYear'):
        inst = None
        self._add_to_query("seasonStartYear",_param_name)
        pass

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def singleCivilYear(self,_param_name:str = 'singleCivilYear'):
        inst = None
        self._add_to_query("singleCivilYear",_param_name)
        pass

    def supply(self,_param_name:str = 'supply'):
        inst = None
        self._add_to_query("supply",_param_name)
        pass

    def teamSlug(self,_param_name:str = 'teamSlug'):
        inst = None
        self._add_to_query("teamSlug",_param_name)
        pass


class TokenCardMetadataInterface(GraphQLObject):
    value_id = None
    value_playerDisplayName = None
    value_playerSlug = None
    value_rarity = None
    value_seasonStartYear = None
    value_serialNumber = None
    value_singleCivilYear = None
    value_supply = None
    value_teamSlug = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def playerDisplayName(self,_param_name:str = 'playerDisplayName'):
        inst = None
        self._add_to_query("playerDisplayName",_param_name)
        pass

    def playerSlug(self,_param_name:str = 'playerSlug'):
        inst = None
        self._add_to_query("playerSlug",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def seasonStartYear(self,_param_name:str = 'seasonStartYear'):
        inst = None
        self._add_to_query("seasonStartYear",_param_name)
        pass

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def singleCivilYear(self,_param_name:str = 'singleCivilYear'):
        inst = None
        self._add_to_query("singleCivilYear",_param_name)
        pass

    def supply(self,_param_name:str = 'supply'):
        inst = None
        self._add_to_query("supply",_param_name)
        pass

    def teamSlug(self,_param_name:str = 'teamSlug'):
        inst = None
        self._add_to_query("teamSlug",_param_name)
        pass


class TokenFootballMetadata(GraphQLObject):
    value_id = None
    value_playerDisplayName = None
    value_playerPosition = None
    value_playerSlug = None
    value_rarity = None
    value_seasonStartYear = None
    value_serialNumber = None
    value_singleCivilYear = None
    value_supply = None
    value_teamSlug = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def playerDisplayName(self,_param_name:str = 'playerDisplayName'):
        inst = None
        self._add_to_query("playerDisplayName",_param_name)
        pass

    def playerPosition(self,_param_name:str = 'playerPosition'):
        inst = None
        self._add_to_query("playerPosition",_param_name)
        pass

    def playerSlug(self,_param_name:str = 'playerSlug'):
        inst = None
        self._add_to_query("playerSlug",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def seasonStartYear(self,_param_name:str = 'seasonStartYear'):
        inst = None
        self._add_to_query("seasonStartYear",_param_name)
        pass

    def serialNumber(self,_param_name:str = 'serialNumber'):
        inst = None
        self._add_to_query("serialNumber",_param_name)
        pass

    def singleCivilYear(self,_param_name:str = 'singleCivilYear'):
        inst = None
        self._add_to_query("singleCivilYear",_param_name)
        pass

    def supply(self,_param_name:str = 'supply'):
        inst = None
        self._add_to_query("supply",_param_name)
        pass

    def teamSlug(self,_param_name:str = 'teamSlug'):
        inst = None
        self._add_to_query("teamSlug",_param_name)
        pass


class TokenMonetaryReward(GraphQLObject):
    value_amount = None
    value_amounts:'MonetaryAmount' = None
    value_id = None
    value_rewardId = None
    value_sport = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def amounts(self,_param_name:str = 'amounts') -> 'MonetaryAmount':
        param_list = []
        inst = MonetaryAmount(self,param_list)
        self._add_to_query("amounts",_param_name,inst)
        self.value_amounts = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def rewardId(self,_param_name:str = 'rewardId'):
        inst = None
        self._add_to_query("rewardId",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class TokenOperationTradeInterface(GraphQLObject):
    value_hasTrade = None
    def hasTrade(self,_param_name:str = 'hasTrade'):
        inst = None
        self._add_to_query("hasTrade",_param_name)
        pass


class UnblockEmailInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None):
        self._add_parameter('clientMutationId',clientMutationId)

class unblockUserOffersInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,userSlug = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('userSlug',userSlug)

class updateCardFiltersInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,filters = None,sport = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('filters',filters)
        self._add_parameter('sport',sport)

class updateExternalEthDepositInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,id = None,transactionHash = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('id',id)
        self._add_parameter('transactionHash',transactionHash)

class updateFiatWalletInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,dob = None,firstName = None,lastName = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('dob',dob)
        self._add_parameter('firstName',firstName)
        self._add_parameter('lastName',lastName)

class updateHighlightedCardInput(GraphQLInputObject):
    def __init__(self,cardCollectionCardId = None,clientMutationId = None):
        self._add_parameter('cardCollectionCardId',cardCollectionCardId)
        self._add_parameter('clientMutationId',clientMutationId)

class updateManagerTeamInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,hidden = None,managerTeamId = None,name = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('hidden',hidden)
        self._add_parameter('managerTeamId',managerTeamId)
        self._add_parameter('name',name)

class updatePartnerOffersAgreementInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,partner = None,value = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('partner',partner)
        self._add_parameter('value',value)

class updateSo5UserGroupInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,description = None,displayName = None,joinDisabled = None,logoId = None,newAdminId = None,publiclyAccessible = None,so5UserGroupId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('description',description)
        self._add_parameter('displayName',displayName)
        self._add_parameter('joinDisabled',joinDisabled)
        self._add_parameter('logoId',logoId)
        self._add_parameter('newAdminId',newAdminId)
        self._add_parameter('publiclyAccessible',publiclyAccessible)
        self._add_parameter('so5UserGroupId',so5UserGroupId)

class updateSportProfileInput(GraphQLInputObject):
    def __init__(self,achievementBadgesIds = None,backgroundId = None,bannerColor = None,bannerUrl = None,clientMutationId = None,clubBadgeId = None,clubName = None,highlightedDeckId = None,selectedStatistics = None,shieldUrl = None,sport = None):
        self._add_parameter('achievementBadgesIds',achievementBadgesIds)
        self._add_parameter('backgroundId',backgroundId)
        self._add_parameter('bannerColor',bannerColor)
        self._add_parameter('bannerUrl',bannerUrl)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('clubBadgeId',clubBadgeId)
        self._add_parameter('clubName',clubName)
        self._add_parameter('highlightedDeckId',highlightedDeckId)
        self._add_parameter('selectedStatistics',selectedStatistics)
        self._add_parameter('shieldUrl',shieldUrl)
        self._add_parameter('sport',sport)

class updateSubscriptionInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,enabled = None,rarities = None,slug = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('enabled',enabled)
        self._add_parameter('rarities',rarities)
        self._add_parameter('slug',slug)

class updateUserEmailInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,email = None,otpAttempt = None,passwordHash = None,privateKeyRecovery:'PrivateKeyRecoveryInput' = None,recaptchaToken = None,recaptchaTokenIos = None,recaptchaTokenV2 = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('email',email)
        self._add_parameter('otpAttempt',otpAttempt)
        self._add_parameter('passwordHash',passwordHash)
        self._add_parameter('privateKeyRecovery',privateKeyRecovery)
        self._add_parameter('recaptchaToken',recaptchaToken)
        self._add_parameter('recaptchaTokenIos',recaptchaTokenIos)
        self._add_parameter('recaptchaTokenV2',recaptchaTokenV2)

class updateUserProfileInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,clubBannerId = None,clubName = None,clubShieldId = None,enabledWallets = None,marketplacePreferences:'MarketplacePreferenceInput' = None,nickname = None,picturePresignedKey = None,status = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('clubBannerId',clubBannerId)
        self._add_parameter('clubName',clubName)
        self._add_parameter('clubShieldId',clubShieldId)
        self._add_parameter('enabledWallets',enabledWallets)
        self._add_parameter('marketplacePreferences',marketplacePreferences)
        self._add_parameter('nickname',nickname)
        self._add_parameter('picturePresignedKey',picturePresignedKey)
        self._add_parameter('status',status)

class UserLifecycleInput(GraphQLInputObject):
    def __init__(self,name = None,value = None):
        self._add_parameter('name',name)
        self._add_parameter('value',value)

class updateUserSettingsInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,currency = None,discoverable = None,discoverableName = None,fiatCurrency = None,hideBalance = None,hideCommonCards = None,hideFullyCompletedTutorials = None,hidePermanentTutorials = None,lastWeb3Provider = None,lifecycle:'UserLifecycleInput' = None,locale = None,notificationPreference:'NotificationPreferenceInput' = None,postalAddress:'PostalAddressInput' = None,rewardCurrency = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('currency',currency)
        self._add_parameter('discoverable',discoverable)
        self._add_parameter('discoverableName',discoverableName)
        self._add_parameter('fiatCurrency',fiatCurrency)
        self._add_parameter('hideBalance',hideBalance)
        self._add_parameter('hideCommonCards',hideCommonCards)
        self._add_parameter('hideFullyCompletedTutorials',hideFullyCompletedTutorials)
        self._add_parameter('hidePermanentTutorials',hidePermanentTutorials)
        self._add_parameter('lastWeb3Provider',lastWeb3Provider)
        self._add_parameter('lifecycle',lifecycle)
        self._add_parameter('locale',locale)
        self._add_parameter('notificationPreference',notificationPreference)
        self._add_parameter('postalAddress',postalAddress)
        self._add_parameter('rewardCurrency',rewardCurrency)

class upsertCommonDraftInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,commonDraftCampaignSlug = None,dryRun = None,force = None,printablePlayerIds = None,so5LeaderboardSlug = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('commonDraftCampaignSlug',commonDraftCampaignSlug)
        self._add_parameter('dryRun',dryRun)
        self._add_parameter('force',force)
        self._add_parameter('printablePlayerIds',printablePlayerIds)
        self._add_parameter('so5LeaderboardSlug',so5LeaderboardSlug)

class UsBankAccount(GraphQLObject):
    value_accountNumber = None
    value_country:'Country' = None
    value_id = None
    value_ownerAddress:'MangopayBankAccountOwnerAddress' = None
    value_ownerName = None
    value_routingNumber = None
    def accountNumber(self,_param_name:str = 'accountNumber'):
        inst = None
        self._add_to_query("accountNumber",_param_name)
        pass

    def country(self,_param_name:str = 'country') -> 'Country':
        param_list = []
        inst = Country(self,param_list)
        self._add_to_query("country",_param_name,inst)
        self.value_country = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def ownerAddress(self,_param_name:str = 'ownerAddress') -> 'MangopayBankAccountOwnerAddress':
        param_list = []
        inst = MangopayBankAccountOwnerAddress(self,param_list)
        self._add_to_query("ownerAddress",_param_name,inst)
        self.value_ownerAddress = inst
        return inst

    def ownerName(self,_param_name:str = 'ownerName'):
        inst = None
        self._add_to_query("ownerName",_param_name)
        pass

    def routingNumber(self,_param_name:str = 'routingNumber'):
        inst = None
        self._add_to_query("routingNumber",_param_name)
        pass


class UserAwardNotification(GraphQLObject):
    value_amount = None
    value_award:'UserAward' = None
    value_createdAt = None
    value_id = None
    value_level = None
    value_name = None
    value_read = None
    value_sport = None
    value_user:'CurrentUser' = None
    def amount(self,_param_name:str = 'amount'):
        inst = None
        self._add_to_query("amount",_param_name)
        pass

    def award(self,_param_name:str = 'award') -> 'UserAward':
        param_list = []
        inst = UserAward(self,param_list)
        self._add_to_query("award",_param_name,inst)
        self.value_award = inst
        return inst

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def level(self,_param_name:str = 'level'):
        inst = None
        self._add_to_query("level",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst


class UserGroupCreatedActivity(GraphQLObject):
    value_celebratable = None
    value_createdAt = None
    value_id = None
    value_reactions:'list[ActivityReactionType]' = None
    def celebratable(self,_param_name:str = 'celebratable'):
        inst = None
        self._add_to_query("celebratable",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def reactions(self,_param_name:str = 'reactions') -> 'ActivityReactionType':
        param_list = []
        inst = ActivityReactionType(self,param_list)
        self._add_to_query("reactions",_param_name,inst)
        self.value_reactions = inst
        return inst


class UserGroupMemberJoinedActivity(GraphQLObject):
    value_celebratable = None
    value_createdAt = None
    value_id = None
    value_member:'User' = None
    value_reactions:'list[ActivityReactionType]' = None
    def celebratable(self,_param_name:str = 'celebratable'):
        inst = None
        self._add_to_query("celebratable",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def member(self,_param_name:str = 'member') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("member",_param_name,inst)
        self.value_member = inst
        return inst

    def reactions(self,_param_name:str = 'reactions') -> 'ActivityReactionType':
        param_list = []
        inst = ActivityReactionType(self,param_list)
        self._add_to_query("reactions",_param_name,inst)
        self.value_reactions = inst
        return inst


class UserGroupRankedActivity(GraphQLObject):
    value_celebratable = None
    value_createdAt = None
    value_id = None
    value_probabilisticBundleReward:'ProbabilisticBundleReward' = None
    value_rank = None
    value_reactions:'list[ActivityReactionType]' = None
    value_topContributor:'User' = None
    value_topScorer:'User' = None
    value_topScorerPoints = None
    def celebratable(self,_param_name:str = 'celebratable'):
        inst = None
        self._add_to_query("celebratable",_param_name)
        pass

    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def probabilisticBundleReward(self,_param_name:str = 'probabilisticBundleReward') -> 'ProbabilisticBundleReward':
        param_list = []
        inst = ProbabilisticBundleReward(self,param_list)
        self._add_to_query("probabilisticBundleReward",_param_name,inst)
        self.value_probabilisticBundleReward = inst
        return inst

    def rank(self,_param_name:str = 'rank'):
        inst = None
        self._add_to_query("rank",_param_name)
        pass

    def reactions(self,_param_name:str = 'reactions') -> 'ActivityReactionType':
        param_list = []
        inst = ActivityReactionType(self,param_list)
        self._add_to_query("reactions",_param_name,inst)
        self.value_reactions = inst
        return inst

    def topContributor(self,_param_name:str = 'topContributor') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("topContributor",_param_name,inst)
        self.value_topContributor = inst
        return inst

    def topScorer(self,_param_name:str = 'topScorer') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("topScorer",_param_name,inst)
        self.value_topScorer = inst
        return inst

    def topScorerPoints(self,_param_name:str = 'topScorerPoints'):
        inst = None
        self._add_to_query("topScorerPoints",_param_name)
        pass


class UserInterface(GraphQLObject):
    value_id = None
    value_slug = None
    value_nickname = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def nickname(self,_param_name:str = 'nickname'):
        inst = None
        self._add_to_query("nickname",_param_name)
        pass


class UserOffersInterface(GraphQLObject):
    value_blockedUntil = None
    value_blockedUsers:'UserConnection' = None
    value_endedTokenOffersReceived:'TokenOfferConnection' = None
    value_endedTokenOffersSent:'TokenOfferConnection' = None
    value_pendingTokenOffersReceived:'TokenOfferConnection' = None
    value_pendingTokenOffersSent:'TokenOfferConnection' = None
    value_tokenOffers:'TokenOfferConnection' = None
    def blockedUntil(self,_param_name:str = 'blockedUntil'):
        inst = None
        self._add_to_query("blockedUntil",_param_name)
        pass

    def blockedUsers(self,after,before,first,last,_param_name:str = 'blockedUsers') -> 'UserConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserConnection(self,param_list)
        self._add_to_query("blockedUsers",_param_name,inst)
        self.value_blockedUsers = inst
        return inst

    def endedTokenOffersReceived(self,after,before,first,last,sortType,sport,states,_param_name:str = 'endedTokenOffersReceived') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        param_list.append(("states",states))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("endedTokenOffersReceived",_param_name,inst)
        self.value_endedTokenOffersReceived = inst
        return inst

    def endedTokenOffersSent(self,after,before,first,last,sortType,sport,states,_param_name:str = 'endedTokenOffersSent') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        param_list.append(("states",states))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("endedTokenOffersSent",_param_name,inst)
        self.value_endedTokenOffersSent = inst
        return inst

    def pendingTokenOffersReceived(self,after,before,first,last,sortType,sport,_param_name:str = 'pendingTokenOffersReceived') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("pendingTokenOffersReceived",_param_name,inst)
        self.value_pendingTokenOffersReceived = inst
        return inst

    def pendingTokenOffersSent(self,after,before,first,last,sortType,sport,_param_name:str = 'pendingTokenOffersSent') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("pendingTokenOffersSent",_param_name,inst)
        self.value_pendingTokenOffersSent = inst
        return inst

    def tokenOffers(self,after,before,direction,first,last,sortType,sport,states,_param_name:str = 'tokenOffers') -> 'TokenOfferConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("direction",direction))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("sport",sport))
        param_list.append(("states",states))
        inst = TokenOfferConnection(self,param_list)
        self._add_to_query("tokenOffers",_param_name,inst)
        self.value_tokenOffers = inst
        return inst


class UserRelationNotification(GraphQLObject):
    value_createdAt = None
    value_id = None
    value_name = None
    value_read = None
    value_sport = None
    value_user:'CurrentUser' = None
    value_userRelation:'UserRelation' = None
    def createdAt(self,_param_name:str = 'createdAt'):
        inst = None
        self._add_to_query("createdAt",_param_name)
        pass

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def read(self,_param_name:str = 'read'):
        inst = None
        self._add_to_query("read",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass

    def user(self,_param_name:str = 'user') -> 'CurrentUser':
        param_list = []
        inst = CurrentUser(self,param_list)
        self._add_to_query("user",_param_name,inst)
        self.value_user = inst
        return inst

    def userRelation(self,_param_name:str = 'userRelation') -> 'UserRelation':
        param_list = []
        inst = UserRelation(self,param_list)
        self._add_to_query("userRelation",_param_name,inst)
        self.value_userRelation = inst
        return inst


class UserSocialInterface(GraphQLObject):
    value_followed:'EmailSubscription' = None
    value_followers:'UserWithSubscriptionSlugConnection' = None
    value_followersCount = None
    value_following:'UserWithSubscriptionSlugConnection' = None
    value_followingCount = None
    value_recommendedManagers:'UserConnection' = None
    def followed(self,_param_name:str = 'followed') -> 'EmailSubscription':
        param_list = []
        inst = EmailSubscription(self,param_list)
        self._add_to_query("followed",_param_name,inst)
        self.value_followed = inst
        return inst

    def followers(self,after,before,first,last,_param_name:str = 'followers') -> 'UserWithSubscriptionSlugConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserWithSubscriptionSlugConnection(self,param_list)
        self._add_to_query("followers",_param_name,inst)
        self.value_followers = inst
        return inst

    def followersCount(self,_param_name:str = 'followersCount'):
        inst = None
        self._add_to_query("followersCount",_param_name)
        pass

    def following(self,after,before,first,last,_param_name:str = 'following') -> 'UserWithSubscriptionSlugConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        inst = UserWithSubscriptionSlugConnection(self,param_list)
        self._add_to_query("following",_param_name,inst)
        self.value_following = inst
        return inst

    def followingCount(self,_param_name:str = 'followingCount'):
        inst = None
        self._add_to_query("followingCount",_param_name)
        pass

    def recommendedManagers(self,after,before,first,last,sport,_param_name:str = 'recommendedManagers') -> 'UserConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sport",sport))
        inst = UserConnection(self,param_list)
        self._add_to_query("recommendedManagers",_param_name,inst)
        self.value_recommendedManagers = inst
        return inst


class UserSportProfileInterface(GraphQLObject):
    value_achievementBadges:'list[SkinShopItem]' = None
    value_background:'SkinShopItem' = None
    value_bannerColor = None
    value_bannerUrl = None
    value_cardsCount:'CardCount' = None
    value_clubBadge:'SkinShopItem' = None
    value_clubName = None
    value_deck:'Deck' = None
    value_decks:'DeckConnection' = None
    value_gallerySocialPictureUrls:'SocialPictureDerivative' = None
    value_highlightedDeck:'Deck' = None
    value_id = None
    value_managerProfileSocialPictureUrls:'SocialPictureDerivative' = None
    value_onboarded = None
    value_onboardingStatus = None
    value_selectedUserSportStatistics:'list[UserSportStatistic]' = None
    value_shieldUrl = None
    value_socialPictureFingerprint = None
    value_userSportStatistics:'list[UserSportStatistic]' = None
    value_variant = None
    def achievementBadges(self,_param_name:str = 'achievementBadges') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("achievementBadges",_param_name,inst)
        self.value_achievementBadges = inst
        return inst

    def background(self,_param_name:str = 'background') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("background",_param_name,inst)
        self.value_background = inst
        return inst

    def bannerColor(self,_param_name:str = 'bannerColor'):
        inst = None
        self._add_to_query("bannerColor",_param_name)
        pass

    def bannerUrl(self,_param_name:str = 'bannerUrl'):
        inst = None
        self._add_to_query("bannerUrl",_param_name)
        pass

    def cardsCount(self,_param_name:str = 'cardsCount') -> 'CardCount':
        param_list = []
        inst = CardCount(self,param_list)
        self._add_to_query("cardsCount",_param_name,inst)
        self.value_cardsCount = inst
        return inst

    def clubBadge(self,_param_name:str = 'clubBadge') -> 'SkinShopItem':
        param_list = []
        inst = SkinShopItem(self,param_list)
        self._add_to_query("clubBadge",_param_name,inst)
        self.value_clubBadge = inst
        return inst

    def clubName(self,_param_name:str = 'clubName'):
        inst = None
        self._add_to_query("clubName",_param_name)
        pass

    def deck(self,name,slug,_param_name:str = 'deck') -> 'Deck':
        param_list = []
        param_list.append(("name",name))
        param_list.append(("slug",slug))
        inst = Deck(self,param_list)
        self._add_to_query("deck",_param_name,inst)
        self.value_deck = inst
        return inst

    def decks(self,after,before,first,last,query,_param_name:str = 'decks') -> 'DeckConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("query",query))
        inst = DeckConnection(self,param_list)
        self._add_to_query("decks",_param_name,inst)
        self.value_decks = inst
        return inst

    def gallerySocialPictureUrls(self,_param_name:str = 'gallerySocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("gallerySocialPictureUrls",_param_name,inst)
        self.value_gallerySocialPictureUrls = inst
        return inst

    def highlightedDeck(self,_param_name:str = 'highlightedDeck') -> 'Deck':
        param_list = []
        inst = Deck(self,param_list)
        self._add_to_query("highlightedDeck",_param_name,inst)
        self.value_highlightedDeck = inst
        return inst

    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def managerProfileSocialPictureUrls(self,_param_name:str = 'managerProfileSocialPictureUrls') -> 'SocialPictureDerivative':
        param_list = []
        inst = SocialPictureDerivative(self,param_list)
        self._add_to_query("managerProfileSocialPictureUrls",_param_name,inst)
        self.value_managerProfileSocialPictureUrls = inst
        return inst

    def onboarded(self,_param_name:str = 'onboarded'):
        inst = None
        self._add_to_query("onboarded",_param_name)
        pass

    def onboardingStatus(self,_param_name:str = 'onboardingStatus'):
        inst = None
        self._add_to_query("onboardingStatus",_param_name)
        pass

    def selectedUserSportStatistics(self,_param_name:str = 'selectedUserSportStatistics') -> 'UserSportStatistic':
        param_list = []
        inst = UserSportStatistic(self,param_list)
        self._add_to_query("selectedUserSportStatistics",_param_name,inst)
        self.value_selectedUserSportStatistics = inst
        return inst

    def shieldUrl(self,_param_name:str = 'shieldUrl'):
        inst = None
        self._add_to_query("shieldUrl",_param_name)
        pass

    def socialPictureFingerprint(self,_param_name:str = 'socialPictureFingerprint'):
        inst = None
        self._add_to_query("socialPictureFingerprint",_param_name)
        pass

    def userSportStatistics(self,_param_name:str = 'userSportStatistics') -> 'UserSportStatistic':
        param_list = []
        inst = UserSportStatistic(self,param_list)
        self._add_to_query("userSportStatistics",_param_name,inst)
        self.value_userSportStatistics = inst
        return inst

    def variant(self,_param_name:str = 'variant'):
        inst = None
        self._add_to_query("variant",_param_name)
        pass


class validateApplePayMerchantSessionInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,merchantValidationUrl = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('merchantValidationUrl',merchantValidationUrl)

class validateFiatWalletInput(GraphQLInputObject):
    def __init__(self,backPagePresignedKey = None,clientMutationId = None,frontPagePresignedKey = None):
        self._add_parameter('backPagePresignedKey',backPagePresignedKey)
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('frontPagePresignedKey',frontPagePresignedKey)

class verifyMobilePurchaseInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,packageName = None,paymentMethod = None,paymentToken = None,productId = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('packageName',packageName)
        self._add_parameter('paymentMethod',paymentMethod)
        self._add_parameter('paymentToken',paymentToken)
        self._add_parameter('productId',productId)

class verifyPhoneNumberInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,discoverable = None,phoneNumber = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('discoverable',discoverable)
        self._add_parameter('phoneNumber',phoneNumber)

class visitCampaignPageInput(GraphQLInputObject):
    def __init__(self,clientMutationId = None,url = None):
        self._add_parameter('clientMutationId',clientMutationId)
        self._add_parameter('url',url)

class WearableDeliverableItem(GraphQLObject):
    value_id = None
    value_mandatoryWearableSizeInput = None
    value_name = None
    value_signed = None
    value_slug = None
    value_sport = None
    def id(self,_param_name:str = 'id'):
        inst = None
        self._add_to_query("id",_param_name)
        pass

    def mandatoryWearableSizeInput(self,_param_name:str = 'mandatoryWearableSizeInput'):
        inst = None
        self._add_to_query("mandatoryWearableSizeInput",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def signed(self,_param_name:str = 'signed'):
        inst = None
        self._add_to_query("signed",_param_name)
        pass

    def slug(self,_param_name:str = 'slug'):
        inst = None
        self._add_to_query("slug",_param_name)
        pass

    def sport(self,_param_name:str = 'sport'):
        inst = None
        self._add_to_query("sport",_param_name)
        pass


class WithFavoriteInterface(GraphQLObject):
    value_mySubscriptions:'EmailSubscriptionConnection' = None
    def mySubscriptions(self,after,before,first,last,sortType,types,_param_name:str = 'mySubscriptions') -> 'EmailSubscriptionConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sortType",sortType))
        param_list.append(("types",types))
        inst = EmailSubscriptionConnection(self,param_list)
        self._add_to_query("mySubscriptions",_param_name,inst)
        self.value_mySubscriptions = inst
        return inst


class WithNotifications(GraphQLObject):
    value_notifications:'NotificationConnection' = None
    value_notificationsDetails:'Notifications' = None
    value_unreadNotificationsCount = None
    def notifications(self,after,before,categories:'NotificationCategoryInput',first,last,sports,_param_name:str = 'notifications') -> 'NotificationConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("before",before))
        param_list.append(("categories",categories))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("sports",sports))
        inst = NotificationConnection(self,param_list)
        self._add_to_query("notifications",_param_name,inst)
        self.value_notifications = inst
        return inst

    def notificationsDetails(self,categories:'NotificationCategoryInput',sports,_param_name:str = 'notificationsDetails') -> 'Notifications':
        param_list = []
        param_list.append(("categories",categories))
        param_list.append(("sports",sports))
        inst = Notifications(self,param_list)
        self._add_to_query("notificationsDetails",_param_name,inst)
        self.value_notificationsDetails = inst
        return inst

    def unreadNotificationsCount(self,categories:'NotificationCategoryInput',sports,_param_name:str = 'unreadNotificationsCount'):
        inst = None
        self._add_to_query("unreadNotificationsCount",_param_name)
        pass


class WithPublicCardsInterface(GraphQLObject):
    value_cards:'CardConnection' = None
    def cards(self,after,age,assetIds,before,customCardEditionName,first,last,owned,ownedSinceAfter,playerSlugs,positions,rarities,revealableFirst,serialNumber,shirtNumber,slugs,sport,teamSlugs,withinDeckFirst,_param_name:str = 'cards') -> 'CardConnection':
        param_list = []
        param_list.append(("after",after))
        param_list.append(("age",age))
        param_list.append(("assetIds",assetIds))
        param_list.append(("before",before))
        param_list.append(("customCardEditionName",customCardEditionName))
        param_list.append(("first",first))
        param_list.append(("last",last))
        param_list.append(("owned",owned))
        param_list.append(("ownedSinceAfter",ownedSinceAfter))
        param_list.append(("playerSlugs",playerSlugs))
        param_list.append(("positions",positions))
        param_list.append(("rarities",rarities))
        param_list.append(("revealableFirst",revealableFirst))
        param_list.append(("serialNumber",serialNumber))
        param_list.append(("shirtNumber",shirtNumber))
        param_list.append(("slugs",slugs))
        param_list.append(("sport",sport))
        param_list.append(("teamSlugs",teamSlugs))
        param_list.append(("withinDeckFirst",withinDeckFirst))
        inst = CardConnection(self,param_list)
        self._add_to_query("cards",_param_name,inst)
        self.value_cards = inst
        return inst


class WithReferralsInterface(GraphQLObject):
    value_referee = None
    value_refereeReward:'ReferralReward' = None
    value_refereeRewards:'list[ReferralReward]' = None
    value_referralAsReferee:'Referral' = None
    value_referralMilestoneRewards:'list[ReferralMilestoneReward]' = None
    value_referralRewardsCount = None
    value_referralUrl = None
    value_referrals:'ReferralPaginated' = None
    value_referrer:'User' = None
    value_unclaimedReferralRewardsCount = None
    def referee(self,_param_name:str = 'referee'):
        inst = None
        self._add_to_query("referee",_param_name)
        pass

    def refereeReward(self,_param_name:str = 'refereeReward') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("refereeReward",_param_name,inst)
        self.value_refereeReward = inst
        return inst

    def refereeRewards(self,_param_name:str = 'refereeRewards') -> 'ReferralReward':
        param_list = []
        inst = ReferralReward(self,param_list)
        self._add_to_query("refereeRewards",_param_name,inst)
        self.value_refereeRewards = inst
        return inst

    def referralAsReferee(self,_param_name:str = 'referralAsReferee') -> 'Referral':
        param_list = []
        inst = Referral(self,param_list)
        self._add_to_query("referralAsReferee",_param_name,inst)
        self.value_referralAsReferee = inst
        return inst

    def referralMilestoneRewards(self,sport,_param_name:str = 'referralMilestoneRewards') -> 'ReferralMilestoneReward':
        param_list = []
        param_list.append(("sport",sport))
        inst = ReferralMilestoneReward(self,param_list)
        self._add_to_query("referralMilestoneRewards",_param_name,inst)
        self.value_referralMilestoneRewards = inst
        return inst

    def referralRewardsCount(self,_param_name:str = 'referralRewardsCount'):
        inst = None
        self._add_to_query("referralRewardsCount",_param_name)
        pass

    def referralUrl(self,_param_name:str = 'referralUrl'):
        inst = None
        self._add_to_query("referralUrl",_param_name)
        pass

    def referrals(self,page,pageSize,sport,state,_param_name:str = 'referrals') -> 'ReferralPaginated':
        param_list = []
        param_list.append(("page",page))
        param_list.append(("pageSize",pageSize))
        param_list.append(("sport",sport))
        param_list.append(("state",state))
        inst = ReferralPaginated(self,param_list)
        self._add_to_query("referrals",_param_name,inst)
        self.value_referrals = inst
        return inst

    def referrer(self,_param_name:str = 'referrer') -> 'User':
        param_list = []
        inst = User(self,param_list)
        self._add_to_query("referrer",_param_name,inst)
        self.value_referrer = inst
        return inst

    def unclaimedReferralRewardsCount(self,_param_name:str = 'unclaimedReferralRewardsCount'):
        inst = None
        self._add_to_query("unclaimedReferralRewardsCount",_param_name)
        pass


class XPBoosterShopItemInterface(GraphQLObject):
    value_endLevel = None
    value_rarity = None
    value_startLevel = None
    def endLevel(self,_param_name:str = 'endLevel'):
        inst = None
        self._add_to_query("endLevel",_param_name)
        pass

    def rarity(self,_param_name:str = 'rarity'):
        inst = None
        self._add_to_query("rarity",_param_name)
        pass

    def startLevel(self,_param_name:str = 'startLevel'):
        inst = None
        self._add_to_query("startLevel",_param_name)
        pass


class __InputValue(GraphQLObject):
    value_name = None
    value_description = None
    value_type:'__Type' = None
    value_defaultValue = None
    value_isDeprecated = None
    value_deprecationReason = None
    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def type(self,_param_name:str = 'type') -> '__Type':
        param_list = []
        inst = __Type(self,param_list)
        self._add_to_query("type",_param_name,inst)
        self.value_type = inst
        return inst

    def defaultValue(self,_param_name:str = 'defaultValue'):
        inst = None
        self._add_to_query("defaultValue",_param_name)
        pass

    def isDeprecated(self,_param_name:str = 'isDeprecated'):
        inst = None
        self._add_to_query("isDeprecated",_param_name)
        pass

    def deprecationReason(self,_param_name:str = 'deprecationReason'):
        inst = None
        self._add_to_query("deprecationReason",_param_name)
        pass


class __Field(GraphQLObject):
    value_name = None
    value_description = None
    value_args:'list[__InputValue]' = None
    value_type:'__Type' = None
    value_isDeprecated = None
    value_deprecationReason = None
    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def args(self,includeDeprecated,_param_name:str = 'args') -> '__InputValue':
        param_list = []
        param_list.append(("includeDeprecated",includeDeprecated))
        inst = __InputValue(self,param_list)
        self._add_to_query("args",_param_name,inst)
        self.value_args = inst
        return inst

    def type(self,_param_name:str = 'type') -> '__Type':
        param_list = []
        inst = __Type(self,param_list)
        self._add_to_query("type",_param_name,inst)
        self.value_type = inst
        return inst

    def isDeprecated(self,_param_name:str = 'isDeprecated'):
        inst = None
        self._add_to_query("isDeprecated",_param_name)
        pass

    def deprecationReason(self,_param_name:str = 'deprecationReason'):
        inst = None
        self._add_to_query("deprecationReason",_param_name)
        pass


class __EnumValue(GraphQLObject):
    value_name = None
    value_description = None
    value_isDeprecated = None
    value_deprecationReason = None
    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def isDeprecated(self,_param_name:str = 'isDeprecated'):
        inst = None
        self._add_to_query("isDeprecated",_param_name)
        pass

    def deprecationReason(self,_param_name:str = 'deprecationReason'):
        inst = None
        self._add_to_query("deprecationReason",_param_name)
        pass


class __Type(GraphQLObject):
    value_kind = None
    value_name = None
    value_description = None
    value_specifiedByURL = None
    value_fields:'list[__Field]' = None
    value_interfaces:'list[__Type]' = None
    value_possibleTypes:'list[__Type]' = None
    value_enumValues:'list[__EnumValue]' = None
    value_inputFields:'list[__InputValue]' = None
    value_ofType:'__Type' = None
    def kind(self,_param_name:str = 'kind'):
        inst = None
        self._add_to_query("kind",_param_name)
        pass

    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def specifiedByURL(self,_param_name:str = 'specifiedByURL'):
        inst = None
        self._add_to_query("specifiedByURL",_param_name)
        pass

    def fields(self,includeDeprecated,_param_name:str = 'fields') -> '__Field':
        param_list = []
        param_list.append(("includeDeprecated",includeDeprecated))
        inst = __Field(self,param_list)
        self._add_to_query("fields",_param_name,inst)
        self.value_fields = inst
        return inst

    def interfaces(self,_param_name:str = 'interfaces') -> '__Type':
        param_list = []
        inst = __Type(self,param_list)
        self._add_to_query("interfaces",_param_name,inst)
        self.value_interfaces = inst
        return inst

    def possibleTypes(self,_param_name:str = 'possibleTypes') -> '__Type':
        param_list = []
        inst = __Type(self,param_list)
        self._add_to_query("possibleTypes",_param_name,inst)
        self.value_possibleTypes = inst
        return inst

    def enumValues(self,includeDeprecated,_param_name:str = 'enumValues') -> '__EnumValue':
        param_list = []
        param_list.append(("includeDeprecated",includeDeprecated))
        inst = __EnumValue(self,param_list)
        self._add_to_query("enumValues",_param_name,inst)
        self.value_enumValues = inst
        return inst

    def inputFields(self,includeDeprecated,_param_name:str = 'inputFields') -> '__InputValue':
        param_list = []
        param_list.append(("includeDeprecated",includeDeprecated))
        inst = __InputValue(self,param_list)
        self._add_to_query("inputFields",_param_name,inst)
        self.value_inputFields = inst
        return inst

    def ofType(self,_param_name:str = 'ofType') -> '__Type':
        param_list = []
        inst = __Type(self,param_list)
        self._add_to_query("ofType",_param_name,inst)
        self.value_ofType = inst
        return inst


class __Directive(GraphQLObject):
    value_name = None
    value_description = None
    value_isRepeatable = None
    value_locations = None
    value_args:'list[__InputValue]' = None
    def name(self,_param_name:str = 'name'):
        inst = None
        self._add_to_query("name",_param_name)
        pass

    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def isRepeatable(self,_param_name:str = 'isRepeatable'):
        inst = None
        self._add_to_query("isRepeatable",_param_name)
        pass

    def locations(self,_param_name:str = 'locations'):
        inst = None
        self._add_to_query("locations",_param_name)
        pass

    def args(self,includeDeprecated,_param_name:str = 'args') -> '__InputValue':
        param_list = []
        param_list.append(("includeDeprecated",includeDeprecated))
        inst = __InputValue(self,param_list)
        self._add_to_query("args",_param_name,inst)
        self.value_args = inst
        return inst


class __Schema(GraphQLObject):
    value_description = None
    value_types:'list[__Type]' = None
    value_queryType:'__Type' = None
    value_mutationType:'__Type' = None
    value_subscriptionType:'__Type' = None
    value_directives:'list[__Directive]' = None
    def description(self,_param_name:str = 'description'):
        inst = None
        self._add_to_query("description",_param_name)
        pass

    def types(self,_param_name:str = 'types') -> '__Type':
        param_list = []
        inst = __Type(self,param_list)
        self._add_to_query("types",_param_name,inst)
        self.value_types = inst
        return inst

    def queryType(self,_param_name:str = 'queryType') -> '__Type':
        param_list = []
        inst = __Type(self,param_list)
        self._add_to_query("queryType",_param_name,inst)
        self.value_queryType = inst
        return inst

    def mutationType(self,_param_name:str = 'mutationType') -> '__Type':
        param_list = []
        inst = __Type(self,param_list)
        self._add_to_query("mutationType",_param_name,inst)
        self.value_mutationType = inst
        return inst

    def subscriptionType(self,_param_name:str = 'subscriptionType') -> '__Type':
        param_list = []
        inst = __Type(self,param_list)
        self._add_to_query("subscriptionType",_param_name,inst)
        self.value_subscriptionType = inst
        return inst

    def directives(self,_param_name:str = 'directives') -> '__Directive':
        param_list = []
        inst = __Directive(self,param_list)
        self._add_to_query("directives",_param_name,inst)
        self.value_directives = inst
        return inst

